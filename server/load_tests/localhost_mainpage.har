{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2020-11-22T09:40:16.656Z",
        "id": "page_5",
        "title": "http://localhost:8000/",
        "pageTimings": {
          "onContentLoad": 74.20100000035745,
          "onLoad": 91.45800000032978
        }
      }
    ],
    "entries": [
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "22145",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=0"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-User",
              "value": "?1"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"; grafana_session=864898f71c8f620156ca76259f147953"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "grafana_session",
              "value": "864898f71c8f620156ca76259f147953",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 859,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Type",
              "value": "text/html"
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:16 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "2742"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2742,
            "mimeType": "text/html",
            "compression": 0,
            "text": "\n<!DOCTYPE html>\n<html>\n  \n<head>\n\n<!-- Inserted by Reload -->\n<script src=\"/reload/reload.js\"></script>\n<!-- End Reload -->\n\n\n    <meta charset=\"UTF-8\">\n    <link rel=\"stylesheet\"href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"assets/favicon/favicon-32x32.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"assets/favicon/favicon-96x96.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"assets/favicon/favicon-16x16.png\">\n    <script type=\"text/javascript\" src=\"/elm.js\"></script>\n    <style>\n      .preview:hover{\n        text-decoration: none;\n        opacity: 0.7\n      }\n      .previewAvatar{\n        object-fit: cover;\n      }\n      .image{\n        box-shadow: inset 0 7px 9px -7px rgba(0,0,0,0.7);\n        box-shadow: inset 0 -7px 9px -7px rgba(0,0,0,0.7);\n      }\n      .social:hover{\n        opacity: 0.7;\n        transform: translateY(-5px);\n      }\n      .avatar{\n        object-fit: cover;\n      }\n      .avatar:hover{\n        cursor: pointer;\n        opacity: 0.7;\n      }\n      .body{\n        min-height: 1000px;\n        padding-top: 100px;\n        text-align: center;\n        color: black;\n      }\n      .carousel{\n        position: relative;\n        top: 30%;\n      }\n      .footer {\n        border-top: 1px solid lightgrey\n      }\n      .nav{\n        display:inline-block;\n        font-size:15px;\n        cursor: pointer;\n        padding:5px 5px;\n        text-decoration:none;\n      }\n      .dot {\n        height: 15px;\n        width: 15px;\n        border: 0.5px solid lightgrey;\n        border-color: #bbb;\n        border-radius: 50%;\n        display: inline-block;\n      }\n    </style>\n  </head>\n  <body>\n      <script>\n        //the following part is focused on local storage manipulation through ports\n        var key = \"user\"\n        var flags = localStorage.getItem(key)\n        var app = Elm.Main.init({flags : flags});\n\n        app.ports.storeToken.subscribe(function(value){\n          if(value === null){\n            localStorage.removeItem(key)\n            sessionStorage.removeItem(\"queryState\")\n          }\n          else{\n            localStorage.setItem(key, value)\n          }\n        })\n\n        //trying saving query state using session storage...\n        app.ports.saveState.subscribe(value => {\n          if(value.query.length === 0){\n            sessionStorage.removeItem(\"queryState\")\n          }\n          else{\n            sessionStorage.setItem(\"queryState\", JSON.stringify(value))\n          }\n        })\n\n        app.ports.request.subscribe(() => {\n          app.ports.restoreState.send(JSON.parse(sessionStorage.getItem(\"queryState\")))   \n        })\n      </script>\n  </body>\n</html>\n\n"
          },
          "redirectURL": "",
          "headersSize": 127,
          "bodySize": 2742,
          "_transferSize": 2869,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:16.655Z",
        "time": 2.4670000002515735,
        "timings": {
          "blocked": 1.3679999998249404,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.04999999999999999,
          "wait": 0.4410000001426961,
          "receive": 0.608000000283937,
          "_blocked_queueing": 1.1049999998249405
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/",
          "lineNumber": 7
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "22145",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/reload/reload.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"; grafana_session=864898f71c8f620156ca76259f147953"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "grafana_session",
              "value": "864898f71c8f620156ca76259f147953",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 697,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Type",
              "value": "text/javascript"
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:16 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "13985"
            }
          ],
          "cookies": [],
          "content": {
            "size": 13985,
            "mimeType": "text/javascript",
            "compression": 0,
            "text": "\n// The following 20 lines are from https://github.com/klazuka/elm-hot/blob/master/test/client.js#L40\nvar myDisposeCallback = null\n\n// simulate the HMR api exposed by webpack\nvar module = {\n  hot: {\n    accept: function () {},\n\n    dispose: function (callback) {\n      myDisposeCallback = callback\n    },\n\n    data: null,\n\n    apply: function () {\n      var newData = {}\n      myDisposeCallback(newData)\n      module.hot.data = newData\n    }\n\n  }\n};\n\n(function refresh () {\n  const verboseLogging = false // This is dynamically update before it is sent to the browser\n  const reload = true // This is dynamically update by before it is sent to the browser\n\n  const socketUrl = window.location.origin.replace(/(^http(s?):\\/\\/)(.*)/, 'ws$2://$3')\n\n  if (verboseLogging) {\n    console.log('Reload Script Loaded')\n  }\n\n  if (!('WebSocket' in window)) {\n    throw new Error('Reload only works with browsers that support WebSockets')\n  }\n\n  /*\n  |-------------------------------------------------------------------------------\n  | Helpers\n  |-------------------------------------------------------------------------------\n  */\n\n  const pipe = (...fns) => x => fns.reduce((y, f) => f(y), x)\n\n  function colorConverter (color) {\n    return {\n      black: '#000000',\n      red: '#F77F00',\n      green: '#33ff00',\n      yellow: '#ffff00',\n      blue: '#99B1BC',\n      magenta: '#cc00ff',\n      cyan: '#00ffff',\n      white: '#d0d0d0',\n      BLACK: '#808080',\n      RED: '#ff0000',\n      GREEN: '#33ff00',\n      YELLOW: '#ffff00',\n      BLUE: '#0066ff',\n      MAGENTA: '#cc00ff',\n      CYAN: '#00ffff',\n      WHITE: '#ffffff',\n    }[color]\n  }\n\n\n  const addNewLine = str => str + '\\n'\n  const styleColor = (str = 'WHITE') => `color: ${colorConverter(str)};`\n  const styleUnderline = `text-decoration: underline;`\n  const styleBold = `text-decoration: bold;`\n  const parseStyle = ({ underline, color, bold }) => `${underline ? styleUnderline : ''}${color ? styleColor(color) : ''}${bold ? styleBold : ''}`\n\n  function capitalizeFirstLetter (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  function consoleSanitize (str) {\n    return str.replace(/<(http[^>]*)>/, '$1')\n  }\n\n  function htmlSanitize(str, type) {\n    var temp = document.createElement('div')\n    temp.textContent = str\n    return temp.innerHTML.replace(/&lt;(http[^>]*)&gt;/, \"&lt;<a style='color: inherit' target='_blank' href='$1'>$1</a>&gt;\")\n  }\n\n  const parseHeader = (title, path) => `-- ${title.replace('-', ' ')} --------------- ${path}`\n\n  /*\n  |-------------------------------------------------------------------------------\n  | Console Logging\n  |-------------------------------------------------------------------------------\n  */\n\n  const wrapConsole = str => `%c${str}`\n  const consoleHeader = pipe(parseHeader, wrapConsole, addNewLine, addNewLine)\n\n  const parseMsg = pipe(consoleSanitize, wrapConsole)\n  const consoleMsg = ({ error, style }, msg) => ({\n    error: error.concat(parseMsg(typeof msg === 'string' ? msg : msg.string)),\n    style: style.concat(parseStyle(typeof msg === 'string' ? { color: 'black' } : msg))\n  })\n\n  const joinMessage = ({ error, style }) => [error.join('')].concat(style)\n\n  const parseConsoleErrors = path =>\n    ({ title, message }) =>\n      joinMessage(message\n        .reduce(consoleMsg, {\n          error: [consoleHeader(title, path)],\n          style: [styleColor('blue')]\n        }))\n\n  const restoreColorConsole = ({ errors }) =>\n    errors.reduce((acc, { problems, path }) =>\n      acc.concat(problems.map(parseConsoleErrors(path))), [])\n\n  /*\n  |-------------------------------------------------------------------------------\n  | Html Logging\n  |-------------------------------------------------------------------------------\n  */\n\n  const htmlHeader = (title, path) => `<span style=\"${parseStyle({ color: 'blue' })}\">${parseHeader(title, path)}</span>\\n\\n`\n\n  const htmlMsg = (acc, msg) => `${acc}<span style=\"${parseStyle(typeof msg === 'string' ? { color: 'WHITE' } : msg)}\">${htmlSanitize(typeof msg === 'string' ? msg : msg.string)}</span>`\n\n  const parseHtmlErrors = (path) =>\n  ({ title, message }) =>\n    message.reduce(htmlMsg, htmlHeader(title, path))\n\n  const restoreColorHtml = ({ errors }) =>\n  errors.reduce((acc, { problems, path }) =>\n    acc.concat(problems.map(parseHtmlErrors(path))), [])\n\n  /*\n  |-------------------------------------------------------------------------------\n  | TODO: Refactor Below\n  |-------------------------------------------------------------------------------\n  */\n\n  var speed = 400\n  var delay = 20\n\n  function showError (error) {\n    restoreColorConsole(error).forEach((error) => {\n      console.log.apply(this, error)\n    })\n    hideCompiling('fast')\n    setTimeout(function () {\n      showError_(restoreColorHtml(error))\n    }, delay)\n  }\n\n  function showError_ (error) {\n    var nodeContainer = document.getElementById('elm-live:elmErrorContainer')\n\n    if (!nodeContainer) {\n      nodeContainer = document.createElement('div')\n      nodeContainer.id = 'elm-live:elmErrorContainer'\n      document.body.appendChild(nodeContainer)\n    }\n\n    nodeContainer.innerHTML = `\n<div\n  id=\"elm-live:elmErrorBackground\"\n  style=\"\n    z-index: 100;\n    perspective: 500px;\n    transition: opacity 400ms;\n    position: fixed;\n    top: 0;\n    left: 0;\n    background-color: rgba(13,31,45,0.2);\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content:center;\n    align-items: center;\n  \"\n>\n  <div\n    onclick=\"elmLive.hideError()\"\n    style=\"\n      background-color: rgba(0,0,0,0);\n      position: fixed;\n      top:0;\n      left:0;\n      bottom:0;\n      right:0\n    \"\n  ></div>\n  <pre\n    id=\"elm-live:elmError\"\n    style=\"\n      transform: rotateX(0deg);\n      transition: transform 400ms;\n      transform-style: preserve-3d;\n      font-size: 16px;\n      overflow: scroll;\n      background-color: rgba(13, 31, 45, 0.9);\n      color: #ddd;\n      width: calc(100% - 150px);\n      height: calc(100% - 150px);\n      margin: 0;\n      padding: 30px;\n      font-family: 'Fira Mono', Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;\n    \"\n  >${error}</pre>\n</div>\n`\n\n    setTimeout(function () {\n      document.getElementById('elm-live:elmErrorBackground').style.opacity = 1\n      document.getElementById('elm-live:elmError').style.transform = 'rotateX(0deg)'\n    }, delay)\n  }\n\n  function hideError (velocity) {\n    var node = document.getElementById('elm-live:elmErrorContainer')\n    if (node) {\n      if (velocity === 'fast') {\n        document.getElementById('elm-live:elmErrorContainer').remove()\n      } else {\n        document.getElementById('elm-live:elmErrorBackground').style.opacity = 0\n        document.getElementById('elm-live:elmError').style.transform = 'rotateX(90deg)'\n        setTimeout(function () {\n          document.getElementById('elm-live:elmErrorContainer').remove()\n        }, speed)\n      }\n    }\n  }\n\n  function showCompiling (message) {\n    hideError('fast')\n    setTimeout(function () {\n      showCompiling_(message)\n    }, delay)\n  }\n\n  function showCompiling_ (message) {\n    var nodeContainer = document.getElementById('elm-live:elmCompilingContainer')\n\n    if (!nodeContainer) {\n      nodeContainer = document.createElement('div')\n      nodeContainer.id = 'elm-live:elmCompilingContainer'\n      document.body.appendChild(nodeContainer)\n    }\n\n    nodeContainer.innerHTML = `\n    <style>\n    #loading {\n      display: inline-block;\n      width: 70px;\n      height: 105px;\n      animation: spin 1s ease-out infinite;\n      transform-origin: center;\n    }\n\n    @keyframes spin {\n      0% { transform: rotate(0deg) }\n      30% { transform: rotate(360deg); }\n      100% { transform: rotate(360deg); }\n    }\n  </style>\n  <div\n    id=\"elm-live:elmCompilingBackground\"\n    style=\"\n      z-index: 100;\n      transition: opacity ${speed}ms;\n      opacity: 0;\n      position: fixed;\n      top: 0;\n      left: 0;\n      background-color: rgba(255,255,255,0.9);\n      width: 100%;\n      height: 100%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    \"\n  >\n    <div\n      onclick=\"elmLive.hideCompiling()\"\n      style=\"\n        background-color: rgba(0,0,0,0);\n        position: fixed;\n        top:0;\n        left:0;\n        bottom:0;\n        right:0;\n      \"\n    ></div>\n    <div id=\"loading\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 313.81 460\">\n        <path fill=\"#f77f00\" d=\"M290.55,192.55a5.29,5.29,0,0,1-.46,4L150.24,457.13a5.27,5.27,0,0,1-2.09,2.17l-.55-1.19V292a5.43,5.43,0,0,0-6.83-5.26L88.85,300.68l-29.8,8a4.32,4.32,0,0,1-1.68.16l.05-.59L198.74,43.63l1.14-.22a4.42,4.42,0,0,1,.11,1V209.63a5.43,5.43,0,0,0,6.83,5.23l82.27-22Z\"/>\n        <path fill=\"#ffa01c\" d=\"M290.55,192.55l-1.46.27-82.27,22a5.43,5.43,0,0,1-6.83-5.23V167.06l31.73-8.49a5.36,5.36,0,0,1,4.12.54L288,189.24A5.36,5.36,0,0,1,290.55,192.55Z\"/>\n        <path fill=\"#ef6300\" d=\"M199.88,43.41l-1.14.22L57.42,308.25l-.05.59a5.26,5.26,0,0,1-2.44-.7L2.7,278a5.42,5.42,0,0,1-2.06-7.24l138-258.38a5.42,5.42,0,0,1,7.51-2.14l51.14,29.52A5.42,5.42,0,0,1,199.88,43.41Z\"/>\n        <path fill=\"#ef6300\" d=\"M147.6,458.11l.55,1.19a5.45,5.45,0,0,1-5.4,0L91.61,429.75a5.44,5.44,0,0,1-2.71-4.69V300.84l-.05-.16,51.92-13.91A5.43,5.43,0,0,1,147.6,292Z\"/>\n        <path fill=\"#0d1f2d\" d=\"M309.05,180.3l-52.21-30.14a9.39,9.39,0,0,0-7.2-.95L223,156.34V39a9.53,9.53,0,0,0-4.74-8.22L167.15,1.28A9.49,9.49,0,0,0,154,5L16,263.4a9.46,9.46,0,0,0,3.63,12.69l52.22,30.15a9.37,9.37,0,0,0,7.19.95l24.74-6.63V419.62a9.52,9.52,0,0,0,4.75,8.22l51.15,29.53a9.48,9.48,0,0,0,13.1-3.73L312.67,193A9.44,9.44,0,0,0,309.05,180.3Zm-57.3-23.23a1.37,1.37,0,0,1,1,.13L301,185.06l-76.29,20.45a1.34,1.34,0,0,1-1.18-.24,1.31,1.31,0,0,1-.53-1.07V164.76Zm-228,112a1.35,1.35,0,0,1-.52-1.82l138-258.37a1.35,1.35,0,0,1,1.87-.54l50.44,29.13L74.25,298.21ZM112.62,420.8a1.36,1.36,0,0,1-.68-1.18V298.38l48.87-13.09a1.31,1.31,0,0,1,1.18.23,1.35,1.35,0,0,1,.53,1.08v163Zm58,19.67V286.6a9.49,9.49,0,0,0-12-9.17l-51.92,13.91-22.92,6.14,131-245.34V204.2a9.5,9.5,0,0,0,9.46,9.49,9.55,9.55,0,0,0,2.48-.33l76.7-20.55Z\"/>\n      </svg>\n    </div>\n    <div\n      style=\"\n        text-align: center;\n        color: #0D1F2D;\n        padding: 30px;\n        font-size: 24px;\n        font-weight: bold;\n        font-family: 'Fira Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n      \"\n    >${message}</div>\n  </div>\n`\n    setTimeout(function () {\n      document.getElementById('elm-live:elmCompilingBackground').style.opacity = 1\n    }, delay)\n  }\n\n  function hideCompiling (velocity) {\n    const node = document.getElementById('elm-live:elmCompilingContainer')\n    if (node) {\n      if (velocity === 'fast') {\n        node.remove()\n      } else {\n        document.getElementById('elm-live:elmCompilingBackground').style.opacity = 0\n        setTimeout(function () {\n          node.remove()\n        }, speed)\n      }\n    }\n  }\n\n  // Check to see if the server sent us reload (meaning a manually reload event was fired) and then reloads the page\n  var socketOnMessage = function (msg) {\n    var parsedData\n    try {\n      parsedData = JSON.parse(msg.data)\n    } catch (e) {\n      parsedData = ''\n      if (verboseLogging) {\n        console.log('Error parsing', msg.data)\n      }\n    }\n\n    if (parsedData.action === 'failure') {\n      // Displaying the Elm compiler error in the console\n      // and in the browsers\n      hideCompiling()\n      showError(parsedData.data)\n    } else if (reload && parsedData.action === 'hotReload') {\n      hideCompiling()\n      if (verboseLogging) {\n        console.log('Hot Reload', parsedData.url)\n      }\n      // The following 13 lines are from https://github.com/klazuka/elm-hot/blob/master/test/client.js#L22\n      var myRequest = new Request(parsedData.url)\n      myRequest.cache = 'no-cache'\n      fetch(myRequest).then(function (response) {\n        if (response.ok) {\n          response.text().then(function (value) {\n            module.hot.apply()\n            delete Elm;\n            eval(value)\n          })\n        } else {\n          console.error('HMR fetch failed:', response.status, response.statusText)\n        }\n      })\n    } else if (reload && parsedData.action === 'coldReload') {\n      hideCompiling()\n      window.location.reload()\n    } else if (reload && parsedData.action === 'compiling') {\n      showCompiling(parsedData.message)\n    } else {\n      hideCompiling()\n      hideError()\n    }\n  }\n\n  var socketOnOpen = function (msg) {\n    if (verboseLogging) {\n      console.log('Socket Opened')\n    }\n  }\n\n  // Socket on close event that sets flags and calls the webSocketWaiter function\n  var socketOnClose = function () {\n    if (verboseLogging) {\n      console.log('Socket Closed - Calling webSocketWaiter')\n    }\n\n    // Call the webSocketWaiter function so that we can open a new socket and set the event handlers\n    websocketWaiter()\n  }\n\n  var socketOnError = function (msg) {\n    if (verboseLogging) {\n      console.log(msg)\n    }\n  }\n\n  // Function that opens a new socket and sets the event handlers for the socket\n  function websocketWaiter () {\n    if (verboseLogging) {\n      console.log('Waiting for socket')\n    }\n    setTimeout(function () {\n       const socket = new WebSocket(socketUrl);\n\n      socket.onopen = socketOnOpen\n      socket.onclose = socketOnClose\n      socket.onmessage = socketOnMessage\n      socket.onerror = socketOnError\n    }, 500)\n\n    window.elmLive = {\n      hideError: hideError,\n      hideCompiling: hideCompiling\n    }\n  }\n\n  // Wait until the page loads for the first time and then call the webSocketWaiter function so that we can connect the socket for the first time\n  window.addEventListener('load', function () {\n    if (verboseLogging === true) {\n      console.log('Page Loaded - Calling webSocketWaiter')\n    }\n    websocketWaiter()\n  })\n})()\n"
          },
          "redirectURL": "",
          "headersSize": 134,
          "bodySize": 13985,
          "_transferSize": 14119,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:16.670Z",
        "time": 5.816000000322674,
        "timings": {
          "blocked": 3.381000000095402,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.07699999999999996,
          "wait": 0.7219999998103013,
          "receive": 1.6360000004169706,
          "_blocked_queueing": 2.7540000000954024
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/",
          "lineNumber": 12
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "date",
              "value": "Sun, 22 Nov 2020 09:14:01 GMT"
            },
            {
              "name": "etag",
              "value": "\"1544639647\""
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "content-length",
              "value": "19740"
            },
            {
              "name": "content-type",
              "value": "text/css; charset=utf-8"
            },
            {
              "name": "last-modified",
              "value": "Wed, 12 Dec 2018 18:34:07 GMT"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            }
          ],
          "cookies": [],
          "content": {
            "size": 121200,
            "mimeType": "text/css",
            "text": "/*!\n * Bootstrap v3.3.7 (http://getbootstrap.com)\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{margin:.67em 0;font-size:2em}mark{color:#000;background:#ff0}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{height:0;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{margin:0;font:inherit;color:inherit}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}input{line-height:normal}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{padding:.35em .625em .75em;margin:0 2px;border:1px solid silver}legend{padding:0;border:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-spacing:0;border-collapse:collapse}td,th{padding:0}/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */@media print{*,:after,:before{color:#000!important;text-shadow:none!important;background:0 0!important;-webkit-box-shadow:none!important;box-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:\" (\" attr(href) \")\"}abbr[title]:after{content:\" (\" attr(title) \")\"}a[href^=\"javascript:\"]:after,a[href^=\"#\"]:after{content:\"\"}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}.navbar{display:none}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}.label{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}}@font-face{font-family:'Glyphicons Halflings';src:url(../fonts/glyphicons-halflings-regular.eot);src:url(../fonts/glyphicons-halflings-regular.eot?#iefix) format('embedded-opentype'),url(../fonts/glyphicons-halflings-regular.woff2) format('woff2'),url(../fonts/glyphicons-halflings-regular.woff) format('woff'),url(../fonts/glyphicons-halflings-regular.ttf) format('truetype'),url(../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular) format('svg')}.glyphicon{position:relative;top:1px;display:inline-block;font-family:'Glyphicons Halflings';font-style:normal;font-weight:400;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.glyphicon-asterisk:before{content:\"\\002a\"}.glyphicon-plus:before{content:\"\\002b\"}.glyphicon-eur:before,.glyphicon-euro:before{content:\"\\20ac\"}.glyphicon-minus:before{content:\"\\2212\"}.glyphicon-cloud:before{content:\"\\2601\"}.glyphicon-envelope:before{content:\"\\2709\"}.glyphicon-pencil:before{content:\"\\270f\"}.glyphicon-glass:before{content:\"\\e001\"}.glyphicon-music:before{content:\"\\e002\"}.glyphicon-search:before{content:\"\\e003\"}.glyphicon-heart:before{content:\"\\e005\"}.glyphicon-star:before{content:\"\\e006\"}.glyphicon-star-empty:before{content:\"\\e007\"}.glyphicon-user:before{content:\"\\e008\"}.glyphicon-film:before{content:\"\\e009\"}.glyphicon-th-large:before{content:\"\\e010\"}.glyphicon-th:before{content:\"\\e011\"}.glyphicon-th-list:before{content:\"\\e012\"}.glyphicon-ok:before{content:\"\\e013\"}.glyphicon-remove:before{content:\"\\e014\"}.glyphicon-zoom-in:before{content:\"\\e015\"}.glyphicon-zoom-out:before{content:\"\\e016\"}.glyphicon-off:before{content:\"\\e017\"}.glyphicon-signal:before{content:\"\\e018\"}.glyphicon-cog:before{content:\"\\e019\"}.glyphicon-trash:before{content:\"\\e020\"}.glyphicon-home:before{content:\"\\e021\"}.glyphicon-file:before{content:\"\\e022\"}.glyphicon-time:before{content:\"\\e023\"}.glyphicon-road:before{content:\"\\e024\"}.glyphicon-download-alt:before{content:\"\\e025\"}.glyphicon-download:before{content:\"\\e026\"}.glyphicon-upload:before{content:\"\\e027\"}.glyphicon-inbox:before{content:\"\\e028\"}.glyphicon-play-circle:before{content:\"\\e029\"}.glyphicon-repeat:before{content:\"\\e030\"}.glyphicon-refresh:before{content:\"\\e031\"}.glyphicon-list-alt:before{content:\"\\e032\"}.glyphicon-lock:before{content:\"\\e033\"}.glyphicon-flag:before{content:\"\\e034\"}.glyphicon-headphones:before{content:\"\\e035\"}.glyphicon-volume-off:before{content:\"\\e036\"}.glyphicon-volume-down:before{content:\"\\e037\"}.glyphicon-volume-up:before{content:\"\\e038\"}.glyphicon-qrcode:before{content:\"\\e039\"}.glyphicon-barcode:before{content:\"\\e040\"}.glyphicon-tag:before{content:\"\\e041\"}.glyphicon-tags:before{content:\"\\e042\"}.glyphicon-book:before{content:\"\\e043\"}.glyphicon-bookmark:before{content:\"\\e044\"}.glyphicon-print:before{content:\"\\e045\"}.glyphicon-camera:before{content:\"\\e046\"}.glyphicon-font:before{content:\"\\e047\"}.glyphicon-bold:before{content:\"\\e048\"}.glyphicon-italic:before{content:\"\\e049\"}.glyphicon-text-height:before{content:\"\\e050\"}.glyphicon-text-width:before{content:\"\\e051\"}.glyphicon-align-left:before{content:\"\\e052\"}.glyphicon-align-center:before{content:\"\\e053\"}.glyphicon-align-right:before{content:\"\\e054\"}.glyphicon-align-justify:before{content:\"\\e055\"}.glyphicon-list:before{content:\"\\e056\"}.glyphicon-indent-left:before{content:\"\\e057\"}.glyphicon-indent-right:before{content:\"\\e058\"}.glyphicon-facetime-video:before{content:\"\\e059\"}.glyphicon-picture:before{content:\"\\e060\"}.glyphicon-map-marker:before{content:\"\\e062\"}.glyphicon-adjust:before{content:\"\\e063\"}.glyphicon-tint:before{content:\"\\e064\"}.glyphicon-edit:before{content:\"\\e065\"}.glyphicon-share:before{content:\"\\e066\"}.glyphicon-check:before{content:\"\\e067\"}.glyphicon-move:before{content:\"\\e068\"}.glyphicon-step-backward:before{content:\"\\e069\"}.glyphicon-fast-backward:before{content:\"\\e070\"}.glyphicon-backward:before{content:\"\\e071\"}.glyphicon-play:before{content:\"\\e072\"}.glyphicon-pause:before{content:\"\\e073\"}.glyphicon-stop:before{content:\"\\e074\"}.glyphicon-forward:before{content:\"\\e075\"}.glyphicon-fast-forward:before{content:\"\\e076\"}.glyphicon-step-forward:before{content:\"\\e077\"}.glyphicon-eject:before{content:\"\\e078\"}.glyphicon-chevron-left:before{content:\"\\e079\"}.glyphicon-chevron-right:before{content:\"\\e080\"}.glyphicon-plus-sign:before{content:\"\\e081\"}.glyphicon-minus-sign:before{content:\"\\e082\"}.glyphicon-remove-sign:before{content:\"\\e083\"}.glyphicon-ok-sign:before{content:\"\\e084\"}.glyphicon-question-sign:before{content:\"\\e085\"}.glyphicon-info-sign:before{content:\"\\e086\"}.glyphicon-screenshot:before{content:\"\\e087\"}.glyphicon-remove-circle:before{content:\"\\e088\"}.glyphicon-ok-circle:before{content:\"\\e089\"}.glyphicon-ban-circle:before{content:\"\\e090\"}.glyphicon-arrow-left:before{content:\"\\e091\"}.glyphicon-arrow-right:before{content:\"\\e092\"}.glyphicon-arrow-up:before{content:\"\\e093\"}.glyphicon-arrow-down:before{content:\"\\e094\"}.glyphicon-share-alt:before{content:\"\\e095\"}.glyphicon-resize-full:before{content:\"\\e096\"}.glyphicon-resize-small:before{content:\"\\e097\"}.glyphicon-exclamation-sign:before{content:\"\\e101\"}.glyphicon-gift:before{content:\"\\e102\"}.glyphicon-leaf:before{content:\"\\e103\"}.glyphicon-fire:before{content:\"\\e104\"}.glyphicon-eye-open:before{content:\"\\e105\"}.glyphicon-eye-close:before{content:\"\\e106\"}.glyphicon-warning-sign:before{content:\"\\e107\"}.glyphicon-plane:before{content:\"\\e108\"}.glyphicon-calendar:before{content:\"\\e109\"}.glyphicon-random:before{content:\"\\e110\"}.glyphicon-comment:before{content:\"\\e111\"}.glyphicon-magnet:before{content:\"\\e112\"}.glyphicon-chevron-up:before{content:\"\\e113\"}.glyphicon-chevron-down:before{content:\"\\e114\"}.glyphicon-retweet:before{content:\"\\e115\"}.glyphicon-shopping-cart:before{content:\"\\e116\"}.glyphicon-folder-close:before{content:\"\\e117\"}.glyphicon-folder-open:before{content:\"\\e118\"}.glyphicon-resize-vertical:before{content:\"\\e119\"}.glyphicon-resize-horizontal:before{content:\"\\e120\"}.glyphicon-hdd:before{content:\"\\e121\"}.glyphicon-bullhorn:before{content:\"\\e122\"}.glyphicon-bell:before{content:\"\\e123\"}.glyphicon-certificate:before{content:\"\\e124\"}.glyphicon-thumbs-up:before{content:\"\\e125\"}.glyphicon-thumbs-down:before{content:\"\\e126\"}.glyphicon-hand-right:before{content:\"\\e127\"}.glyphicon-hand-left:before{content:\"\\e128\"}.glyphicon-hand-up:before{content:\"\\e129\"}.glyphicon-hand-down:before{content:\"\\e130\"}.glyphicon-circle-arrow-right:before{content:\"\\e131\"}.glyphicon-circle-arrow-left:before{content:\"\\e132\"}.glyphicon-circle-arrow-up:before{content:\"\\e133\"}.glyphicon-circle-arrow-down:before{content:\"\\e134\"}.glyphicon-globe:before{content:\"\\e135\"}.glyphicon-wrench:before{content:\"\\e136\"}.glyphicon-tasks:before{content:\"\\e137\"}.glyphicon-filter:before{content:\"\\e138\"}.glyphicon-briefcase:before{content:\"\\e139\"}.glyphicon-fullscreen:before{content:\"\\e140\"}.glyphicon-dashboard:before{content:\"\\e141\"}.glyphicon-paperclip:before{content:\"\\e142\"}.glyphicon-heart-empty:before{content:\"\\e143\"}.glyphicon-link:before{content:\"\\e144\"}.glyphicon-phone:before{content:\"\\e145\"}.glyphicon-pushpin:before{content:\"\\e146\"}.glyphicon-usd:before{content:\"\\e148\"}.glyphicon-gbp:before{content:\"\\e149\"}.glyphicon-sort:before{content:\"\\e150\"}.glyphicon-sort-by-alphabet:before{content:\"\\e151\"}.glyphicon-sort-by-alphabet-alt:before{content:\"\\e152\"}.glyphicon-sort-by-order:before{content:\"\\e153\"}.glyphicon-sort-by-order-alt:before{content:\"\\e154\"}.glyphicon-sort-by-attributes:before{content:\"\\e155\"}.glyphicon-sort-by-attributes-alt:before{content:\"\\e156\"}.glyphicon-unchecked:before{content:\"\\e157\"}.glyphicon-expand:before{content:\"\\e158\"}.glyphicon-collapse-down:before{content:\"\\e159\"}.glyphicon-collapse-up:before{content:\"\\e160\"}.glyphicon-log-in:before{content:\"\\e161\"}.glyphicon-flash:before{content:\"\\e162\"}.glyphicon-log-out:before{content:\"\\e163\"}.glyphicon-new-window:before{content:\"\\e164\"}.glyphicon-record:before{content:\"\\e165\"}.glyphicon-save:before{content:\"\\e166\"}.glyphicon-open:before{content:\"\\e167\"}.glyphicon-saved:before{content:\"\\e168\"}.glyphicon-import:before{content:\"\\e169\"}.glyphicon-export:before{content:\"\\e170\"}.glyphicon-send:before{content:\"\\e171\"}.glyphicon-floppy-disk:before{content:\"\\e172\"}.glyphicon-floppy-saved:before{content:\"\\e173\"}.glyphicon-floppy-remove:before{content:\"\\e174\"}.glyphicon-floppy-save:before{content:\"\\e175\"}.glyphicon-floppy-open:before{content:\"\\e176\"}.glyphicon-credit-card:before{content:\"\\e177\"}.glyphicon-transfer:before{content:\"\\e178\"}.glyphicon-cutlery:before{content:\"\\e179\"}.glyphicon-header:before{content:\"\\e180\"}.glyphicon-compressed:before{content:\"\\e181\"}.glyphicon-earphone:before{content:\"\\e182\"}.glyphicon-phone-alt:before{content:\"\\e183\"}.glyphicon-tower:before{content:\"\\e184\"}.glyphicon-stats:before{content:\"\\e185\"}.glyphicon-sd-video:before{content:\"\\e186\"}.glyphicon-hd-video:before{content:\"\\e187\"}.glyphicon-subtitles:before{content:\"\\e188\"}.glyphicon-sound-stereo:before{content:\"\\e189\"}.glyphicon-sound-dolby:before{content:\"\\e190\"}.glyphicon-sound-5-1:before{content:\"\\e191\"}.glyphicon-sound-6-1:before{content:\"\\e192\"}.glyphicon-sound-7-1:before{content:\"\\e193\"}.glyphicon-copyright-mark:before{content:\"\\e194\"}.glyphicon-registration-mark:before{content:\"\\e195\"}.glyphicon-cloud-download:before{content:\"\\e197\"}.glyphicon-cloud-upload:before{content:\"\\e198\"}.glyphicon-tree-conifer:before{content:\"\\e199\"}.glyphicon-tree-deciduous:before{content:\"\\e200\"}.glyphicon-cd:before{content:\"\\e201\"}.glyphicon-save-file:before{content:\"\\e202\"}.glyphicon-open-file:before{content:\"\\e203\"}.glyphicon-level-up:before{content:\"\\e204\"}.glyphicon-copy:before{content:\"\\e205\"}.glyphicon-paste:before{content:\"\\e206\"}.glyphicon-alert:before{content:\"\\e209\"}.glyphicon-equalizer:before{content:\"\\e210\"}.glyphicon-king:before{content:\"\\e211\"}.glyphicon-queen:before{content:\"\\e212\"}.glyphicon-pawn:before{content:\"\\e213\"}.glyphicon-bishop:before{content:\"\\e214\"}.glyphicon-knight:before{content:\"\\e215\"}.glyphicon-baby-formula:before{content:\"\\e216\"}.glyphicon-tent:before{content:\"\\26fa\"}.glyphicon-blackboard:before{content:\"\\e218\"}.glyphicon-bed:before{content:\"\\e219\"}.glyphicon-apple:before{content:\"\\f8ff\"}.glyphicon-erase:before{content:\"\\e221\"}.glyphicon-hourglass:before{content:\"\\231b\"}.glyphicon-lamp:before{content:\"\\e223\"}.glyphicon-duplicate:before{content:\"\\e224\"}.glyphicon-piggy-bank:before{content:\"\\e225\"}.glyphicon-scissors:before{content:\"\\e226\"}.glyphicon-bitcoin:before{content:\"\\e227\"}.glyphicon-btc:before{content:\"\\e227\"}.glyphicon-xbt:before{content:\"\\e227\"}.glyphicon-yen:before{content:\"\\00a5\"}.glyphicon-jpy:before{content:\"\\00a5\"}.glyphicon-ruble:before{content:\"\\20bd\"}.glyphicon-rub:before{content:\"\\20bd\"}.glyphicon-scale:before{content:\"\\e230\"}.glyphicon-ice-lolly:before{content:\"\\e231\"}.glyphicon-ice-lolly-tasted:before{content:\"\\e232\"}.glyphicon-education:before{content:\"\\e233\"}.glyphicon-option-horizontal:before{content:\"\\e234\"}.glyphicon-option-vertical:before{content:\"\\e235\"}.glyphicon-menu-hamburger:before{content:\"\\e236\"}.glyphicon-modal-window:before{content:\"\\e237\"}.glyphicon-oil:before{content:\"\\e238\"}.glyphicon-grain:before{content:\"\\e239\"}.glyphicon-sunglasses:before{content:\"\\e240\"}.glyphicon-text-size:before{content:\"\\e241\"}.glyphicon-text-color:before{content:\"\\e242\"}.glyphicon-text-background:before{content:\"\\e243\"}.glyphicon-object-align-top:before{content:\"\\e244\"}.glyphicon-object-align-bottom:before{content:\"\\e245\"}.glyphicon-object-align-horizontal:before{content:\"\\e246\"}.glyphicon-object-align-left:before{content:\"\\e247\"}.glyphicon-object-align-vertical:before{content:\"\\e248\"}.glyphicon-object-align-right:before{content:\"\\e249\"}.glyphicon-triangle-right:before{content:\"\\e250\"}.glyphicon-triangle-left:before{content:\"\\e251\"}.glyphicon-triangle-bottom:before{content:\"\\e252\"}.glyphicon-triangle-top:before{content:\"\\e253\"}.glyphicon-console:before{content:\"\\e254\"}.glyphicon-superscript:before{content:\"\\e255\"}.glyphicon-subscript:before{content:\"\\e256\"}.glyphicon-menu-left:before{content:\"\\e257\"}.glyphicon-menu-right:before{content:\"\\e258\"}.glyphicon-menu-down:before{content:\"\\e259\"}.glyphicon-menu-up:before{content:\"\\e260\"}*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}:after,:before{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:rgba(0,0,0,0)}body{font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333;background-color:#fff}button,input,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#337ab7;text-decoration:none}a:focus,a:hover{color:#23527c;text-decoration:underline}a:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}figure{margin:0}img{vertical-align:middle}.carousel-inner>.item>a>img,.carousel-inner>.item>img,.img-responsive,.thumbnail a>img,.thumbnail>img{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{display:inline-block;max-width:100%;height:auto;padding:4px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.img-circle{border-radius:50%}hr{margin-top:20px;margin-bottom:20px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}[role=button]{cursor:pointer}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-weight:400;line-height:1;color:#777}.h1,.h2,.h3,h1,h2,h3{margin-top:20px;margin-bottom:10px}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small{font-size:65%}.h4,.h5,.h6,h4,h5,h6{margin-top:10px;margin-bottom:10px}.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-size:75%}.h1,h1{font-size:36px}.h2,h2{font-size:30px}.h3,h3{font-size:24px}.h4,h4{font-size:18px}.h5,h5{font-size:14px}.h6,h6{font-size:12px}p{margin:0 0 10px}.lead{margin-bottom:20px;font-size:16px;font-weight:300;line-height:1.4}@media (min-width:768px){.lead{font-size:21px}}.small,small{font-size:85%}.mark,mark{padding:.2em;background-color:#fcf8e3}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.text-justify{text-align:justify}.text-nowrap{white-space:nowrap}.text-lowercase{text-transform:lowercase}.text-uppercase{text-transform:uppercase}.text-capitalize{text-transform:capitalize}.text-muted{color:#777}.text-primary{color:#337ab7}a.text-primary:focus,a.text-primary:hover{color:#286090}.text-success{color:#3c763d}a.text-success:focus,a.text-success:hover{color:#2b542c}.text-info{color:#31708f}a.text-info:focus,a.text-info:hover{color:#245269}.text-warning{color:#8a6d3b}a.text-warning:focus,a.text-warning:hover{color:#66512c}.text-danger{color:#a94442}a.text-danger:focus,a.text-danger:hover{color:#843534}.bg-primary{color:#fff;background-color:#337ab7}a.bg-primary:focus,a.bg-primary:hover{background-color:#286090}.bg-success{background-color:#dff0d8}a.bg-success:focus,a.bg-success:hover{background-color:#c1e2b3}.bg-info{background-color:#d9edf7}a.bg-info:focus,a.bg-info:hover{background-color:#afd9ee}.bg-warning{background-color:#fcf8e3}a.bg-warning:focus,a.bg-warning:hover{background-color:#f7ecb5}.bg-danger{background-color:#f2dede}a.bg-danger:focus,a.bg-danger:hover{background-color:#e4b9b9}.page-header{padding-bottom:9px;margin:40px 0 20px;border-bottom:1px solid #eee}ol,ul{margin-top:0;margin-bottom:10px}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;margin-left:-5px;list-style:none}.list-inline>li{display:inline-block;padding-right:5px;padding-left:5px}dl{margin-top:0;margin-bottom:20px}dd,dt{line-height:1.42857143}dt{font-weight:700}dd{margin-left:0}@media (min-width:768px){.dl-horizontal dt{float:left;width:160px;overflow:hidden;clear:left;text-align:right;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}}abbr[data-original-title],abbr[title]{cursor:help;border-bottom:1px dotted #777}.initialism{font-size:90%;text-transform:uppercase}blockquote{padding:10px 20px;margin:0 0 20px;font-size:17.5px;border-left:5px solid #eee}blockquote ol:last-child,blockquote p:last-child,blockquote ul:last-child{margin-bottom:0}blockquote .small,blockquote footer,blockquote small{display:block;font-size:80%;line-height:1.42857143;color:#777}blockquote .small:before,blockquote footer:before,blockquote small:before{content:'\\2014 \\00A0'}.blockquote-reverse,blockquote.pull-right{padding-right:15px;padding-left:0;text-align:right;border-right:5px solid #eee;border-left:0}.blockquote-reverse .small:before,.blockquote-reverse footer:before,.blockquote-reverse small:before,blockquote.pull-right .small:before,blockquote.pull-right footer:before,blockquote.pull-right small:before{content:''}.blockquote-reverse .small:after,.blockquote-reverse footer:after,.blockquote-reverse small:after,blockquote.pull-right .small:after,blockquote.pull-right footer:after,blockquote.pull-right small:after{content:'\\00A0 \\2014'}address{margin-bottom:20px;font-style:normal;line-height:1.42857143}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,\"Courier New\",monospace}code{padding:2px 4px;font-size:90%;color:#c7254e;background-color:#f9f2f4;border-radius:4px}kbd{padding:2px 4px;font-size:90%;color:#fff;background-color:#333;border-radius:3px;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.25);box-shadow:inset 0 -1px 0 rgba(0,0,0,.25)}kbd kbd{padding:0;font-size:100%;font-weight:700;-webkit-box-shadow:none;box-shadow:none}pre{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:1.42857143;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:768px){.container{width:750px}}@media (min-width:992px){.container{width:970px}}@media (min-width:1200px){.container{width:1170px}}.container-fluid{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{margin-right:-15px;margin-left:-15px}.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{position:relative;min-height:1px;padding-right:15px;padding-left:15px}.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{float:left}.col-xs-12{width:100%}.col-xs-11{width:91.66666667%}.col-xs-10{width:83.33333333%}.col-xs-9{width:75%}.col-xs-8{width:66.66666667%}.col-xs-7{width:58.33333333%}.col-xs-6{width:50%}.col-xs-5{width:41.66666667%}.col-xs-4{width:33.33333333%}.col-xs-3{width:25%}.col-xs-2{width:16.66666667%}.col-xs-1{width:8.33333333%}.col-xs-pull-12{right:100%}.col-xs-pull-11{right:91.66666667%}.col-xs-pull-10{right:83.33333333%}.col-xs-pull-9{right:75%}.col-xs-pull-8{right:66.66666667%}.col-xs-pull-7{right:58.33333333%}.col-xs-pull-6{right:50%}.col-xs-pull-5{right:41.66666667%}.col-xs-pull-4{right:33.33333333%}.col-xs-pull-3{right:25%}.col-xs-pull-2{right:16.66666667%}.col-xs-pull-1{right:8.33333333%}.col-xs-pull-0{right:auto}.col-xs-push-12{left:100%}.col-xs-push-11{left:91.66666667%}.col-xs-push-10{left:83.33333333%}.col-xs-push-9{left:75%}.col-xs-push-8{left:66.66666667%}.col-xs-push-7{left:58.33333333%}.col-xs-push-6{left:50%}.col-xs-push-5{left:41.66666667%}.col-xs-push-4{left:33.33333333%}.col-xs-push-3{left:25%}.col-xs-push-2{left:16.66666667%}.col-xs-push-1{left:8.33333333%}.col-xs-push-0{left:auto}.col-xs-offset-12{margin-left:100%}.col-xs-offset-11{margin-left:91.66666667%}.col-xs-offset-10{margin-left:83.33333333%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-8{margin-left:66.66666667%}.col-xs-offset-7{margin-left:58.33333333%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-5{margin-left:41.66666667%}.col-xs-offset-4{margin-left:33.33333333%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-2{margin-left:16.66666667%}.col-xs-offset-1{margin-left:8.33333333%}.col-xs-offset-0{margin-left:0}@media (min-width:768px){.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9{float:left}.col-sm-12{width:100%}.col-sm-11{width:91.66666667%}.col-sm-10{width:83.33333333%}.col-sm-9{width:75%}.col-sm-8{width:66.66666667%}.col-sm-7{width:58.33333333%}.col-sm-6{width:50%}.col-sm-5{width:41.66666667%}.col-sm-4{width:33.33333333%}.col-sm-3{width:25%}.col-sm-2{width:16.66666667%}.col-sm-1{width:8.33333333%}.col-sm-pull-12{right:100%}.col-sm-pull-11{right:91.66666667%}.col-sm-pull-10{right:83.33333333%}.col-sm-pull-9{right:75%}.col-sm-pull-8{right:66.66666667%}.col-sm-pull-7{right:58.33333333%}.col-sm-pull-6{right:50%}.col-sm-pull-5{right:41.66666667%}.col-sm-pull-4{right:33.33333333%}.col-sm-pull-3{right:25%}.col-sm-pull-2{right:16.66666667%}.col-sm-pull-1{right:8.33333333%}.col-sm-pull-0{right:auto}.col-sm-push-12{left:100%}.col-sm-push-11{left:91.66666667%}.col-sm-push-10{left:83.33333333%}.col-sm-push-9{left:75%}.col-sm-push-8{left:66.66666667%}.col-sm-push-7{left:58.33333333%}.col-sm-push-6{left:50%}.col-sm-push-5{left:41.66666667%}.col-sm-push-4{left:33.33333333%}.col-sm-push-3{left:25%}.col-sm-push-2{left:16.66666667%}.col-sm-push-1{left:8.33333333%}.col-sm-push-0{left:auto}.col-sm-offset-12{margin-left:100%}.col-sm-offset-11{margin-left:91.66666667%}.col-sm-offset-10{margin-left:83.33333333%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-8{margin-left:66.66666667%}.col-sm-offset-7{margin-left:58.33333333%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-5{margin-left:41.66666667%}.col-sm-offset-4{margin-left:33.33333333%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-2{margin-left:16.66666667%}.col-sm-offset-1{margin-left:8.33333333%}.col-sm-offset-0{margin-left:0}}@media (min-width:992px){.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9{float:left}.col-md-12{width:100%}.col-md-11{width:91.66666667%}.col-md-10{width:83.33333333%}.col-md-9{width:75%}.col-md-8{width:66.66666667%}.col-md-7{width:58.33333333%}.col-md-6{width:50%}.col-md-5{width:41.66666667%}.col-md-4{width:33.33333333%}.col-md-3{width:25%}.col-md-2{width:16.66666667%}.col-md-1{width:8.33333333%}.col-md-pull-12{right:100%}.col-md-pull-11{right:91.66666667%}.col-md-pull-10{right:83.33333333%}.col-md-pull-9{right:75%}.col-md-pull-8{right:66.66666667%}.col-md-pull-7{right:58.33333333%}.col-md-pull-6{right:50%}.col-md-pull-5{right:41.66666667%}.col-md-pull-4{right:33.33333333%}.col-md-pull-3{right:25%}.col-md-pull-2{right:16.66666667%}.col-md-pull-1{right:8.33333333%}.col-md-pull-0{right:auto}.col-md-push-12{left:100%}.col-md-push-11{left:91.66666667%}.col-md-push-10{left:83.33333333%}.col-md-push-9{left:75%}.col-md-push-8{left:66.66666667%}.col-md-push-7{left:58.33333333%}.col-md-push-6{left:50%}.col-md-push-5{left:41.66666667%}.col-md-push-4{left:33.33333333%}.col-md-push-3{left:25%}.col-md-push-2{left:16.66666667%}.col-md-push-1{left:8.33333333%}.col-md-push-0{left:auto}.col-md-offset-12{margin-left:100%}.col-md-offset-11{margin-left:91.66666667%}.col-md-offset-10{margin-left:83.33333333%}.col-md-offset-9{margin-left:75%}.col-md-offset-8{margin-left:66.66666667%}.col-md-offset-7{margin-left:58.33333333%}.col-md-offset-6{margin-left:50%}.col-md-offset-5{margin-left:41.66666667%}.col-md-offset-4{margin-left:33.33333333%}.col-md-offset-3{margin-left:25%}.col-md-offset-2{margin-left:16.66666667%}.col-md-offset-1{margin-left:8.33333333%}.col-md-offset-0{margin-left:0}}@media (min-width:1200px){.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9{float:left}.col-lg-12{width:100%}.col-lg-11{width:91.66666667%}.col-lg-10{width:83.33333333%}.col-lg-9{width:75%}.col-lg-8{width:66.66666667%}.col-lg-7{width:58.33333333%}.col-lg-6{width:50%}.col-lg-5{width:41.66666667%}.col-lg-4{width:33.33333333%}.col-lg-3{width:25%}.col-lg-2{width:16.66666667%}.col-lg-1{width:8.33333333%}.col-lg-pull-12{right:100%}.col-lg-pull-11{right:91.66666667%}.col-lg-pull-10{right:83.33333333%}.col-lg-pull-9{right:75%}.col-lg-pull-8{right:66.66666667%}.col-lg-pull-7{right:58.33333333%}.col-lg-pull-6{right:50%}.col-lg-pull-5{right:41.66666667%}.col-lg-pull-4{right:33.33333333%}.col-lg-pull-3{right:25%}.col-lg-pull-2{right:16.66666667%}.col-lg-pull-1{right:8.33333333%}.col-lg-pull-0{right:auto}.col-lg-push-12{left:100%}.col-lg-push-11{left:91.66666667%}.col-lg-push-10{left:83.33333333%}.col-lg-push-9{left:75%}.col-lg-push-8{left:66.66666667%}.col-lg-push-7{left:58.33333333%}.col-lg-push-6{left:50%}.col-lg-push-5{left:41.66666667%}.col-lg-push-4{left:33.33333333%}.col-lg-push-3{left:25%}.col-lg-push-2{left:16.66666667%}.col-lg-push-1{left:8.33333333%}.col-lg-push-0{left:auto}.col-lg-offset-12{margin-left:100%}.col-lg-offset-11{margin-left:91.66666667%}.col-lg-offset-10{margin-left:83.33333333%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-8{margin-left:66.66666667%}.col-lg-offset-7{margin-left:58.33333333%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-5{margin-left:41.66666667%}.col-lg-offset-4{margin-left:33.33333333%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-2{margin-left:16.66666667%}.col-lg-offset-1{margin-left:8.33333333%}.col-lg-offset-0{margin-left:0}}table{background-color:transparent}caption{padding-top:8px;padding-bottom:8px;color:#777;text-align:left}th{text-align:left}.table{width:100%;max-width:100%;margin-bottom:20px}.table>tbody>tr>td,.table>tbody>tr>th,.table>tfoot>tr>td,.table>tfoot>tr>th,.table>thead>tr>td,.table>thead>tr>th{padding:8px;line-height:1.42857143;vertical-align:top;border-top:1px solid #ddd}.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}.table>caption+thead>tr:first-child>td,.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>td,.table>thead:first-child>tr:first-child>th{border-top:0}.table>tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#fff}.table-condensed>tbody>tr>td,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>td,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>thead>tr>th{padding:5px}.table-bordered{border:1px solid #ddd}.table-bordered>tbody>tr>td,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>td,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border:1px solid #ddd}.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border-bottom-width:2px}.table-striped>tbody>tr:nth-of-type(odd){background-color:#f9f9f9}.table-hover>tbody>tr:hover{background-color:#f5f5f5}table col[class*=col-]{position:static;display:table-column;float:none}table td[class*=col-],table th[class*=col-]{position:static;display:table-cell;float:none}.table>tbody>tr.active>td,.table>tbody>tr.active>th,.table>tbody>tr>td.active,.table>tbody>tr>th.active,.table>tfoot>tr.active>td,.table>tfoot>tr.active>th,.table>tfoot>tr>td.active,.table>tfoot>tr>th.active,.table>thead>tr.active>td,.table>thead>tr.active>th,.table>thead>tr>td.active,.table>thead>tr>th.active{background-color:#f5f5f5}.table-hover>tbody>tr.active:hover>td,.table-hover>tbody>tr.active:hover>th,.table-hover>tbody>tr:hover>.active,.table-hover>tbody>tr>td.active:hover,.table-hover>tbody>tr>th.active:hover{background-color:#e8e8e8}.table>tbody>tr.success>td,.table>tbody>tr.success>th,.table>tbody>tr>td.success,.table>tbody>tr>th.success,.table>tfoot>tr.success>td,.table>tfoot>tr.success>th,.table>tfoot>tr>td.success,.table>tfoot>tr>th.success,.table>thead>tr.success>td,.table>thead>tr.success>th,.table>thead>tr>td.success,.table>thead>tr>th.success{background-color:#dff0d8}.table-hover>tbody>tr.success:hover>td,.table-hover>tbody>tr.success:hover>th,.table-hover>tbody>tr:hover>.success,.table-hover>tbody>tr>td.success:hover,.table-hover>tbody>tr>th.success:hover{background-color:#d0e9c6}.table>tbody>tr.info>td,.table>tbody>tr.info>th,.table>tbody>tr>td.info,.table>tbody>tr>th.info,.table>tfoot>tr.info>td,.table>tfoot>tr.info>th,.table>tfoot>tr>td.info,.table>tfoot>tr>th.info,.table>thead>tr.info>td,.table>thead>tr.info>th,.table>thead>tr>td.info,.table>thead>tr>th.info{background-color:#d9edf7}.table-hover>tbody>tr.info:hover>td,.table-hover>tbody>tr.info:hover>th,.table-hover>tbody>tr:hover>.info,.table-hover>tbody>tr>td.info:hover,.table-hover>tbody>tr>th.info:hover{background-color:#c4e3f3}.table>tbody>tr.warning>td,.table>tbody>tr.warning>th,.table>tbody>tr>td.warning,.table>tbody>tr>th.warning,.table>tfoot>tr.warning>td,.table>tfoot>tr.warning>th,.table>tfoot>tr>td.warning,.table>tfoot>tr>th.warning,.table>thead>tr.warning>td,.table>thead>tr.warning>th,.table>thead>tr>td.warning,.table>thead>tr>th.warning{background-color:#fcf8e3}.table-hover>tbody>tr.warning:hover>td,.table-hover>tbody>tr.warning:hover>th,.table-hover>tbody>tr:hover>.warning,.table-hover>tbody>tr>td.warning:hover,.table-hover>tbody>tr>th.warning:hover{background-color:#faf2cc}.table>tbody>tr.danger>td,.table>tbody>tr.danger>th,.table>tbody>tr>td.danger,.table>tbody>tr>th.danger,.table>tfoot>tr.danger>td,.table>tfoot>tr.danger>th,.table>tfoot>tr>td.danger,.table>tfoot>tr>th.danger,.table>thead>tr.danger>td,.table>thead>tr.danger>th,.table>thead>tr>td.danger,.table>thead>tr>th.danger{background-color:#f2dede}.table-hover>tbody>tr.danger:hover>td,.table-hover>tbody>tr.danger:hover>th,.table-hover>tbody>tr:hover>.danger,.table-hover>tbody>tr>td.danger:hover,.table-hover>tbody>tr>th.danger:hover{background-color:#ebcccc}.table-responsive{min-height:.01%;overflow-x:auto}@media screen and (max-width:767px){.table-responsive{width:100%;margin-bottom:15px;overflow-y:hidden;-ms-overflow-style:-ms-autohiding-scrollbar;border:1px solid #ddd}.table-responsive>.table{margin-bottom:0}.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>td,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>thead>tr>th{white-space:nowrap}.table-responsive>.table-bordered{border:0}.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;padding:0;margin-bottom:20px;font-size:21px;line-height:inherit;color:#333;border:0;border-bottom:1px solid #e5e5e5}label{display:inline-block;max-width:100%;margin-bottom:5px;font-weight:700}input[type=search]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}input[type=checkbox],input[type=radio]{margin:4px 0 0;margin-top:1px\\9;line-height:normal}input[type=file]{display:block}input[type=range]{display:block;width:100%}select[multiple],select[size]{height:auto}input[type=file]:focus,input[type=checkbox]:focus,input[type=radio]:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}output{display:block;padding-top:7px;font-size:14px;line-height:1.42857143;color:#555}.form-control{display:block;width:100%;height:34px;padding:6px 12px;font-size:14px;line-height:1.42857143;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;-o-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s}.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)}.form-control::-moz-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999}.form-control::-webkit-input-placeholder{color:#999}.form-control::-ms-expand{background-color:transparent;border:0}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{background-color:#eee;opacity:1}.form-control[disabled],fieldset[disabled] .form-control{cursor:not-allowed}textarea.form-control{height:auto}input[type=search]{-webkit-appearance:none}@media screen and (-webkit-min-device-pixel-ratio:0){input[type=date].form-control,input[type=time].form-control,input[type=datetime-local].form-control,input[type=month].form-control{line-height:34px}.input-group-sm input[type=date],.input-group-sm input[type=time],.input-group-sm input[type=datetime-local],.input-group-sm input[type=month],input[type=date].input-sm,input[type=time].input-sm,input[type=datetime-local].input-sm,input[type=month].input-sm{line-height:30px}.input-group-lg input[type=date],.input-group-lg input[type=time],.input-group-lg input[type=datetime-local],.input-group-lg input[type=month],input[type=date].input-lg,input[type=time].input-lg,input[type=datetime-local].input-lg,input[type=month].input-lg{line-height:46px}}.form-group{margin-bottom:15px}.checkbox,.radio{position:relative;display:block;margin-top:10px;margin-bottom:10px}.checkbox label,.radio label{min-height:20px;padding-left:20px;margin-bottom:0;font-weight:400;cursor:pointer}.checkbox input[type=checkbox],.checkbox-inline input[type=checkbox],.radio input[type=radio],.radio-inline input[type=radio]{position:absolute;margin-top:4px\\9;margin-left:-20px}.checkbox+.checkbox,.radio+.radio{margin-top:-5px}.checkbox-inline,.radio-inline{position:relative;display:inline-block;padding-left:20px;margin-bottom:0;font-weight:400;vertical-align:middle;cursor:pointer}.checkbox-inline+.checkbox-inline,.radio-inline+.radio-inline{margin-top:0;margin-left:10px}fieldset[disabled] input[type=checkbox],fieldset[disabled] input[type=radio],input[type=checkbox].disabled,input[type=checkbox][disabled],input[type=radio].disabled,input[type=radio][disabled]{cursor:not-allowed}.checkbox-inline.disabled,.radio-inline.disabled,fieldset[disabled] .checkbox-inline,fieldset[disabled] .radio-inline{cursor:not-allowed}.checkbox.disabled label,.radio.disabled label,fieldset[disabled] .checkbox label,fieldset[disabled] .radio label{cursor:not-allowed}.form-control-static{min-height:34px;padding-top:7px;padding-bottom:7px;margin-bottom:0}.form-control-static.input-lg,.form-control-static.input-sm{padding-right:0;padding-left:0}.input-sm{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-sm{height:30px;line-height:30px}select[multiple].input-sm,textarea.input-sm{height:auto}.form-group-sm .form-control{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.form-group-sm select.form-control{height:30px;line-height:30px}.form-group-sm select[multiple].form-control,.form-group-sm textarea.form-control{height:auto}.form-group-sm .form-control-static{height:30px;min-height:32px;padding:6px 10px;font-size:12px;line-height:1.5}.input-lg{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}select.input-lg{height:46px;line-height:46px}select[multiple].input-lg,textarea.input-lg{height:auto}.form-group-lg .form-control{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.form-group-lg select.form-control{height:46px;line-height:46px}.form-group-lg select[multiple].form-control,.form-group-lg textarea.form-control{height:auto}.form-group-lg .form-control-static{height:46px;min-height:38px;padding:11px 16px;font-size:18px;line-height:1.3333333}.has-feedback{position:relative}.has-feedback .form-control{padding-right:42.5px}.form-control-feedback{position:absolute;top:0;right:0;z-index:2;display:block;width:34px;height:34px;line-height:34px;text-align:center;pointer-events:none}.form-group-lg .form-control+.form-control-feedback,.input-group-lg+.form-control-feedback,.input-lg+.form-control-feedback{width:46px;height:46px;line-height:46px}.form-group-sm .form-control+.form-control-feedback,.input-group-sm+.form-control-feedback,.input-sm+.form-control-feedback{width:30px;height:30px;line-height:30px}.has-success .checkbox,.has-success .checkbox-inline,.has-success .control-label,.has-success .help-block,.has-success .radio,.has-success .radio-inline,.has-success.checkbox label,.has-success.checkbox-inline label,.has-success.radio label,.has-success.radio-inline label{color:#3c763d}.has-success .form-control{border-color:#3c763d;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-success .form-control:focus{border-color:#2b542c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168}.has-success .input-group-addon{color:#3c763d;background-color:#dff0d8;border-color:#3c763d}.has-success .form-control-feedback{color:#3c763d}.has-warning .checkbox,.has-warning .checkbox-inline,.has-warning .control-label,.has-warning .help-block,.has-warning .radio,.has-warning .radio-inline,.has-warning.checkbox label,.has-warning.checkbox-inline label,.has-warning.radio label,.has-warning.radio-inline label{color:#8a6d3b}.has-warning .form-control{border-color:#8a6d3b;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-warning .form-control:focus{border-color:#66512c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b}.has-warning .input-group-addon{color:#8a6d3b;background-color:#fcf8e3;border-color:#8a6d3b}.has-warning .form-control-feedback{color:#8a6d3b}.has-error .checkbox,.has-error .checkbox-inline,.has-error .control-label,.has-error .help-block,.has-error .radio,.has-error .radio-inline,.has-error.checkbox label,.has-error.checkbox-inline label,.has-error.radio label,.has-error.radio-inline label{color:#a94442}.has-error .form-control{border-color:#a94442;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-error .form-control:focus{border-color:#843534;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483}.has-error .input-group-addon{color:#a94442;background-color:#f2dede;border-color:#a94442}.has-error .form-control-feedback{color:#a94442}.has-feedback label~.form-control-feedback{top:25px}.has-feedback label.sr-only~.form-control-feedback{top:0}.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#737373}@media (min-width:768px){.form-inline .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-static{display:inline-block}.form-inline .input-group{display:inline-table;vertical-align:middle}.form-inline .input-group .form-control,.form-inline .input-group .input-group-addon,.form-inline .input-group .input-group-btn{width:auto}.form-inline .input-group>.form-control{width:100%}.form-inline .control-label{margin-bottom:0;vertical-align:middle}.form-inline .checkbox,.form-inline .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.form-inline .checkbox label,.form-inline .radio label{padding-left:0}.form-inline .checkbox input[type=checkbox],.form-inline .radio input[type=radio]{position:relative;margin-left:0}.form-inline .has-feedback .form-control-feedback{top:0}}.form-horizontal .checkbox,.form-horizontal .checkbox-inline,.form-horizontal .radio,.form-horizontal .radio-inline{padding-top:7px;margin-top:0;margin-bottom:0}.form-horizontal .checkbox,.form-horizontal .radio{min-height:27px}.form-horizontal .form-group{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.form-horizontal .control-label{padding-top:7px;margin-bottom:0;text-align:right}}.form-horizontal .has-feedback .form-control-feedback{right:15px}@media (min-width:768px){.form-horizontal .form-group-lg .control-label{padding-top:11px;font-size:18px}}@media (min-width:768px){.form-horizontal .form-group-sm .control-label{padding-top:6px;font-size:12px}}.btn{display:inline-block;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:400;line-height:1.42857143;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-image:none;border:1px solid transparent;border-radius:4px}.btn.active.focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn:active:focus,.btn:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn.focus,.btn:focus,.btn:hover{color:#333;text-decoration:none}.btn.active,.btn:active{background-image:none;outline:0;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none;opacity:.65}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-default{color:#333;background-color:#fff;border-color:#ccc}.btn-default.focus,.btn-default:focus{color:#333;background-color:#e6e6e6;border-color:#8c8c8c}.btn-default:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default.active,.btn-default:active,.open>.dropdown-toggle.btn-default{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default.active.focus,.btn-default.active:focus,.btn-default.active:hover,.btn-default:active.focus,.btn-default:active:focus,.btn-default:active:hover,.open>.dropdown-toggle.btn-default.focus,.open>.dropdown-toggle.btn-default:focus,.open>.dropdown-toggle.btn-default:hover{color:#333;background-color:#d4d4d4;border-color:#8c8c8c}.btn-default.active,.btn-default:active,.open>.dropdown-toggle.btn-default{background-image:none}.btn-default.disabled.focus,.btn-default.disabled:focus,.btn-default.disabled:hover,.btn-default[disabled].focus,.btn-default[disabled]:focus,.btn-default[disabled]:hover,fieldset[disabled] .btn-default.focus,fieldset[disabled] .btn-default:focus,fieldset[disabled] .btn-default:hover{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#333}.btn-primary{color:#fff;background-color:#337ab7;border-color:#2e6da4}.btn-primary.focus,.btn-primary:focus{color:#fff;background-color:#286090;border-color:#122b40}.btn-primary:hover{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary.active,.btn-primary:active,.open>.dropdown-toggle.btn-primary{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary.active.focus,.btn-primary.active:focus,.btn-primary.active:hover,.btn-primary:active.focus,.btn-primary:active:focus,.btn-primary:active:hover,.open>.dropdown-toggle.btn-primary.focus,.open>.dropdown-toggle.btn-primary:focus,.open>.dropdown-toggle.btn-primary:hover{color:#fff;background-color:#204d74;border-color:#122b40}.btn-primary.active,.btn-primary:active,.open>.dropdown-toggle.btn-primary{background-image:none}.btn-primary.disabled.focus,.btn-primary.disabled:focus,.btn-primary.disabled:hover,.btn-primary[disabled].focus,.btn-primary[disabled]:focus,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary.focus,fieldset[disabled] .btn-primary:focus,fieldset[disabled] .btn-primary:hover{background-color:#337ab7;border-color:#2e6da4}.btn-primary .badge{color:#337ab7;background-color:#fff}.btn-success{color:#fff;background-color:#5cb85c;border-color:#4cae4c}.btn-success.focus,.btn-success:focus{color:#fff;background-color:#449d44;border-color:#255625}.btn-success:hover{color:#fff;background-color:#449d44;border-color:#398439}.btn-success.active,.btn-success:active,.open>.dropdown-toggle.btn-success{color:#fff;background-color:#449d44;border-color:#398439}.btn-success.active.focus,.btn-success.active:focus,.btn-success.active:hover,.btn-success:active.focus,.btn-success:active:focus,.btn-success:active:hover,.open>.dropdown-toggle.btn-success.focus,.open>.dropdown-toggle.btn-success:focus,.open>.dropdown-toggle.btn-success:hover{color:#fff;background-color:#398439;border-color:#255625}.btn-success.active,.btn-success:active,.open>.dropdown-toggle.btn-success{background-image:none}.btn-success.disabled.focus,.btn-success.disabled:focus,.btn-success.disabled:hover,.btn-success[disabled].focus,.btn-success[disabled]:focus,.btn-success[disabled]:hover,fieldset[disabled] .btn-success.focus,fieldset[disabled] .btn-success:focus,fieldset[disabled] .btn-success:hover{background-color:#5cb85c;border-color:#4cae4c}.btn-success .badge{color:#5cb85c;background-color:#fff}.btn-info{color:#fff;background-color:#5bc0de;border-color:#46b8da}.btn-info.focus,.btn-info:focus{color:#fff;background-color:#31b0d5;border-color:#1b6d85}.btn-info:hover{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info.active,.btn-info:active,.open>.dropdown-toggle.btn-info{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info.active.focus,.btn-info.active:focus,.btn-info.active:hover,.btn-info:active.focus,.btn-info:active:focus,.btn-info:active:hover,.open>.dropdown-toggle.btn-info.focus,.open>.dropdown-toggle.btn-info:focus,.open>.dropdown-toggle.btn-info:hover{color:#fff;background-color:#269abc;border-color:#1b6d85}.btn-info.active,.btn-info:active,.open>.dropdown-toggle.btn-info{background-image:none}.btn-info.disabled.focus,.btn-info.disabled:focus,.btn-info.disabled:hover,.btn-info[disabled].focus,.btn-info[disabled]:focus,.btn-info[disabled]:hover,fieldset[disabled] .btn-info.focus,fieldset[disabled] .btn-info:focus,fieldset[disabled] .btn-info:hover{background-color:#5bc0de;border-color:#46b8da}.btn-info .badge{color:#5bc0de;background-color:#fff}.btn-warning{color:#fff;background-color:#f0ad4e;border-color:#eea236}.btn-warning.focus,.btn-warning:focus{color:#fff;background-color:#ec971f;border-color:#985f0d}.btn-warning:hover{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning.active,.btn-warning:active,.open>.dropdown-toggle.btn-warning{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning.active.focus,.btn-warning.active:focus,.btn-warning.active:hover,.btn-warning:active.focus,.btn-warning:active:focus,.btn-warning:active:hover,.open>.dropdown-toggle.btn-warning.focus,.open>.dropdown-toggle.btn-warning:focus,.open>.dropdown-toggle.btn-warning:hover{color:#fff;background-color:#d58512;border-color:#985f0d}.btn-warning.active,.btn-warning:active,.open>.dropdown-toggle.btn-warning{background-image:none}.btn-warning.disabled.focus,.btn-warning.disabled:focus,.btn-warning.disabled:hover,.btn-warning[disabled].focus,.btn-warning[disabled]:focus,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning.focus,fieldset[disabled] .btn-warning:focus,fieldset[disabled] .btn-warning:hover{background-color:#f0ad4e;border-color:#eea236}.btn-warning .badge{color:#f0ad4e;background-color:#fff}.btn-danger{color:#fff;background-color:#d9534f;border-color:#d43f3a}.btn-danger.focus,.btn-danger:focus{color:#fff;background-color:#c9302c;border-color:#761c19}.btn-danger:hover{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger.active,.btn-danger:active,.open>.dropdown-toggle.btn-danger{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger.active.focus,.btn-danger.active:focus,.btn-danger.active:hover,.btn-danger:active.focus,.btn-danger:active:focus,.btn-danger:active:hover,.open>.dropdown-toggle.btn-danger.focus,.open>.dropdown-toggle.btn-danger:focus,.open>.dropdown-toggle.btn-danger:hover{color:#fff;background-color:#ac2925;border-color:#761c19}.btn-danger.active,.btn-danger:active,.open>.dropdown-toggle.btn-danger{background-image:none}.btn-danger.disabled.focus,.btn-danger.disabled:focus,.btn-danger.disabled:hover,.btn-danger[disabled].focus,.btn-danger[disabled]:focus,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger.focus,fieldset[disabled] .btn-danger:focus,fieldset[disabled] .btn-danger:hover{background-color:#d9534f;border-color:#d43f3a}.btn-danger .badge{color:#d9534f;background-color:#fff}.btn-link{font-weight:400;color:#337ab7;border-radius:0}.btn-link,.btn-link.active,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:active,.btn-link:focus,.btn-link:hover{border-color:transparent}.btn-link:focus,.btn-link:hover{color:#23527c;text-decoration:underline;background-color:transparent}.btn-link[disabled]:focus,.btn-link[disabled]:hover,fieldset[disabled] .btn-link:focus,fieldset[disabled] .btn-link:hover{color:#777;text-decoration:none}.btn-group-lg>.btn,.btn-lg{padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.btn-group-sm>.btn,.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-xs>.btn,.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:5px}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;-o-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}tr.collapse.in{display:table-row}tbody.collapse.in{display:table-row-group}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition-timing-function:ease;-o-transition-timing-function:ease;transition-timing-function:ease;-webkit-transition-duration:.35s;-o-transition-duration:.35s;transition-duration:.35s;-webkit-transition-property:height,visibility;-o-transition-property:height,visibility;transition-property:height,visibility}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px dashed;border-top:4px solid\\9;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown,.dropup{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;font-size:14px;text-align:left;list-style:none;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,.175);box-shadow:0 6px 12px rgba(0,0,0,.175)}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;color:#333;white-space:nowrap}.dropdown-menu>li>a:focus,.dropdown-menu>li>a:hover{color:#262626;text-decoration:none;background-color:#f5f5f5}.dropdown-menu>.active>a,.dropdown-menu>.active>a:focus,.dropdown-menu>.active>a:hover{color:#fff;text-decoration:none;background-color:#337ab7;outline:0}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{color:#777}.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{text-decoration:none;cursor:not-allowed;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-menu-right{right:0;left:auto}.dropdown-menu-left{right:auto;left:0}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.42857143;color:#777;white-space:nowrap}.dropdown-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{content:\"\";border-top:0;border-bottom:4px dashed;border-bottom:4px solid\\9}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:2px}@media (min-width:768px){.navbar-right .dropdown-menu{right:0;left:auto}.navbar-right .dropdown-menu-left{right:auto;left:0}}.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;float:left}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:2}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{margin-left:-5px}.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group{float:left}.btn-toolbar>.btn,.btn-toolbar>.btn-group,.btn-toolbar>.input-group{margin-left:5px}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-bottom-left-radius:0}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group>.btn+.dropdown-toggle{padding-right:8px;padding-left:8px}.btn-group>.btn-lg+.dropdown-toggle{padding-right:12px;padding-left:12px}.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}.btn .caret{margin-left:0}.btn-lg .caret{border-width:5px 5px 0;border-bottom-width:0}.dropup .btn-lg .caret{border-width:0 5px 5px}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}.btn-group-vertical>.btn-group>.btn{float:none}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-top-left-radius:0;border-top-right-radius:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group-vertical>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-top-right-radius:0}.btn-group-justified{display:table;width:100%;table-layout:fixed;border-collapse:separate}.btn-group-justified>.btn,.btn-group-justified>.btn-group{display:table-cell;float:none;width:1%}.btn-group-justified>.btn-group .btn{width:100%}.btn-group-justified>.btn-group .dropdown-menu{left:auto}[data-toggle=buttons]>.btn input[type=checkbox],[data-toggle=buttons]>.btn input[type=radio],[data-toggle=buttons]>.btn-group>.btn input[type=checkbox],[data-toggle=buttons]>.btn-group>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*=col-]{float:none;padding-right:0;padding-left:0}.input-group .form-control{position:relative;z-index:2;float:left;width:100%;margin-bottom:0}.input-group .form-control:focus{z-index:3}.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}select.input-group-lg>.form-control,select.input-group-lg>.input-group-addon,select.input-group-lg>.input-group-btn>.btn{height:46px;line-height:46px}select[multiple].input-group-lg>.form-control,select[multiple].input-group-lg>.input-group-addon,select[multiple].input-group-lg>.input-group-btn>.btn,textarea.input-group-lg>.form-control,textarea.input-group-lg>.input-group-addon,textarea.input-group-lg>.input-group-btn>.btn{height:auto}.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-group-sm>.form-control,select.input-group-sm>.input-group-addon,select.input-group-sm>.input-group-btn>.btn{height:30px;line-height:30px}select[multiple].input-group-sm>.form-control,select[multiple].input-group-sm>.input-group-addon,select[multiple].input-group-sm>.input-group-btn>.btn,textarea.input-group-sm>.form-control,textarea.input-group-sm>.input-group-addon,textarea.input-group-sm>.input-group-btn>.btn{height:auto}.input-group .form-control,.input-group-addon,.input-group-btn{display:table-cell}.input-group .form-control:not(:first-child):not(:last-child),.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:6px 12px;font-size:14px;font-weight:400;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccc;border-radius:4px}.input-group-addon.input-sm{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg{padding:10px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type=checkbox],.input-group-addon input[type=radio]{margin-top:0}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn-group:not(:last-child)>.btn,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:first-child>.btn-group:not(:first-child)>.btn,.input-group-btn:first-child>.btn:not(:first-child),.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group>.btn,.input-group-btn:last-child>.dropdown-toggle{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{position:relative;font-size:0;white-space:nowrap}.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-1px}.input-group-btn>.btn:active,.input-group-btn>.btn:focus,.input-group-btn>.btn:hover{z-index:2}.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group{margin-right:-1px}.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group{z-index:2;margin-left:-1px}.nav{padding-left:0;margin-bottom:0;list-style:none}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.nav>li>a:focus,.nav>li>a:hover{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#777}.nav>li.disabled>a:focus,.nav>li.disabled>a:hover{color:#777;text-decoration:none;cursor:not-allowed;background-color:transparent}.nav .open>a,.nav .open>a:focus,.nav .open>a:hover{background-color:#eee;border-color:#337ab7}.nav .nav-divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.42857143;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>li.active>a,.nav-tabs>li.active>a:focus,.nav-tabs>li.active>a:hover{color:#555;cursor:default;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent}.nav-tabs.nav-justified{width:100%;border-bottom:0}.nav-tabs.nav-justified>li{float:none}.nav-tabs.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-tabs.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-tabs.nav-justified>li>a{margin-bottom:0}}.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border:1px solid #ddd}@media (min-width:768px){.nav-tabs.nav-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border-bottom-color:#fff}}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:focus,.nav-pills>li.active>a:hover{color:#fff;background-color:#337ab7}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified{width:100%}.nav-justified>li{float:none}.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a{margin-bottom:0}}.nav-tabs-justified{border-bottom:0}.nav-tabs-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover{border:1px solid #ddd}@media (min-width:768px){.nav-tabs-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover{border-bottom-color:#fff}}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:20px;border:1px solid transparent}@media (min-width:768px){.navbar{border-radius:4px}}@media (min-width:768px){.navbar-header{float:left}}.navbar-collapse{padding-right:15px;padding-left:15px;overflow-x:visible;-webkit-overflow-scrolling:touch;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1)}.navbar-collapse.in{overflow-y:auto}@media (min-width:768px){.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse{padding-right:0;padding-left:0}}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:340px}@media (max-device-width:480px) and (orientation:landscape){.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:200px}}.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:0;margin-left:0}}.navbar-static-top{z-index:1000;border-width:0 0 1px}@media (min-width:768px){.navbar-static-top{border-radius:0}}.navbar-fixed-bottom,.navbar-fixed-top{position:fixed;right:0;left:0;z-index:1030}@media (min-width:768px){.navbar-fixed-bottom,.navbar-fixed-top{border-radius:0}}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;height:50px;padding:15px 15px;font-size:18px;line-height:20px}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-brand>img{display:block}@media (min-width:768px){.navbar>.container .navbar-brand,.navbar>.container-fluid .navbar-brand{margin-left:-15px}}.navbar-toggle{position:relative;float:right;padding:9px 10px;margin-top:8px;margin-right:15px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle:focus{outline:0}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}@media (min-width:768px){.navbar-toggle{display:none}}.navbar-nav{margin:7.5px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:20px}@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-nav .open .dropdown-menu .dropdown-header,.navbar-nav .open .dropdown-menu>li>a{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:20px}.navbar-nav .open .dropdown-menu>li>a:focus,.navbar-nav .open .dropdown-menu>li>a:hover{background-image:none}}@media (min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:15px;padding-bottom:15px}}.navbar-form{padding:10px 15px;margin-top:8px;margin-right:-15px;margin-bottom:8px;margin-left:-15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1)}@media (min-width:768px){.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block;width:auto;vertical-align:middle}.navbar-form .form-control-static{display:inline-block}.navbar-form .input-group{display:inline-table;vertical-align:middle}.navbar-form .input-group .form-control,.navbar-form .input-group .input-group-addon,.navbar-form .input-group .input-group-btn{width:auto}.navbar-form .input-group>.form-control{width:100%}.navbar-form .control-label{margin-bottom:0;vertical-align:middle}.navbar-form .checkbox,.navbar-form .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.navbar-form .checkbox label,.navbar-form .radio label{padding-left:0}.navbar-form .checkbox input[type=checkbox],.navbar-form .radio input[type=radio]{position:relative;margin-left:0}.navbar-form .has-feedback .form-control-feedback{top:0}}@media (max-width:767px){.navbar-form .form-group{margin-bottom:5px}.navbar-form .form-group:last-child{margin-bottom:0}}@media (min-width:768px){.navbar-form{width:auto;padding-top:0;padding-bottom:0;margin-right:0;margin-left:0;border:0;-webkit-box-shadow:none;box-shadow:none}}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-left-radius:0;border-top-right-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{margin-bottom:0;border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.navbar-btn{margin-top:8px;margin-bottom:8px}.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.navbar-btn.btn-xs{margin-top:14px;margin-bottom:14px}.navbar-text{margin-top:15px;margin-bottom:15px}@media (min-width:768px){.navbar-text{float:left;margin-right:15px;margin-left:15px}}@media (min-width:768px){.navbar-left{float:left!important}.navbar-right{float:right!important;margin-right:-15px}.navbar-right~.navbar-right{margin-right:0}}.navbar-default{background-color:#f8f8f8;border-color:#e7e7e7}.navbar-default .navbar-brand{color:#777}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#5e5e5e;background-color:transparent}.navbar-default .navbar-text{color:#777}.navbar-default .navbar-nav>li>a{color:#777}.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:focus,.navbar-default .navbar-nav>.disabled>a:hover{color:#ccc;background-color:transparent}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#888}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#e7e7e7}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{color:#555;background-color:#e7e7e7}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#ccc;background-color:transparent}}.navbar-default .navbar-link{color:#777}.navbar-default .navbar-link:hover{color:#333}.navbar-default .btn-link{color:#777}.navbar-default .btn-link:focus,.navbar-default .btn-link:hover{color:#333}.navbar-default .btn-link[disabled]:focus,.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:focus,fieldset[disabled] .navbar-default .btn-link:hover{color:#ccc}.navbar-inverse{background-color:#222;border-color:#080808}.navbar-inverse .navbar-brand{color:#9d9d9d}.navbar-inverse .navbar-brand:focus,.navbar-inverse .navbar-brand:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-text{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a:focus,.navbar-inverse .navbar-nav>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:focus,.navbar-inverse .navbar-nav>.active>a:hover{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:focus,.navbar-inverse .navbar-nav>.disabled>a:hover{color:#444;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#333}.navbar-inverse .navbar-toggle:focus,.navbar-inverse .navbar-toggle:hover{background-color:#333}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:focus,.navbar-inverse .navbar-nav>.open>a:hover{color:#fff;background-color:#080808}@media (max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#444;background-color:transparent}}.navbar-inverse .navbar-link{color:#9d9d9d}.navbar-inverse .navbar-link:hover{color:#fff}.navbar-inverse .btn-link{color:#9d9d9d}.navbar-inverse .btn-link:focus,.navbar-inverse .btn-link:hover{color:#fff}.navbar-inverse .btn-link[disabled]:focus,.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:focus,fieldset[disabled] .navbar-inverse .btn-link:hover{color:#444}.breadcrumb{padding:8px 15px;margin-bottom:20px;list-style:none;background-color:#f5f5f5;border-radius:4px}.breadcrumb>li{display:inline-block}.breadcrumb>li+li:before{padding:0 5px;color:#ccc;content:\"/\\00a0\"}.breadcrumb>.active{color:#777}.pagination{display:inline-block;padding-left:0;margin:20px 0;border-radius:4px}.pagination>li{display:inline}.pagination>li>a,.pagination>li>span{position:relative;float:left;padding:6px 12px;margin-left:-1px;line-height:1.42857143;color:#337ab7;text-decoration:none;background-color:#fff;border:1px solid #ddd}.pagination>li:first-child>a,.pagination>li:first-child>span{margin-left:0;border-top-left-radius:4px;border-bottom-left-radius:4px}.pagination>li:last-child>a,.pagination>li:last-child>span{border-top-right-radius:4px;border-bottom-right-radius:4px}.pagination>li>a:focus,.pagination>li>a:hover,.pagination>li>span:focus,.pagination>li>span:hover{z-index:2;color:#23527c;background-color:#eee;border-color:#ddd}.pagination>.active>a,.pagination>.active>a:focus,.pagination>.active>a:hover,.pagination>.active>span,.pagination>.active>span:focus,.pagination>.active>span:hover{z-index:3;color:#fff;cursor:default;background-color:#337ab7;border-color:#337ab7}.pagination>.disabled>a,.pagination>.disabled>a:focus,.pagination>.disabled>a:hover,.pagination>.disabled>span,.pagination>.disabled>span:focus,.pagination>.disabled>span:hover{color:#777;cursor:not-allowed;background-color:#fff;border-color:#ddd}.pagination-lg>li>a,.pagination-lg>li>span{padding:10px 16px;font-size:18px;line-height:1.3333333}.pagination-lg>li:first-child>a,.pagination-lg>li:first-child>span{border-top-left-radius:6px;border-bottom-left-radius:6px}.pagination-lg>li:last-child>a,.pagination-lg>li:last-child>span{border-top-right-radius:6px;border-bottom-right-radius:6px}.pagination-sm>li>a,.pagination-sm>li>span{padding:5px 10px;font-size:12px;line-height:1.5}.pagination-sm>li:first-child>a,.pagination-sm>li:first-child>span{border-top-left-radius:3px;border-bottom-left-radius:3px}.pagination-sm>li:last-child>a,.pagination-sm>li:last-child>span{border-top-right-radius:3px;border-bottom-right-radius:3px}.pager{padding-left:0;margin:20px 0;text-align:center;list-style:none}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:focus,.pager li>a:hover{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:focus,.pager .disabled>a:hover,.pager .disabled>span{color:#777;cursor:not-allowed;background-color:#fff}.label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}a.label:focus,a.label:hover{color:#fff;text-decoration:none;cursor:pointer}.label:empty{display:none}.btn .label{position:relative;top:-1px}.label-default{background-color:#777}.label-default[href]:focus,.label-default[href]:hover{background-color:#5e5e5e}.label-primary{background-color:#337ab7}.label-primary[href]:focus,.label-primary[href]:hover{background-color:#286090}.label-success{background-color:#5cb85c}.label-success[href]:focus,.label-success[href]:hover{background-color:#449d44}.label-info{background-color:#5bc0de}.label-info[href]:focus,.label-info[href]:hover{background-color:#31b0d5}.label-warning{background-color:#f0ad4e}.label-warning[href]:focus,.label-warning[href]:hover{background-color:#ec971f}.label-danger{background-color:#d9534f}.label-danger[href]:focus,.label-danger[href]:hover{background-color:#c9302c}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:middle;background-color:#777;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.btn-group-xs>.btn .badge,.btn-xs .badge{top:0;padding:1px 5px}a.badge:focus,a.badge:hover{color:#fff;text-decoration:none;cursor:pointer}.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#337ab7;background-color:#fff}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}.nav-pills>li>a>.badge{margin-left:3px}.jumbotron{padding-top:30px;padding-bottom:30px;margin-bottom:30px;color:inherit;background-color:#eee}.jumbotron .h1,.jumbotron h1{color:inherit}.jumbotron p{margin-bottom:15px;font-size:21px;font-weight:200}.jumbotron>hr{border-top-color:#d5d5d5}.container .jumbotron,.container-fluid .jumbotron{padding-right:15px;padding-left:15px;border-radius:6px}.jumbotron .container{max-width:100%}@media screen and (min-width:768px){.jumbotron{padding-top:48px;padding-bottom:48px}.container .jumbotron,.container-fluid .jumbotron{padding-right:60px;padding-left:60px}.jumbotron .h1,.jumbotron h1{font-size:63px}}.thumbnail{display:block;padding:4px;margin-bottom:20px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:border .2s ease-in-out;-o-transition:border .2s ease-in-out;transition:border .2s ease-in-out}.thumbnail a>img,.thumbnail>img{margin-right:auto;margin-left:auto}a.thumbnail.active,a.thumbnail:focus,a.thumbnail:hover{border-color:#337ab7}.thumbnail .caption{padding:9px;color:#333}.alert{padding:15px;margin-bottom:20px;border:1px solid transparent;border-radius:4px}.alert h4{margin-top:0;color:inherit}.alert .alert-link{font-weight:700}.alert>p,.alert>ul{margin-bottom:0}.alert>p+p{margin-top:5px}.alert-dismissable,.alert-dismissible{padding-right:35px}.alert-dismissable .close,.alert-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.alert-success{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.alert-success hr{border-top-color:#c9e2b3}.alert-success .alert-link{color:#2b542c}.alert-info{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.alert-info hr{border-top-color:#a6e1ec}.alert-info .alert-link{color:#245269}.alert-warning{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.alert-warning hr{border-top-color:#f7e1b5}.alert-warning .alert-link{color:#66512c}.alert-danger{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.alert-danger hr{border-top-color:#e4b9c0}.alert-danger .alert-link{color:#843534}@-webkit-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@-o-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}.progress{height:20px;margin-bottom:20px;overflow:hidden;background-color:#f5f5f5;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,.1);box-shadow:inset 0 1px 2px rgba(0,0,0,.1)}.progress-bar{float:left;width:0;height:100%;font-size:12px;line-height:20px;color:#fff;text-align:center;background-color:#337ab7;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);-webkit-transition:width .6s ease;-o-transition:width .6s ease;transition:width .6s ease}.progress-bar-striped,.progress-striped .progress-bar{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:40px 40px;background-size:40px 40px}.progress-bar.active,.progress.active .progress-bar{-webkit-animation:progress-bar-stripes 2s linear infinite;-o-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-bar-success{background-color:#5cb85c}.progress-striped .progress-bar-success{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-info{background-color:#5bc0de}.progress-striped .progress-bar-info{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-warning{background-color:#f0ad4e}.progress-striped .progress-bar-warning{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-danger{background-color:#d9534f}.progress-striped .progress-bar-danger{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.media{margin-top:15px}.media:first-child{margin-top:0}.media,.media-body{overflow:hidden;zoom:1}.media-body{width:10000px}.media-object{display:block}.media-object.img-thumbnail{max-width:none}.media-right,.media>.pull-right{padding-left:10px}.media-left,.media>.pull-left{padding-right:10px}.media-body,.media-left,.media-right{display:table-cell;vertical-align:top}.media-middle{vertical-align:middle}.media-bottom{vertical-align:bottom}.media-heading{margin-top:0;margin-bottom:5px}.media-list{padding-left:0;list-style:none}.list-group{padding-left:0;margin-bottom:20px}.list-group-item{position:relative;display:block;padding:10px 15px;margin-bottom:-1px;background-color:#fff;border:1px solid #ddd}.list-group-item:first-child{border-top-left-radius:4px;border-top-right-radius:4px}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}a.list-group-item,button.list-group-item{color:#555}a.list-group-item .list-group-item-heading,button.list-group-item .list-group-item-heading{color:#333}a.list-group-item:focus,a.list-group-item:hover,button.list-group-item:focus,button.list-group-item:hover{color:#555;text-decoration:none;background-color:#f5f5f5}button.list-group-item{width:100%;text-align:left}.list-group-item.disabled,.list-group-item.disabled:focus,.list-group-item.disabled:hover{color:#777;cursor:not-allowed;background-color:#eee}.list-group-item.disabled .list-group-item-heading,.list-group-item.disabled:focus .list-group-item-heading,.list-group-item.disabled:hover .list-group-item-heading{color:inherit}.list-group-item.disabled .list-group-item-text,.list-group-item.disabled:focus .list-group-item-text,.list-group-item.disabled:hover .list-group-item-text{color:#777}.list-group-item.active,.list-group-item.active:focus,.list-group-item.active:hover{z-index:2;color:#fff;background-color:#337ab7;border-color:#337ab7}.list-group-item.active .list-group-item-heading,.list-group-item.active .list-group-item-heading>.small,.list-group-item.active .list-group-item-heading>small,.list-group-item.active:focus .list-group-item-heading,.list-group-item.active:focus .list-group-item-heading>.small,.list-group-item.active:focus .list-group-item-heading>small,.list-group-item.active:hover .list-group-item-heading,.list-group-item.active:hover .list-group-item-heading>.small,.list-group-item.active:hover .list-group-item-heading>small{color:inherit}.list-group-item.active .list-group-item-text,.list-group-item.active:focus .list-group-item-text,.list-group-item.active:hover .list-group-item-text{color:#c7ddef}.list-group-item-success{color:#3c763d;background-color:#dff0d8}a.list-group-item-success,button.list-group-item-success{color:#3c763d}a.list-group-item-success .list-group-item-heading,button.list-group-item-success .list-group-item-heading{color:inherit}a.list-group-item-success:focus,a.list-group-item-success:hover,button.list-group-item-success:focus,button.list-group-item-success:hover{color:#3c763d;background-color:#d0e9c6}a.list-group-item-success.active,a.list-group-item-success.active:focus,a.list-group-item-success.active:hover,button.list-group-item-success.active,button.list-group-item-success.active:focus,button.list-group-item-success.active:hover{color:#fff;background-color:#3c763d;border-color:#3c763d}.list-group-item-info{color:#31708f;background-color:#d9edf7}a.list-group-item-info,button.list-group-item-info{color:#31708f}a.list-group-item-info .list-group-item-heading,button.list-group-item-info .list-group-item-heading{color:inherit}a.list-group-item-info:focus,a.list-group-item-info:hover,button.list-group-item-info:focus,button.list-group-item-info:hover{color:#31708f;background-color:#c4e3f3}a.list-group-item-info.active,a.list-group-item-info.active:focus,a.list-group-item-info.active:hover,button.list-group-item-info.active,button.list-group-item-info.active:focus,button.list-group-item-info.active:hover{color:#fff;background-color:#31708f;border-color:#31708f}.list-group-item-warning{color:#8a6d3b;background-color:#fcf8e3}a.list-group-item-warning,button.list-group-item-warning{color:#8a6d3b}a.list-group-item-warning .list-group-item-heading,button.list-group-item-warning .list-group-item-heading{color:inherit}a.list-group-item-warning:focus,a.list-group-item-warning:hover,button.list-group-item-warning:focus,button.list-group-item-warning:hover{color:#8a6d3b;background-color:#faf2cc}a.list-group-item-warning.active,a.list-group-item-warning.active:focus,a.list-group-item-warning.active:hover,button.list-group-item-warning.active,button.list-group-item-warning.active:focus,button.list-group-item-warning.active:hover{color:#fff;background-color:#8a6d3b;border-color:#8a6d3b}.list-group-item-danger{color:#a94442;background-color:#f2dede}a.list-group-item-danger,button.list-group-item-danger{color:#a94442}a.list-group-item-danger .list-group-item-heading,button.list-group-item-danger .list-group-item-heading{color:inherit}a.list-group-item-danger:focus,a.list-group-item-danger:hover,button.list-group-item-danger:focus,button.list-group-item-danger:hover{color:#a94442;background-color:#ebcccc}a.list-group-item-danger.active,a.list-group-item-danger.active:focus,a.list-group-item-danger.active:hover,button.list-group-item-danger.active,button.list-group-item-danger.active:focus,button.list-group-item-danger.active:hover{color:#fff;background-color:#a94442;border-color:#a94442}.list-group-item-heading{margin-top:0;margin-bottom:5px}.list-group-item-text{margin-bottom:0;line-height:1.3}.panel{margin-bottom:20px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}.panel-body{padding:15px}.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-left-radius:3px;border-top-right-radius:3px}.panel-heading>.dropdown .dropdown-toggle{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px;color:inherit}.panel-title>.small,.panel-title>.small>a,.panel-title>a,.panel-title>small,.panel-title>small>a{color:inherit}.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #ddd;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.list-group,.panel>.panel-collapse>.list-group{margin-bottom:0}.panel>.list-group .list-group-item,.panel>.panel-collapse>.list-group .list-group-item{border-width:1px 0;border-radius:0}.panel>.list-group:first-child .list-group-item:first-child,.panel>.panel-collapse>.list-group:first-child .list-group-item:first-child{border-top:0;border-top-left-radius:3px;border-top-right-radius:3px}.panel>.list-group:last-child .list-group-item:last-child,.panel>.panel-collapse>.list-group:last-child .list-group-item:last-child{border-bottom:0;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.panel-heading+.panel-collapse>.list-group .list-group-item:first-child{border-top-left-radius:0;border-top-right-radius:0}.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}.list-group+.panel-footer{border-top-width:0}.panel>.panel-collapse>.table,.panel>.table,.panel>.table-responsive>.table{margin-bottom:0}.panel>.panel-collapse>.table caption,.panel>.table caption,.panel>.table-responsive>.table caption{padding-right:15px;padding-left:15px}.panel>.table-responsive:first-child>.table:first-child,.panel>.table:first-child{border-top-left-radius:3px;border-top-right-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child,.panel>.table:first-child>thead:first-child>tr:first-child{border-top-left-radius:3px;border-top-right-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table:first-child>thead:first-child>tr:first-child th:first-child{border-top-left-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table:first-child>thead:first-child>tr:first-child th:last-child{border-top-right-radius:3px}.panel>.table-responsive:last-child>.table:last-child,.panel>.table:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:first-child{border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:last-child{border-bottom-right-radius:3px}.panel>.panel-body+.table,.panel>.panel-body+.table-responsive,.panel>.table+.panel-body,.panel>.table-responsive+.panel-body{border-top:1px solid #ddd}.panel>.table>tbody:first-child>tr:first-child td,.panel>.table>tbody:first-child>tr:first-child th{border-top:0}.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.panel>.table-bordered>tbody>tr:first-child>td,.panel>.table-bordered>tbody>tr:first-child>th,.panel>.table-bordered>thead>tr:first-child>td,.panel>.table-bordered>thead>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>th,.panel>.table-responsive>.table-bordered>thead>tr:first-child>td,.panel>.table-responsive>.table-bordered>thead>tr:first-child>th{border-bottom:0}.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}.panel>.table-responsive{margin-bottom:0;border:0}.panel-group{margin-bottom:20px}.panel-group .panel{margin-bottom:0;border-radius:4px}.panel-group .panel+.panel{margin-top:5px}.panel-group .panel-heading{border-bottom:0}.panel-group .panel-heading+.panel-collapse>.list-group,.panel-group .panel-heading+.panel-collapse>.panel-body{border-top:1px solid #ddd}.panel-group .panel-footer{border-top:0}.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #ddd}.panel-default{border-color:#ddd}.panel-default>.panel-heading{color:#333;background-color:#f5f5f5;border-color:#ddd}.panel-default>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ddd}.panel-default>.panel-heading .badge{color:#f5f5f5;background-color:#333}.panel-default>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ddd}.panel-primary{border-color:#337ab7}.panel-primary>.panel-heading{color:#fff;background-color:#337ab7;border-color:#337ab7}.panel-primary>.panel-heading+.panel-collapse>.panel-body{border-top-color:#337ab7}.panel-primary>.panel-heading .badge{color:#337ab7;background-color:#fff}.panel-primary>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#337ab7}.panel-success{border-color:#d6e9c6}.panel-success>.panel-heading{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.panel-success>.panel-heading+.panel-collapse>.panel-body{border-top-color:#d6e9c6}.panel-success>.panel-heading .badge{color:#dff0d8;background-color:#3c763d}.panel-success>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#d6e9c6}.panel-info{border-color:#bce8f1}.panel-info>.panel-heading{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.panel-info>.panel-heading+.panel-collapse>.panel-body{border-top-color:#bce8f1}.panel-info>.panel-heading .badge{color:#d9edf7;background-color:#31708f}.panel-info>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#bce8f1}.panel-warning{border-color:#faebcc}.panel-warning>.panel-heading{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.panel-warning>.panel-heading+.panel-collapse>.panel-body{border-top-color:#faebcc}.panel-warning>.panel-heading .badge{color:#fcf8e3;background-color:#8a6d3b}.panel-warning>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#faebcc}.panel-danger{border-color:#ebccd1}.panel-danger>.panel-heading{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.panel-danger>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ebccd1}.panel-danger>.panel-heading .badge{color:#f2dede;background-color:#a94442}.panel-danger>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ebccd1}.embed-responsive{position:relative;display:block;height:0;padding:0;overflow:hidden}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-16by9{padding-bottom:56.25%}.embed-responsive-4by3{padding-bottom:75%}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.05);box-shadow:inset 0 1px 1px rgba(0,0,0,.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:21px;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;filter:alpha(opacity=20);opacity:.2}.close:focus,.close:hover{color:#000;text-decoration:none;cursor:pointer;filter:alpha(opacity=50);opacity:.5}button.close{-webkit-appearance:none;padding:0;cursor:pointer;background:0 0;border:0}.modal-open{overflow:hidden}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;display:none;overflow:hidden;-webkit-overflow-scrolling:touch;outline:0}.modal.fade .modal-dialog{-webkit-transition:-webkit-transform .3s ease-out;-o-transition:-o-transform .3s ease-out;transition:transform .3s ease-out;-webkit-transform:translate(0,-25%);-ms-transform:translate(0,-25%);-o-transform:translate(0,-25%);transform:translate(0,-25%)}.modal.in .modal-dialog{-webkit-transform:translate(0,0);-ms-transform:translate(0,0);-o-transform:translate(0,0);transform:translate(0,0)}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:10px}.modal-content{position:relative;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #999;border:1px solid rgba(0,0,0,.2);border-radius:6px;outline:0;-webkit-box-shadow:0 3px 9px rgba(0,0,0,.5);box-shadow:0 3px 9px rgba(0,0,0,.5)}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{filter:alpha(opacity=0);opacity:0}.modal-backdrop.in{filter:alpha(opacity=50);opacity:.5}.modal-header{padding:15px;border-bottom:1px solid #e5e5e5}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.42857143}.modal-body{position:relative;padding:15px}.modal-footer{padding:15px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer .btn+.btn{margin-bottom:0;margin-left:5px}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:768px){.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,.5);box-shadow:0 5px 15px rgba(0,0,0,.5)}.modal-sm{width:300px}}@media (min-width:992px){.modal-lg{width:900px}}.tooltip{position:absolute;z-index:1070;display:block;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:12px;font-style:normal;font-weight:400;line-height:1.42857143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;word-wrap:normal;white-space:normal;filter:alpha(opacity=0);opacity:0;line-break:auto}.tooltip.in{filter:alpha(opacity=90);opacity:.9}.tooltip.top{padding:5px 0;margin-top:-3px}.tooltip.right{padding:0 5px;margin-left:3px}.tooltip.bottom{padding:5px 0;margin-top:3px}.tooltip.left{padding:0 5px;margin-left:-3px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-left .tooltip-arrow{right:5px;bottom:0;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-right .tooltip-arrow{bottom:0;left:5px;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-left .tooltip-arrow{top:0;right:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-right .tooltip-arrow{top:0;left:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.popover{position:absolute;top:0;left:0;z-index:1060;display:none;max-width:276px;padding:1px;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;font-weight:400;line-height:1.42857143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;word-wrap:normal;white-space:normal;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.2);border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,.2);box-shadow:0 5px 10px rgba(0,0,0,.2);line-break:auto}.popover.top{margin-top:-10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-left:-10px}.popover-title{padding:8px 14px;margin:0;font-size:14px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.popover-content{padding:9px 14px}.popover>.arrow,.popover>.arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover>.arrow{border-width:11px}.popover>.arrow:after{content:\"\";border-width:10px}.popover.top>.arrow{bottom:-11px;left:50%;margin-left:-11px;border-top-color:#999;border-top-color:rgba(0,0,0,.25);border-bottom-width:0}.popover.top>.arrow:after{bottom:1px;margin-left:-10px;content:\" \";border-top-color:#fff;border-bottom-width:0}.popover.right>.arrow{top:50%;left:-11px;margin-top:-11px;border-right-color:#999;border-right-color:rgba(0,0,0,.25);border-left-width:0}.popover.right>.arrow:after{bottom:-10px;left:1px;content:\" \";border-right-color:#fff;border-left-width:0}.popover.bottom>.arrow{top:-11px;left:50%;margin-left:-11px;border-top-width:0;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,.25)}.popover.bottom>.arrow:after{top:1px;margin-left:-10px;content:\" \";border-top-width:0;border-bottom-color:#fff}.popover.left>.arrow{top:50%;right:-11px;margin-top:-11px;border-right-width:0;border-left-color:#999;border-left-color:rgba(0,0,0,.25)}.popover.left>.arrow:after{right:1px;bottom:-10px;content:\" \";border-right-width:0;border-left-color:#fff}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner>.item{position:relative;display:none;-webkit-transition:.6s ease-in-out left;-o-transition:.6s ease-in-out left;transition:.6s ease-in-out left}.carousel-inner>.item>a>img,.carousel-inner>.item>img{line-height:1}@media all and (transform-3d),(-webkit-transform-3d){.carousel-inner>.item{-webkit-transition:-webkit-transform .6s ease-in-out;-o-transition:-o-transform .6s ease-in-out;transition:transform .6s ease-in-out;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.carousel-inner>.item.active.right,.carousel-inner>.item.next{left:0;-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}.carousel-inner>.item.active.left,.carousel-inner>.item.prev{left:0;-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}.carousel-inner>.item.active,.carousel-inner>.item.next.left,.carousel-inner>.item.prev.right{left:0;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}.carousel-inner>.active{left:0}.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}.carousel-inner>.next{left:100%}.carousel-inner>.prev{left:-100%}.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}.carousel-inner>.active.left{left:-100%}.carousel-inner>.active.right{left:100%}.carousel-control{position:absolute;top:0;bottom:0;left:0;width:15%;font-size:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6);background-color:rgba(0,0,0,0);filter:alpha(opacity=50);opacity:.5}.carousel-control.left{background-image:-webkit-linear-gradient(left,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);background-image:-o-linear-gradient(left,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,.0001)));background-image:linear-gradient(to right,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);background-repeat:repeat-x}.carousel-control.right{right:0;left:auto;background-image:-webkit-linear-gradient(left,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);background-image:-o-linear-gradient(left,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.0001)),to(rgba(0,0,0,.5)));background-image:linear-gradient(to right,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);background-repeat:repeat-x}.carousel-control:focus,.carousel-control:hover{color:#fff;text-decoration:none;filter:alpha(opacity=90);outline:0;opacity:.9}.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{position:absolute;top:50%;z-index:5;display:inline-block;margin-top:-10px}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{left:50%;margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{right:50%;margin-right:-10px}.carousel-control .icon-next,.carousel-control .icon-prev{width:20px;height:20px;font-family:serif;line-height:1}.carousel-control .icon-prev:before{content:'\\2039'}.carousel-control .icon-next:before{content:'\\203a'}.carousel-indicators{position:absolute;bottom:10px;left:50%;z-index:15;width:60%;padding-left:0;margin-left:-30%;text-align:center;list-style:none}.carousel-indicators li{display:inline-block;width:10px;height:10px;margin:1px;text-indent:-999px;cursor:pointer;background-color:#000\\9;background-color:rgba(0,0,0,0);border:1px solid #fff;border-radius:10px}.carousel-indicators .active{width:12px;height:12px;margin:0;background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6)}.carousel-caption .btn{text-shadow:none}@media screen and (min-width:768px){.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{width:30px;height:30px;margin-top:-10px;font-size:30px}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{margin-right:-10px}.carousel-caption{right:20%;left:20%;padding-bottom:30px}.carousel-indicators{bottom:20px}}.btn-group-vertical>.btn-group:after,.btn-group-vertical>.btn-group:before,.btn-toolbar:after,.btn-toolbar:before,.clearfix:after,.clearfix:before,.container-fluid:after,.container-fluid:before,.container:after,.container:before,.dl-horizontal dd:after,.dl-horizontal dd:before,.form-horizontal .form-group:after,.form-horizontal .form-group:before,.modal-footer:after,.modal-footer:before,.modal-header:after,.modal-header:before,.nav:after,.nav:before,.navbar-collapse:after,.navbar-collapse:before,.navbar-header:after,.navbar-header:before,.navbar:after,.navbar:before,.pager:after,.pager:before,.panel-body:after,.panel-body:before,.row:after,.row:before{display:table;content:\" \"}.btn-group-vertical>.btn-group:after,.btn-toolbar:after,.clearfix:after,.container-fluid:after,.container:after,.dl-horizontal dd:after,.form-horizontal .form-group:after,.modal-footer:after,.modal-header:after,.nav:after,.navbar-collapse:after,.navbar-header:after,.navbar:after,.pager:after,.panel-body:after,.row:after{clear:both}.center-block{display:block;margin-right:auto;margin-left:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-lg,.visible-md,.visible-sm,.visible-xs{display:none!important}.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block{display:none!important}@media (max-width:767px){.visible-xs{display:block!important}table.visible-xs{display:table!important}tr.visible-xs{display:table-row!important}td.visible-xs,th.visible-xs{display:table-cell!important}}@media (max-width:767px){.visible-xs-block{display:block!important}}@media (max-width:767px){.visible-xs-inline{display:inline!important}}@media (max-width:767px){.visible-xs-inline-block{display:inline-block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm{display:block!important}table.visible-sm{display:table!important}tr.visible-sm{display:table-row!important}td.visible-sm,th.visible-sm{display:table-cell!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-block{display:block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline{display:inline!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline-block{display:inline-block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md{display:block!important}table.visible-md{display:table!important}tr.visible-md{display:table-row!important}td.visible-md,th.visible-md{display:table-cell!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-block{display:block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline{display:inline!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline-block{display:inline-block!important}}@media (min-width:1200px){.visible-lg{display:block!important}table.visible-lg{display:table!important}tr.visible-lg{display:table-row!important}td.visible-lg,th.visible-lg{display:table-cell!important}}@media (min-width:1200px){.visible-lg-block{display:block!important}}@media (min-width:1200px){.visible-lg-inline{display:inline!important}}@media (min-width:1200px){.visible-lg-inline-block{display:inline-block!important}}@media (max-width:767px){.hidden-xs{display:none!important}}@media (min-width:768px) and (max-width:991px){.hidden-sm{display:none!important}}@media (min-width:992px) and (max-width:1199px){.hidden-md{display:none!important}}@media (min-width:1200px){.hidden-lg{display:none!important}}.visible-print{display:none!important}@media print{.visible-print{display:block!important}table.visible-print{display:table!important}tr.visible-print{display:table-row!important}td.visible-print,th.visible-print{display:table-cell!important}}.visible-print-block{display:none!important}@media print{.visible-print-block{display:block!important}}.visible-print-inline{display:none!important}@media print{.visible-print-inline{display:inline!important}}.visible-print-inline-block{display:none!important}@media print{.visible-print-inline-block{display:inline-block!important}}@media print{.hidden-print{display:none!important}}\n/*# sourceMappingURL=bootstrap.min.css.map */"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "209.197.3.15",
        "startedDateTime": "2020-11-22T09:40:16.670Z",
        "time": 5.420000000412983,
        "timings": {
          "blocked": 2.991000000403932,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.41499999986431796,
          "receive": 2.0140000001447333,
          "_blocked_queueing": 2.947000000403932
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/",
          "lineNumber": 16
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "22147",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/elm.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Sun, 22 Nov 2020 09:27:22 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"cf12e-175ef4782a4\""
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"; grafana_session=864898f71c8f620156ca76259f147953"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "grafana_session",
              "value": "864898f71c8f620156ca76259f147953",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 775,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Last-Modified",
              "value": "Sun, 22 Nov 2020 09:27:22 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"cf12e-175ef4782a4\""
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:16 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 848174,
            "mimeType": "text/plain",
            "text": "(function(scope){\n'use strict';\n\nfunction F(arity, fun, wrapper) {\n  wrapper.a = arity;\n  wrapper.f = fun;\n  return wrapper;\n}\n\nfunction F2(fun) {\n  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })\n}\nfunction F3(fun) {\n  return F(3, fun, function(a) {\n    return function(b) { return function(c) { return fun(a, b, c); }; };\n  });\n}\nfunction F4(fun) {\n  return F(4, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return fun(a, b, c, d); }; }; };\n  });\n}\nfunction F5(fun) {\n  return F(5, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };\n  });\n}\nfunction F6(fun) {\n  return F(6, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return fun(a, b, c, d, e, f); }; }; }; }; };\n  });\n}\nfunction F7(fun) {\n  return F(7, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };\n  });\n}\nfunction F8(fun) {\n  return F(8, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return function(g) { return function(h) {\n    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };\n  });\n}\nfunction F9(fun) {\n  return F(9, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return function(g) { return function(h) { return function(i) {\n    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };\n  });\n}\n\nfunction A2(fun, a, b) {\n  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);\n}\nfunction A3(fun, a, b, c) {\n  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);\n}\nfunction A4(fun, a, b, c, d) {\n  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);\n}\nfunction A5(fun, a, b, c, d, e) {\n  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);\n}\nfunction A6(fun, a, b, c, d, e, f) {\n  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);\n}\nfunction A7(fun, a, b, c, d, e, f, g) {\n  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);\n}\nfunction A8(fun, a, b, c, d, e, f, g, h) {\n  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);\n}\nfunction A9(fun, a, b, c, d, e, f, g, h, i) {\n  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);\n}\n\nconsole.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.0/optimize for better performance and smaller assets.');\n\n\nvar _List_Nil_UNUSED = { $: 0 };\nvar _List_Nil = { $: '[]' };\n\nfunction _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }\nfunction _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }\n\n\nvar _List_cons = F2(_List_Cons);\n\nfunction _List_fromArray(arr)\n{\n\tvar out = _List_Nil;\n\tfor (var i = arr.length; i--; )\n\t{\n\t\tout = _List_Cons(arr[i], out);\n\t}\n\treturn out;\n}\n\nfunction _List_toArray(xs)\n{\n\tfor (var out = []; xs.b; xs = xs.b) // WHILE_CONS\n\t{\n\t\tout.push(xs.a);\n\t}\n\treturn out;\n}\n\nvar _List_map2 = F3(function(f, xs, ys)\n{\n\tfor (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A2(f, xs.a, ys.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_map3 = F4(function(f, xs, ys, zs)\n{\n\tfor (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A3(f, xs.a, ys.a, zs.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_map4 = F5(function(f, ws, xs, ys, zs)\n{\n\tfor (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A4(f, ws.a, xs.a, ys.a, zs.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_map5 = F6(function(f, vs, ws, xs, ys, zs)\n{\n\tfor (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_sortBy = F2(function(f, xs)\n{\n\treturn _List_fromArray(_List_toArray(xs).sort(function(a, b) {\n\t\treturn _Utils_cmp(f(a), f(b));\n\t}));\n});\n\nvar _List_sortWith = F2(function(f, xs)\n{\n\treturn _List_fromArray(_List_toArray(xs).sort(function(a, b) {\n\t\tvar ord = A2(f, a, b);\n\t\treturn ord === elm$core$Basics$EQ ? 0 : ord === elm$core$Basics$LT ? -1 : 1;\n\t}));\n});\n\n\n\n// EQUALITY\n\nfunction _Utils_eq(x, y)\n{\n\tfor (\n\t\tvar pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);\n\t\tisEqual && (pair = stack.pop());\n\t\tisEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)\n\t\t)\n\t{}\n\n\treturn isEqual;\n}\n\nfunction _Utils_eqHelp(x, y, depth, stack)\n{\n\tif (depth > 100)\n\t{\n\t\tstack.push(_Utils_Tuple2(x,y));\n\t\treturn true;\n\t}\n\n\tif (x === y)\n\t{\n\t\treturn true;\n\t}\n\n\tif (typeof x !== 'object' || x === null || y === null)\n\t{\n\t\ttypeof x === 'function' && _Debug_crash(5);\n\t\treturn false;\n\t}\n\n\t/**/\n\tif (x.$ === 'Set_elm_builtin')\n\t{\n\t\tx = elm$core$Set$toList(x);\n\t\ty = elm$core$Set$toList(y);\n\t}\n\tif (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')\n\t{\n\t\tx = elm$core$Dict$toList(x);\n\t\ty = elm$core$Dict$toList(y);\n\t}\n\t//*/\n\n\t/**_UNUSED/\n\tif (x.$ < 0)\n\t{\n\t\tx = elm$core$Dict$toList(x);\n\t\ty = elm$core$Dict$toList(y);\n\t}\n\t//*/\n\n\tfor (var key in x)\n\t{\n\t\tif (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nvar _Utils_equal = F2(_Utils_eq);\nvar _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });\n\n\n\n// COMPARISONS\n\n// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on\n// the particular integer values assigned to LT, EQ, and GT.\n\nfunction _Utils_cmp(x, y, ord)\n{\n\tif (typeof x !== 'object')\n\t{\n\t\treturn x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;\n\t}\n\n\t/**/\n\tif (x instanceof String)\n\t{\n\t\tvar a = x.valueOf();\n\t\tvar b = y.valueOf();\n\t\treturn a === b ? 0 : a < b ? -1 : 1;\n\t}\n\t//*/\n\n\t/**_UNUSED/\n\tif (typeof x.$ === 'undefined')\n\t//*/\n\t/**/\n\tif (x.$[0] === '#')\n\t//*/\n\t{\n\t\treturn (ord = _Utils_cmp(x.a, y.a))\n\t\t\t? ord\n\t\t\t: (ord = _Utils_cmp(x.b, y.b))\n\t\t\t\t? ord\n\t\t\t\t: _Utils_cmp(x.c, y.c);\n\t}\n\n\t// traverse conses until end of a list or a mismatch\n\tfor (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES\n\treturn ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);\n}\n\nvar _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });\nvar _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });\nvar _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });\nvar _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });\n\nvar _Utils_compare = F2(function(x, y)\n{\n\tvar n = _Utils_cmp(x, y);\n\treturn n < 0 ? elm$core$Basics$LT : n ? elm$core$Basics$GT : elm$core$Basics$EQ;\n});\n\n\n// COMMON VALUES\n\nvar _Utils_Tuple0_UNUSED = 0;\nvar _Utils_Tuple0 = { $: '#0' };\n\nfunction _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }\nfunction _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }\n\nfunction _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }\nfunction _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }\n\nfunction _Utils_chr_UNUSED(c) { return c; }\nfunction _Utils_chr(c) { return new String(c); }\n\n\n// RECORDS\n\nfunction _Utils_update(oldRecord, updatedFields)\n{\n\tvar newRecord = {};\n\n\tfor (var key in oldRecord)\n\t{\n\t\tnewRecord[key] = oldRecord[key];\n\t}\n\n\tfor (var key in updatedFields)\n\t{\n\t\tnewRecord[key] = updatedFields[key];\n\t}\n\n\treturn newRecord;\n}\n\n\n// APPEND\n\nvar _Utils_append = F2(_Utils_ap);\n\nfunction _Utils_ap(xs, ys)\n{\n\t// append Strings\n\tif (typeof xs === 'string')\n\t{\n\t\treturn xs + ys;\n\t}\n\n\t// append Lists\n\tif (!xs.b)\n\t{\n\t\treturn ys;\n\t}\n\tvar root = _List_Cons(xs.a, ys);\n\txs = xs.b\n\tfor (var curr = root; xs.b; xs = xs.b) // WHILE_CONS\n\t{\n\t\tcurr = curr.b = _List_Cons(xs.a, ys);\n\t}\n\treturn root;\n}\n\n\n\nvar _JsArray_empty = [];\n\nfunction _JsArray_singleton(value)\n{\n    return [value];\n}\n\nfunction _JsArray_length(array)\n{\n    return array.length;\n}\n\nvar _JsArray_initialize = F3(function(size, offset, func)\n{\n    var result = new Array(size);\n\n    for (var i = 0; i < size; i++)\n    {\n        result[i] = func(offset + i);\n    }\n\n    return result;\n});\n\nvar _JsArray_initializeFromList = F2(function (max, ls)\n{\n    var result = new Array(max);\n\n    for (var i = 0; i < max && ls.b; i++)\n    {\n        result[i] = ls.a;\n        ls = ls.b;\n    }\n\n    result.length = i;\n    return _Utils_Tuple2(result, ls);\n});\n\nvar _JsArray_unsafeGet = F2(function(index, array)\n{\n    return array[index];\n});\n\nvar _JsArray_unsafeSet = F3(function(index, value, array)\n{\n    var length = array.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = array[i];\n    }\n\n    result[index] = value;\n    return result;\n});\n\nvar _JsArray_push = F2(function(value, array)\n{\n    var length = array.length;\n    var result = new Array(length + 1);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = array[i];\n    }\n\n    result[length] = value;\n    return result;\n});\n\nvar _JsArray_foldl = F3(function(func, acc, array)\n{\n    var length = array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n        acc = A2(func, array[i], acc);\n    }\n\n    return acc;\n});\n\nvar _JsArray_foldr = F3(function(func, acc, array)\n{\n    for (var i = array.length - 1; i >= 0; i--)\n    {\n        acc = A2(func, array[i], acc);\n    }\n\n    return acc;\n});\n\nvar _JsArray_map = F2(function(func, array)\n{\n    var length = array.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = func(array[i]);\n    }\n\n    return result;\n});\n\nvar _JsArray_indexedMap = F3(function(func, offset, array)\n{\n    var length = array.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = A2(func, offset + i, array[i]);\n    }\n\n    return result;\n});\n\nvar _JsArray_slice = F3(function(from, to, array)\n{\n    return array.slice(from, to);\n});\n\nvar _JsArray_appendN = F3(function(n, dest, source)\n{\n    var destLen = dest.length;\n    var itemsToCopy = n - destLen;\n\n    if (itemsToCopy > source.length)\n    {\n        itemsToCopy = source.length;\n    }\n\n    var size = destLen + itemsToCopy;\n    var result = new Array(size);\n\n    for (var i = 0; i < destLen; i++)\n    {\n        result[i] = dest[i];\n    }\n\n    for (var i = 0; i < itemsToCopy; i++)\n    {\n        result[i + destLen] = source[i];\n    }\n\n    return result;\n});\n\n\n\n// LOG\n\nvar _Debug_log_UNUSED = F2(function(tag, value)\n{\n\treturn value;\n});\n\nvar _Debug_log = F2(function(tag, value)\n{\n\tconsole.log(tag + ': ' + _Debug_toString(value));\n\treturn value;\n});\n\n\n// TODOS\n\nfunction _Debug_todo(moduleName, region)\n{\n\treturn function(message) {\n\t\t_Debug_crash(8, moduleName, region, message);\n\t};\n}\n\nfunction _Debug_todoCase(moduleName, region, value)\n{\n\treturn function(message) {\n\t\t_Debug_crash(9, moduleName, region, value, message);\n\t};\n}\n\n\n// TO STRING\n\nfunction _Debug_toString_UNUSED(value)\n{\n\treturn '<internals>';\n}\n\nfunction _Debug_toString(value)\n{\n\treturn _Debug_toAnsiString(false, value);\n}\n\nfunction _Debug_toAnsiString(ansi, value)\n{\n\tif (typeof value === 'function')\n\t{\n\t\treturn _Debug_internalColor(ansi, '<function>');\n\t}\n\n\tif (typeof value === 'boolean')\n\t{\n\t\treturn _Debug_ctorColor(ansi, value ? 'True' : 'False');\n\t}\n\n\tif (typeof value === 'number')\n\t{\n\t\treturn _Debug_numberColor(ansi, value + '');\n\t}\n\n\tif (value instanceof String)\n\t{\n\t\treturn _Debug_charColor(ansi, \"'\" + _Debug_addSlashes(value, true) + \"'\");\n\t}\n\n\tif (typeof value === 'string')\n\t{\n\t\treturn _Debug_stringColor(ansi, '\"' + _Debug_addSlashes(value, false) + '\"');\n\t}\n\n\tif (typeof value === 'object' && '$' in value)\n\t{\n\t\tvar tag = value.$;\n\n\t\tif (typeof tag === 'number')\n\t\t{\n\t\t\treturn _Debug_internalColor(ansi, '<internals>');\n\t\t}\n\n\t\tif (tag[0] === '#')\n\t\t{\n\t\t\tvar output = [];\n\t\t\tfor (var k in value)\n\t\t\t{\n\t\t\t\tif (k === '$') continue;\n\t\t\t\toutput.push(_Debug_toAnsiString(ansi, value[k]));\n\t\t\t}\n\t\t\treturn '(' + output.join(',') + ')';\n\t\t}\n\n\t\tif (tag === 'Set_elm_builtin')\n\t\t{\n\t\t\treturn _Debug_ctorColor(ansi, 'Set')\n\t\t\t\t+ _Debug_fadeColor(ansi, '.fromList') + ' '\n\t\t\t\t+ _Debug_toAnsiString(ansi, elm$core$Set$toList(value));\n\t\t}\n\n\t\tif (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')\n\t\t{\n\t\t\treturn _Debug_ctorColor(ansi, 'Dict')\n\t\t\t\t+ _Debug_fadeColor(ansi, '.fromList') + ' '\n\t\t\t\t+ _Debug_toAnsiString(ansi, elm$core$Dict$toList(value));\n\t\t}\n\n\t\tif (tag === 'Array_elm_builtin')\n\t\t{\n\t\t\treturn _Debug_ctorColor(ansi, 'Array')\n\t\t\t\t+ _Debug_fadeColor(ansi, '.fromList') + ' '\n\t\t\t\t+ _Debug_toAnsiString(ansi, elm$core$Array$toList(value));\n\t\t}\n\n\t\tif (tag === '::' || tag === '[]')\n\t\t{\n\t\t\tvar output = '[';\n\n\t\t\tvalue.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)\n\n\t\t\tfor (; value.b; value = value.b) // WHILE_CONS\n\t\t\t{\n\t\t\t\toutput += ',' + _Debug_toAnsiString(ansi, value.a);\n\t\t\t}\n\t\t\treturn output + ']';\n\t\t}\n\n\t\tvar output = '';\n\t\tfor (var i in value)\n\t\t{\n\t\t\tif (i === '$') continue;\n\t\t\tvar str = _Debug_toAnsiString(ansi, value[i]);\n\t\t\tvar c0 = str[0];\n\t\t\tvar parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '\"' || str.indexOf(' ') < 0;\n\t\t\toutput += ' ' + (parenless ? str : '(' + str + ')');\n\t\t}\n\t\treturn _Debug_ctorColor(ansi, tag) + output;\n\t}\n\n\tif (typeof DataView === 'function' && value instanceof DataView)\n\t{\n\t\treturn _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');\n\t}\n\n\tif (typeof File === 'function' && value instanceof File)\n\t{\n\t\treturn _Debug_internalColor(ansi, '<' + value.name + '>');\n\t}\n\n\tif (typeof value === 'object')\n\t{\n\t\tvar output = [];\n\t\tfor (var key in value)\n\t\t{\n\t\t\tvar field = key[0] === '_' ? key.slice(1) : key;\n\t\t\toutput.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));\n\t\t}\n\t\tif (output.length === 0)\n\t\t{\n\t\t\treturn '{}';\n\t\t}\n\t\treturn '{ ' + output.join(', ') + ' }';\n\t}\n\n\treturn _Debug_internalColor(ansi, '<internals>');\n}\n\nfunction _Debug_addSlashes(str, isChar)\n{\n\tvar s = str\n\t\t.replace(/\\\\/g, '\\\\\\\\')\n\t\t.replace(/\\n/g, '\\\\n')\n\t\t.replace(/\\t/g, '\\\\t')\n\t\t.replace(/\\r/g, '\\\\r')\n\t\t.replace(/\\v/g, '\\\\v')\n\t\t.replace(/\\0/g, '\\\\0');\n\n\tif (isChar)\n\t{\n\t\treturn s.replace(/\\'/g, '\\\\\\'');\n\t}\n\telse\n\t{\n\t\treturn s.replace(/\\\"/g, '\\\\\"');\n\t}\n}\n\nfunction _Debug_ctorColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[96m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_numberColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[95m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_stringColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[93m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_charColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[92m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_fadeColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[37m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_internalColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[94m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_toHexDigit(n)\n{\n\treturn String.fromCharCode(n < 10 ? 48 + n : 55 + n);\n}\n\n\n// CRASH\n\n\nfunction _Debug_crash_UNUSED(identifier)\n{\n\tthrow new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');\n}\n\n\nfunction _Debug_crash(identifier, fact1, fact2, fact3, fact4)\n{\n\tswitch(identifier)\n\t{\n\t\tcase 0:\n\t\t\tthrow new Error('What node should I take over? In JavaScript I need something like:\\n\\n    Elm.Main.init({\\n        node: document.getElementById(\"elm-node\")\\n    })\\n\\nYou need to do this with any Browser.sandbox or Browser.element program.');\n\n\t\tcase 1:\n\t\t\tthrow new Error('Browser.application programs cannot handle URLs like this:\\n\\n    ' + document.location.href + '\\n\\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');\n\n\t\tcase 2:\n\t\t\tvar jsonErrorString = fact1;\n\t\t\tthrow new Error('Problem with the flags given to your Elm program on initialization.\\n\\n' + jsonErrorString);\n\n\t\tcase 3:\n\t\t\tvar portName = fact1;\n\t\t\tthrow new Error('There can only be one port named `' + portName + '`, but your program has multiple.');\n\n\t\tcase 4:\n\t\t\tvar portName = fact1;\n\t\t\tvar problem = fact2;\n\t\t\tthrow new Error('Trying to send an unexpected type of value through port `' + portName + '`:\\n' + problem);\n\n\t\tcase 5:\n\t\t\tthrow new Error('Trying to use `(==)` on functions.\\nThere is no way to know if functions are \"the same\" in the Elm sense.\\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');\n\n\t\tcase 6:\n\t\t\tvar moduleName = fact1;\n\t\t\tthrow new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');\n\n\t\tcase 8:\n\t\t\tvar moduleName = fact1;\n\t\t\tvar region = fact2;\n\t\t\tvar message = fact3;\n\t\t\tthrow new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\\n\\n' + message);\n\n\t\tcase 9:\n\t\t\tvar moduleName = fact1;\n\t\t\tvar region = fact2;\n\t\t\tvar value = fact3;\n\t\t\tvar message = fact4;\n\t\t\tthrow new Error(\n\t\t\t\t'TODO in module `' + moduleName + '` from the `case` expression '\n\t\t\t\t+ _Debug_regionToString(region) + '\\n\\nIt received the following value:\\n\\n    '\n\t\t\t\t+ _Debug_toString(value).replace('\\n', '\\n    ')\n\t\t\t\t+ '\\n\\nBut the branch that handles it says:\\n\\n    ' + message.replace('\\n', '\\n    ')\n\t\t\t);\n\n\t\tcase 10:\n\t\t\tthrow new Error('Bug in https://github.com/elm/virtual-dom/issues');\n\n\t\tcase 11:\n\t\t\tthrow new Error('Cannot perform mod 0. Division by zero error.');\n\t}\n}\n\nfunction _Debug_regionToString(region)\n{\n\tif (region.start.line === region.end.line)\n\t{\n\t\treturn 'on line ' + region.start.line;\n\t}\n\treturn 'on lines ' + region.start.line + ' through ' + region.end.line;\n}\n\n\n\n// MATH\n\nvar _Basics_add = F2(function(a, b) { return a + b; });\nvar _Basics_sub = F2(function(a, b) { return a - b; });\nvar _Basics_mul = F2(function(a, b) { return a * b; });\nvar _Basics_fdiv = F2(function(a, b) { return a / b; });\nvar _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });\nvar _Basics_pow = F2(Math.pow);\n\nvar _Basics_remainderBy = F2(function(b, a) { return a % b; });\n\n// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf\nvar _Basics_modBy = F2(function(modulus, x)\n{\n\tvar answer = x % modulus;\n\treturn modulus === 0\n\t\t? _Debug_crash(11)\n\t\t:\n\t((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))\n\t\t? answer + modulus\n\t\t: answer;\n});\n\n\n// TRIGONOMETRY\n\nvar _Basics_pi = Math.PI;\nvar _Basics_e = Math.E;\nvar _Basics_cos = Math.cos;\nvar _Basics_sin = Math.sin;\nvar _Basics_tan = Math.tan;\nvar _Basics_acos = Math.acos;\nvar _Basics_asin = Math.asin;\nvar _Basics_atan = Math.atan;\nvar _Basics_atan2 = F2(Math.atan2);\n\n\n// MORE MATH\n\nfunction _Basics_toFloat(x) { return x; }\nfunction _Basics_truncate(n) { return n | 0; }\nfunction _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }\n\nvar _Basics_ceiling = Math.ceil;\nvar _Basics_floor = Math.floor;\nvar _Basics_round = Math.round;\nvar _Basics_sqrt = Math.sqrt;\nvar _Basics_log = Math.log;\nvar _Basics_isNaN = isNaN;\n\n\n// BOOLEANS\n\nfunction _Basics_not(bool) { return !bool; }\nvar _Basics_and = F2(function(a, b) { return a && b; });\nvar _Basics_or  = F2(function(a, b) { return a || b; });\nvar _Basics_xor = F2(function(a, b) { return a !== b; });\n\n\n\nfunction _Char_toCode(char)\n{\n\tvar code = char.charCodeAt(0);\n\tif (0xD800 <= code && code <= 0xDBFF)\n\t{\n\t\treturn (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000\n\t}\n\treturn code;\n}\n\nfunction _Char_fromCode(code)\n{\n\treturn _Utils_chr(\n\t\t(code < 0 || 0x10FFFF < code)\n\t\t\t? '\\uFFFD'\n\t\t\t:\n\t\t(code <= 0xFFFF)\n\t\t\t? String.fromCharCode(code)\n\t\t\t:\n\t\t(code -= 0x10000,\n\t\t\tString.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)\n\t\t)\n\t);\n}\n\nfunction _Char_toUpper(char)\n{\n\treturn _Utils_chr(char.toUpperCase());\n}\n\nfunction _Char_toLower(char)\n{\n\treturn _Utils_chr(char.toLowerCase());\n}\n\nfunction _Char_toLocaleUpper(char)\n{\n\treturn _Utils_chr(char.toLocaleUpperCase());\n}\n\nfunction _Char_toLocaleLower(char)\n{\n\treturn _Utils_chr(char.toLocaleLowerCase());\n}\n\n\n\nvar _String_cons = F2(function(chr, str)\n{\n\treturn chr + str;\n});\n\nfunction _String_uncons(string)\n{\n\tvar word = string.charCodeAt(0);\n\treturn word\n\t\t? elm$core$Maybe$Just(\n\t\t\t0xD800 <= word && word <= 0xDBFF\n\t\t\t\t? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))\n\t\t\t\t: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))\n\t\t)\n\t\t: elm$core$Maybe$Nothing;\n}\n\nvar _String_append = F2(function(a, b)\n{\n\treturn a + b;\n});\n\nfunction _String_length(str)\n{\n\treturn str.length;\n}\n\nvar _String_map = F2(function(func, string)\n{\n\tvar len = string.length;\n\tvar array = new Array(len);\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tarray[i] = func(_Utils_chr(string[i] + string[i+1]));\n\t\t\ti += 2;\n\t\t\tcontinue;\n\t\t}\n\t\tarray[i] = func(_Utils_chr(string[i]));\n\t\ti++;\n\t}\n\treturn array.join('');\n});\n\nvar _String_filter = F2(function(isGood, str)\n{\n\tvar arr = [];\n\tvar len = str.length;\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar char = str[i];\n\t\tvar word = str.charCodeAt(i);\n\t\ti++;\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tchar += str[i];\n\t\t\ti++;\n\t\t}\n\n\t\tif (isGood(_Utils_chr(char)))\n\t\t{\n\t\t\tarr.push(char);\n\t\t}\n\t}\n\treturn arr.join('');\n});\n\nfunction _String_reverse(str)\n{\n\tvar len = str.length;\n\tvar arr = new Array(len);\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar word = str.charCodeAt(i);\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tarr[len - i] = str[i + 1];\n\t\t\ti++;\n\t\t\tarr[len - i] = str[i - 1];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[len - i] = str[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn arr.join('');\n}\n\nvar _String_foldl = F3(function(func, state, string)\n{\n\tvar len = string.length;\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\ti++;\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tchar += string[i];\n\t\t\ti++;\n\t\t}\n\t\tstate = A2(func, _Utils_chr(char), state);\n\t}\n\treturn state;\n});\n\nvar _String_foldr = F3(function(func, state, string)\n{\n\tvar i = string.length;\n\twhile (i--)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xDC00 <= word && word <= 0xDFFF)\n\t\t{\n\t\t\ti--;\n\t\t\tchar = string[i] + char;\n\t\t}\n\t\tstate = A2(func, _Utils_chr(char), state);\n\t}\n\treturn state;\n});\n\nvar _String_split = F2(function(sep, str)\n{\n\treturn str.split(sep);\n});\n\nvar _String_join = F2(function(sep, strs)\n{\n\treturn strs.join(sep);\n});\n\nvar _String_slice = F3(function(start, end, str) {\n\treturn str.slice(start, end);\n});\n\nfunction _String_trim(str)\n{\n\treturn str.trim();\n}\n\nfunction _String_trimLeft(str)\n{\n\treturn str.replace(/^\\s+/, '');\n}\n\nfunction _String_trimRight(str)\n{\n\treturn str.replace(/\\s+$/, '');\n}\n\nfunction _String_words(str)\n{\n\treturn _List_fromArray(str.trim().split(/\\s+/g));\n}\n\nfunction _String_lines(str)\n{\n\treturn _List_fromArray(str.split(/\\r\\n|\\r|\\n/g));\n}\n\nfunction _String_toUpper(str)\n{\n\treturn str.toUpperCase();\n}\n\nfunction _String_toLower(str)\n{\n\treturn str.toLowerCase();\n}\n\nvar _String_any = F2(function(isGood, string)\n{\n\tvar i = string.length;\n\twhile (i--)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xDC00 <= word && word <= 0xDFFF)\n\t\t{\n\t\t\ti--;\n\t\t\tchar = string[i] + char;\n\t\t}\n\t\tif (isGood(_Utils_chr(char)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\nvar _String_all = F2(function(isGood, string)\n{\n\tvar i = string.length;\n\twhile (i--)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xDC00 <= word && word <= 0xDFFF)\n\t\t{\n\t\t\ti--;\n\t\t\tchar = string[i] + char;\n\t\t}\n\t\tif (!isGood(_Utils_chr(char)))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n});\n\nvar _String_contains = F2(function(sub, str)\n{\n\treturn str.indexOf(sub) > -1;\n});\n\nvar _String_startsWith = F2(function(sub, str)\n{\n\treturn str.indexOf(sub) === 0;\n});\n\nvar _String_endsWith = F2(function(sub, str)\n{\n\treturn str.length >= sub.length &&\n\t\tstr.lastIndexOf(sub) === str.length - sub.length;\n});\n\nvar _String_indexes = F2(function(sub, str)\n{\n\tvar subLen = sub.length;\n\n\tif (subLen < 1)\n\t{\n\t\treturn _List_Nil;\n\t}\n\n\tvar i = 0;\n\tvar is = [];\n\n\twhile ((i = str.indexOf(sub, i)) > -1)\n\t{\n\t\tis.push(i);\n\t\ti = i + subLen;\n\t}\n\n\treturn _List_fromArray(is);\n});\n\n\n// TO STRING\n\nfunction _String_fromNumber(number)\n{\n\treturn number + '';\n}\n\n\n// INT CONVERSIONS\n\nfunction _String_toInt(str)\n{\n\tvar total = 0;\n\tvar code0 = str.charCodeAt(0);\n\tvar start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;\n\n\tfor (var i = start; i < str.length; ++i)\n\t{\n\t\tvar code = str.charCodeAt(i);\n\t\tif (code < 0x30 || 0x39 < code)\n\t\t{\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t}\n\t\ttotal = 10 * total + code - 0x30;\n\t}\n\n\treturn i == start\n\t\t? elm$core$Maybe$Nothing\n\t\t: elm$core$Maybe$Just(code0 == 0x2D ? -total : total);\n}\n\n\n// FLOAT CONVERSIONS\n\nfunction _String_toFloat(s)\n{\n\t// check if it is a hex, octal, or binary number\n\tif (s.length === 0 || /[\\sxbo]/.test(s))\n\t{\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n\tvar n = +s;\n\t// faster isNaN check\n\treturn n === n ? elm$core$Maybe$Just(n) : elm$core$Maybe$Nothing;\n}\n\nfunction _String_fromList(chars)\n{\n\treturn _List_toArray(chars).join('');\n}\n\n\n\n\n/**/\nfunction _Json_errorToString(error)\n{\n\treturn elm$json$Json$Decode$errorToString(error);\n}\n//*/\n\n\n// CORE DECODERS\n\nfunction _Json_succeed(msg)\n{\n\treturn {\n\t\t$: 0,\n\t\ta: msg\n\t};\n}\n\nfunction _Json_fail(msg)\n{\n\treturn {\n\t\t$: 1,\n\t\ta: msg\n\t};\n}\n\nfunction _Json_decodePrim(decoder)\n{\n\treturn { $: 2, b: decoder };\n}\n\nvar _Json_decodeInt = _Json_decodePrim(function(value) {\n\treturn (typeof value !== 'number')\n\t\t? _Json_expecting('an INT', value)\n\t\t:\n\t(-2147483647 < value && value < 2147483647 && (value | 0) === value)\n\t\t? elm$core$Result$Ok(value)\n\t\t:\n\t(isFinite(value) && !(value % 1))\n\t\t? elm$core$Result$Ok(value)\n\t\t: _Json_expecting('an INT', value);\n});\n\nvar _Json_decodeBool = _Json_decodePrim(function(value) {\n\treturn (typeof value === 'boolean')\n\t\t? elm$core$Result$Ok(value)\n\t\t: _Json_expecting('a BOOL', value);\n});\n\nvar _Json_decodeFloat = _Json_decodePrim(function(value) {\n\treturn (typeof value === 'number')\n\t\t? elm$core$Result$Ok(value)\n\t\t: _Json_expecting('a FLOAT', value);\n});\n\nvar _Json_decodeValue = _Json_decodePrim(function(value) {\n\treturn elm$core$Result$Ok(_Json_wrap(value));\n});\n\nvar _Json_decodeString = _Json_decodePrim(function(value) {\n\treturn (typeof value === 'string')\n\t\t? elm$core$Result$Ok(value)\n\t\t: (value instanceof String)\n\t\t\t? elm$core$Result$Ok(value + '')\n\t\t\t: _Json_expecting('a STRING', value);\n});\n\nfunction _Json_decodeList(decoder) { return { $: 3, b: decoder }; }\nfunction _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }\n\nfunction _Json_decodeNull(value) { return { $: 5, c: value }; }\n\nvar _Json_decodeField = F2(function(field, decoder)\n{\n\treturn {\n\t\t$: 6,\n\t\td: field,\n\t\tb: decoder\n\t};\n});\n\nvar _Json_decodeIndex = F2(function(index, decoder)\n{\n\treturn {\n\t\t$: 7,\n\t\te: index,\n\t\tb: decoder\n\t};\n});\n\nfunction _Json_decodeKeyValuePairs(decoder)\n{\n\treturn {\n\t\t$: 8,\n\t\tb: decoder\n\t};\n}\n\nfunction _Json_mapMany(f, decoders)\n{\n\treturn {\n\t\t$: 9,\n\t\tf: f,\n\t\tg: decoders\n\t};\n}\n\nvar _Json_andThen = F2(function(callback, decoder)\n{\n\treturn {\n\t\t$: 10,\n\t\tb: decoder,\n\t\th: callback\n\t};\n});\n\nfunction _Json_oneOf(decoders)\n{\n\treturn {\n\t\t$: 11,\n\t\tg: decoders\n\t};\n}\n\n\n// DECODING OBJECTS\n\nvar _Json_map1 = F2(function(f, d1)\n{\n\treturn _Json_mapMany(f, [d1]);\n});\n\nvar _Json_map2 = F3(function(f, d1, d2)\n{\n\treturn _Json_mapMany(f, [d1, d2]);\n});\n\nvar _Json_map3 = F4(function(f, d1, d2, d3)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3]);\n});\n\nvar _Json_map4 = F5(function(f, d1, d2, d3, d4)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4]);\n});\n\nvar _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5]);\n});\n\nvar _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);\n});\n\nvar _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);\n});\n\nvar _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);\n});\n\n\n// DECODE\n\nvar _Json_runOnString = F2(function(decoder, string)\n{\n\ttry\n\t{\n\t\tvar value = JSON.parse(string);\n\t\treturn _Json_runHelp(decoder, value);\n\t}\n\tcatch (e)\n\t{\n\t\treturn elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));\n\t}\n});\n\nvar _Json_run = F2(function(decoder, value)\n{\n\treturn _Json_runHelp(decoder, _Json_unwrap(value));\n});\n\nfunction _Json_runHelp(decoder, value)\n{\n\tswitch (decoder.$)\n\t{\n\t\tcase 2:\n\t\t\treturn decoder.b(value);\n\n\t\tcase 5:\n\t\t\treturn (value === null)\n\t\t\t\t? elm$core$Result$Ok(decoder.c)\n\t\t\t\t: _Json_expecting('null', value);\n\n\t\tcase 3:\n\t\t\tif (!_Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('a LIST', value);\n\t\t\t}\n\t\t\treturn _Json_runArrayDecoder(decoder.b, value, _List_fromArray);\n\n\t\tcase 4:\n\t\t\tif (!_Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an ARRAY', value);\n\t\t\t}\n\t\t\treturn _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);\n\n\t\tcase 6:\n\t\t\tvar field = decoder.d;\n\t\t\tif (typeof value !== 'object' || value === null || !(field in value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an OBJECT with a field named `' + field + '`', value);\n\t\t\t}\n\t\t\tvar result = _Json_runHelp(decoder.b, value[field]);\n\t\t\treturn (elm$core$Result$isOk(result)) ? result : elm$core$Result$Err(A2(elm$json$Json$Decode$Field, field, result.a));\n\n\t\tcase 7:\n\t\t\tvar index = decoder.e;\n\t\t\tif (!_Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an ARRAY', value);\n\t\t\t}\n\t\t\tif (index >= value.length)\n\t\t\t{\n\t\t\t\treturn _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);\n\t\t\t}\n\t\t\tvar result = _Json_runHelp(decoder.b, value[index]);\n\t\t\treturn (elm$core$Result$isOk(result)) ? result : elm$core$Result$Err(A2(elm$json$Json$Decode$Index, index, result.a));\n\n\t\tcase 8:\n\t\t\tif (typeof value !== 'object' || value === null || _Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an OBJECT', value);\n\t\t\t}\n\n\t\t\tvar keyValuePairs = _List_Nil;\n\t\t\t// TODO test perf of Object.keys and switch when support is good enough\n\t\t\tfor (var key in value)\n\t\t\t{\n\t\t\t\tif (value.hasOwnProperty(key))\n\t\t\t\t{\n\t\t\t\t\tvar result = _Json_runHelp(decoder.b, value[key]);\n\t\t\t\t\tif (!elm$core$Result$isOk(result))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn elm$core$Result$Err(A2(elm$json$Json$Decode$Field, key, result.a));\n\t\t\t\t\t}\n\t\t\t\t\tkeyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn elm$core$Result$Ok(elm$core$List$reverse(keyValuePairs));\n\n\t\tcase 9:\n\t\t\tvar answer = decoder.f;\n\t\t\tvar decoders = decoder.g;\n\t\t\tfor (var i = 0; i < decoders.length; i++)\n\t\t\t{\n\t\t\t\tvar result = _Json_runHelp(decoders[i], value);\n\t\t\t\tif (!elm$core$Result$isOk(result))\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tanswer = answer(result.a);\n\t\t\t}\n\t\t\treturn elm$core$Result$Ok(answer);\n\n\t\tcase 10:\n\t\t\tvar result = _Json_runHelp(decoder.b, value);\n\t\t\treturn (!elm$core$Result$isOk(result))\n\t\t\t\t? result\n\t\t\t\t: _Json_runHelp(decoder.h(result.a), value);\n\n\t\tcase 11:\n\t\t\tvar errors = _List_Nil;\n\t\t\tfor (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS\n\t\t\t{\n\t\t\t\tvar result = _Json_runHelp(temp.a, value);\n\t\t\t\tif (elm$core$Result$isOk(result))\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\terrors = _List_Cons(result.a, errors);\n\t\t\t}\n\t\t\treturn elm$core$Result$Err(elm$json$Json$Decode$OneOf(elm$core$List$reverse(errors)));\n\n\t\tcase 1:\n\t\t\treturn elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));\n\n\t\tcase 0:\n\t\t\treturn elm$core$Result$Ok(decoder.a);\n\t}\n}\n\nfunction _Json_runArrayDecoder(decoder, value, toElmValue)\n{\n\tvar len = value.length;\n\tvar array = new Array(len);\n\tfor (var i = 0; i < len; i++)\n\t{\n\t\tvar result = _Json_runHelp(decoder, value[i]);\n\t\tif (!elm$core$Result$isOk(result))\n\t\t{\n\t\t\treturn elm$core$Result$Err(A2(elm$json$Json$Decode$Index, i, result.a));\n\t\t}\n\t\tarray[i] = result.a;\n\t}\n\treturn elm$core$Result$Ok(toElmValue(array));\n}\n\nfunction _Json_isArray(value)\n{\n\treturn Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);\n}\n\nfunction _Json_toElmArray(array)\n{\n\treturn A2(elm$core$Array$initialize, array.length, function(i) { return array[i]; });\n}\n\nfunction _Json_expecting(type, value)\n{\n\treturn elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));\n}\n\n\n// EQUALITY\n\nfunction _Json_equality(x, y)\n{\n\tif (x === y)\n\t{\n\t\treturn true;\n\t}\n\n\tif (x.$ !== y.$)\n\t{\n\t\treturn false;\n\t}\n\n\tswitch (x.$)\n\t{\n\t\tcase 0:\n\t\tcase 1:\n\t\t\treturn x.a === y.a;\n\n\t\tcase 2:\n\t\t\treturn x.b === y.b;\n\n\t\tcase 5:\n\t\t\treturn x.c === y.c;\n\n\t\tcase 3:\n\t\tcase 4:\n\t\tcase 8:\n\t\t\treturn _Json_equality(x.b, y.b);\n\n\t\tcase 6:\n\t\t\treturn x.d === y.d && _Json_equality(x.b, y.b);\n\n\t\tcase 7:\n\t\t\treturn x.e === y.e && _Json_equality(x.b, y.b);\n\n\t\tcase 9:\n\t\t\treturn x.f === y.f && _Json_listEquality(x.g, y.g);\n\n\t\tcase 10:\n\t\t\treturn x.h === y.h && _Json_equality(x.b, y.b);\n\n\t\tcase 11:\n\t\t\treturn _Json_listEquality(x.g, y.g);\n\t}\n}\n\nfunction _Json_listEquality(aDecoders, bDecoders)\n{\n\tvar len = aDecoders.length;\n\tif (len !== bDecoders.length)\n\t{\n\t\treturn false;\n\t}\n\tfor (var i = 0; i < len; i++)\n\t{\n\t\tif (!_Json_equality(aDecoders[i], bDecoders[i]))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// ENCODE\n\nvar _Json_encode = F2(function(indentLevel, value)\n{\n\treturn JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';\n});\n\nfunction _Json_wrap(value) { return { $: 0, a: value }; }\nfunction _Json_unwrap(value) { return value.a; }\n\nfunction _Json_wrap_UNUSED(value) { return value; }\nfunction _Json_unwrap_UNUSED(value) { return value; }\n\nfunction _Json_emptyArray() { return []; }\nfunction _Json_emptyObject() { return {}; }\n\nvar _Json_addField = F3(function(key, value, object)\n{\n\tobject[key] = _Json_unwrap(value);\n\treturn object;\n});\n\nfunction _Json_addEntry(func)\n{\n\treturn F2(function(entry, array)\n\t{\n\t\tarray.push(_Json_unwrap(func(entry)));\n\t\treturn array;\n\t});\n}\n\nvar _Json_encodeNull = _Json_wrap(null);\n\n\n\n// TASKS\n\nfunction _Scheduler_succeed(value)\n{\n\treturn {\n\t\t$: 0,\n\t\ta: value\n\t};\n}\n\nfunction _Scheduler_fail(error)\n{\n\treturn {\n\t\t$: 1,\n\t\ta: error\n\t};\n}\n\nfunction _Scheduler_binding(callback)\n{\n\treturn {\n\t\t$: 2,\n\t\tb: callback,\n\t\tc: null\n\t};\n}\n\nvar _Scheduler_andThen = F2(function(callback, task)\n{\n\treturn {\n\t\t$: 3,\n\t\tb: callback,\n\t\td: task\n\t};\n});\n\nvar _Scheduler_onError = F2(function(callback, task)\n{\n\treturn {\n\t\t$: 4,\n\t\tb: callback,\n\t\td: task\n\t};\n});\n\nfunction _Scheduler_receive(callback)\n{\n\treturn {\n\t\t$: 5,\n\t\tb: callback\n\t};\n}\n\n\n// PROCESSES\n\nvar _Scheduler_guid = 0;\n\nfunction _Scheduler_rawSpawn(task)\n{\n\tvar proc = {\n\t\t$: 0,\n\t\te: _Scheduler_guid++,\n\t\tf: task,\n\t\tg: null,\n\t\th: []\n\t};\n\n\t_Scheduler_enqueue(proc);\n\n\treturn proc;\n}\n\nfunction _Scheduler_spawn(task)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\tcallback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));\n\t});\n}\n\nfunction _Scheduler_rawSend(proc, msg)\n{\n\tproc.h.push(msg);\n\t_Scheduler_enqueue(proc);\n}\n\nvar _Scheduler_send = F2(function(proc, msg)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\t_Scheduler_rawSend(proc, msg);\n\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t});\n});\n\nfunction _Scheduler_kill(proc)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\tvar task = proc.f;\n\t\tif (task.$ === 2 && task.c)\n\t\t{\n\t\t\ttask.c();\n\t\t}\n\n\t\tproc.f = null;\n\n\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t});\n}\n\n\n/* STEP PROCESSES\n\ntype alias Process =\n  { $ : tag\n  , id : unique_id\n  , root : Task\n  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }\n  , mailbox : [msg]\n  }\n\n*/\n\n\nvar _Scheduler_working = false;\nvar _Scheduler_queue = [];\n\n\nfunction _Scheduler_enqueue(proc)\n{\n\t_Scheduler_queue.push(proc);\n\tif (_Scheduler_working)\n\t{\n\t\treturn;\n\t}\n\t_Scheduler_working = true;\n\twhile (proc = _Scheduler_queue.shift())\n\t{\n\t\t_Scheduler_step(proc);\n\t}\n\t_Scheduler_working = false;\n}\n\n\nfunction _Scheduler_step(proc)\n{\n\twhile (proc.f)\n\t{\n\t\tvar rootTag = proc.f.$;\n\t\tif (rootTag === 0 || rootTag === 1)\n\t\t{\n\t\t\twhile (proc.g && proc.g.$ !== rootTag)\n\t\t\t{\n\t\t\t\tproc.g = proc.g.i;\n\t\t\t}\n\t\t\tif (!proc.g)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tproc.f = proc.g.b(proc.f.a);\n\t\t\tproc.g = proc.g.i;\n\t\t}\n\t\telse if (rootTag === 2)\n\t\t{\n\t\t\tproc.f.c = proc.f.b(function(newRoot) {\n\t\t\t\tproc.f = newRoot;\n\t\t\t\t_Scheduler_enqueue(proc);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\telse if (rootTag === 5)\n\t\t{\n\t\t\tif (proc.h.length === 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tproc.f = proc.f.b(proc.h.shift());\n\t\t}\n\t\telse // if (rootTag === 3 || rootTag === 4)\n\t\t{\n\t\t\tproc.g = {\n\t\t\t\t$: rootTag === 3 ? 0 : 1,\n\t\t\t\tb: proc.f.b,\n\t\t\t\ti: proc.g\n\t\t\t};\n\t\t\tproc.f = proc.f.d;\n\t\t}\n\t}\n}\n\n\n\nfunction _Process_sleep(time)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\tvar id = setTimeout(function() {\n\t\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t\t}, time);\n\n\t\treturn function() { clearTimeout(id); };\n\t});\n}\n\n\n\n\n// PROGRAMS\n\n\nvar _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)\n{\n\treturn _Platform_initialize(\n\t\tflagDecoder,\n\t\targs,\n\t\timpl.init,\n\t\timpl.update,\n\t\timpl.subscriptions,\n\t\tfunction() { return function() {} }\n\t);\n});\n\n\n\n// INITIALIZE A PROGRAM\n\n\nfunction _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)\n{\n\tvar result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));\n\telm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);\n\tvar managers = {};\n\tresult = init(result.a);\n\tvar model = result.a;\n\tvar stepper = stepperBuilder(sendToApp, model);\n\tvar ports = _Platform_setupEffects(managers, sendToApp);\n\n\tfunction sendToApp(msg, viewMetadata)\n\t{\n\t\tresult = A2(update, msg, model);\n\t\tstepper(model = result.a, viewMetadata);\n\t\t_Platform_dispatchEffects(managers, result.b, subscriptions(model));\n\t}\n\n\t_Platform_dispatchEffects(managers, result.b, subscriptions(model));\n\n\treturn ports ? { ports: ports } : {};\n}\n\n\n\n// TRACK PRELOADS\n//\n// This is used by code in elm/browser and elm/http\n// to register any HTTP requests that are triggered by init.\n//\n\n\nvar _Platform_preload;\n\n\nfunction _Platform_registerPreload(url)\n{\n\t_Platform_preload.add(url);\n}\n\n\n\n// EFFECT MANAGERS\n\n\nvar _Platform_effectManagers = {};\n\n\nfunction _Platform_setupEffects(managers, sendToApp)\n{\n\tvar ports;\n\n\t// setup all necessary effect managers\n\tfor (var key in _Platform_effectManagers)\n\t{\n\t\tvar manager = _Platform_effectManagers[key];\n\n\t\tif (manager.a)\n\t\t{\n\t\t\tports = ports || {};\n\t\t\tports[key] = manager.a(key, sendToApp);\n\t\t}\n\n\t\tmanagers[key] = _Platform_instantiateManager(manager, sendToApp);\n\t}\n\n\treturn ports;\n}\n\n\nfunction _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)\n{\n\treturn {\n\t\tb: init,\n\t\tc: onEffects,\n\t\td: onSelfMsg,\n\t\te: cmdMap,\n\t\tf: subMap\n\t};\n}\n\n\nfunction _Platform_instantiateManager(info, sendToApp)\n{\n\tvar router = {\n\t\tg: sendToApp,\n\t\th: undefined\n\t};\n\n\tvar onEffects = info.c;\n\tvar onSelfMsg = info.d;\n\tvar cmdMap = info.e;\n\tvar subMap = info.f;\n\n\tfunction loop(state)\n\t{\n\t\treturn A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)\n\t\t{\n\t\t\tvar value = msg.a;\n\n\t\t\tif (msg.$ === 0)\n\t\t\t{\n\t\t\t\treturn A3(onSelfMsg, router, value, state);\n\t\t\t}\n\n\t\t\treturn cmdMap && subMap\n\t\t\t\t? A4(onEffects, router, value.i, value.j, state)\n\t\t\t\t: A3(onEffects, router, cmdMap ? value.i : value.j, state);\n\t\t}));\n\t}\n\n\treturn router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));\n}\n\n\n\n// ROUTING\n\n\nvar _Platform_sendToApp = F2(function(router, msg)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\trouter.g(msg);\n\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t});\n});\n\n\nvar _Platform_sendToSelf = F2(function(router, msg)\n{\n\treturn A2(_Scheduler_send, router.h, {\n\t\t$: 0,\n\t\ta: msg\n\t});\n});\n\n\n\n// BAGS\n\n\nfunction _Platform_leaf(home)\n{\n\treturn function(value)\n\t{\n\t\treturn {\n\t\t\t$: 1,\n\t\t\tk: home,\n\t\t\tl: value\n\t\t};\n\t};\n}\n\n\nfunction _Platform_batch(list)\n{\n\treturn {\n\t\t$: 2,\n\t\tm: list\n\t};\n}\n\n\nvar _Platform_map = F2(function(tagger, bag)\n{\n\treturn {\n\t\t$: 3,\n\t\tn: tagger,\n\t\to: bag\n\t}\n});\n\n\n\n// PIPE BAGS INTO EFFECT MANAGERS\n\n\nfunction _Platform_dispatchEffects(managers, cmdBag, subBag)\n{\n\tvar effectsDict = {};\n\t_Platform_gatherEffects(true, cmdBag, effectsDict, null);\n\t_Platform_gatherEffects(false, subBag, effectsDict, null);\n\n\tfor (var home in managers)\n\t{\n\t\t_Scheduler_rawSend(managers[home], {\n\t\t\t$: 'fx',\n\t\t\ta: effectsDict[home] || { i: _List_Nil, j: _List_Nil }\n\t\t});\n\t}\n}\n\n\nfunction _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)\n{\n\tswitch (bag.$)\n\t{\n\t\tcase 1:\n\t\t\tvar home = bag.k;\n\t\t\tvar effect = _Platform_toEffect(isCmd, home, taggers, bag.l);\n\t\t\teffectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);\n\t\t\treturn;\n\n\t\tcase 2:\n\t\t\tfor (var list = bag.m; list.b; list = list.b) // WHILE_CONS\n\t\t\t{\n\t\t\t\t_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);\n\t\t\t}\n\t\t\treturn;\n\n\t\tcase 3:\n\t\t\t_Platform_gatherEffects(isCmd, bag.o, effectsDict, {\n\t\t\t\tp: bag.n,\n\t\t\t\tq: taggers\n\t\t\t});\n\t\t\treturn;\n\t}\n}\n\n\nfunction _Platform_toEffect(isCmd, home, taggers, value)\n{\n\tfunction applyTaggers(x)\n\t{\n\t\tfor (var temp = taggers; temp; temp = temp.q)\n\t\t{\n\t\t\tx = temp.p(x);\n\t\t}\n\t\treturn x;\n\t}\n\n\tvar map = isCmd\n\t\t? _Platform_effectManagers[home].e\n\t\t: _Platform_effectManagers[home].f;\n\n\treturn A2(map, applyTaggers, value)\n}\n\n\nfunction _Platform_insert(isCmd, newEffect, effects)\n{\n\teffects = effects || { i: _List_Nil, j: _List_Nil };\n\n\tisCmd\n\t\t? (effects.i = _List_Cons(newEffect, effects.i))\n\t\t: (effects.j = _List_Cons(newEffect, effects.j));\n\n\treturn effects;\n}\n\n\n\n// PORTS\n\n\nfunction _Platform_checkPortName(name)\n{\n\tif (_Platform_effectManagers[name])\n\t{\n\t\t_Debug_crash(3, name)\n\t}\n}\n\n\n\n// OUTGOING PORTS\n\n\nfunction _Platform_outgoingPort(name, converter)\n{\n\t_Platform_checkPortName(name);\n\t_Platform_effectManagers[name] = {\n\t\te: _Platform_outgoingPortMap,\n\t\tr: converter,\n\t\ta: _Platform_setupOutgoingPort\n\t};\n\treturn _Platform_leaf(name);\n}\n\n\nvar _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });\n\n\nfunction _Platform_setupOutgoingPort(name)\n{\n\tvar subs = [];\n\tvar converter = _Platform_effectManagers[name].r;\n\n\t// CREATE MANAGER\n\n\tvar init = _Process_sleep(0);\n\n\t_Platform_effectManagers[name].b = init;\n\t_Platform_effectManagers[name].c = F3(function(router, cmdList, state)\n\t{\n\t\tfor ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS\n\t\t{\n\t\t\t// grab a separate reference to subs in case unsubscribe is called\n\t\t\tvar currentSubs = subs;\n\t\t\tvar value = _Json_unwrap(converter(cmdList.a));\n\t\t\tfor (var i = 0; i < currentSubs.length; i++)\n\t\t\t{\n\t\t\t\tcurrentSubs[i](value);\n\t\t\t}\n\t\t}\n\t\treturn init;\n\t});\n\n\t// PUBLIC API\n\n\tfunction subscribe(callback)\n\t{\n\t\tsubs.push(callback);\n\t}\n\n\tfunction unsubscribe(callback)\n\t{\n\t\t// copy subs into a new array in case unsubscribe is called within a\n\t\t// subscribed callback\n\t\tsubs = subs.slice();\n\t\tvar index = subs.indexOf(callback);\n\t\tif (index >= 0)\n\t\t{\n\t\t\tsubs.splice(index, 1);\n\t\t}\n\t}\n\n\treturn {\n\t\tsubscribe: subscribe,\n\t\tunsubscribe: unsubscribe\n\t};\n}\n\n\n\n// INCOMING PORTS\n\n\nfunction _Platform_incomingPort(name, converter)\n{\n\t_Platform_checkPortName(name);\n\t_Platform_effectManagers[name] = {\n\t\tf: _Platform_incomingPortMap,\n\t\tr: converter,\n\t\ta: _Platform_setupIncomingPort\n\t};\n\treturn _Platform_leaf(name);\n}\n\n\nvar _Platform_incomingPortMap = F2(function(tagger, finalTagger)\n{\n\treturn function(value)\n\t{\n\t\treturn tagger(finalTagger(value));\n\t};\n});\n\n\nfunction _Platform_setupIncomingPort(name, sendToApp)\n{\n\tvar subs = _List_Nil;\n\tvar converter = _Platform_effectManagers[name].r;\n\n\t// CREATE MANAGER\n\n\tvar init = _Scheduler_succeed(null);\n\n\t_Platform_effectManagers[name].b = init;\n\t_Platform_effectManagers[name].c = F3(function(router, subList, state)\n\t{\n\t\tsubs = subList;\n\t\treturn init;\n\t});\n\n\t// PUBLIC API\n\n\tfunction send(incomingValue)\n\t{\n\t\tvar result = A2(_Json_run, converter, _Json_wrap(incomingValue));\n\n\t\telm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);\n\n\t\tvar value = result.a;\n\t\tfor (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS\n\t\t{\n\t\t\tsendToApp(temp.a(value));\n\t\t}\n\t}\n\n\treturn { send: send };\n}\n\n\n\n// EXPORT ELM MODULES\n//\n// Have DEBUG and PROD versions so that we can (1) give nicer errors in\n// debug mode and (2) not pay for the bits needed for that in prod mode.\n//\n\n\nfunction _Platform_export_UNUSED(exports)\n{\n\tscope['Elm']\n\t\t? _Platform_mergeExportsProd(scope['Elm'], exports)\n\t\t: scope['Elm'] = exports;\n}\n\n\nfunction _Platform_mergeExportsProd(obj, exports)\n{\n\tfor (var name in exports)\n\t{\n\t\t(name in obj)\n\t\t\t? (name == 'init')\n\t\t\t\t? _Debug_crash(6)\n\t\t\t\t: _Platform_mergeExportsProd(obj[name], exports[name])\n\t\t\t: (obj[name] = exports[name]);\n\t}\n}\n\n\nfunction _Platform_export(exports)\n{\n\tscope['Elm']\n\t\t? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)\n\t\t: scope['Elm'] = exports;\n}\n\n\nfunction _Platform_mergeExportsDebug(moduleName, obj, exports)\n{\n\tfor (var name in exports)\n\t{\n\t\t(name in obj)\n\t\t\t? (name == 'init')\n\t\t\t\t? _Debug_crash(6, moduleName)\n\t\t\t\t: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])\n\t\t\t: (obj[name] = exports[name]);\n\t}\n}\n\n\n\n\n// STRINGS\n\n\nvar _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)\n{\n\tvar smallLength = smallString.length;\n\tvar isGood = offset + smallLength <= bigString.length;\n\n\tfor (var i = 0; isGood && i < smallLength; )\n\t{\n\t\tvar code = bigString.charCodeAt(offset);\n\t\tisGood =\n\t\t\tsmallString[i++] === bigString[offset++]\n\t\t\t&& (\n\t\t\t\tcode === 0x000A /* \\n */\n\t\t\t\t\t? ( row++, col=1 )\n\t\t\t\t\t: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )\n\t\t\t)\n\t}\n\n\treturn _Utils_Tuple3(isGood ? offset : -1, row, col);\n});\n\n\n\n// CHARS\n\n\nvar _Parser_isSubChar = F3(function(predicate, offset, string)\n{\n\treturn (\n\t\tstring.length <= offset\n\t\t\t? -1\n\t\t\t:\n\t\t(string.charCodeAt(offset) & 0xF800) === 0xD800\n\t\t\t? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)\n\t\t\t:\n\t\t(predicate(_Utils_chr(string[offset]))\n\t\t\t? ((string[offset] === '\\n') ? -2 : (offset + 1))\n\t\t\t: -1\n\t\t)\n\t);\n});\n\n\nvar _Parser_isAsciiCode = F3(function(code, offset, string)\n{\n\treturn string.charCodeAt(offset) === code;\n});\n\n\n\n// NUMBERS\n\n\nvar _Parser_chompBase10 = F2(function(offset, string)\n{\n\tfor (; offset < string.length; offset++)\n\t{\n\t\tvar code = string.charCodeAt(offset);\n\t\tif (code < 0x30 || 0x39 < code)\n\t\t{\n\t\t\treturn offset;\n\t\t}\n\t}\n\treturn offset;\n});\n\n\nvar _Parser_consumeBase = F3(function(base, offset, string)\n{\n\tfor (var total = 0; offset < string.length; offset++)\n\t{\n\t\tvar digit = string.charCodeAt(offset) - 0x30;\n\t\tif (digit < 0 || base <= digit) break;\n\t\ttotal = base * total + digit;\n\t}\n\treturn _Utils_Tuple2(offset, total);\n});\n\n\nvar _Parser_consumeBase16 = F2(function(offset, string)\n{\n\tfor (var total = 0; offset < string.length; offset++)\n\t{\n\t\tvar code = string.charCodeAt(offset);\n\t\tif (0x30 <= code && code <= 0x39)\n\t\t{\n\t\t\ttotal = 16 * total + code - 0x30;\n\t\t}\n\t\telse if (0x41 <= code && code <= 0x46)\n\t\t{\n\t\t\ttotal = 16 * total + code - 55;\n\t\t}\n\t\telse if (0x61 <= code && code <= 0x66)\n\t\t{\n\t\t\ttotal = 16 * total + code - 87;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn _Utils_Tuple2(offset, total);\n});\n\n\n\n// FIND STRING\n\n\nvar _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)\n{\n\tvar newOffset = bigString.indexOf(smallString, offset);\n\tvar target = newOffset < 0 ? bigString.length : newOffset + smallString.length;\n\n\twhile (offset < target)\n\t{\n\t\tvar code = bigString.charCodeAt(offset++);\n\t\tcode === 0x000A /* \\n */\n\t\t\t? ( col=1, row++ )\n\t\t\t: ( col++, (code & 0xF800) === 0xD800 && offset++ )\n\t}\n\n\treturn _Utils_Tuple3(newOffset, row, col);\n});\n\n\n\n// SEND REQUEST\n\nvar _Http_toTask = F3(function(router, toTask, request)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tfunction done(response) {\n\t\t\tcallback(toTask(request.expect.a(response)));\n\t\t}\n\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.addEventListener('error', function() { done(elm$http$Http$NetworkError_); });\n\t\txhr.addEventListener('timeout', function() { done(elm$http$Http$Timeout_); });\n\t\txhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });\n\t\telm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);\n\n\t\ttry {\n\t\t\txhr.open(request.method, request.url, true);\n\t\t} catch (e) {\n\t\t\treturn done(elm$http$Http$BadUrl_(request.url));\n\t\t}\n\n\t\t_Http_configureRequest(xhr, request);\n\n\t\trequest.body.a && xhr.setRequestHeader('Content-Type', request.body.a);\n\t\txhr.send(request.body.b);\n\n\t\treturn function() { xhr.c = true; xhr.abort(); };\n\t});\n});\n\n\n// CONFIGURE\n\nfunction _Http_configureRequest(xhr, request)\n{\n\tfor (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS\n\t{\n\t\txhr.setRequestHeader(headers.a.a, headers.a.b);\n\t}\n\txhr.timeout = request.timeout.a || 0;\n\txhr.responseType = request.expect.d;\n\txhr.withCredentials = request.allowCookiesFromOtherDomains;\n}\n\n\n// RESPONSES\n\nfunction _Http_toResponse(toBody, xhr)\n{\n\treturn A2(\n\t\t200 <= xhr.status && xhr.status < 300 ? elm$http$Http$GoodStatus_ : elm$http$Http$BadStatus_,\n\t\t_Http_toMetadata(xhr),\n\t\ttoBody(xhr.response)\n\t);\n}\n\n\n// METADATA\n\nfunction _Http_toMetadata(xhr)\n{\n\treturn {\n\t\turl: xhr.responseURL,\n\t\tstatusCode: xhr.status,\n\t\tstatusText: xhr.statusText,\n\t\theaders: _Http_parseHeaders(xhr.getAllResponseHeaders())\n\t};\n}\n\n\n// HEADERS\n\nfunction _Http_parseHeaders(rawHeaders)\n{\n\tif (!rawHeaders)\n\t{\n\t\treturn elm$core$Dict$empty;\n\t}\n\n\tvar headers = elm$core$Dict$empty;\n\tvar headerPairs = rawHeaders.split('\\r\\n');\n\tfor (var i = headerPairs.length; i--; )\n\t{\n\t\tvar headerPair = headerPairs[i];\n\t\tvar index = headerPair.indexOf(': ');\n\t\tif (index > 0)\n\t\t{\n\t\t\tvar key = headerPair.substring(0, index);\n\t\t\tvar value = headerPair.substring(index + 2);\n\n\t\t\theaders = A3(elm$core$Dict$update, key, function(oldValue) {\n\t\t\t\treturn elm$core$Maybe$Just(elm$core$Maybe$isJust(oldValue)\n\t\t\t\t\t? value + ', ' + oldValue.a\n\t\t\t\t\t: value\n\t\t\t\t);\n\t\t\t}, headers);\n\t\t}\n\t}\n\treturn headers;\n}\n\n\n// EXPECT\n\nvar _Http_expect = F3(function(type, toBody, toValue)\n{\n\treturn {\n\t\t$: 0,\n\t\td: type,\n\t\tb: toBody,\n\t\ta: toValue\n\t};\n});\n\nvar _Http_mapExpect = F2(function(func, expect)\n{\n\treturn {\n\t\t$: 0,\n\t\td: expect.d,\n\t\tb: expect.b,\n\t\ta: function(x) { return func(expect.a(x)); }\n\t};\n});\n\nfunction _Http_toDataView(arrayBuffer)\n{\n\treturn new DataView(arrayBuffer);\n}\n\n\n// BODY and PARTS\n\nvar _Http_emptyBody = { $: 0 };\nvar _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });\n\nfunction _Http_toFormData(parts)\n{\n\tfor (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS\n\t{\n\t\tvar part = parts.a;\n\t\tformData.append(part.a, part.b);\n\t}\n\treturn formData;\n}\n\nvar _Http_bytesToBlob = F2(function(mime, bytes)\n{\n\treturn new Blob([bytes], { type: mime });\n});\n\n\n// PROGRESS\n\nfunction _Http_track(router, xhr, tracker)\n{\n\t// TODO check out lengthComputable on loadstart event\n\n\txhr.upload.addEventListener('progress', function(event) {\n\t\tif (xhr.c) { return; }\n\t\t_Scheduler_rawSpawn(A2(elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, elm$http$Http$Sending({\n\t\t\tsent: event.loaded,\n\t\t\tsize: event.total\n\t\t}))));\n\t});\n\txhr.addEventListener('progress', function(event) {\n\t\tif (xhr.c) { return; }\n\t\t_Scheduler_rawSpawn(A2(elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, elm$http$Http$Receiving({\n\t\t\treceived: event.loaded,\n\t\t\tsize: event.lengthComputable ? elm$core$Maybe$Just(event.total) : elm$core$Maybe$Nothing\n\t\t}))));\n\t});\n}\n\n\n\n// HELPERS\n\n\nvar _VirtualDom_divertHrefToApp;\n\nvar _VirtualDom_doc = typeof document !== 'undefined' ? document : {};\n\n\nfunction _VirtualDom_appendChild(parent, child)\n{\n\tparent.appendChild(child);\n}\n\nvar _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)\n{\n\t// NOTE: this function needs _Platform_export available to work\n\n\t/**_UNUSED/\n\tvar node = args['node'];\n\t//*/\n\t/**/\n\tvar node = args && args['node'] ? args['node'] : _Debug_crash(0);\n\t//*/\n\n\tnode.parentNode.replaceChild(\n\t\t_VirtualDom_render(virtualNode, function() {}),\n\t\tnode\n\t);\n\n\treturn {};\n});\n\n\n\n// TEXT\n\n\nfunction _VirtualDom_text(string)\n{\n\treturn {\n\t\t$: 0,\n\t\ta: string\n\t};\n}\n\n\n\n// NODE\n\n\nvar _VirtualDom_nodeNS = F2(function(namespace, tag)\n{\n\treturn F2(function(factList, kidList)\n\t{\n\t\tfor (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS\n\t\t{\n\t\t\tvar kid = kidList.a;\n\t\t\tdescendantsCount += (kid.b || 0);\n\t\t\tkids.push(kid);\n\t\t}\n\t\tdescendantsCount += kids.length;\n\n\t\treturn {\n\t\t\t$: 1,\n\t\t\tc: tag,\n\t\t\td: _VirtualDom_organizeFacts(factList),\n\t\t\te: kids,\n\t\t\tf: namespace,\n\t\t\tb: descendantsCount\n\t\t};\n\t});\n});\n\n\nvar _VirtualDom_node = _VirtualDom_nodeNS(undefined);\n\n\n\n// KEYED NODE\n\n\nvar _VirtualDom_keyedNodeNS = F2(function(namespace, tag)\n{\n\treturn F2(function(factList, kidList)\n\t{\n\t\tfor (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS\n\t\t{\n\t\t\tvar kid = kidList.a;\n\t\t\tdescendantsCount += (kid.b.b || 0);\n\t\t\tkids.push(kid);\n\t\t}\n\t\tdescendantsCount += kids.length;\n\n\t\treturn {\n\t\t\t$: 2,\n\t\t\tc: tag,\n\t\t\td: _VirtualDom_organizeFacts(factList),\n\t\t\te: kids,\n\t\t\tf: namespace,\n\t\t\tb: descendantsCount\n\t\t};\n\t});\n});\n\n\nvar _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);\n\n\n\n// CUSTOM\n\n\nfunction _VirtualDom_custom(factList, model, render, diff)\n{\n\treturn {\n\t\t$: 3,\n\t\td: _VirtualDom_organizeFacts(factList),\n\t\tg: model,\n\t\th: render,\n\t\ti: diff\n\t};\n}\n\n\n\n// MAP\n\n\nvar _VirtualDom_map = F2(function(tagger, node)\n{\n\treturn {\n\t\t$: 4,\n\t\tj: tagger,\n\t\tk: node,\n\t\tb: 1 + (node.b || 0)\n\t};\n});\n\n\n\n// LAZY\n\n\nfunction _VirtualDom_thunk(refs, thunk)\n{\n\treturn {\n\t\t$: 5,\n\t\tl: refs,\n\t\tm: thunk,\n\t\tk: undefined\n\t};\n}\n\nvar _VirtualDom_lazy = F2(function(func, a)\n{\n\treturn _VirtualDom_thunk([func, a], function() {\n\t\treturn func(a);\n\t});\n});\n\nvar _VirtualDom_lazy2 = F3(function(func, a, b)\n{\n\treturn _VirtualDom_thunk([func, a, b], function() {\n\t\treturn A2(func, a, b);\n\t});\n});\n\nvar _VirtualDom_lazy3 = F4(function(func, a, b, c)\n{\n\treturn _VirtualDom_thunk([func, a, b, c], function() {\n\t\treturn A3(func, a, b, c);\n\t});\n});\n\nvar _VirtualDom_lazy4 = F5(function(func, a, b, c, d)\n{\n\treturn _VirtualDom_thunk([func, a, b, c, d], function() {\n\t\treturn A4(func, a, b, c, d);\n\t});\n});\n\nvar _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)\n{\n\treturn _VirtualDom_thunk([func, a, b, c, d, e], function() {\n\t\treturn A5(func, a, b, c, d, e);\n\t});\n});\n\nvar _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)\n{\n\treturn _VirtualDom_thunk([func, a, b, c, d, e, f], function() {\n\t\treturn A6(func, a, b, c, d, e, f);\n\t});\n});\n\nvar _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)\n{\n\treturn _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {\n\t\treturn A7(func, a, b, c, d, e, f, g);\n\t});\n});\n\nvar _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)\n{\n\treturn _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {\n\t\treturn A8(func, a, b, c, d, e, f, g, h);\n\t});\n});\n\n\n\n// FACTS\n\n\nvar _VirtualDom_on = F2(function(key, handler)\n{\n\treturn {\n\t\t$: 'a0',\n\t\tn: key,\n\t\to: handler\n\t};\n});\nvar _VirtualDom_style = F2(function(key, value)\n{\n\treturn {\n\t\t$: 'a1',\n\t\tn: key,\n\t\to: value\n\t};\n});\nvar _VirtualDom_property = F2(function(key, value)\n{\n\treturn {\n\t\t$: 'a2',\n\t\tn: key,\n\t\to: value\n\t};\n});\nvar _VirtualDom_attribute = F2(function(key, value)\n{\n\treturn {\n\t\t$: 'a3',\n\t\tn: key,\n\t\to: value\n\t};\n});\nvar _VirtualDom_attributeNS = F3(function(namespace, key, value)\n{\n\treturn {\n\t\t$: 'a4',\n\t\tn: key,\n\t\to: { f: namespace, o: value }\n\t};\n});\n\n\n\n// XSS ATTACK VECTOR CHECKS\n\n\nfunction _VirtualDom_noScript(tag)\n{\n\treturn tag == 'script' ? 'p' : tag;\n}\n\nfunction _VirtualDom_noOnOrFormAction(key)\n{\n\treturn /^(on|formAction$)/i.test(key) ? 'data-' + key : key;\n}\n\nfunction _VirtualDom_noInnerHtmlOrFormAction(key)\n{\n\treturn key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;\n}\n\nfunction _VirtualDom_noJavaScriptUri_UNUSED(value)\n{\n\treturn /^javascript:/i.test(value.replace(/\\s/g,'')) ? '' : value;\n}\n\nfunction _VirtualDom_noJavaScriptUri(value)\n{\n\treturn /^javascript:/i.test(value.replace(/\\s/g,''))\n\t\t? 'javascript:alert(\"This is an XSS vector. Please use ports or web components instead.\")'\n\t\t: value;\n}\n\nfunction _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)\n{\n\treturn /^\\s*(javascript:|data:text\\/html)/i.test(value) ? '' : value;\n}\n\nfunction _VirtualDom_noJavaScriptOrHtmlUri(value)\n{\n\treturn /^\\s*(javascript:|data:text\\/html)/i.test(value)\n\t\t? 'javascript:alert(\"This is an XSS vector. Please use ports or web components instead.\")'\n\t\t: value;\n}\n\n\n\n// MAP FACTS\n\n\nvar _VirtualDom_mapAttribute = F2(function(func, attr)\n{\n\treturn (attr.$ === 'a0')\n\t\t? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))\n\t\t: attr;\n});\n\nfunction _VirtualDom_mapHandler(func, handler)\n{\n\tvar tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler);\n\n\t// 0 = Normal\n\t// 1 = MayStopPropagation\n\t// 2 = MayPreventDefault\n\t// 3 = Custom\n\n\treturn {\n\t\t$: handler.$,\n\t\ta:\n\t\t\t!tag\n\t\t\t\t? A2(elm$json$Json$Decode$map, func, handler.a)\n\t\t\t\t:\n\t\t\tA3(elm$json$Json$Decode$map2,\n\t\t\t\ttag < 3\n\t\t\t\t\t? _VirtualDom_mapEventTuple\n\t\t\t\t\t: _VirtualDom_mapEventRecord,\n\t\t\t\telm$json$Json$Decode$succeed(func),\n\t\t\t\thandler.a\n\t\t\t)\n\t};\n}\n\nvar _VirtualDom_mapEventTuple = F2(function(func, tuple)\n{\n\treturn _Utils_Tuple2(func(tuple.a), tuple.b);\n});\n\nvar _VirtualDom_mapEventRecord = F2(function(func, record)\n{\n\treturn {\n\t\tmessage: func(record.message),\n\t\tstopPropagation: record.stopPropagation,\n\t\tpreventDefault: record.preventDefault\n\t}\n});\n\n\n\n// ORGANIZE FACTS\n\n\nfunction _VirtualDom_organizeFacts(factList)\n{\n\tfor (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS\n\t{\n\t\tvar entry = factList.a;\n\n\t\tvar tag = entry.$;\n\t\tvar key = entry.n;\n\t\tvar value = entry.o;\n\n\t\tif (tag === 'a2')\n\t\t{\n\t\t\t(key === 'className')\n\t\t\t\t? _VirtualDom_addClass(facts, key, _Json_unwrap(value))\n\t\t\t\t: facts[key] = _Json_unwrap(value);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar subFacts = facts[tag] || (facts[tag] = {});\n\t\t(tag === 'a3' && key === 'class')\n\t\t\t? _VirtualDom_addClass(subFacts, key, value)\n\t\t\t: subFacts[key] = value;\n\t}\n\n\treturn facts;\n}\n\nfunction _VirtualDom_addClass(object, key, newClass)\n{\n\tvar classes = object[key];\n\tobject[key] = classes ? classes + ' ' + newClass : newClass;\n}\n\n\n\n// RENDER\n\n\nfunction _VirtualDom_render(vNode, eventNode)\n{\n\tvar tag = vNode.$;\n\n\tif (tag === 5)\n\t{\n\t\treturn _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);\n\t}\n\n\tif (tag === 0)\n\t{\n\t\treturn _VirtualDom_doc.createTextNode(vNode.a);\n\t}\n\n\tif (tag === 4)\n\t{\n\t\tvar subNode = vNode.k;\n\t\tvar tagger = vNode.j;\n\n\t\twhile (subNode.$ === 4)\n\t\t{\n\t\t\ttypeof tagger !== 'object'\n\t\t\t\t? tagger = [tagger, subNode.j]\n\t\t\t\t: tagger.push(subNode.j);\n\n\t\t\tsubNode = subNode.k;\n\t\t}\n\n\t\tvar subEventRoot = { j: tagger, p: eventNode };\n\t\tvar domNode = _VirtualDom_render(subNode, subEventRoot);\n\t\tdomNode.elm_event_node_ref = subEventRoot;\n\t\treturn domNode;\n\t}\n\n\tif (tag === 3)\n\t{\n\t\tvar domNode = vNode.h(vNode.g);\n\t\t_VirtualDom_applyFacts(domNode, eventNode, vNode.d);\n\t\treturn domNode;\n\t}\n\n\t// at this point `tag` must be 1 or 2\n\n\tvar domNode = vNode.f\n\t\t? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)\n\t\t: _VirtualDom_doc.createElement(vNode.c);\n\n\tif (_VirtualDom_divertHrefToApp && vNode.c == 'a')\n\t{\n\t\tdomNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));\n\t}\n\n\t_VirtualDom_applyFacts(domNode, eventNode, vNode.d);\n\n\tfor (var kids = vNode.e, i = 0; i < kids.length; i++)\n\t{\n\t\t_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));\n\t}\n\n\treturn domNode;\n}\n\n\n\n// APPLY FACTS\n\n\nfunction _VirtualDom_applyFacts(domNode, eventNode, facts)\n{\n\tfor (var key in facts)\n\t{\n\t\tvar value = facts[key];\n\n\t\tkey === 'a1'\n\t\t\t? _VirtualDom_applyStyles(domNode, value)\n\t\t\t:\n\t\tkey === 'a0'\n\t\t\t? _VirtualDom_applyEvents(domNode, eventNode, value)\n\t\t\t:\n\t\tkey === 'a3'\n\t\t\t? _VirtualDom_applyAttrs(domNode, value)\n\t\t\t:\n\t\tkey === 'a4'\n\t\t\t? _VirtualDom_applyAttrsNS(domNode, value)\n\t\t\t:\n\t\t((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);\n\t}\n}\n\n\n\n// APPLY STYLES\n\n\nfunction _VirtualDom_applyStyles(domNode, styles)\n{\n\tvar domNodeStyle = domNode.style;\n\n\tfor (var key in styles)\n\t{\n\t\tdomNodeStyle[key] = styles[key];\n\t}\n}\n\n\n\n// APPLY ATTRS\n\n\nfunction _VirtualDom_applyAttrs(domNode, attrs)\n{\n\tfor (var key in attrs)\n\t{\n\t\tvar value = attrs[key];\n\t\ttypeof value !== 'undefined'\n\t\t\t? domNode.setAttribute(key, value)\n\t\t\t: domNode.removeAttribute(key);\n\t}\n}\n\n\n\n// APPLY NAMESPACED ATTRS\n\n\nfunction _VirtualDom_applyAttrsNS(domNode, nsAttrs)\n{\n\tfor (var key in nsAttrs)\n\t{\n\t\tvar pair = nsAttrs[key];\n\t\tvar namespace = pair.f;\n\t\tvar value = pair.o;\n\n\t\ttypeof value !== 'undefined'\n\t\t\t? domNode.setAttributeNS(namespace, key, value)\n\t\t\t: domNode.removeAttributeNS(namespace, key);\n\t}\n}\n\n\n\n// APPLY EVENTS\n\n\nfunction _VirtualDom_applyEvents(domNode, eventNode, events)\n{\n\tvar allCallbacks = domNode.elmFs || (domNode.elmFs = {});\n\n\tfor (var key in events)\n\t{\n\t\tvar newHandler = events[key];\n\t\tvar oldCallback = allCallbacks[key];\n\n\t\tif (!newHandler)\n\t\t{\n\t\t\tdomNode.removeEventListener(key, oldCallback);\n\t\t\tallCallbacks[key] = undefined;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (oldCallback)\n\t\t{\n\t\t\tvar oldHandler = oldCallback.q;\n\t\t\tif (oldHandler.$ === newHandler.$)\n\t\t\t{\n\t\t\t\toldCallback.q = newHandler;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdomNode.removeEventListener(key, oldCallback);\n\t\t}\n\n\t\toldCallback = _VirtualDom_makeCallback(eventNode, newHandler);\n\t\tdomNode.addEventListener(key, oldCallback,\n\t\t\t_VirtualDom_passiveSupported\n\t\t\t&& { passive: elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }\n\t\t);\n\t\tallCallbacks[key] = oldCallback;\n\t}\n}\n\n\n\n// PASSIVE EVENTS\n\n\nvar _VirtualDom_passiveSupported;\n\ntry\n{\n\twindow.addEventListener('t', null, Object.defineProperty({}, 'passive', {\n\t\tget: function() { _VirtualDom_passiveSupported = true; }\n\t}));\n}\ncatch(e) {}\n\n\n\n// EVENT HANDLERS\n\n\nfunction _VirtualDom_makeCallback(eventNode, initialHandler)\n{\n\tfunction callback(event)\n\t{\n\t\tvar handler = callback.q;\n\t\tvar result = _Json_runHelp(handler.a, event);\n\n\t\tif (!elm$core$Result$isOk(result))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler);\n\n\t\t// 0 = Normal\n\t\t// 1 = MayStopPropagation\n\t\t// 2 = MayPreventDefault\n\t\t// 3 = Custom\n\n\t\tvar value = result.a;\n\t\tvar message = !tag ? value : tag < 3 ? value.a : value.message;\n\t\tvar stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;\n\t\tvar currentEventNode = (\n\t\t\tstopPropagation && event.stopPropagation(),\n\t\t\t(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),\n\t\t\teventNode\n\t\t);\n\t\tvar tagger;\n\t\tvar i;\n\t\twhile (tagger = currentEventNode.j)\n\t\t{\n\t\t\tif (typeof tagger == 'function')\n\t\t\t{\n\t\t\t\tmessage = tagger(message);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor (var i = tagger.length; i--; )\n\t\t\t\t{\n\t\t\t\t\tmessage = tagger[i](message);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentEventNode = currentEventNode.p;\n\t\t}\n\t\tcurrentEventNode(message, stopPropagation); // stopPropagation implies isSync\n\t}\n\n\tcallback.q = initialHandler;\n\n\treturn callback;\n}\n\nfunction _VirtualDom_equalEvents(x, y)\n{\n\treturn x.$ == y.$ && _Json_equality(x.a, y.a);\n}\n\n\n\n// DIFF\n\n\n// TODO: Should we do patches like in iOS?\n//\n// type Patch\n//   = At Int Patch\n//   | Batch (List Patch)\n//   | Change ...\n//\n// How could it not be better?\n//\nfunction _VirtualDom_diff(x, y)\n{\n\tvar patches = [];\n\t_VirtualDom_diffHelp(x, y, patches, 0);\n\treturn patches;\n}\n\n\nfunction _VirtualDom_pushPatch(patches, type, index, data)\n{\n\tvar patch = {\n\t\t$: type,\n\t\tr: index,\n\t\ts: data,\n\t\tt: undefined,\n\t\tu: undefined\n\t};\n\tpatches.push(patch);\n\treturn patch;\n}\n\n\nfunction _VirtualDom_diffHelp(x, y, patches, index)\n{\n\tif (x === y)\n\t{\n\t\treturn;\n\t}\n\n\tvar xType = x.$;\n\tvar yType = y.$;\n\n\t// Bail if you run into different types of nodes. Implies that the\n\t// structure has changed significantly and it's not worth a diff.\n\tif (xType !== yType)\n\t{\n\t\tif (xType === 1 && yType === 2)\n\t\t{\n\t\t\ty = _VirtualDom_dekey(y);\n\t\t\tyType = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_VirtualDom_pushPatch(patches, 0, index, y);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Now we know that both nodes are the same $.\n\tswitch (yType)\n\t{\n\t\tcase 5:\n\t\t\tvar xRefs = x.l;\n\t\t\tvar yRefs = y.l;\n\t\t\tvar i = xRefs.length;\n\t\t\tvar same = i === yRefs.length;\n\t\t\twhile (same && i--)\n\t\t\t{\n\t\t\t\tsame = xRefs[i] === yRefs[i];\n\t\t\t}\n\t\t\tif (same)\n\t\t\t{\n\t\t\t\ty.k = x.k;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ty.k = y.m();\n\t\t\tvar subPatches = [];\n\t\t\t_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);\n\t\t\tsubPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);\n\t\t\treturn;\n\n\t\tcase 4:\n\t\t\t// gather nested taggers\n\t\t\tvar xTaggers = x.j;\n\t\t\tvar yTaggers = y.j;\n\t\t\tvar nesting = false;\n\n\t\t\tvar xSubNode = x.k;\n\t\t\twhile (xSubNode.$ === 4)\n\t\t\t{\n\t\t\t\tnesting = true;\n\n\t\t\t\ttypeof xTaggers !== 'object'\n\t\t\t\t\t? xTaggers = [xTaggers, xSubNode.j]\n\t\t\t\t\t: xTaggers.push(xSubNode.j);\n\n\t\t\t\txSubNode = xSubNode.k;\n\t\t\t}\n\n\t\t\tvar ySubNode = y.k;\n\t\t\twhile (ySubNode.$ === 4)\n\t\t\t{\n\t\t\t\tnesting = true;\n\n\t\t\t\ttypeof yTaggers !== 'object'\n\t\t\t\t\t? yTaggers = [yTaggers, ySubNode.j]\n\t\t\t\t\t: yTaggers.push(ySubNode.j);\n\n\t\t\t\tySubNode = ySubNode.k;\n\t\t\t}\n\n\t\t\t// Just bail if different numbers of taggers. This implies the\n\t\t\t// structure of the virtual DOM has changed.\n\t\t\tif (nesting && xTaggers.length !== yTaggers.length)\n\t\t\t{\n\t\t\t\t_VirtualDom_pushPatch(patches, 0, index, y);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// check if taggers are \"the same\"\n\t\t\tif (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)\n\t\t\t{\n\t\t\t\t_VirtualDom_pushPatch(patches, 2, index, yTaggers);\n\t\t\t}\n\n\t\t\t// diff everything below the taggers\n\t\t\t_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);\n\t\t\treturn;\n\n\t\tcase 0:\n\t\t\tif (x.a !== y.a)\n\t\t\t{\n\t\t\t\t_VirtualDom_pushPatch(patches, 3, index, y.a);\n\t\t\t}\n\t\t\treturn;\n\n\t\tcase 1:\n\t\t\t_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);\n\t\t\treturn;\n\n\t\tcase 2:\n\t\t\t_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);\n\t\t\treturn;\n\n\t\tcase 3:\n\t\t\tif (x.h !== y.h)\n\t\t\t{\n\t\t\t\t_VirtualDom_pushPatch(patches, 0, index, y);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar factsDiff = _VirtualDom_diffFacts(x.d, y.d);\n\t\t\tfactsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);\n\n\t\t\tvar patch = y.i(x.g, y.g);\n\t\t\tpatch && _VirtualDom_pushPatch(patches, 5, index, patch);\n\n\t\t\treturn;\n\t}\n}\n\n// assumes the incoming arrays are the same length\nfunction _VirtualDom_pairwiseRefEqual(as, bs)\n{\n\tfor (var i = 0; i < as.length; i++)\n\t{\n\t\tif (as[i] !== bs[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction _VirtualDom_diffNodes(x, y, patches, index, diffKids)\n{\n\t// Bail if obvious indicators have changed. Implies more serious\n\t// structural changes such that it's not worth it to diff.\n\tif (x.c !== y.c || x.f !== y.f)\n\t{\n\t\t_VirtualDom_pushPatch(patches, 0, index, y);\n\t\treturn;\n\t}\n\n\tvar factsDiff = _VirtualDom_diffFacts(x.d, y.d);\n\tfactsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);\n\n\tdiffKids(x, y, patches, index);\n}\n\n\n\n// DIFF FACTS\n\n\n// TODO Instead of creating a new diff object, it's possible to just test if\n// there *is* a diff. During the actual patch, do the diff again and make the\n// modifications directly. This way, there's no new allocations. Worth it?\nfunction _VirtualDom_diffFacts(x, y, category)\n{\n\tvar diff;\n\n\t// look for changes and removals\n\tfor (var xKey in x)\n\t{\n\t\tif (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')\n\t\t{\n\t\t\tvar subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);\n\t\t\tif (subDiff)\n\t\t\t{\n\t\t\t\tdiff = diff || {};\n\t\t\t\tdiff[xKey] = subDiff;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\t// remove if not in the new facts\n\t\tif (!(xKey in y))\n\t\t{\n\t\t\tdiff = diff || {};\n\t\t\tdiff[xKey] =\n\t\t\t\t!category\n\t\t\t\t\t? (typeof x[xKey] === 'string' ? '' : null)\n\t\t\t\t\t:\n\t\t\t\t(category === 'a1')\n\t\t\t\t\t? ''\n\t\t\t\t\t:\n\t\t\t\t(category === 'a0' || category === 'a3')\n\t\t\t\t\t? undefined\n\t\t\t\t\t:\n\t\t\t\t{ f: x[xKey].f, o: undefined };\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar xValue = x[xKey];\n\t\tvar yValue = y[xKey];\n\n\t\t// reference equal, so don't worry about it\n\t\tif (xValue === yValue && xKey !== 'value' && xKey !== 'checked'\n\t\t\t|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tdiff = diff || {};\n\t\tdiff[xKey] = yValue;\n\t}\n\n\t// add new stuff\n\tfor (var yKey in y)\n\t{\n\t\tif (!(yKey in x))\n\t\t{\n\t\t\tdiff = diff || {};\n\t\t\tdiff[yKey] = y[yKey];\n\t\t}\n\t}\n\n\treturn diff;\n}\n\n\n\n// DIFF KIDS\n\n\nfunction _VirtualDom_diffKids(xParent, yParent, patches, index)\n{\n\tvar xKids = xParent.e;\n\tvar yKids = yParent.e;\n\n\tvar xLen = xKids.length;\n\tvar yLen = yKids.length;\n\n\t// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS\n\n\tif (xLen > yLen)\n\t{\n\t\t_VirtualDom_pushPatch(patches, 6, index, {\n\t\t\tv: yLen,\n\t\t\ti: xLen - yLen\n\t\t});\n\t}\n\telse if (xLen < yLen)\n\t{\n\t\t_VirtualDom_pushPatch(patches, 7, index, {\n\t\t\tv: xLen,\n\t\t\te: yKids\n\t\t});\n\t}\n\n\t// PAIRWISE DIFF EVERYTHING ELSE\n\n\tfor (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)\n\t{\n\t\tvar xKid = xKids[i];\n\t\t_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);\n\t\tindex += xKid.b || 0;\n\t}\n}\n\n\n\n// KEYED DIFF\n\n\nfunction _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)\n{\n\tvar localPatches = [];\n\n\tvar changes = {}; // Dict String Entry\n\tvar inserts = []; // Array { index : Int, entry : Entry }\n\t// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }\n\n\tvar xKids = xParent.e;\n\tvar yKids = yParent.e;\n\tvar xLen = xKids.length;\n\tvar yLen = yKids.length;\n\tvar xIndex = 0;\n\tvar yIndex = 0;\n\n\tvar index = rootIndex;\n\n\twhile (xIndex < xLen && yIndex < yLen)\n\t{\n\t\tvar x = xKids[xIndex];\n\t\tvar y = yKids[yIndex];\n\n\t\tvar xKey = x.a;\n\t\tvar yKey = y.a;\n\t\tvar xNode = x.b;\n\t\tvar yNode = y.b;\n\n\t\tvar newMatch = undefined;\n\t\tvar oldMatch = undefined;\n\n\t\t// check if keys match\n\n\t\tif (xKey === yKey)\n\t\t{\n\t\t\tindex++;\n\t\t\t_VirtualDom_diffHelp(xNode, yNode, localPatches, index);\n\t\t\tindex += xNode.b || 0;\n\n\t\t\txIndex++;\n\t\t\tyIndex++;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// look ahead 1 to detect insertions and removals.\n\n\t\tvar xNext = xKids[xIndex + 1];\n\t\tvar yNext = yKids[yIndex + 1];\n\n\t\tif (xNext)\n\t\t{\n\t\t\tvar xNextKey = xNext.a;\n\t\t\tvar xNextNode = xNext.b;\n\t\t\toldMatch = yKey === xNextKey;\n\t\t}\n\n\t\tif (yNext)\n\t\t{\n\t\t\tvar yNextKey = yNext.a;\n\t\t\tvar yNextNode = yNext.b;\n\t\t\tnewMatch = xKey === yNextKey;\n\t\t}\n\n\n\t\t// swap x and y\n\t\tif (newMatch && oldMatch)\n\t\t{\n\t\t\tindex++;\n\t\t\t_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);\n\t\t\t_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);\n\t\t\tindex += xNode.b || 0;\n\n\t\t\tindex++;\n\t\t\t_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);\n\t\t\tindex += xNextNode.b || 0;\n\n\t\t\txIndex += 2;\n\t\t\tyIndex += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// insert y\n\t\tif (newMatch)\n\t\t{\n\t\t\tindex++;\n\t\t\t_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);\n\t\t\t_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);\n\t\t\tindex += xNode.b || 0;\n\n\t\t\txIndex += 1;\n\t\t\tyIndex += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// remove x\n\t\tif (oldMatch)\n\t\t{\n\t\t\tindex++;\n\t\t\t_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);\n\t\t\tindex += xNode.b || 0;\n\n\t\t\tindex++;\n\t\t\t_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);\n\t\t\tindex += xNextNode.b || 0;\n\n\t\t\txIndex += 2;\n\t\t\tyIndex += 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// remove x, insert y\n\t\tif (xNext && xNextKey === yNextKey)\n\t\t{\n\t\t\tindex++;\n\t\t\t_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);\n\t\t\t_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);\n\t\t\tindex += xNode.b || 0;\n\n\t\t\tindex++;\n\t\t\t_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);\n\t\t\tindex += xNextNode.b || 0;\n\n\t\t\txIndex += 2;\n\t\t\tyIndex += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\t// eat up any remaining nodes with removeNode and insertNode\n\n\twhile (xIndex < xLen)\n\t{\n\t\tindex++;\n\t\tvar x = xKids[xIndex];\n\t\tvar xNode = x.b;\n\t\t_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);\n\t\tindex += xNode.b || 0;\n\t\txIndex++;\n\t}\n\n\twhile (yIndex < yLen)\n\t{\n\t\tvar endInserts = endInserts || [];\n\t\tvar y = yKids[yIndex];\n\t\t_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);\n\t\tyIndex++;\n\t}\n\n\tif (localPatches.length > 0 || inserts.length > 0 || endInserts)\n\t{\n\t\t_VirtualDom_pushPatch(patches, 8, rootIndex, {\n\t\t\tw: localPatches,\n\t\t\tx: inserts,\n\t\t\ty: endInserts\n\t\t});\n\t}\n}\n\n\n\n// CHANGES FROM KEYED DIFF\n\n\nvar _VirtualDom_POSTFIX = '_elmW6BL';\n\n\nfunction _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)\n{\n\tvar entry = changes[key];\n\n\t// never seen this key before\n\tif (!entry)\n\t{\n\t\tentry = {\n\t\t\tc: 0,\n\t\t\tz: vnode,\n\t\t\tr: yIndex,\n\t\t\ts: undefined\n\t\t};\n\n\t\tinserts.push({ r: yIndex, A: entry });\n\t\tchanges[key] = entry;\n\n\t\treturn;\n\t}\n\n\t// this key was removed earlier, a match!\n\tif (entry.c === 1)\n\t{\n\t\tinserts.push({ r: yIndex, A: entry });\n\n\t\tentry.c = 2;\n\t\tvar subPatches = [];\n\t\t_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);\n\t\tentry.r = yIndex;\n\t\tentry.s.s = {\n\t\t\tw: subPatches,\n\t\t\tA: entry\n\t\t};\n\n\t\treturn;\n\t}\n\n\t// this key has already been inserted or moved, a duplicate!\n\t_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);\n}\n\n\nfunction _VirtualDom_removeNode(changes, localPatches, key, vnode, index)\n{\n\tvar entry = changes[key];\n\n\t// never seen this key before\n\tif (!entry)\n\t{\n\t\tvar patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);\n\n\t\tchanges[key] = {\n\t\t\tc: 1,\n\t\t\tz: vnode,\n\t\t\tr: index,\n\t\t\ts: patch\n\t\t};\n\n\t\treturn;\n\t}\n\n\t// this key was inserted earlier, a match!\n\tif (entry.c === 0)\n\t{\n\t\tentry.c = 2;\n\t\tvar subPatches = [];\n\t\t_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);\n\n\t\t_VirtualDom_pushPatch(localPatches, 9, index, {\n\t\t\tw: subPatches,\n\t\t\tA: entry\n\t\t});\n\n\t\treturn;\n\t}\n\n\t// this key has already been removed or moved, a duplicate!\n\t_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);\n}\n\n\n\n// ADD DOM NODES\n//\n// Each DOM node has an \"index\" assigned in order of traversal. It is important\n// to minimize our crawl over the actual DOM, so these indexes (along with the\n// descendantsCount of virtual nodes) let us skip touching entire subtrees of\n// the DOM if we know there are no patches there.\n\n\nfunction _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)\n{\n\t_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);\n}\n\n\n// assumes `patches` is non-empty and indexes increase monotonically.\nfunction _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)\n{\n\tvar patch = patches[i];\n\tvar index = patch.r;\n\n\twhile (index === low)\n\t{\n\t\tvar patchType = patch.$;\n\n\t\tif (patchType === 1)\n\t\t{\n\t\t\t_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);\n\t\t}\n\t\telse if (patchType === 8)\n\t\t{\n\t\t\tpatch.t = domNode;\n\t\t\tpatch.u = eventNode;\n\n\t\t\tvar subPatches = patch.s.w;\n\t\t\tif (subPatches.length > 0)\n\t\t\t{\n\t\t\t\t_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);\n\t\t\t}\n\t\t}\n\t\telse if (patchType === 9)\n\t\t{\n\t\t\tpatch.t = domNode;\n\t\t\tpatch.u = eventNode;\n\n\t\t\tvar data = patch.s;\n\t\t\tif (data)\n\t\t\t{\n\t\t\t\tdata.A.s = domNode;\n\t\t\t\tvar subPatches = data.w;\n\t\t\t\tif (subPatches.length > 0)\n\t\t\t\t{\n\t\t\t\t\t_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpatch.t = domNode;\n\t\t\tpatch.u = eventNode;\n\t\t}\n\n\t\ti++;\n\n\t\tif (!(patch = patches[i]) || (index = patch.r) > high)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\n\tvar tag = vNode.$;\n\n\tif (tag === 4)\n\t{\n\t\tvar subNode = vNode.k;\n\n\t\twhile (subNode.$ === 4)\n\t\t{\n\t\t\tsubNode = subNode.k;\n\t\t}\n\n\t\treturn _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);\n\t}\n\n\t// tag must be 1 or 2 at this point\n\n\tvar vKids = vNode.e;\n\tvar childNodes = domNode.childNodes;\n\tfor (var j = 0; j < vKids.length; j++)\n\t{\n\t\tlow++;\n\t\tvar vKid = tag === 1 ? vKids[j] : vKids[j].b;\n\t\tvar nextLow = low + (vKid.b || 0);\n\t\tif (low <= index && index <= nextLow)\n\t\t{\n\t\t\ti = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);\n\t\t\tif (!(patch = patches[i]) || (index = patch.r) > high)\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\tlow = nextLow;\n\t}\n\treturn i;\n}\n\n\n\n// APPLY PATCHES\n\n\nfunction _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)\n{\n\tif (patches.length === 0)\n\t{\n\t\treturn rootDomNode;\n\t}\n\n\t_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);\n\treturn _VirtualDom_applyPatchesHelp(rootDomNode, patches);\n}\n\nfunction _VirtualDom_applyPatchesHelp(rootDomNode, patches)\n{\n\tfor (var i = 0; i < patches.length; i++)\n\t{\n\t\tvar patch = patches[i];\n\t\tvar localDomNode = patch.t\n\t\tvar newNode = _VirtualDom_applyPatch(localDomNode, patch);\n\t\tif (localDomNode === rootDomNode)\n\t\t{\n\t\t\trootDomNode = newNode;\n\t\t}\n\t}\n\treturn rootDomNode;\n}\n\nfunction _VirtualDom_applyPatch(domNode, patch)\n{\n\tswitch (patch.$)\n\t{\n\t\tcase 0:\n\t\t\treturn _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);\n\n\t\tcase 4:\n\t\t\t_VirtualDom_applyFacts(domNode, patch.u, patch.s);\n\t\t\treturn domNode;\n\n\t\tcase 3:\n\t\t\tdomNode.replaceData(0, domNode.length, patch.s);\n\t\t\treturn domNode;\n\n\t\tcase 1:\n\t\t\treturn _VirtualDom_applyPatchesHelp(domNode, patch.s);\n\n\t\tcase 2:\n\t\t\tif (domNode.elm_event_node_ref)\n\t\t\t{\n\t\t\t\tdomNode.elm_event_node_ref.j = patch.s;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdomNode.elm_event_node_ref = { j: patch.s, p: patch.u };\n\t\t\t}\n\t\t\treturn domNode;\n\n\t\tcase 6:\n\t\t\tvar data = patch.s;\n\t\t\tfor (var i = 0; i < data.i; i++)\n\t\t\t{\n\t\t\t\tdomNode.removeChild(domNode.childNodes[data.v]);\n\t\t\t}\n\t\t\treturn domNode;\n\n\t\tcase 7:\n\t\t\tvar data = patch.s;\n\t\t\tvar kids = data.e;\n\t\t\tvar i = data.v;\n\t\t\tvar theEnd = domNode.childNodes[i];\n\t\t\tfor (; i < kids.length; i++)\n\t\t\t{\n\t\t\t\tdomNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);\n\t\t\t}\n\t\t\treturn domNode;\n\n\t\tcase 9:\n\t\t\tvar data = patch.s;\n\t\t\tif (!data)\n\t\t\t{\n\t\t\t\tdomNode.parentNode.removeChild(domNode);\n\t\t\t\treturn domNode;\n\t\t\t}\n\t\t\tvar entry = data.A;\n\t\t\tif (typeof entry.r !== 'undefined')\n\t\t\t{\n\t\t\t\tdomNode.parentNode.removeChild(domNode);\n\t\t\t}\n\t\t\tentry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);\n\t\t\treturn domNode;\n\n\t\tcase 8:\n\t\t\treturn _VirtualDom_applyPatchReorder(domNode, patch);\n\n\t\tcase 5:\n\t\t\treturn patch.s(domNode);\n\n\t\tdefault:\n\t\t\t_Debug_crash(10); // 'Ran into an unknown patch!'\n\t}\n}\n\n\nfunction _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)\n{\n\tvar parentNode = domNode.parentNode;\n\tvar newNode = _VirtualDom_render(vNode, eventNode);\n\n\tif (!newNode.elm_event_node_ref)\n\t{\n\t\tnewNode.elm_event_node_ref = domNode.elm_event_node_ref;\n\t}\n\n\tif (parentNode && newNode !== domNode)\n\t{\n\t\tparentNode.replaceChild(newNode, domNode);\n\t}\n\treturn newNode;\n}\n\n\nfunction _VirtualDom_applyPatchReorder(domNode, patch)\n{\n\tvar data = patch.s;\n\n\t// remove end inserts\n\tvar frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);\n\n\t// removals\n\tdomNode = _VirtualDom_applyPatchesHelp(domNode, data.w);\n\n\t// inserts\n\tvar inserts = data.x;\n\tfor (var i = 0; i < inserts.length; i++)\n\t{\n\t\tvar insert = inserts[i];\n\t\tvar entry = insert.A;\n\t\tvar node = entry.c === 2\n\t\t\t? entry.s\n\t\t\t: _VirtualDom_render(entry.z, patch.u);\n\t\tdomNode.insertBefore(node, domNode.childNodes[insert.r]);\n\t}\n\n\t// add end inserts\n\tif (frag)\n\t{\n\t\t_VirtualDom_appendChild(domNode, frag);\n\t}\n\n\treturn domNode;\n}\n\n\nfunction _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)\n{\n\tif (!endInserts)\n\t{\n\t\treturn;\n\t}\n\n\tvar frag = _VirtualDom_doc.createDocumentFragment();\n\tfor (var i = 0; i < endInserts.length; i++)\n\t{\n\t\tvar insert = endInserts[i];\n\t\tvar entry = insert.A;\n\t\t_VirtualDom_appendChild(frag, entry.c === 2\n\t\t\t? entry.s\n\t\t\t: _VirtualDom_render(entry.z, patch.u)\n\t\t);\n\t}\n\treturn frag;\n}\n\n\nfunction _VirtualDom_virtualize(node)\n{\n\t// TEXT NODES\n\n\tif (node.nodeType === 3)\n\t{\n\t\treturn _VirtualDom_text(node.textContent);\n\t}\n\n\n\t// WEIRD NODES\n\n\tif (node.nodeType !== 1)\n\t{\n\t\treturn _VirtualDom_text('');\n\t}\n\n\n\t// ELEMENT NODES\n\n\tvar attrList = _List_Nil;\n\tvar attrs = node.attributes;\n\tfor (var i = attrs.length; i--; )\n\t{\n\t\tvar attr = attrs[i];\n\t\tvar name = attr.name;\n\t\tvar value = attr.value;\n\t\tattrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );\n\t}\n\n\tvar tag = node.tagName.toLowerCase();\n\tvar kidList = _List_Nil;\n\tvar kids = node.childNodes;\n\n\tfor (var i = kids.length; i--; )\n\t{\n\t\tkidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);\n\t}\n\treturn A3(_VirtualDom_node, tag, attrList, kidList);\n}\n\nfunction _VirtualDom_dekey(keyedNode)\n{\n\tvar keyedKids = keyedNode.e;\n\tvar len = keyedKids.length;\n\tvar kids = new Array(len);\n\tfor (var i = 0; i < len; i++)\n\t{\n\t\tkids[i] = keyedKids[i].b;\n\t}\n\n\treturn {\n\t\t$: 1,\n\t\tc: keyedNode.c,\n\t\td: keyedNode.d,\n\t\te: kids,\n\t\tf: keyedNode.f,\n\t\tb: keyedNode.b\n\t};\n}\n\n\n\n\n// ELEMENT\n\n\nvar _Debugger_element;\n\nvar _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)\n{\n\treturn _Platform_initialize(\n\t\tflagDecoder,\n\t\targs,\n\t\timpl.init,\n\t\timpl.update,\n\t\timpl.subscriptions,\n\t\tfunction(sendToApp, initialModel) {\n\t\t\tvar view = impl.view;\n\t\t\t/**_UNUSED/\n\t\t\tvar domNode = args['node'];\n\t\t\t//*/\n\t\t\t/**/\n\t\t\tvar domNode = args && args['node'] ? args['node'] : _Debug_crash(0);\n\t\t\t//*/\n\t\t\tvar currNode = _VirtualDom_virtualize(domNode);\n\n\t\t\treturn _Browser_makeAnimator(initialModel, function(model)\n\t\t\t{\n\t\t\t\tvar nextNode = view(model);\n\t\t\t\tvar patches = _VirtualDom_diff(currNode, nextNode);\n\t\t\t\tdomNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);\n\t\t\t\tcurrNode = nextNode;\n\t\t\t});\n\t\t}\n\t);\n});\n\n\n\n// DOCUMENT\n\n\nvar _Debugger_document;\n\nvar _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)\n{\n\treturn _Platform_initialize(\n\t\tflagDecoder,\n\t\targs,\n\t\timpl.init,\n\t\timpl.update,\n\t\timpl.subscriptions,\n\t\tfunction(sendToApp, initialModel) {\n\t\t\tvar divertHrefToApp = impl.setup && impl.setup(sendToApp)\n\t\t\tvar view = impl.view;\n\t\t\tvar title = _VirtualDom_doc.title;\n\t\t\tvar bodyNode = _VirtualDom_doc.body;\n\t\t\tvar currNode = _VirtualDom_virtualize(bodyNode);\n\t\t\treturn _Browser_makeAnimator(initialModel, function(model)\n\t\t\t{\n\t\t\t\t_VirtualDom_divertHrefToApp = divertHrefToApp;\n\t\t\t\tvar doc = view(model);\n\t\t\t\tvar nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);\n\t\t\t\tvar patches = _VirtualDom_diff(currNode, nextNode);\n\t\t\t\tbodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);\n\t\t\t\tcurrNode = nextNode;\n\t\t\t\t_VirtualDom_divertHrefToApp = 0;\n\t\t\t\t(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);\n\t\t\t});\n\t\t}\n\t);\n});\n\n\n\n// ANIMATION\n\n\nvar _Browser_cancelAnimationFrame =\n\ttypeof cancelAnimationFrame !== 'undefined'\n\t\t? cancelAnimationFrame\n\t\t: function(id) { clearTimeout(id); };\n\nvar _Browser_requestAnimationFrame =\n\ttypeof requestAnimationFrame !== 'undefined'\n\t\t? requestAnimationFrame\n\t\t: function(callback) { return setTimeout(callback, 1000 / 60); };\n\n\nfunction _Browser_makeAnimator(model, draw)\n{\n\tdraw(model);\n\n\tvar state = 0;\n\n\tfunction updateIfNeeded()\n\t{\n\t\tstate = state === 1\n\t\t\t? 0\n\t\t\t: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );\n\t}\n\n\treturn function(nextModel, isSync)\n\t{\n\t\tmodel = nextModel;\n\n\t\tisSync\n\t\t\t? ( draw(model),\n\t\t\t\tstate === 2 && (state = 1)\n\t\t\t\t)\n\t\t\t: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),\n\t\t\t\tstate = 2\n\t\t\t\t);\n\t};\n}\n\n\n\n// APPLICATION\n\n\nfunction _Browser_application(impl)\n{\n\tvar onUrlChange = impl.onUrlChange;\n\tvar onUrlRequest = impl.onUrlRequest;\n\tvar key = function() { key.a(onUrlChange(_Browser_getUrl())); };\n\n\treturn _Browser_document({\n\t\tsetup: function(sendToApp)\n\t\t{\n\t\t\tkey.a = sendToApp;\n\t\t\t_Browser_window.addEventListener('popstate', key);\n\t\t\t_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);\n\n\t\t\treturn F2(function(domNode, event)\n\t\t\t{\n\t\t\t\tif (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))\n\t\t\t\t{\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tvar href = domNode.href;\n\t\t\t\t\tvar curr = _Browser_getUrl();\n\t\t\t\t\tvar next = elm$url$Url$fromString(href).a;\n\t\t\t\t\tsendToApp(onUrlRequest(\n\t\t\t\t\t\t(next\n\t\t\t\t\t\t\t&& curr.protocol === next.protocol\n\t\t\t\t\t\t\t&& curr.host === next.host\n\t\t\t\t\t\t\t&& curr.port_.a === next.port_.a\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t? elm$browser$Browser$Internal(next)\n\t\t\t\t\t\t\t: elm$browser$Browser$External(href)\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tinit: function(flags)\n\t\t{\n\t\t\treturn A3(impl.init, flags, _Browser_getUrl(), key);\n\t\t},\n\t\tview: impl.view,\n\t\tupdate: impl.update,\n\t\tsubscriptions: impl.subscriptions\n\t});\n}\n\nfunction _Browser_getUrl()\n{\n\treturn elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);\n}\n\nvar _Browser_go = F2(function(key, n)\n{\n\treturn A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {\n\t\tn && history.go(n);\n\t\tkey();\n\t}));\n});\n\nvar _Browser_pushUrl = F2(function(key, url)\n{\n\treturn A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {\n\t\thistory.pushState({}, '', url);\n\t\tkey();\n\t}));\n});\n\nvar _Browser_replaceUrl = F2(function(key, url)\n{\n\treturn A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {\n\t\thistory.replaceState({}, '', url);\n\t\tkey();\n\t}));\n});\n\n\n\n// GLOBAL EVENTS\n\n\nvar _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };\nvar _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;\nvar _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;\n\nvar _Browser_on = F3(function(node, eventName, sendToSelf)\n{\n\treturn _Scheduler_spawn(_Scheduler_binding(function(callback)\n\t{\n\t\tfunction handler(event)\t{ _Scheduler_rawSpawn(sendToSelf(event)); }\n\t\tnode.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });\n\t\treturn function() { node.removeEventListener(eventName, handler); };\n\t}));\n});\n\nvar _Browser_decodeEvent = F2(function(decoder, event)\n{\n\tvar result = _Json_runHelp(decoder, event);\n\treturn elm$core$Result$isOk(result) ? elm$core$Maybe$Just(result.a) : elm$core$Maybe$Nothing;\n});\n\n\n\n// PAGE VISIBILITY\n\n\nfunction _Browser_visibilityInfo()\n{\n\treturn (typeof _VirtualDom_doc.hidden !== 'undefined')\n\t\t? { hidden: 'hidden', change: 'visibilitychange' }\n\t\t:\n\t(typeof _VirtualDom_doc.mozHidden !== 'undefined')\n\t\t? { hidden: 'mozHidden', change: 'mozvisibilitychange' }\n\t\t:\n\t(typeof _VirtualDom_doc.msHidden !== 'undefined')\n\t\t? { hidden: 'msHidden', change: 'msvisibilitychange' }\n\t\t:\n\t(typeof _VirtualDom_doc.webkitHidden !== 'undefined')\n\t\t? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }\n\t\t: { hidden: 'hidden', change: 'visibilitychange' };\n}\n\n\n\n// ANIMATION FRAMES\n\n\nfunction _Browser_rAF()\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar id = _Browser_requestAnimationFrame(function() {\n\t\t\tcallback(_Scheduler_succeed(Date.now()));\n\t\t});\n\n\t\treturn function() {\n\t\t\t_Browser_cancelAnimationFrame(id);\n\t\t};\n\t});\n}\n\n\nfunction _Browser_now()\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tcallback(_Scheduler_succeed(Date.now()));\n\t});\n}\n\n\n\n// DOM STUFF\n\n\nfunction _Browser_withNode(id, doStuff)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\t_Browser_requestAnimationFrame(function() {\n\t\t\tvar node = document.getElementById(id);\n\t\t\tcallback(node\n\t\t\t\t? _Scheduler_succeed(doStuff(node))\n\t\t\t\t: _Scheduler_fail(elm$browser$Browser$Dom$NotFound(id))\n\t\t\t);\n\t\t});\n\t});\n}\n\n\nfunction _Browser_withWindow(doStuff)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\t_Browser_requestAnimationFrame(function() {\n\t\t\tcallback(_Scheduler_succeed(doStuff()));\n\t\t});\n\t});\n}\n\n\n// FOCUS and BLUR\n\n\nvar _Browser_call = F2(function(functionName, id)\n{\n\treturn _Browser_withNode(id, function(node) {\n\t\tnode[functionName]();\n\t\treturn _Utils_Tuple0;\n\t});\n});\n\n\n\n// WINDOW VIEWPORT\n\n\nfunction _Browser_getViewport()\n{\n\treturn {\n\t\tscene: _Browser_getScene(),\n\t\tviewport: {\n\t\t\tx: _Browser_window.pageXOffset,\n\t\t\ty: _Browser_window.pageYOffset,\n\t\t\twidth: _Browser_doc.documentElement.clientWidth,\n\t\t\theight: _Browser_doc.documentElement.clientHeight\n\t\t}\n\t};\n}\n\nfunction _Browser_getScene()\n{\n\tvar body = _Browser_doc.body;\n\tvar elem = _Browser_doc.documentElement;\n\treturn {\n\t\twidth: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),\n\t\theight: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)\n\t};\n}\n\nvar _Browser_setViewport = F2(function(x, y)\n{\n\treturn _Browser_withWindow(function()\n\t{\n\t\t_Browser_window.scroll(x, y);\n\t\treturn _Utils_Tuple0;\n\t});\n});\n\n\n\n// ELEMENT VIEWPORT\n\n\nfunction _Browser_getViewportOf(id)\n{\n\treturn _Browser_withNode(id, function(node)\n\t{\n\t\treturn {\n\t\t\tscene: {\n\t\t\t\twidth: node.scrollWidth,\n\t\t\t\theight: node.scrollHeight\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t\tx: node.scrollLeft,\n\t\t\t\ty: node.scrollTop,\n\t\t\t\twidth: node.clientWidth,\n\t\t\t\theight: node.clientHeight\n\t\t\t}\n\t\t};\n\t});\n}\n\n\nvar _Browser_setViewportOf = F3(function(id, x, y)\n{\n\treturn _Browser_withNode(id, function(node)\n\t{\n\t\tnode.scrollLeft = x;\n\t\tnode.scrollTop = y;\n\t\treturn _Utils_Tuple0;\n\t});\n});\n\n\n\n// ELEMENT\n\n\nfunction _Browser_getElement(id)\n{\n\treturn _Browser_withNode(id, function(node)\n\t{\n\t\tvar rect = node.getBoundingClientRect();\n\t\tvar x = _Browser_window.pageXOffset;\n\t\tvar y = _Browser_window.pageYOffset;\n\t\treturn {\n\t\t\tscene: _Browser_getScene(),\n\t\t\tviewport: {\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\twidth: _Browser_doc.documentElement.clientWidth,\n\t\t\t\theight: _Browser_doc.documentElement.clientHeight\n\t\t\t},\n\t\t\telement: {\n\t\t\t\tx: x + rect.left,\n\t\t\t\ty: y + rect.top,\n\t\t\t\twidth: rect.width,\n\t\t\t\theight: rect.height\n\t\t\t}\n\t\t};\n\t});\n}\n\n\n\n// LOAD and RELOAD\n\n\nfunction _Browser_reload(skipCache)\n{\n\treturn A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function(callback)\n\t{\n\t\t_VirtualDom_doc.location.reload(skipCache);\n\t}));\n}\n\nfunction _Browser_load(url)\n{\n\treturn A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function(callback)\n\t{\n\t\ttry\n\t\t{\n\t\t\t_Browser_window.location = url;\n\t\t}\n\t\tcatch(err)\n\t\t{\n\t\t\t// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.\n\t\t\t// Other browsers reload the page, so let's be consistent about that.\n\t\t\t_VirtualDom_doc.location.reload(false);\n\t\t}\n\t}));\n}\n\n\nfunction _Url_percentEncode(string)\n{\n\treturn encodeURIComponent(string);\n}\n\nfunction _Url_percentDecode(string)\n{\n\ttry\n\t{\n\t\treturn elm$core$Maybe$Just(decodeURIComponent(string));\n\t}\n\tcatch (e)\n\t{\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n}\n\n\nfunction _Time_now(millisToPosix)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tcallback(_Scheduler_succeed(millisToPosix(Date.now())));\n\t});\n}\n\nvar _Time_setInterval = F2(function(interval, task)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);\n\t\treturn function() { clearInterval(id); };\n\t});\n});\n\nfunction _Time_here()\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tcallback(_Scheduler_succeed(\n\t\t\tA2(elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)\n\t\t));\n\t});\n}\n\n\nfunction _Time_getZoneName()\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar name = elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tvar name = elm$time$Time$Offset(new Date().getTimezoneOffset());\n\t\t}\n\t\tcallback(_Scheduler_succeed(name));\n\t});\n}\n\n\n\n// DECODER\n\nvar _File_decoder = _Json_decodePrim(function(value) {\n\t// NOTE: checks if `File` exists in case this is run on node\n\treturn (typeof File !== 'undefined' && value instanceof File)\n\t\t? elm$core$Result$Ok(value)\n\t\t: _Json_expecting('a FILE', value);\n});\n\n\n// METADATA\n\nfunction _File_name(file) { return file.name; }\nfunction _File_mime(file) { return file.type; }\nfunction _File_size(file) { return file.size; }\n\nfunction _File_lastModified(file)\n{\n\treturn elm$time$Time$millisToPosix(file.lastModified);\n}\n\n\n// DOWNLOAD\n\nvar _File_downloadNode;\n\nfunction _File_getDownloadNode()\n{\n\treturn _File_downloadNode || (_File_downloadNode = document.createElement('a'));\n}\n\nvar _File_download = F3(function(name, mime, content)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar blob = new Blob([content], {type: mime});\n\n\t\t// for IE10+\n\t\tif (navigator.msSaveOrOpenBlob)\n\t\t{\n\t\t\tnavigator.msSaveOrOpenBlob(blob, name);\n\t\t\treturn;\n\t\t}\n\n\t\t// for HTML5\n\t\tvar node = _File_getDownloadNode();\n\t\tvar objectUrl = URL.createObjectURL(blob);\n\t\tnode.href = objectUrl;\n\t\tnode.download = name;\n\t\t_File_click(node);\n\t\tURL.revokeObjectURL(objectUrl);\n\t});\n});\n\nfunction _File_downloadUrl(href)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar node = _File_getDownloadNode();\n\t\tnode.href = href;\n\t\tnode.download = '';\n\t\tnode.origin === location.origin || (node.target = '_blank');\n\t\t_File_click(node);\n\t});\n}\n\n\n// IE COMPATIBILITY\n\nfunction _File_makeBytesSafeForInternetExplorer(bytes)\n{\n\t// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10\n\t// all other browsers can just run `new Blob([bytes])` directly with no problem\n\t//\n\treturn new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\n\nfunction _File_click(node)\n{\n\t// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11\n\t// all other browsers have MouseEvent and do not need this conditional stuff\n\t//\n\tif (typeof MouseEvent === 'function')\n\t{\n\t\tnode.dispatchEvent(new MouseEvent('click'));\n\t}\n\telse\n\t{\n\t\tvar event = document.createEvent('MouseEvents');\n\t\tevent.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\t\tdocument.body.appendChild(node);\n\t\tnode.dispatchEvent(event);\n\t\tdocument.body.removeChild(node);\n\t}\n}\n\n\n// UPLOAD\n\nvar _File_node;\n\nfunction _File_uploadOne(mimes)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\t_File_node = document.createElement('input');\n\t\t_File_node.type = 'file';\n\t\t_File_node.accept = A2(elm$core$String$join, ',', mimes);\n\t\t_File_node.addEventListener('change', function(event)\n\t\t{\n\t\t\tcallback(_Scheduler_succeed(event.target.files[0]));\n\t\t});\n\t\t_File_click(_File_node);\n\t});\n}\n\nfunction _File_uploadOneOrMore(mimes)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\t_File_node = document.createElement('input');\n\t\t_File_node.type = 'file';\n\t\t_File_node.multiple = true;\n\t\t_File_node.accept = A2(elm$core$String$join, ',', mimes);\n\t\t_File_node.addEventListener('change', function(event)\n\t\t{\n\t\t\tvar elmFiles = _List_fromArray(event.target.files);\n\t\t\tcallback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));\n\t\t});\n\t\t_File_click(_File_node);\n\t});\n}\n\n\n// CONTENT\n\nfunction _File_toString(blob)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar reader = new FileReader();\n\t\treader.addEventListener('loadend', function() {\n\t\t\tcallback(_Scheduler_succeed(reader.result));\n\t\t});\n\t\treader.readAsText(blob);\n\t\treturn function() { reader.abort(); };\n\t});\n}\n\nfunction _File_toBytes(blob)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar reader = new FileReader();\n\t\treader.addEventListener('loadend', function() {\n\t\t\tcallback(_Scheduler_succeed(new DataView(reader.result)));\n\t\t});\n\t\treader.readAsArrayBuffer(blob);\n\t\treturn function() { reader.abort(); };\n\t});\n}\n\nfunction _File_toUrl(blob)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar reader = new FileReader();\n\t\treader.addEventListener('loadend', function() {\n\t\t\tcallback(_Scheduler_succeed(reader.result));\n\t\t});\n\t\treader.readAsDataURL(blob);\n\t\treturn function() { reader.abort(); };\n\t});\n}\n\n\n\n\nvar _Bitwise_and = F2(function(a, b)\n{\n\treturn a & b;\n});\n\nvar _Bitwise_or = F2(function(a, b)\n{\n\treturn a | b;\n});\n\nvar _Bitwise_xor = F2(function(a, b)\n{\n\treturn a ^ b;\n});\n\nfunction _Bitwise_complement(a)\n{\n\treturn ~a;\n};\n\nvar _Bitwise_shiftLeftBy = F2(function(offset, a)\n{\n\treturn a << offset;\n});\n\nvar _Bitwise_shiftRightBy = F2(function(offset, a)\n{\n\treturn a >> offset;\n});\n\nvar _Bitwise_shiftRightZfBy = F2(function(offset, a)\n{\n\treturn a >>> offset;\n});\n\n\n\n\n// VIRTUAL-DOM WIDGETS\n\n\nvar _Markdown_toHtml = F3(function(options, factList, rawMarkdown)\n{\n\treturn _VirtualDom_custom(\n\t\tfactList,\n\t\t{\n\t\t\ta: options,\n\t\t\tb: rawMarkdown\n\t\t},\n\t\t_Markdown_render,\n\t\t_Markdown_diff\n\t);\n});\n\n\n\n// WIDGET IMPLEMENTATION\n\n\nfunction _Markdown_render(model)\n{\n\treturn A2(_Markdown_replace, model, _VirtualDom_doc.createElement('div'));\n}\n\n\nfunction _Markdown_diff(x, y)\n{\n\treturn x.b === y.b && x.a === y.a\n\t\t? false\n\t\t: _Markdown_replace(y);\n}\n\n\nvar _Markdown_replace = F2(function(model, div)\n{\n\tdiv.innerHTML = _Markdown_marked(model.b, _Markdown_formatOptions(model.a));\n\treturn div;\n});\n\n\n\n// ACTUAL MARKDOWN PARSER\n\n\nvar _Markdown_marked = function() {\n\t// catch the `marked` object regardless of the outer environment.\n\t// (ex. a CommonJS module compatible environment.)\n\t// note that this depends on marked's implementation of environment detection.\n\tvar module = {};\n\tvar exports = module.exports = {};\n\n\t/**\n\t * marked - a markdown parser\n\t * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n\t * https://github.com/chjj/marked\n\t * commit cd2f6f5b7091154c5526e79b5f3bfb4d15995a51\n\t */\n\t(function(){var block={newline:/^\\n+/,code:/^( {4}[^\\n]+\\n*)+/,fences:noop,hr:/^( *[-*_]){3,} *(?:\\n+|$)/,heading:/^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,nptable:noop,lheading:/^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,blockquote:/^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,list:/^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,html:/^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,table:noop,paragraph:/^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,text:/^[^\\n]+/};block.bullet=/(?:[*+-]|\\d+\\.)/;block.item=/^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;block.item=replace(block.item,\"gm\")(/bull/g,block.bullet)();block.list=replace(block.list)(/bull/g,block.bullet)(\"hr\",\"\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))\")(\"def\",\"\\\\n+(?=\"+block.def.source+\")\")();block.blockquote=replace(block.blockquote)(\"def\",block.def)();block._tag=\"(?!(?:\"+\"a|em|strong|small|s|cite|q|dfn|abbr|data|time|code\"+\"|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo\"+\"|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b\";block.html=replace(block.html)(\"comment\",/<!--[\\s\\S]*?-->/)(\"closed\",/<(tag)[\\s\\S]+?<\\/\\1>/)(\"closing\",/<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)(/tag/g,block._tag)();block.paragraph=replace(block.paragraph)(\"hr\",block.hr)(\"heading\",block.heading)(\"lheading\",block.lheading)(\"blockquote\",block.blockquote)(\"tag\",\"<\"+block._tag)(\"def\",block.def)();block.normal=merge({},block);block.gfm=merge({},block.normal,{fences:/^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/});block.gfm.paragraph=replace(block.paragraph)(\"(?!\",\"(?!\"+block.gfm.fences.source.replace(\"\\\\1\",\"\\\\2\")+\"|\"+block.list.source.replace(\"\\\\1\",\"\\\\3\")+\"|\")();block.tables=merge({},block.gfm,{nptable:/^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,table:/^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/});function Lexer(options){this.tokens=[];this.tokens.links={};this.options=options||marked.defaults;this.rules=block.normal;if(this.options.gfm){if(this.options.tables){this.rules=block.tables}else{this.rules=block.gfm}}}Lexer.rules=block;Lexer.lex=function(src,options){var lexer=new Lexer(options);return lexer.lex(src)};Lexer.prototype.lex=function(src){src=src.replace(/\\r\\n|\\r/g,\"\\n\").replace(/\\t/g,\"    \").replace(/\\u00a0/g,\" \").replace(/\\u2424/g,\"\\n\");return this.token(src,true)};Lexer.prototype.token=function(src,top,bq){var src=src.replace(/^ +$/gm,\"\"),next,loose,cap,bull,b,item,space,i,l;while(src){if(cap=this.rules.newline.exec(src)){src=src.substring(cap[0].length);if(cap[0].length>1){this.tokens.push({type:\"space\"})}}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);cap=cap[0].replace(/^ {4}/gm,\"\");this.tokens.push({type:\"code\",text:!this.options.pedantic?cap.replace(/\\n+$/,\"\"):cap});continue}if(cap=this.rules.fences.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"code\",lang:cap[2],text:cap[3]||\"\"});continue}if(cap=this.rules.heading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"heading\",depth:cap[1].length,text:cap[2]});continue}if(top&&(cap=this.rules.nptable.exec(src))){src=src.substring(cap[0].length);item={type:\"table\",header:cap[1].replace(/^ *| *\\| *$/g,\"\").split(/ *\\| */),align:cap[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:cap[3].replace(/\\n$/,\"\").split(\"\\n\")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]=\"right\"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]=\"center\"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]=\"left\"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].split(/ *\\| */)}this.tokens.push(item);continue}if(cap=this.rules.lheading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"heading\",depth:cap[2]===\"=\"?1:2,text:cap[1]});continue}if(cap=this.rules.hr.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"hr\"});continue}if(cap=this.rules.blockquote.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"blockquote_start\"});cap=cap[0].replace(/^ *> ?/gm,\"\");this.token(cap,top,true);this.tokens.push({type:\"blockquote_end\"});continue}if(cap=this.rules.list.exec(src)){src=src.substring(cap[0].length);bull=cap[2];this.tokens.push({type:\"list_start\",ordered:bull.length>1});cap=cap[0].match(this.rules.item);next=false;l=cap.length;i=0;for(;i<l;i++){item=cap[i];space=item.length;item=item.replace(/^ *([*+-]|\\d+\\.) +/,\"\");if(~item.indexOf(\"\\n \")){space-=item.length;item=!this.options.pedantic?item.replace(new RegExp(\"^ {1,\"+space+\"}\",\"gm\"),\"\"):item.replace(/^ {1,4}/gm,\"\")}if(this.options.smartLists&&i!==l-1){b=block.bullet.exec(cap[i+1])[0];if(bull!==b&&!(bull.length>1&&b.length>1)){src=cap.slice(i+1).join(\"\\n\")+src;i=l-1}}loose=next||/\\n\\n(?!\\s*$)/.test(item);if(i!==l-1){next=item.charAt(item.length-1)===\"\\n\";if(!loose)loose=next}this.tokens.push({type:loose?\"loose_item_start\":\"list_item_start\"});this.token(item,false,bq);this.tokens.push({type:\"list_item_end\"})}this.tokens.push({type:\"list_end\"});continue}if(cap=this.rules.html.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:this.options.sanitize?\"paragraph\":\"html\",pre:!this.options.sanitizer&&(cap[1]===\"pre\"||cap[1]===\"script\"||cap[1]===\"style\"),text:cap[0]});continue}if(!bq&&top&&(cap=this.rules.def.exec(src))){src=src.substring(cap[0].length);this.tokens.links[cap[1].toLowerCase()]={href:cap[2],title:cap[3]};continue}if(top&&(cap=this.rules.table.exec(src))){src=src.substring(cap[0].length);item={type:\"table\",header:cap[1].replace(/^ *| *\\| *$/g,\"\").split(/ *\\| */),align:cap[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:cap[3].replace(/(?: *\\| *)?\\n$/,\"\").split(\"\\n\")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]=\"right\"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]=\"center\"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]=\"left\"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].replace(/^ *\\| *| *\\| *$/g,\"\").split(/ *\\| */)}this.tokens.push(item);continue}if(top&&(cap=this.rules.paragraph.exec(src))){src=src.substring(cap[0].length);this.tokens.push({type:\"paragraph\",text:cap[1].charAt(cap[1].length-1)===\"\\n\"?cap[1].slice(0,-1):cap[1]});continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"text\",text:cap[0]});continue}if(src){throw new Error(\"Infinite loop on byte: \"+src.charCodeAt(0))}}return this.tokens};var inline={escape:/^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,autolink:/^<([^ >]+(@|:\\/)[^ >]+)>/,url:noop,tag:/^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,link:/^!?\\[(inside)\\]\\(href\\)/,reflink:/^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,nolink:/^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,strong:/^_\\_([\\s\\S]+?)_\\_(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,em:/^\\b_((?:[^_]|_\\_)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,code:/^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,br:/^ {2,}\\n(?!\\s*$)/,del:noop,text:/^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/};inline._inside=/(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;inline._href=/\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;inline.link=replace(inline.link)(\"inside\",inline._inside)(\"href\",inline._href)();inline.reflink=replace(inline.reflink)(\"inside\",inline._inside)();inline.normal=merge({},inline);inline.pedantic=merge({},inline.normal,{strong:/^_\\_(?=\\S)([\\s\\S]*?\\S)_\\_(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,em:/^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/});inline.gfm=merge({},inline.normal,{escape:replace(inline.escape)(\"])\",\"~|])\")(),url:/^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,del:/^~~(?=\\S)([\\s\\S]*?\\S)~~/,text:replace(inline.text)(\"]|\",\"~]|\")(\"|\",\"|https?://|\")()});inline.breaks=merge({},inline.gfm,{br:replace(inline.br)(\"{2,}\",\"*\")(),text:replace(inline.gfm.text)(\"{2,}\",\"*\")()});function InlineLexer(links,options){this.options=options||marked.defaults;this.links=links;this.rules=inline.normal;this.renderer=this.options.renderer||new Renderer;this.renderer.options=this.options;if(!this.links){throw new Error(\"Tokens array requires a `links` property.\")}if(this.options.gfm){if(this.options.breaks){this.rules=inline.breaks}else{this.rules=inline.gfm}}else if(this.options.pedantic){this.rules=inline.pedantic}}InlineLexer.rules=inline;InlineLexer.output=function(src,links,options){var inline=new InlineLexer(links,options);return inline.output(src)};InlineLexer.prototype.output=function(src){var out=\"\",link,text,href,cap;while(src){if(cap=this.rules.escape.exec(src)){src=src.substring(cap[0].length);out+=cap[1];continue}if(cap=this.rules.autolink.exec(src)){src=src.substring(cap[0].length);if(cap[2]===\"@\"){text=cap[1].charAt(6)===\":\"?this.mangle(cap[1].substring(7)):this.mangle(cap[1]);href=this.mangle(\"mailto:\")+text}else{text=escape(cap[1]);href=text}out+=this.renderer.link(href,null,text);continue}if(!this.inLink&&(cap=this.rules.url.exec(src))){src=src.substring(cap[0].length);text=escape(cap[1]);href=text;out+=this.renderer.link(href,null,text);continue}if(cap=this.rules.tag.exec(src)){if(!this.inLink&&/^<a /i.test(cap[0])){this.inLink=true}else if(this.inLink&&/^<\\/a>/i.test(cap[0])){this.inLink=false}src=src.substring(cap[0].length);out+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(cap[0]):escape(cap[0]):cap[0];continue}if(cap=this.rules.link.exec(src)){src=src.substring(cap[0].length);this.inLink=true;out+=this.outputLink(cap,{href:cap[2],title:cap[3]});this.inLink=false;continue}if((cap=this.rules.reflink.exec(src))||(cap=this.rules.nolink.exec(src))){src=src.substring(cap[0].length);link=(cap[2]||cap[1]).replace(/\\s+/g,\" \");link=this.links[link.toLowerCase()];if(!link||!link.href){out+=cap[0].charAt(0);src=cap[0].substring(1)+src;continue}this.inLink=true;out+=this.outputLink(cap,link);this.inLink=false;continue}if(cap=this.rules.strong.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.strong(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.em.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.em(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.codespan(escape(cap[2],true));continue}if(cap=this.rules.br.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.br();continue}if(cap=this.rules.del.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.del(this.output(cap[1]));continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.text(escape(this.smartypants(cap[0])));continue}if(src){throw new Error(\"Infinite loop on byte: \"+src.charCodeAt(0))}}return out};InlineLexer.prototype.outputLink=function(cap,link){var href=escape(link.href),title=link.title?escape(link.title):null;return cap[0].charAt(0)!==\"!\"?this.renderer.link(href,title,this.output(cap[1])):this.renderer.image(href,title,escape(cap[1]))};InlineLexer.prototype.smartypants=function(text){if(!this.options.smartypants)return text;return text.replace(/---/g,\"—\").replace(/--/g,\"–\").replace(/(^|[-\\u2014\\/(\\[{\"\\s])'/g,\"$1‘\").replace(/'/g,\"’\").replace(/(^|[-\\u2014\\/(\\[{\\u2018\\s])\"/g,\"$1“\").replace(/\"/g,\"”\").replace(/\\.{3}/g,\"…\")};InlineLexer.prototype.mangle=function(text){if(!this.options.mangle)return text;var out=\"\",l=text.length,i=0,ch;for(;i<l;i++){ch=text.charCodeAt(i);if(Math.random()>.5){ch=\"x\"+ch.toString(16)}out+=\"&#\"+ch+\";\"}return out};function Renderer(options){this.options=options||{}}Renderer.prototype.code=function(code,lang,escaped){if(this.options.highlight){var out=this.options.highlight(code,lang);if(out!=null&&out!==code){escaped=true;code=out}}if(!lang){return\"<pre><code>\"+(escaped?code:escape(code,true))+\"\\n</code></pre>\"}return'<pre><code class=\"'+this.options.langPrefix+escape(lang,true)+'\">'+(escaped?code:escape(code,true))+\"\\n</code></pre>\\n\"};Renderer.prototype.blockquote=function(quote){return\"<blockquote>\\n\"+quote+\"</blockquote>\\n\"};Renderer.prototype.html=function(html){return html};Renderer.prototype.heading=function(text,level,raw){return\"<h\"+level+' id=\"'+this.options.headerPrefix+raw.toLowerCase().replace(/[^\\w]+/g,\"-\")+'\">'+text+\"</h\"+level+\">\\n\"};Renderer.prototype.hr=function(){return this.options.xhtml?\"<hr/>\\n\":\"<hr>\\n\"};Renderer.prototype.list=function(body,ordered){var type=ordered?\"ol\":\"ul\";return\"<\"+type+\">\\n\"+body+\"</\"+type+\">\\n\"};Renderer.prototype.listitem=function(text){return\"<li>\"+text+\"</li>\\n\"};Renderer.prototype.paragraph=function(text){return\"<p>\"+text+\"</p>\\n\"};Renderer.prototype.table=function(header,body){return\"<table>\\n\"+\"<thead>\\n\"+header+\"</thead>\\n\"+\"<tbody>\\n\"+body+\"</tbody>\\n\"+\"</table>\\n\"};Renderer.prototype.tablerow=function(content){return\"<tr>\\n\"+content+\"</tr>\\n\"};Renderer.prototype.tablecell=function(content,flags){var type=flags.header?\"th\":\"td\";var tag=flags.align?\"<\"+type+' style=\"text-align:'+flags.align+'\">':\"<\"+type+\">\";return tag+content+\"</\"+type+\">\\n\"};Renderer.prototype.strong=function(text){return\"<strong>\"+text+\"</strong>\"};Renderer.prototype.em=function(text){return\"<em>\"+text+\"</em>\"};Renderer.prototype.codespan=function(text){return\"<code>\"+text+\"</code>\"};Renderer.prototype.br=function(){return this.options.xhtml?\"<br/>\":\"<br>\"};Renderer.prototype.del=function(text){return\"<del>\"+text+\"</del>\"};Renderer.prototype.link=function(href,title,text){if(this.options.sanitize){try{var prot=decodeURIComponent(unescape(href)).replace(/[^\\w:]/g,\"\").toLowerCase()}catch(e){return\"\"}if(prot.indexOf(\"javascript:\")===0||prot.indexOf(\"vbscript:\")===0||prot.indexOf(\"data:\")===0){return\"\"}}var out='<a href=\"'+href+'\"';if(title){out+=' title=\"'+title+'\"'}out+=\">\"+text+\"</a>\";return out};Renderer.prototype.image=function(href,title,text){var out='<img src=\"'+href+'\" alt=\"'+text+'\"';if(title){out+=' title=\"'+title+'\"'}out+=this.options.xhtml?\"/>\":\">\";return out};Renderer.prototype.text=function(text){return text};function Parser(options){this.tokens=[];this.token=null;this.options=options||marked.defaults;this.options.renderer=this.options.renderer||new Renderer;this.renderer=this.options.renderer;this.renderer.options=this.options}Parser.parse=function(src,options,renderer){var parser=new Parser(options,renderer);return parser.parse(src)};Parser.prototype.parse=function(src){this.inline=new InlineLexer(src.links,this.options,this.renderer);this.tokens=src.reverse();var out=\"\";while(this.next()){out+=this.tok()}return out};Parser.prototype.next=function(){return this.token=this.tokens.pop()};Parser.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0};Parser.prototype.parseText=function(){var body=this.token.text;while(this.peek().type===\"text\"){body+=\"\\n\"+this.next().text}return this.inline.output(body)};Parser.prototype.tok=function(){switch(this.token.type){case\"space\":{return\"\"}case\"hr\":{return this.renderer.hr()}case\"heading\":{return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,this.token.text)}case\"code\":{return this.renderer.code(this.token.text,this.token.lang,this.token.escaped)}case\"table\":{var header=\"\",body=\"\",i,row,cell,flags,j;cell=\"\";for(i=0;i<this.token.header.length;i++){flags={header:true,align:this.token.align[i]};cell+=this.renderer.tablecell(this.inline.output(this.token.header[i]),{header:true,align:this.token.align[i]})}header+=this.renderer.tablerow(cell);for(i=0;i<this.token.cells.length;i++){row=this.token.cells[i];cell=\"\";for(j=0;j<row.length;j++){cell+=this.renderer.tablecell(this.inline.output(row[j]),{header:false,align:this.token.align[j]})}body+=this.renderer.tablerow(cell)}return this.renderer.table(header,body)}case\"blockquote_start\":{var body=\"\";while(this.next().type!==\"blockquote_end\"){body+=this.tok()}return this.renderer.blockquote(body)}case\"list_start\":{var body=\"\",ordered=this.token.ordered;while(this.next().type!==\"list_end\"){body+=this.tok()}return this.renderer.list(body,ordered)}case\"list_item_start\":{var body=\"\";while(this.next().type!==\"list_item_end\"){body+=this.token.type===\"text\"?this.parseText():this.tok()}return this.renderer.listitem(body)}case\"loose_item_start\":{var body=\"\";while(this.next().type!==\"list_item_end\"){body+=this.tok()}return this.renderer.listitem(body)}case\"html\":{var html=!this.token.pre&&!this.options.pedantic?this.inline.output(this.token.text):this.token.text;return this.renderer.html(html)}case\"paragraph\":{return this.renderer.paragraph(this.inline.output(this.token.text))}case\"text\":{return this.renderer.paragraph(this.parseText())}}};function escape(html,encode){return html.replace(!encode?/&(?!#?\\w+;)/g:/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\")}function unescape(html){return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/g,function(_,n){n=n.toLowerCase();if(n===\"colon\")return\":\";if(n.charAt(0)===\"#\"){return n.charAt(1)===\"x\"?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1))}return\"\"})}function replace(regex,opt){regex=regex.source;opt=opt||\"\";return function self(name,val){if(!name)return new RegExp(regex,opt);val=val.source||val;val=val.replace(/(^|[^\\[])\\^/g,\"$1\");regex=regex.replace(name,val);return self}}function noop(){}noop.exec=noop;function merge(obj){var i=1,target,key;for(;i<arguments.length;i++){target=arguments[i];for(key in target){if(Object.prototype.hasOwnProperty.call(target,key)){obj[key]=target[key]}}}return obj}function marked(src,opt,callback){if(callback||typeof opt===\"function\"){if(!callback){callback=opt;opt=null}opt=merge({},marked.defaults,opt||{});var highlight=opt.highlight,tokens,pending,i=0;try{tokens=Lexer.lex(src,opt)}catch(e){return callback(e)}pending=tokens.length;var done=function(err){if(err){opt.highlight=highlight;return callback(err)}var out;try{out=Parser.parse(tokens,opt)}catch(e){err=e}opt.highlight=highlight;return err?callback(err):callback(null,out)};if(!highlight||highlight.length<3){return done()}delete opt.highlight;if(!pending)return done();for(;i<tokens.length;i++){(function(token){if(token.type!==\"code\"){return--pending||done()}return highlight(token.text,token.lang,function(err,code){if(err)return done(err);if(code==null||code===token.text){return--pending||done()}token.text=code;token.escaped=true;--pending||done()})})(tokens[i])}return}try{if(opt)opt=merge({},marked.defaults,opt);return Parser.parse(Lexer.lex(src,opt),opt)}catch(e){e.message+=\"\\nPlease report this to https://github.com/chjj/marked.\";if((opt||marked.defaults).silent){return\"<p>An error occured:</p><pre>\"+escape(e.message+\"\",true)+\"</pre>\"}throw e}}marked.options=marked.setOptions=function(opt){merge(marked.defaults,opt);return marked};marked.defaults={gfm:true,tables:true,breaks:false,pedantic:false,sanitize:false,sanitizer:null,mangle:true,smartLists:false,silent:false,highlight:null,langPrefix:\"lang-\",smartypants:false,headerPrefix:\"\",renderer:new Renderer,xhtml:false};marked.Parser=Parser;marked.parser=Parser.parse;marked.Renderer=Renderer;marked.Lexer=Lexer;marked.lexer=Lexer.lex;marked.InlineLexer=InlineLexer;marked.inlineLexer=InlineLexer.output;marked.parse=marked;if(typeof module!==\"undefined\"&&typeof exports===\"object\"){module.exports=marked}else if(typeof define===\"function\"&&define.amd){define(function(){return marked})}else{this.marked=marked}}).call(function(){return this||(typeof window!==\"undefined\"?window:global)}());\n\n\treturn module.exports;\n}();\n\n\n// FORMAT OPTIONS FOR MARKED IMPLEMENTATION\n\nfunction _Markdown_formatOptions(options)\n{\n\tfunction toHighlight(code, lang)\n\t{\n\t\tif (!lang && elm$core$Maybe$isJust(options.defaultHighlighting))\n\t\t{\n\t\t\tlang = options.defaultHighlighting.a;\n\t\t}\n\n\t\tif (typeof hljs !== 'undefined' && lang && hljs.listLanguages().indexOf(lang) >= 0)\n\t\t{\n\t\t\treturn hljs.highlight(lang, code, true).value;\n\t\t}\n\n\t\treturn code;\n\t}\n\n\tvar gfm = options.githubFlavored.a;\n\n\treturn {\n\t\thighlight: toHighlight,\n\t\tgfm: gfm,\n\t\ttables: gfm && gfm.tables,\n\t\tbreaks: gfm && gfm.breaks,\n\t\tsanitize: options.sanitize,\n\t\tsmartypants: options.smartypants\n\t};\n}\nvar author$project$Main$UrlChange = function (a) {\n\treturn {$: 'UrlChange', a: a};\n};\nvar author$project$Main$UrlRequest = function (a) {\n\treturn {$: 'UrlRequest', a: a};\n};\nvar author$project$Components$SearchBar$Invalid = {$: 'Invalid'};\nvar author$project$Components$SearchBar$Model = F3(\n\tfunction (searchValue, key, state) {\n\t\treturn {key: key, searchValue: searchValue, state: state};\n\t});\nvar elm$core$Basics$False = {$: 'False'};\nvar elm$core$Basics$True = {$: 'True'};\nvar elm$core$Result$isOk = function (result) {\n\tif (result.$ === 'Ok') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\nvar elm$core$Basics$EQ = {$: 'EQ'};\nvar elm$core$Basics$GT = {$: 'GT'};\nvar elm$core$Basics$LT = {$: 'LT'};\nvar elm$core$Dict$foldr = F3(\n\tfunction (func, acc, t) {\n\t\tfoldr:\n\t\twhile (true) {\n\t\t\tif (t.$ === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar key = t.b;\n\t\t\t\tvar value = t.c;\n\t\t\t\tvar left = t.d;\n\t\t\t\tvar right = t.e;\n\t\t\t\tvar $temp$func = func,\n\t\t\t\t\t$temp$acc = A3(\n\t\t\t\t\tfunc,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tA3(elm$core$Dict$foldr, func, acc, right)),\n\t\t\t\t\t$temp$t = left;\n\t\t\t\tfunc = $temp$func;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tt = $temp$t;\n\t\t\t\tcontinue foldr;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$cons = _List_cons;\nvar elm$core$Dict$toList = function (dict) {\n\treturn A3(\n\t\telm$core$Dict$foldr,\n\t\tF3(\n\t\t\tfunction (key, value, list) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t_Utils_Tuple2(key, value),\n\t\t\t\t\tlist);\n\t\t\t}),\n\t\t_List_Nil,\n\t\tdict);\n};\nvar elm$core$Dict$keys = function (dict) {\n\treturn A3(\n\t\telm$core$Dict$foldr,\n\t\tF3(\n\t\t\tfunction (key, value, keyList) {\n\t\t\t\treturn A2(elm$core$List$cons, key, keyList);\n\t\t\t}),\n\t\t_List_Nil,\n\t\tdict);\n};\nvar elm$core$Set$toList = function (_n0) {\n\tvar dict = _n0.a;\n\treturn elm$core$Dict$keys(dict);\n};\nvar elm$core$Elm$JsArray$foldr = _JsArray_foldr;\nvar elm$core$Array$foldr = F3(\n\tfunction (func, baseCase, _n0) {\n\t\tvar tree = _n0.c;\n\t\tvar tail = _n0.d;\n\t\tvar helper = F2(\n\t\t\tfunction (node, acc) {\n\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\tvar subTree = node.a;\n\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldr, helper, acc, subTree);\n\t\t\t\t} else {\n\t\t\t\t\tvar values = node.a;\n\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldr, func, acc, values);\n\t\t\t\t}\n\t\t\t});\n\t\treturn A3(\n\t\t\telm$core$Elm$JsArray$foldr,\n\t\t\thelper,\n\t\t\tA3(elm$core$Elm$JsArray$foldr, func, baseCase, tail),\n\t\t\ttree);\n\t});\nvar elm$core$Array$toList = function (array) {\n\treturn A3(elm$core$Array$foldr, elm$core$List$cons, _List_Nil, array);\n};\nvar elm$core$Array$branchFactor = 32;\nvar elm$core$Array$Array_elm_builtin = F4(\n\tfunction (a, b, c, d) {\n\t\treturn {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};\n\t});\nvar elm$core$Basics$ceiling = _Basics_ceiling;\nvar elm$core$Basics$fdiv = _Basics_fdiv;\nvar elm$core$Basics$logBase = F2(\n\tfunction (base, number) {\n\t\treturn _Basics_log(number) / _Basics_log(base);\n\t});\nvar elm$core$Basics$toFloat = _Basics_toFloat;\nvar elm$core$Array$shiftStep = elm$core$Basics$ceiling(\n\tA2(elm$core$Basics$logBase, 2, elm$core$Array$branchFactor));\nvar elm$core$Elm$JsArray$empty = _JsArray_empty;\nvar elm$core$Array$empty = A4(elm$core$Array$Array_elm_builtin, 0, elm$core$Array$shiftStep, elm$core$Elm$JsArray$empty, elm$core$Elm$JsArray$empty);\nvar elm$core$Array$Leaf = function (a) {\n\treturn {$: 'Leaf', a: a};\n};\nvar elm$core$Array$SubTree = function (a) {\n\treturn {$: 'SubTree', a: a};\n};\nvar elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;\nvar elm$core$List$foldl = F3(\n\tfunction (func, acc, list) {\n\t\tfoldl:\n\t\twhile (true) {\n\t\t\tif (!list.b) {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar x = list.a;\n\t\t\t\tvar xs = list.b;\n\t\t\t\tvar $temp$func = func,\n\t\t\t\t\t$temp$acc = A2(func, x, acc),\n\t\t\t\t\t$temp$list = xs;\n\t\t\t\tfunc = $temp$func;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tcontinue foldl;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$reverse = function (list) {\n\treturn A3(elm$core$List$foldl, elm$core$List$cons, _List_Nil, list);\n};\nvar elm$core$Array$compressNodes = F2(\n\tfunction (nodes, acc) {\n\t\tcompressNodes:\n\t\twhile (true) {\n\t\t\tvar _n0 = A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, nodes);\n\t\t\tvar node = _n0.a;\n\t\t\tvar remainingNodes = _n0.b;\n\t\t\tvar newAcc = A2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\telm$core$Array$SubTree(node),\n\t\t\t\tacc);\n\t\t\tif (!remainingNodes.b) {\n\t\t\t\treturn elm$core$List$reverse(newAcc);\n\t\t\t} else {\n\t\t\t\tvar $temp$nodes = remainingNodes,\n\t\t\t\t\t$temp$acc = newAcc;\n\t\t\t\tnodes = $temp$nodes;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tcontinue compressNodes;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Basics$apR = F2(\n\tfunction (x, f) {\n\t\treturn f(x);\n\t});\nvar elm$core$Basics$eq = _Utils_equal;\nvar elm$core$Tuple$first = function (_n0) {\n\tvar x = _n0.a;\n\treturn x;\n};\nvar elm$core$Array$treeFromBuilder = F2(\n\tfunction (nodeList, nodeListSize) {\n\t\ttreeFromBuilder:\n\t\twhile (true) {\n\t\t\tvar newNodeSize = elm$core$Basics$ceiling(nodeListSize / elm$core$Array$branchFactor);\n\t\t\tif (newNodeSize === 1) {\n\t\t\t\treturn A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, nodeList).a;\n\t\t\t} else {\n\t\t\t\tvar $temp$nodeList = A2(elm$core$Array$compressNodes, nodeList, _List_Nil),\n\t\t\t\t\t$temp$nodeListSize = newNodeSize;\n\t\t\t\tnodeList = $temp$nodeList;\n\t\t\t\tnodeListSize = $temp$nodeListSize;\n\t\t\t\tcontinue treeFromBuilder;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Basics$add = _Basics_add;\nvar elm$core$Basics$apL = F2(\n\tfunction (f, x) {\n\t\treturn f(x);\n\t});\nvar elm$core$Basics$floor = _Basics_floor;\nvar elm$core$Basics$gt = _Utils_gt;\nvar elm$core$Basics$max = F2(\n\tfunction (x, y) {\n\t\treturn (_Utils_cmp(x, y) > 0) ? x : y;\n\t});\nvar elm$core$Basics$mul = _Basics_mul;\nvar elm$core$Basics$sub = _Basics_sub;\nvar elm$core$Elm$JsArray$length = _JsArray_length;\nvar elm$core$Array$builderToArray = F2(\n\tfunction (reverseNodeList, builder) {\n\t\tif (!builder.nodeListSize) {\n\t\t\treturn A4(\n\t\t\t\telm$core$Array$Array_elm_builtin,\n\t\t\t\telm$core$Elm$JsArray$length(builder.tail),\n\t\t\t\telm$core$Array$shiftStep,\n\t\t\t\telm$core$Elm$JsArray$empty,\n\t\t\t\tbuilder.tail);\n\t\t} else {\n\t\t\tvar treeLen = builder.nodeListSize * elm$core$Array$branchFactor;\n\t\t\tvar depth = elm$core$Basics$floor(\n\t\t\t\tA2(elm$core$Basics$logBase, elm$core$Array$branchFactor, treeLen - 1));\n\t\t\tvar correctNodeList = reverseNodeList ? elm$core$List$reverse(builder.nodeList) : builder.nodeList;\n\t\t\tvar tree = A2(elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);\n\t\t\treturn A4(\n\t\t\t\telm$core$Array$Array_elm_builtin,\n\t\t\t\telm$core$Elm$JsArray$length(builder.tail) + treeLen,\n\t\t\t\tA2(elm$core$Basics$max, 5, depth * elm$core$Array$shiftStep),\n\t\t\t\ttree,\n\t\t\t\tbuilder.tail);\n\t\t}\n\t});\nvar elm$core$Basics$idiv = _Basics_idiv;\nvar elm$core$Basics$lt = _Utils_lt;\nvar elm$core$Elm$JsArray$initialize = _JsArray_initialize;\nvar elm$core$Array$initializeHelp = F5(\n\tfunction (fn, fromIndex, len, nodeList, tail) {\n\t\tinitializeHelp:\n\t\twhile (true) {\n\t\t\tif (fromIndex < 0) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Array$builderToArray,\n\t\t\t\t\tfalse,\n\t\t\t\t\t{nodeList: nodeList, nodeListSize: (len / elm$core$Array$branchFactor) | 0, tail: tail});\n\t\t\t} else {\n\t\t\t\tvar leaf = elm$core$Array$Leaf(\n\t\t\t\t\tA3(elm$core$Elm$JsArray$initialize, elm$core$Array$branchFactor, fromIndex, fn));\n\t\t\t\tvar $temp$fn = fn,\n\t\t\t\t\t$temp$fromIndex = fromIndex - elm$core$Array$branchFactor,\n\t\t\t\t\t$temp$len = len,\n\t\t\t\t\t$temp$nodeList = A2(elm$core$List$cons, leaf, nodeList),\n\t\t\t\t\t$temp$tail = tail;\n\t\t\t\tfn = $temp$fn;\n\t\t\t\tfromIndex = $temp$fromIndex;\n\t\t\t\tlen = $temp$len;\n\t\t\t\tnodeList = $temp$nodeList;\n\t\t\t\ttail = $temp$tail;\n\t\t\t\tcontinue initializeHelp;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Basics$le = _Utils_le;\nvar elm$core$Basics$remainderBy = _Basics_remainderBy;\nvar elm$core$Array$initialize = F2(\n\tfunction (len, fn) {\n\t\tif (len <= 0) {\n\t\t\treturn elm$core$Array$empty;\n\t\t} else {\n\t\t\tvar tailLen = len % elm$core$Array$branchFactor;\n\t\t\tvar tail = A3(elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);\n\t\t\tvar initialFromIndex = (len - tailLen) - elm$core$Array$branchFactor;\n\t\t\treturn A5(elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);\n\t\t}\n\t});\nvar elm$core$Maybe$Just = function (a) {\n\treturn {$: 'Just', a: a};\n};\nvar elm$core$Maybe$Nothing = {$: 'Nothing'};\nvar elm$core$Result$Err = function (a) {\n\treturn {$: 'Err', a: a};\n};\nvar elm$core$Result$Ok = function (a) {\n\treturn {$: 'Ok', a: a};\n};\nvar elm$json$Json$Decode$Failure = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Failure', a: a, b: b};\n\t});\nvar elm$json$Json$Decode$Field = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Field', a: a, b: b};\n\t});\nvar elm$json$Json$Decode$Index = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Index', a: a, b: b};\n\t});\nvar elm$json$Json$Decode$OneOf = function (a) {\n\treturn {$: 'OneOf', a: a};\n};\nvar elm$core$Basics$and = _Basics_and;\nvar elm$core$Basics$append = _Utils_append;\nvar elm$core$Basics$or = _Basics_or;\nvar elm$core$Char$toCode = _Char_toCode;\nvar elm$core$Char$isLower = function (_char) {\n\tvar code = elm$core$Char$toCode(_char);\n\treturn (97 <= code) && (code <= 122);\n};\nvar elm$core$Char$isUpper = function (_char) {\n\tvar code = elm$core$Char$toCode(_char);\n\treturn (code <= 90) && (65 <= code);\n};\nvar elm$core$Char$isAlpha = function (_char) {\n\treturn elm$core$Char$isLower(_char) || elm$core$Char$isUpper(_char);\n};\nvar elm$core$Char$isDigit = function (_char) {\n\tvar code = elm$core$Char$toCode(_char);\n\treturn (code <= 57) && (48 <= code);\n};\nvar elm$core$Char$isAlphaNum = function (_char) {\n\treturn elm$core$Char$isLower(_char) || (elm$core$Char$isUpper(_char) || elm$core$Char$isDigit(_char));\n};\nvar elm$core$List$length = function (xs) {\n\treturn A3(\n\t\telm$core$List$foldl,\n\t\tF2(\n\t\t\tfunction (_n0, i) {\n\t\t\t\treturn i + 1;\n\t\t\t}),\n\t\t0,\n\t\txs);\n};\nvar elm$core$List$map2 = _List_map2;\nvar elm$core$List$rangeHelp = F3(\n\tfunction (lo, hi, list) {\n\t\trangeHelp:\n\t\twhile (true) {\n\t\t\tif (_Utils_cmp(lo, hi) < 1) {\n\t\t\t\tvar $temp$lo = lo,\n\t\t\t\t\t$temp$hi = hi - 1,\n\t\t\t\t\t$temp$list = A2(elm$core$List$cons, hi, list);\n\t\t\t\tlo = $temp$lo;\n\t\t\t\thi = $temp$hi;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tcontinue rangeHelp;\n\t\t\t} else {\n\t\t\t\treturn list;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$range = F2(\n\tfunction (lo, hi) {\n\t\treturn A3(elm$core$List$rangeHelp, lo, hi, _List_Nil);\n\t});\nvar elm$core$List$indexedMap = F2(\n\tfunction (f, xs) {\n\t\treturn A3(\n\t\t\telm$core$List$map2,\n\t\t\tf,\n\t\t\tA2(\n\t\t\t\telm$core$List$range,\n\t\t\t\t0,\n\t\t\t\telm$core$List$length(xs) - 1),\n\t\t\txs);\n\t});\nvar elm$core$String$all = _String_all;\nvar elm$core$String$fromInt = _String_fromNumber;\nvar elm$core$String$join = F2(\n\tfunction (sep, chunks) {\n\t\treturn A2(\n\t\t\t_String_join,\n\t\t\tsep,\n\t\t\t_List_toArray(chunks));\n\t});\nvar elm$core$String$uncons = _String_uncons;\nvar elm$core$String$split = F2(\n\tfunction (sep, string) {\n\t\treturn _List_fromArray(\n\t\t\tA2(_String_split, sep, string));\n\t});\nvar elm$json$Json$Decode$indent = function (str) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n    ',\n\t\tA2(elm$core$String$split, '\\n', str));\n};\nvar elm$json$Json$Encode$encode = _Json_encode;\nvar elm$json$Json$Decode$errorOneOf = F2(\n\tfunction (i, error) {\n\t\treturn '\\n\\n(' + (elm$core$String$fromInt(i + 1) + (') ' + elm$json$Json$Decode$indent(\n\t\t\telm$json$Json$Decode$errorToString(error))));\n\t});\nvar elm$json$Json$Decode$errorToString = function (error) {\n\treturn A2(elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);\n};\nvar elm$json$Json$Decode$errorToStringHelp = F2(\n\tfunction (error, context) {\n\t\terrorToStringHelp:\n\t\twhile (true) {\n\t\t\tswitch (error.$) {\n\t\t\t\tcase 'Field':\n\t\t\t\t\tvar f = error.a;\n\t\t\t\t\tvar err = error.b;\n\t\t\t\t\tvar isSimple = function () {\n\t\t\t\t\t\tvar _n1 = elm$core$String$uncons(f);\n\t\t\t\t\t\tif (_n1.$ === 'Nothing') {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n2 = _n1.a;\n\t\t\t\t\t\t\tvar _char = _n2.a;\n\t\t\t\t\t\t\tvar rest = _n2.b;\n\t\t\t\t\t\t\treturn elm$core$Char$isAlpha(_char) && A2(elm$core$String$all, elm$core$Char$isAlphaNum, rest);\n\t\t\t\t\t\t}\n\t\t\t\t\t}();\n\t\t\t\t\tvar fieldName = isSimple ? ('.' + f) : ('[\\'' + (f + '\\']'));\n\t\t\t\t\tvar $temp$error = err,\n\t\t\t\t\t\t$temp$context = A2(elm$core$List$cons, fieldName, context);\n\t\t\t\t\terror = $temp$error;\n\t\t\t\t\tcontext = $temp$context;\n\t\t\t\t\tcontinue errorToStringHelp;\n\t\t\t\tcase 'Index':\n\t\t\t\t\tvar i = error.a;\n\t\t\t\t\tvar err = error.b;\n\t\t\t\t\tvar indexName = '[' + (elm$core$String$fromInt(i) + ']');\n\t\t\t\t\tvar $temp$error = err,\n\t\t\t\t\t\t$temp$context = A2(elm$core$List$cons, indexName, context);\n\t\t\t\t\terror = $temp$error;\n\t\t\t\t\tcontext = $temp$context;\n\t\t\t\t\tcontinue errorToStringHelp;\n\t\t\t\tcase 'OneOf':\n\t\t\t\t\tvar errors = error.a;\n\t\t\t\t\tif (!errors.b) {\n\t\t\t\t\t\treturn 'Ran into a Json.Decode.oneOf with no possibilities' + function () {\n\t\t\t\t\t\t\tif (!context.b) {\n\t\t\t\t\t\t\t\treturn '!';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn ' at json' + A2(\n\t\t\t\t\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t\telm$core$List$reverse(context));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!errors.b.b) {\n\t\t\t\t\t\t\tvar err = errors.a;\n\t\t\t\t\t\t\tvar $temp$error = err,\n\t\t\t\t\t\t\t\t$temp$context = context;\n\t\t\t\t\t\t\terror = $temp$error;\n\t\t\t\t\t\t\tcontext = $temp$context;\n\t\t\t\t\t\t\tcontinue errorToStringHelp;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar starter = function () {\n\t\t\t\t\t\t\t\tif (!context.b) {\n\t\t\t\t\t\t\t\t\treturn 'Json.Decode.oneOf';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn 'The Json.Decode.oneOf at json' + A2(\n\t\t\t\t\t\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t\t\telm$core$List$reverse(context));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}();\n\t\t\t\t\t\t\tvar introduction = starter + (' failed in the following ' + (elm$core$String$fromInt(\n\t\t\t\t\t\t\t\telm$core$List$length(errors)) + ' ways:'));\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t\t\t\t'\\n\\n',\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\tintroduction,\n\t\t\t\t\t\t\t\t\tA2(elm$core$List$indexedMap, elm$json$Json$Decode$errorOneOf, errors)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tvar msg = error.a;\n\t\t\t\t\tvar json = error.b;\n\t\t\t\t\tvar introduction = function () {\n\t\t\t\t\t\tif (!context.b) {\n\t\t\t\t\t\t\treturn 'Problem with the given value:\\n\\n';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn 'Problem with the value at json' + (A2(\n\t\t\t\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\telm$core$List$reverse(context)) + ':\\n\\n    ');\n\t\t\t\t\t\t}\n\t\t\t\t\t}();\n\t\t\t\t\treturn introduction + (elm$json$Json$Decode$indent(\n\t\t\t\t\t\tA2(elm$json$Json$Encode$encode, 4, json)) + ('\\n\\n' + msg));\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Platform$Cmd$batch = _Platform_batch;\nvar elm$core$Platform$Cmd$none = elm$core$Platform$Cmd$batch(_List_Nil);\nvar author$project$Components$SearchBar$init = function (key) {\n\treturn _Utils_Tuple2(\n\t\tA3(author$project$Components$SearchBar$Model, '', key, author$project$Components$SearchBar$Invalid),\n\t\telm$core$Platform$Cmd$none);\n};\nvar author$project$Main$Loading = {$: 'Loading'};\nvar author$project$Main$NotReady = function (a) {\n\treturn {$: 'NotReady', a: a};\n};\nvar author$project$Main$Ready = function (a) {\n\treturn {$: 'Ready', a: a};\n};\nvar author$project$Main$NotFound = function (a) {\n\treturn {$: 'NotFound', a: a};\n};\nvar author$project$Main$getUser = function (state) {\n\tif (state.$ === 'Ready') {\n\t\tvar session = state.a;\n\t\tvar _n1 = session.user;\n\t\tif (_n1.$ === 'Just') {\n\t\t\tvar user = _n1.a;\n\t\t\treturn elm$core$Maybe$Just(user);\n\t\t} else {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t}\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar author$project$Main$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Server$url = 'http://localhost:3000';\nvar elm$json$Json$Decode$map2 = _Json_map2;\nvar NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = elm$json$Json$Decode$map2(elm$core$Basics$apR);\nvar elm$json$Json$Decode$andThen = _Json_andThen;\nvar elm$json$Json$Decode$decodeValue = _Json_run;\nvar elm$json$Json$Decode$fail = _Json_fail;\nvar elm$json$Json$Decode$null = _Json_decodeNull;\nvar elm$json$Json$Decode$oneOf = _Json_oneOf;\nvar elm$json$Json$Decode$succeed = _Json_succeed;\nvar elm$json$Json$Decode$value = _Json_decodeValue;\nvar NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(\n\tfunction (pathDecoder, valDecoder, fallback) {\n\t\tvar nullOr = function (decoder) {\n\t\t\treturn elm$json$Json$Decode$oneOf(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tdecoder,\n\t\t\t\t\t\telm$json$Json$Decode$null(fallback)\n\t\t\t\t\t]));\n\t\t};\n\t\tvar handleResult = function (input) {\n\t\t\tvar _n0 = A2(elm$json$Json$Decode$decodeValue, pathDecoder, input);\n\t\t\tif (_n0.$ === 'Ok') {\n\t\t\t\tvar rawValue = _n0.a;\n\t\t\t\tvar _n1 = A2(\n\t\t\t\t\telm$json$Json$Decode$decodeValue,\n\t\t\t\t\tnullOr(valDecoder),\n\t\t\t\t\trawValue);\n\t\t\t\tif (_n1.$ === 'Ok') {\n\t\t\t\t\tvar finalResult = _n1.a;\n\t\t\t\t\treturn elm$json$Json$Decode$succeed(finalResult);\n\t\t\t\t} else {\n\t\t\t\t\tvar finalErr = _n1.a;\n\t\t\t\t\treturn elm$json$Json$Decode$fail(\n\t\t\t\t\t\telm$json$Json$Decode$errorToString(finalErr));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn elm$json$Json$Decode$succeed(fallback);\n\t\t\t}\n\t\t};\n\t\treturn A2(elm$json$Json$Decode$andThen, handleResult, elm$json$Json$Decode$value);\n\t});\nvar elm$json$Json$Decode$field = _Json_decodeField;\nvar NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(\n\tfunction (key, valDecoder, fallback, decoder) {\n\t\treturn A2(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,\n\t\t\tA3(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,\n\t\t\t\tA2(elm$json$Json$Decode$field, key, elm$json$Json$Decode$value),\n\t\t\t\tvalDecoder,\n\t\t\t\tfallback),\n\t\t\tdecoder);\n\t});\nvar NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(\n\tfunction (key, valDecoder, decoder) {\n\t\treturn A2(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,\n\t\t\tA2(elm$json$Json$Decode$field, key, valDecoder),\n\t\t\tdecoder);\n\t});\nvar author$project$User$Model = function (username) {\n\treturn function (email) {\n\t\treturn function (avatar) {\n\t\t\treturn function (bio) {\n\t\t\t\treturn function (verif) {\n\t\t\t\t\treturn function (facebook) {\n\t\t\t\t\t\treturn function (twitter) {\n\t\t\t\t\t\t\treturn function (github) {\n\t\t\t\t\t\t\t\treturn function (token) {\n\t\t\t\t\t\t\t\t\treturn function (registered) {\n\t\t\t\t\t\t\t\t\t\treturn {avatar: avatar, bio: bio, email: email, facebook: facebook, github: github, registered: registered, token: token, twitter: twitter, username: username, verif: verif};\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\nvar elm$json$Json$Decode$bool = _Json_decodeBool;\nvar elm$json$Json$Decode$map = _Json_map1;\nvar elm$json$Json$Decode$nullable = function (decoder) {\n\treturn elm$json$Json$Decode$oneOf(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$json$Json$Decode$null(elm$core$Maybe$Nothing),\n\t\t\t\tA2(elm$json$Json$Decode$map, elm$core$Maybe$Just, decoder)\n\t\t\t]));\n};\nvar elm$json$Json$Decode$string = _Json_decodeString;\nvar elm$core$List$foldrHelper = F4(\n\tfunction (fn, acc, ctr, ls) {\n\t\tif (!ls.b) {\n\t\t\treturn acc;\n\t\t} else {\n\t\t\tvar a = ls.a;\n\t\t\tvar r1 = ls.b;\n\t\t\tif (!r1.b) {\n\t\t\t\treturn A2(fn, a, acc);\n\t\t\t} else {\n\t\t\t\tvar b = r1.a;\n\t\t\t\tvar r2 = r1.b;\n\t\t\t\tif (!r2.b) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tfn,\n\t\t\t\t\t\ta,\n\t\t\t\t\t\tA2(fn, b, acc));\n\t\t\t\t} else {\n\t\t\t\t\tvar c = r2.a;\n\t\t\t\t\tvar r3 = r2.b;\n\t\t\t\t\tif (!r3.b) {\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\ta,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\t\tb,\n\t\t\t\t\t\t\t\tA2(fn, c, acc)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar d = r3.a;\n\t\t\t\t\t\tvar r4 = r3.b;\n\t\t\t\t\t\tvar res = (ctr > 500) ? A3(\n\t\t\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\tacc,\n\t\t\t\t\t\t\telm$core$List$reverse(r4)) : A4(elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\ta,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\t\tb,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\t\t\tc,\n\t\t\t\t\t\t\t\t\tA2(fn, d, res))));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$foldr = F3(\n\tfunction (fn, acc, ls) {\n\t\treturn A4(elm$core$List$foldrHelper, fn, acc, 0, ls);\n\t});\nvar elm$core$List$map = F2(\n\tfunction (f, xs) {\n\t\treturn A3(\n\t\t\telm$core$List$foldr,\n\t\t\tF2(\n\t\t\t\tfunction (x, acc) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\tf(x),\n\t\t\t\t\t\tacc);\n\t\t\t\t}),\n\t\t\t_List_Nil,\n\t\t\txs);\n\t});\nvar elm$parser$Parser$DeadEnd = F3(\n\tfunction (row, col, problem) {\n\t\treturn {col: col, problem: problem, row: row};\n\t});\nvar elm$parser$Parser$problemToDeadEnd = function (p) {\n\treturn A3(elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);\n};\nvar elm$parser$Parser$Advanced$bagToList = F2(\n\tfunction (bag, list) {\n\t\tbagToList:\n\t\twhile (true) {\n\t\t\tswitch (bag.$) {\n\t\t\t\tcase 'Empty':\n\t\t\t\t\treturn list;\n\t\t\t\tcase 'AddRight':\n\t\t\t\t\tvar bag1 = bag.a;\n\t\t\t\t\tvar x = bag.b;\n\t\t\t\t\tvar $temp$bag = bag1,\n\t\t\t\t\t\t$temp$list = A2(elm$core$List$cons, x, list);\n\t\t\t\t\tbag = $temp$bag;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tcontinue bagToList;\n\t\t\t\tdefault:\n\t\t\t\t\tvar bag1 = bag.a;\n\t\t\t\t\tvar bag2 = bag.b;\n\t\t\t\t\tvar $temp$bag = bag1,\n\t\t\t\t\t\t$temp$list = A2(elm$parser$Parser$Advanced$bagToList, bag2, list);\n\t\t\t\t\tbag = $temp$bag;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tcontinue bagToList;\n\t\t\t}\n\t\t}\n\t});\nvar elm$parser$Parser$Advanced$run = F2(\n\tfunction (_n0, src) {\n\t\tvar parse = _n0.a;\n\t\tvar _n1 = parse(\n\t\t\t{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});\n\t\tif (_n1.$ === 'Good') {\n\t\t\tvar value = _n1.b;\n\t\t\treturn elm$core$Result$Ok(value);\n\t\t} else {\n\t\t\tvar bag = _n1.b;\n\t\t\treturn elm$core$Result$Err(\n\t\t\t\tA2(elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));\n\t\t}\n\t});\nvar elm$parser$Parser$run = F2(\n\tfunction (parser, source) {\n\t\tvar _n0 = A2(elm$parser$Parser$Advanced$run, parser, source);\n\t\tif (_n0.$ === 'Ok') {\n\t\t\tvar a = _n0.a;\n\t\t\treturn elm$core$Result$Ok(a);\n\t\t} else {\n\t\t\tvar problems = _n0.a;\n\t\t\treturn elm$core$Result$Err(\n\t\t\t\tA2(elm$core$List$map, elm$parser$Parser$problemToDeadEnd, problems));\n\t\t}\n\t});\nvar elm$core$Basics$identity = function (x) {\n\treturn x;\n};\nvar elm$parser$Parser$Advanced$Bad = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Bad', a: a, b: b};\n\t});\nvar elm$parser$Parser$Advanced$Good = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'Good', a: a, b: b, c: c};\n\t});\nvar elm$parser$Parser$Advanced$Parser = function (a) {\n\treturn {$: 'Parser', a: a};\n};\nvar elm$parser$Parser$Advanced$andThen = F2(\n\tfunction (callback, _n0) {\n\t\tvar parseA = _n0.a;\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s0) {\n\t\t\t\tvar _n1 = parseA(s0);\n\t\t\t\tif (_n1.$ === 'Bad') {\n\t\t\t\t\tvar p = _n1.a;\n\t\t\t\t\tvar x = _n1.b;\n\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p, x);\n\t\t\t\t} else {\n\t\t\t\t\tvar p1 = _n1.a;\n\t\t\t\t\tvar a = _n1.b;\n\t\t\t\t\tvar s1 = _n1.c;\n\t\t\t\t\tvar _n2 = callback(a);\n\t\t\t\t\tvar parseB = _n2.a;\n\t\t\t\t\tvar _n3 = parseB(s1);\n\t\t\t\t\tif (_n3.$ === 'Bad') {\n\t\t\t\t\t\tvar p2 = _n3.a;\n\t\t\t\t\t\tvar x = _n3.b;\n\t\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p1 || p2, x);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar p2 = _n3.a;\n\t\t\t\t\t\tvar b = _n3.b;\n\t\t\t\t\t\tvar s2 = _n3.c;\n\t\t\t\t\t\treturn A3(elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t});\nvar elm$parser$Parser$andThen = elm$parser$Parser$Advanced$andThen;\nvar elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};\nvar elm$core$String$length = _String_length;\nvar elm$parser$Parser$Advanced$AddRight = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'AddRight', a: a, b: b};\n\t});\nvar elm$parser$Parser$Advanced$DeadEnd = F4(\n\tfunction (row, col, problem, contextStack) {\n\t\treturn {col: col, contextStack: contextStack, problem: problem, row: row};\n\t});\nvar elm$parser$Parser$Advanced$Empty = {$: 'Empty'};\nvar elm$parser$Parser$Advanced$fromState = F2(\n\tfunction (s, x) {\n\t\treturn A2(\n\t\t\telm$parser$Parser$Advanced$AddRight,\n\t\t\telm$parser$Parser$Advanced$Empty,\n\t\t\tA4(elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));\n\t});\nvar elm$parser$Parser$Advanced$end = function (x) {\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\treturn _Utils_eq(\n\t\t\t\telm$core$String$length(s.src),\n\t\t\t\ts.offset) ? A3(elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(\n\t\t\t\telm$parser$Parser$Advanced$Bad,\n\t\t\t\tfalse,\n\t\t\t\tA2(elm$parser$Parser$Advanced$fromState, s, x));\n\t\t});\n};\nvar elm$parser$Parser$end = elm$parser$Parser$Advanced$end(elm$parser$Parser$ExpectingEnd);\nvar elm$core$Basics$always = F2(\n\tfunction (a, _n0) {\n\t\treturn a;\n\t});\nvar elm$parser$Parser$Advanced$map2 = F3(\n\tfunction (func, _n0, _n1) {\n\t\tvar parseA = _n0.a;\n\t\tvar parseB = _n1.a;\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s0) {\n\t\t\t\tvar _n2 = parseA(s0);\n\t\t\t\tif (_n2.$ === 'Bad') {\n\t\t\t\t\tvar p = _n2.a;\n\t\t\t\t\tvar x = _n2.b;\n\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p, x);\n\t\t\t\t} else {\n\t\t\t\t\tvar p1 = _n2.a;\n\t\t\t\t\tvar a = _n2.b;\n\t\t\t\t\tvar s1 = _n2.c;\n\t\t\t\t\tvar _n3 = parseB(s1);\n\t\t\t\t\tif (_n3.$ === 'Bad') {\n\t\t\t\t\t\tvar p2 = _n3.a;\n\t\t\t\t\t\tvar x = _n3.b;\n\t\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p1 || p2, x);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar p2 = _n3.a;\n\t\t\t\t\t\tvar b = _n3.b;\n\t\t\t\t\t\tvar s2 = _n3.c;\n\t\t\t\t\t\treturn A3(\n\t\t\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\t\t\tp1 || p2,\n\t\t\t\t\t\t\tA2(func, a, b),\n\t\t\t\t\t\t\ts2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t});\nvar elm$parser$Parser$Advanced$ignorer = F2(\n\tfunction (keepParser, ignoreParser) {\n\t\treturn A3(elm$parser$Parser$Advanced$map2, elm$core$Basics$always, keepParser, ignoreParser);\n\t});\nvar elm$parser$Parser$ignorer = elm$parser$Parser$Advanced$ignorer;\nvar elm$parser$Parser$Advanced$keeper = F2(\n\tfunction (parseFunc, parseArg) {\n\t\treturn A3(elm$parser$Parser$Advanced$map2, elm$core$Basics$apL, parseFunc, parseArg);\n\t});\nvar elm$parser$Parser$keeper = elm$parser$Parser$Advanced$keeper;\nvar elm$parser$Parser$Advanced$Append = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Append', a: a, b: b};\n\t});\nvar elm$parser$Parser$Advanced$oneOfHelp = F3(\n\tfunction (s0, bag, parsers) {\n\t\toneOfHelp:\n\t\twhile (true) {\n\t\t\tif (!parsers.b) {\n\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, false, bag);\n\t\t\t} else {\n\t\t\t\tvar parse = parsers.a.a;\n\t\t\t\tvar remainingParsers = parsers.b;\n\t\t\t\tvar _n1 = parse(s0);\n\t\t\t\tif (_n1.$ === 'Good') {\n\t\t\t\t\tvar step = _n1;\n\t\t\t\t\treturn step;\n\t\t\t\t} else {\n\t\t\t\t\tvar step = _n1;\n\t\t\t\t\tvar p = step.a;\n\t\t\t\t\tvar x = step.b;\n\t\t\t\t\tif (p) {\n\t\t\t\t\t\treturn step;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar $temp$s0 = s0,\n\t\t\t\t\t\t\t$temp$bag = A2(elm$parser$Parser$Advanced$Append, bag, x),\n\t\t\t\t\t\t\t$temp$parsers = remainingParsers;\n\t\t\t\t\t\ts0 = $temp$s0;\n\t\t\t\t\t\tbag = $temp$bag;\n\t\t\t\t\t\tparsers = $temp$parsers;\n\t\t\t\t\t\tcontinue oneOfHelp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$parser$Parser$Advanced$oneOf = function (parsers) {\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\treturn A3(elm$parser$Parser$Advanced$oneOfHelp, s, elm$parser$Parser$Advanced$Empty, parsers);\n\t\t});\n};\nvar elm$parser$Parser$oneOf = elm$parser$Parser$Advanced$oneOf;\nvar elm$parser$Parser$Advanced$succeed = function (a) {\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\treturn A3(elm$parser$Parser$Advanced$Good, false, a, s);\n\t\t});\n};\nvar elm$parser$Parser$succeed = elm$parser$Parser$Advanced$succeed;\nvar elm$parser$Parser$ExpectingSymbol = function (a) {\n\treturn {$: 'ExpectingSymbol', a: a};\n};\nvar elm$parser$Parser$Advanced$Token = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Token', a: a, b: b};\n\t});\nvar elm$core$Basics$negate = function (n) {\n\treturn -n;\n};\nvar elm$core$Basics$not = _Basics_not;\nvar elm$core$String$isEmpty = function (string) {\n\treturn string === '';\n};\nvar elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;\nvar elm$parser$Parser$Advanced$token = function (_n0) {\n\tvar str = _n0.a;\n\tvar expecting = _n0.b;\n\tvar progress = !elm$core$String$isEmpty(str);\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\tvar _n1 = A5(elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);\n\t\t\tvar newOffset = _n1.a;\n\t\t\tvar newRow = _n1.b;\n\t\t\tvar newCol = _n1.c;\n\t\t\treturn _Utils_eq(newOffset, -1) ? A2(\n\t\t\t\telm$parser$Parser$Advanced$Bad,\n\t\t\t\tfalse,\n\t\t\t\tA2(elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(\n\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\tprogress,\n\t\t\t\t_Utils_Tuple0,\n\t\t\t\t{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});\n\t\t});\n};\nvar elm$parser$Parser$Advanced$symbol = elm$parser$Parser$Advanced$token;\nvar elm$parser$Parser$symbol = function (str) {\n\treturn elm$parser$Parser$Advanced$symbol(\n\t\tA2(\n\t\t\telm$parser$Parser$Advanced$Token,\n\t\t\tstr,\n\t\t\telm$parser$Parser$ExpectingSymbol(str)));\n};\nvar elm$core$Basics$round = _Basics_round;\nvar elm$core$String$toFloat = _String_toFloat;\nvar elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;\nvar elm$parser$Parser$Advanced$chompWhileHelp = F5(\n\tfunction (isGood, offset, row, col, s0) {\n\t\tchompWhileHelp:\n\t\twhile (true) {\n\t\t\tvar newOffset = A3(elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);\n\t\t\tif (_Utils_eq(newOffset, -1)) {\n\t\t\t\treturn A3(\n\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\t_Utils_cmp(s0.offset, offset) < 0,\n\t\t\t\t\t_Utils_Tuple0,\n\t\t\t\t\t{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});\n\t\t\t} else {\n\t\t\t\tif (_Utils_eq(newOffset, -2)) {\n\t\t\t\t\tvar $temp$isGood = isGood,\n\t\t\t\t\t\t$temp$offset = offset + 1,\n\t\t\t\t\t\t$temp$row = row + 1,\n\t\t\t\t\t\t$temp$col = 1,\n\t\t\t\t\t\t$temp$s0 = s0;\n\t\t\t\t\tisGood = $temp$isGood;\n\t\t\t\t\toffset = $temp$offset;\n\t\t\t\t\trow = $temp$row;\n\t\t\t\t\tcol = $temp$col;\n\t\t\t\t\ts0 = $temp$s0;\n\t\t\t\t\tcontinue chompWhileHelp;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$isGood = isGood,\n\t\t\t\t\t\t$temp$offset = newOffset,\n\t\t\t\t\t\t$temp$row = row,\n\t\t\t\t\t\t$temp$col = col + 1,\n\t\t\t\t\t\t$temp$s0 = s0;\n\t\t\t\t\tisGood = $temp$isGood;\n\t\t\t\t\toffset = $temp$offset;\n\t\t\t\t\trow = $temp$row;\n\t\t\t\t\tcol = $temp$col;\n\t\t\t\t\ts0 = $temp$s0;\n\t\t\t\t\tcontinue chompWhileHelp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$parser$Parser$Advanced$chompWhile = function (isGood) {\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\treturn A5(elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);\n\t\t});\n};\nvar elm$parser$Parser$chompWhile = elm$parser$Parser$Advanced$chompWhile;\nvar elm$core$String$slice = _String_slice;\nvar elm$parser$Parser$Advanced$mapChompedString = F2(\n\tfunction (func, _n0) {\n\t\tvar parse = _n0.a;\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s0) {\n\t\t\t\tvar _n1 = parse(s0);\n\t\t\t\tif (_n1.$ === 'Bad') {\n\t\t\t\t\tvar p = _n1.a;\n\t\t\t\t\tvar x = _n1.b;\n\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p, x);\n\t\t\t\t} else {\n\t\t\t\t\tvar p = _n1.a;\n\t\t\t\t\tvar a = _n1.b;\n\t\t\t\t\tvar s1 = _n1.c;\n\t\t\t\t\treturn A3(\n\t\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\t\tp,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tfunc,\n\t\t\t\t\t\t\tA3(elm$core$String$slice, s0.offset, s1.offset, s0.src),\n\t\t\t\t\t\t\ta),\n\t\t\t\t\t\ts1);\n\t\t\t\t}\n\t\t\t});\n\t});\nvar elm$parser$Parser$Advanced$getChompedString = function (parser) {\n\treturn A2(elm$parser$Parser$Advanced$mapChompedString, elm$core$Basics$always, parser);\n};\nvar elm$parser$Parser$getChompedString = elm$parser$Parser$Advanced$getChompedString;\nvar elm$parser$Parser$Problem = function (a) {\n\treturn {$: 'Problem', a: a};\n};\nvar elm$parser$Parser$Advanced$problem = function (x) {\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\treturn A2(\n\t\t\t\telm$parser$Parser$Advanced$Bad,\n\t\t\t\tfalse,\n\t\t\t\tA2(elm$parser$Parser$Advanced$fromState, s, x));\n\t\t});\n};\nvar elm$parser$Parser$problem = function (msg) {\n\treturn elm$parser$Parser$Advanced$problem(\n\t\telm$parser$Parser$Problem(msg));\n};\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs = A2(\n\telm$parser$Parser$andThen,\n\tfunction (str) {\n\t\tif (elm$core$String$length(str) <= 9) {\n\t\t\tvar _n0 = elm$core$String$toFloat('0.' + str);\n\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\tvar floatVal = _n0.a;\n\t\t\t\treturn elm$parser$Parser$succeed(\n\t\t\t\t\telm$core$Basics$round(floatVal * 1000));\n\t\t\t} else {\n\t\t\t\treturn elm$parser$Parser$problem('Invalid float: \\\"' + (str + '\\\"'));\n\t\t\t}\n\t\t} else {\n\t\t\treturn elm$parser$Parser$problem(\n\t\t\t\t'Expected at most 9 digits, but got ' + elm$core$String$fromInt(\n\t\t\t\t\telm$core$String$length(str)));\n\t\t}\n\t},\n\telm$parser$Parser$getChompedString(\n\t\telm$parser$Parser$chompWhile(elm$core$Char$isDigit)));\nvar elm$time$Time$Posix = function (a) {\n\treturn {$: 'Posix', a: a};\n};\nvar elm$time$Time$millisToPosix = elm$time$Time$Posix;\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts = F6(\n\tfunction (monthYearDayMs, hour, minute, second, ms, utcOffsetMinutes) {\n\t\treturn elm$time$Time$millisToPosix((((monthYearDayMs + (((hour * 60) * 60) * 1000)) + (((minute - utcOffsetMinutes) * 60) * 1000)) + (second * 1000)) + ms);\n\t});\nvar elm$core$String$append = _String_append;\nvar elm$core$String$toInt = _String_toInt;\nvar elm$parser$Parser$Done = function (a) {\n\treturn {$: 'Done', a: a};\n};\nvar elm$parser$Parser$Loop = function (a) {\n\treturn {$: 'Loop', a: a};\n};\nvar elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};\nvar elm$parser$Parser$Advanced$chompIf = F2(\n\tfunction (isGood, expecting) {\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s) {\n\t\t\t\tvar newOffset = A3(elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);\n\t\t\t\treturn _Utils_eq(newOffset, -1) ? A2(\n\t\t\t\t\telm$parser$Parser$Advanced$Bad,\n\t\t\t\t\tfalse,\n\t\t\t\t\tA2(elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(\n\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\ttrue,\n\t\t\t\t\t_Utils_Tuple0,\n\t\t\t\t\t{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(\n\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\ttrue,\n\t\t\t\t\t_Utils_Tuple0,\n\t\t\t\t\t{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));\n\t\t\t});\n\t});\nvar elm$parser$Parser$chompIf = function (isGood) {\n\treturn A2(elm$parser$Parser$Advanced$chompIf, isGood, elm$parser$Parser$UnexpectedChar);\n};\nvar elm$parser$Parser$Advanced$map = F2(\n\tfunction (func, _n0) {\n\t\tvar parse = _n0.a;\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s0) {\n\t\t\t\tvar _n1 = parse(s0);\n\t\t\t\tif (_n1.$ === 'Good') {\n\t\t\t\t\tvar p = _n1.a;\n\t\t\t\t\tvar a = _n1.b;\n\t\t\t\t\tvar s1 = _n1.c;\n\t\t\t\t\treturn A3(\n\t\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\t\tp,\n\t\t\t\t\t\tfunc(a),\n\t\t\t\t\t\ts1);\n\t\t\t\t} else {\n\t\t\t\t\tvar p = _n1.a;\n\t\t\t\t\tvar x = _n1.b;\n\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p, x);\n\t\t\t\t}\n\t\t\t});\n\t});\nvar elm$parser$Parser$map = elm$parser$Parser$Advanced$map;\nvar elm$parser$Parser$Advanced$Done = function (a) {\n\treturn {$: 'Done', a: a};\n};\nvar elm$parser$Parser$Advanced$Loop = function (a) {\n\treturn {$: 'Loop', a: a};\n};\nvar elm$parser$Parser$toAdvancedStep = function (step) {\n\tif (step.$ === 'Loop') {\n\t\tvar s = step.a;\n\t\treturn elm$parser$Parser$Advanced$Loop(s);\n\t} else {\n\t\tvar a = step.a;\n\t\treturn elm$parser$Parser$Advanced$Done(a);\n\t}\n};\nvar elm$parser$Parser$Advanced$loopHelp = F4(\n\tfunction (p, state, callback, s0) {\n\t\tloopHelp:\n\t\twhile (true) {\n\t\t\tvar _n0 = callback(state);\n\t\t\tvar parse = _n0.a;\n\t\t\tvar _n1 = parse(s0);\n\t\t\tif (_n1.$ === 'Good') {\n\t\t\t\tvar p1 = _n1.a;\n\t\t\t\tvar step = _n1.b;\n\t\t\t\tvar s1 = _n1.c;\n\t\t\t\tif (step.$ === 'Loop') {\n\t\t\t\t\tvar newState = step.a;\n\t\t\t\t\tvar $temp$p = p || p1,\n\t\t\t\t\t\t$temp$state = newState,\n\t\t\t\t\t\t$temp$callback = callback,\n\t\t\t\t\t\t$temp$s0 = s1;\n\t\t\t\t\tp = $temp$p;\n\t\t\t\t\tstate = $temp$state;\n\t\t\t\t\tcallback = $temp$callback;\n\t\t\t\t\ts0 = $temp$s0;\n\t\t\t\t\tcontinue loopHelp;\n\t\t\t\t} else {\n\t\t\t\t\tvar result = step.a;\n\t\t\t\t\treturn A3(elm$parser$Parser$Advanced$Good, p || p1, result, s1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar p1 = _n1.a;\n\t\t\t\tvar x = _n1.b;\n\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p || p1, x);\n\t\t\t}\n\t\t}\n\t});\nvar elm$parser$Parser$Advanced$loop = F2(\n\tfunction (state, callback) {\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s) {\n\t\t\t\treturn A4(elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);\n\t\t\t});\n\t});\nvar elm$parser$Parser$loop = F2(\n\tfunction (state, callback) {\n\t\treturn A2(\n\t\t\telm$parser$Parser$Advanced$loop,\n\t\t\tstate,\n\t\t\tfunction (s) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\telm$parser$Parser$toAdvancedStep,\n\t\t\t\t\tcallback(s));\n\t\t\t});\n\t});\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt = function (quantity) {\n\tvar helper = function (str) {\n\t\tif (_Utils_eq(\n\t\t\telm$core$String$length(str),\n\t\t\tquantity)) {\n\t\t\tvar _n0 = elm$core$String$toInt(str);\n\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\tvar intVal = _n0.a;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\telm$parser$Parser$Done,\n\t\t\t\t\telm$parser$Parser$succeed(intVal));\n\t\t\t} else {\n\t\t\t\treturn elm$parser$Parser$problem('Invalid integer: \\\"' + (str + '\\\"'));\n\t\t\t}\n\t\t} else {\n\t\t\treturn A2(\n\t\t\t\telm$parser$Parser$map,\n\t\t\t\tfunction (nextChar) {\n\t\t\t\t\treturn elm$parser$Parser$Loop(\n\t\t\t\t\t\tA2(elm$core$String$append, str, nextChar));\n\t\t\t\t},\n\t\t\t\telm$parser$Parser$getChompedString(\n\t\t\t\t\telm$parser$Parser$chompIf(elm$core$Char$isDigit)));\n\t\t}\n\t};\n\treturn A2(elm$parser$Parser$loop, '', helper);\n};\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear = 1970;\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay = function (day) {\n\treturn elm$parser$Parser$problem(\n\t\t'Invalid day: ' + elm$core$String$fromInt(day));\n};\nvar elm$core$Basics$modBy = _Basics_modBy;\nvar elm$core$Basics$neq = _Utils_notEqual;\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear = function (year) {\n\treturn (!A2(elm$core$Basics$modBy, 4, year)) && (A2(elm$core$Basics$modBy, 100, year) || (!A2(elm$core$Basics$modBy, 400, year)));\n};\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore = function (y1) {\n\tvar y = y1 - 1;\n\treturn (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);\n};\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay = 86400000;\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear = 31536000000;\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay = function (_n0) {\n\tvar year = _n0.a;\n\tvar month = _n0.b;\n\tvar dayInMonth = _n0.c;\n\tif (dayInMonth < 0) {\n\t\treturn rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth);\n\t} else {\n\t\tvar succeedWith = function (extraMs) {\n\t\t\tvar yearMs = rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear * (year - rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear);\n\t\t\tvar days = ((month < 3) || (!rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year))) ? (dayInMonth - 1) : dayInMonth;\n\t\t\tvar dayMs = rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay * (days + (rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore(year) - rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore(rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear)));\n\t\t\treturn elm$parser$Parser$succeed((extraMs + yearMs) + dayMs);\n\t\t};\n\t\tswitch (month) {\n\t\t\tcase 1:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(0);\n\t\t\tcase 2:\n\t\t\t\treturn ((dayInMonth > 29) || ((dayInMonth === 29) && (!rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year)))) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(2678400000);\n\t\t\tcase 3:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(5097600000);\n\t\t\tcase 4:\n\t\t\t\treturn (dayInMonth > 30) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(7776000000);\n\t\t\tcase 5:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(10368000000);\n\t\t\tcase 6:\n\t\t\t\treturn (dayInMonth > 30) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(13046400000);\n\t\t\tcase 7:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(15638400000);\n\t\t\tcase 8:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(18316800000);\n\t\t\tcase 9:\n\t\t\t\treturn (dayInMonth > 30) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(20995200000);\n\t\t\tcase 10:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(23587200000);\n\t\t\tcase 11:\n\t\t\t\treturn (dayInMonth > 30) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(26265600000);\n\t\t\tcase 12:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(28857600000);\n\t\t\tdefault:\n\t\t\t\treturn elm$parser$Parser$problem(\n\t\t\t\t\t'Invalid month: \\\"' + (elm$core$String$fromInt(month) + '\\\"'));\n\t\t}\n\t}\n};\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs = A2(\n\telm$parser$Parser$andThen,\n\trtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay,\n\tA2(\n\t\telm$parser$Parser$keeper,\n\t\tA2(\n\t\t\telm$parser$Parser$keeper,\n\t\t\tA2(\n\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\telm$parser$Parser$succeed(\n\t\t\t\t\tF3(\n\t\t\t\t\t\tfunction (year, month, day) {\n\t\t\t\t\t\t\treturn _Utils_Tuple3(year, month, day);\n\t\t\t\t\t\t})),\n\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(4)),\n\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\t\telm$parser$Parser$symbol('-')),\n\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)\n\t\t\t\t\t]))),\n\t\telm$parser$Parser$oneOf(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\telm$parser$Parser$symbol('-')),\n\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)\n\t\t\t\t]))));\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes = function () {\n\tvar utcOffsetMinutesFromParts = F3(\n\t\tfunction (multiplier, hours, minutes) {\n\t\t\treturn (multiplier * (hours * 60)) + minutes;\n\t\t});\n\treturn A2(\n\t\telm$parser$Parser$keeper,\n\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\telm$parser$Parser$oneOf(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\tfunction (_n0) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t},\n\t\t\t\t\telm$parser$Parser$symbol('Z')),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\telm$parser$Parser$succeed(utcOffsetMinutesFromParts),\n\t\t\t\t\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol('+')),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\t\t\t\t\t\tfunction (_n2) {\n\t\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol('-'))\n\t\t\t\t\t\t\t\t\t]))),\n\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol(':')),\n\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),\n\t\t\t\t\t\t\t\telm$parser$Parser$succeed(0)\n\t\t\t\t\t\t\t]))),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\telm$parser$Parser$succeed(0),\n\t\t\t\t\telm$parser$Parser$end)\n\t\t\t\t])));\n}();\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601 = A2(\n\telm$parser$Parser$andThen,\n\tfunction (datePart) {\n\t\treturn elm$parser$Parser$oneOf(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$fromParts(datePart)),\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol('T')),\n\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\t\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol(':')),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)\n\t\t\t\t\t\t\t\t\t\t]))),\n\t\t\t\t\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol(':')),\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)\n\t\t\t\t\t\t\t\t\t]))),\n\t\t\t\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol('.')),\n\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs),\n\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(0)\n\t\t\t\t\t\t\t\t]))),\n\t\t\t\t\tA2(elm$parser$Parser$ignorer, rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes, elm$parser$Parser$end)),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\telm$parser$Parser$succeed(\n\t\t\t\t\t\tA6(rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts, datePart, 0, 0, 0, 0, 0)),\n\t\t\t\t\telm$parser$Parser$end)\n\t\t\t\t]));\n\t},\n\trtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs);\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$toTime = function (str) {\n\treturn A2(elm$parser$Parser$run, rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601, str);\n};\nvar elm_community$json_extra$Json$Decode$Extra$datetime = A2(\n\telm$json$Json$Decode$andThen,\n\tfunction (dateString) {\n\t\tvar _n0 = rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(dateString);\n\t\tif (_n0.$ === 'Ok') {\n\t\t\tvar v = _n0.a;\n\t\t\treturn elm$json$Json$Decode$succeed(v);\n\t\t} else {\n\t\t\treturn elm$json$Json$Decode$fail('Expecting an ISO-8601 formatted date+time string');\n\t\t}\n\t},\n\telm$json$Json$Decode$string);\nvar author$project$User$decodeUser = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'registeredAt',\n\telm_community$json_extra$Json$Decode$Extra$datetime,\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'token',\n\t\telm$json$Json$Decode$string,\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'github',\n\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\tA3(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t'twitter',\n\t\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\t\tA3(\n\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t'facebook',\n\t\t\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\t\t\tA3(\n\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t'verif',\n\t\t\t\t\t\telm$json$Json$Decode$bool,\n\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t\t\t'bio',\n\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t'No description',\n\t\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t\t\t\t'profilePic',\n\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\tauthor$project$Server$url + '/img/profile/default.jpg',\n\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t\t\t'email',\n\t\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t\t\t\t'username',\n\t\t\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\t\t\telm$json$Json$Decode$succeed(author$project$User$Model)))))))))));\nvar elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};\nvar elm$core$Dict$empty = elm$core$Dict$RBEmpty_elm_builtin;\nvar elm$core$Basics$compare = _Utils_compare;\nvar elm$core$Dict$get = F2(\n\tfunction (targetKey, dict) {\n\t\tget:\n\t\twhile (true) {\n\t\t\tif (dict.$ === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t} else {\n\t\t\t\tvar key = dict.b;\n\t\t\t\tvar value = dict.c;\n\t\t\t\tvar left = dict.d;\n\t\t\t\tvar right = dict.e;\n\t\t\t\tvar _n1 = A2(elm$core$Basics$compare, targetKey, key);\n\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\tcase 'LT':\n\t\t\t\t\t\tvar $temp$targetKey = targetKey,\n\t\t\t\t\t\t\t$temp$dict = left;\n\t\t\t\t\t\ttargetKey = $temp$targetKey;\n\t\t\t\t\t\tdict = $temp$dict;\n\t\t\t\t\t\tcontinue get;\n\t\t\t\t\tcase 'EQ':\n\t\t\t\t\t\treturn elm$core$Maybe$Just(value);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar $temp$targetKey = targetKey,\n\t\t\t\t\t\t\t$temp$dict = right;\n\t\t\t\t\t\ttargetKey = $temp$targetKey;\n\t\t\t\t\t\tdict = $temp$dict;\n\t\t\t\t\t\tcontinue get;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Dict$Black = {$: 'Black'};\nvar elm$core$Dict$RBNode_elm_builtin = F5(\n\tfunction (a, b, c, d, e) {\n\t\treturn {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};\n\t});\nvar elm$core$Dict$Red = {$: 'Red'};\nvar elm$core$Dict$balance = F5(\n\tfunction (color, key, value, left, right) {\n\t\tif ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {\n\t\t\tvar _n1 = right.a;\n\t\t\tvar rK = right.b;\n\t\t\tvar rV = right.c;\n\t\t\tvar rLeft = right.d;\n\t\t\tvar rRight = right.e;\n\t\t\tif ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {\n\t\t\t\tvar _n3 = left.a;\n\t\t\t\tvar lK = left.b;\n\t\t\t\tvar lV = left.c;\n\t\t\t\tvar lLeft = left.d;\n\t\t\t\tvar lRight = left.e;\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Red,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, lK, lV, lLeft, lRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, rK, rV, rLeft, rRight));\n\t\t\t} else {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\tcolor,\n\t\t\t\t\trK,\n\t\t\t\t\trV,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, left, rLeft),\n\t\t\t\t\trRight);\n\t\t\t}\n\t\t} else {\n\t\t\tif ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {\n\t\t\t\tvar _n5 = left.a;\n\t\t\t\tvar lK = left.b;\n\t\t\t\tvar lV = left.c;\n\t\t\t\tvar _n6 = left.d;\n\t\t\t\tvar _n7 = _n6.a;\n\t\t\t\tvar llK = _n6.b;\n\t\t\t\tvar llV = _n6.c;\n\t\t\t\tvar llLeft = _n6.d;\n\t\t\t\tvar llRight = _n6.e;\n\t\t\t\tvar lRight = left.e;\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Red,\n\t\t\t\t\tlK,\n\t\t\t\t\tlV,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, llK, llV, llLeft, llRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, key, value, lRight, right));\n\t\t\t} else {\n\t\t\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Dict$insertHelp = F3(\n\tfunction (key, value, dict) {\n\t\tif (dict.$ === 'RBEmpty_elm_builtin') {\n\t\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, elm$core$Dict$RBEmpty_elm_builtin, elm$core$Dict$RBEmpty_elm_builtin);\n\t\t} else {\n\t\t\tvar nColor = dict.a;\n\t\t\tvar nKey = dict.b;\n\t\t\tvar nValue = dict.c;\n\t\t\tvar nLeft = dict.d;\n\t\t\tvar nRight = dict.e;\n\t\t\tvar _n1 = A2(elm$core$Basics$compare, key, nKey);\n\t\t\tswitch (_n1.$) {\n\t\t\t\tcase 'LT':\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\t\tnColor,\n\t\t\t\t\t\tnKey,\n\t\t\t\t\t\tnValue,\n\t\t\t\t\t\tA3(elm$core$Dict$insertHelp, key, value, nLeft),\n\t\t\t\t\t\tnRight);\n\t\t\t\tcase 'EQ':\n\t\t\t\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);\n\t\t\t\tdefault:\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\t\tnColor,\n\t\t\t\t\t\tnKey,\n\t\t\t\t\t\tnValue,\n\t\t\t\t\t\tnLeft,\n\t\t\t\t\t\tA3(elm$core$Dict$insertHelp, key, value, nRight));\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Dict$insert = F3(\n\tfunction (key, value, dict) {\n\t\tvar _n0 = A3(elm$core$Dict$insertHelp, key, value, dict);\n\t\tif ((_n0.$ === 'RBNode_elm_builtin') && (_n0.a.$ === 'Red')) {\n\t\t\tvar _n1 = _n0.a;\n\t\t\tvar k = _n0.b;\n\t\t\tvar v = _n0.c;\n\t\t\tvar l = _n0.d;\n\t\t\tvar r = _n0.e;\n\t\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, k, v, l, r);\n\t\t} else {\n\t\t\tvar x = _n0;\n\t\t\treturn x;\n\t\t}\n\t});\nvar elm$core$Dict$getMin = function (dict) {\n\tgetMin:\n\twhile (true) {\n\t\tif ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {\n\t\t\tvar left = dict.d;\n\t\t\tvar $temp$dict = left;\n\t\t\tdict = $temp$dict;\n\t\t\tcontinue getMin;\n\t\t} else {\n\t\t\treturn dict;\n\t\t}\n\t}\n};\nvar elm$core$Dict$moveRedLeft = function (dict) {\n\tif (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {\n\t\tif ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {\n\t\t\tvar clr = dict.a;\n\t\t\tvar k = dict.b;\n\t\t\tvar v = dict.c;\n\t\t\tvar _n1 = dict.d;\n\t\t\tvar lClr = _n1.a;\n\t\t\tvar lK = _n1.b;\n\t\t\tvar lV = _n1.c;\n\t\t\tvar lLeft = _n1.d;\n\t\t\tvar lRight = _n1.e;\n\t\t\tvar _n2 = dict.e;\n\t\t\tvar rClr = _n2.a;\n\t\t\tvar rK = _n2.b;\n\t\t\tvar rV = _n2.c;\n\t\t\tvar rLeft = _n2.d;\n\t\t\tvar _n3 = rLeft.a;\n\t\t\tvar rlK = rLeft.b;\n\t\t\tvar rlV = rLeft.c;\n\t\t\tvar rlL = rLeft.d;\n\t\t\tvar rlR = rLeft.e;\n\t\t\tvar rRight = _n2.e;\n\t\t\treturn A5(\n\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\telm$core$Dict$Red,\n\t\t\t\trlK,\n\t\t\t\trlV,\n\t\t\t\tA5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),\n\t\t\t\t\trlL),\n\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, rK, rV, rlR, rRight));\n\t\t} else {\n\t\t\tvar clr = dict.a;\n\t\t\tvar k = dict.b;\n\t\t\tvar v = dict.c;\n\t\t\tvar _n4 = dict.d;\n\t\t\tvar lClr = _n4.a;\n\t\t\tvar lK = _n4.b;\n\t\t\tvar lV = _n4.c;\n\t\t\tvar lLeft = _n4.d;\n\t\t\tvar lRight = _n4.e;\n\t\t\tvar _n5 = dict.e;\n\t\t\tvar rClr = _n5.a;\n\t\t\tvar rK = _n5.b;\n\t\t\tvar rV = _n5.c;\n\t\t\tvar rLeft = _n5.d;\n\t\t\tvar rRight = _n5.e;\n\t\t\tif (clr.$ === 'Black') {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));\n\t\t\t} else {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn dict;\n\t}\n};\nvar elm$core$Dict$moveRedRight = function (dict) {\n\tif (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {\n\t\tif ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {\n\t\t\tvar clr = dict.a;\n\t\t\tvar k = dict.b;\n\t\t\tvar v = dict.c;\n\t\t\tvar _n1 = dict.d;\n\t\t\tvar lClr = _n1.a;\n\t\t\tvar lK = _n1.b;\n\t\t\tvar lV = _n1.c;\n\t\t\tvar _n2 = _n1.d;\n\t\t\tvar _n3 = _n2.a;\n\t\t\tvar llK = _n2.b;\n\t\t\tvar llV = _n2.c;\n\t\t\tvar llLeft = _n2.d;\n\t\t\tvar llRight = _n2.e;\n\t\t\tvar lRight = _n1.e;\n\t\t\tvar _n4 = dict.e;\n\t\t\tvar rClr = _n4.a;\n\t\t\tvar rK = _n4.b;\n\t\t\tvar rV = _n4.c;\n\t\t\tvar rLeft = _n4.d;\n\t\t\tvar rRight = _n4.e;\n\t\t\treturn A5(\n\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\telm$core$Dict$Red,\n\t\t\t\tlK,\n\t\t\t\tlV,\n\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, llK, llV, llLeft, llRight),\n\t\t\t\tA5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tlRight,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight)));\n\t\t} else {\n\t\t\tvar clr = dict.a;\n\t\t\tvar k = dict.b;\n\t\t\tvar v = dict.c;\n\t\t\tvar _n5 = dict.d;\n\t\t\tvar lClr = _n5.a;\n\t\t\tvar lK = _n5.b;\n\t\t\tvar lV = _n5.c;\n\t\t\tvar lLeft = _n5.d;\n\t\t\tvar lRight = _n5.e;\n\t\t\tvar _n6 = dict.e;\n\t\t\tvar rClr = _n6.a;\n\t\t\tvar rK = _n6.b;\n\t\t\tvar rV = _n6.c;\n\t\t\tvar rLeft = _n6.d;\n\t\t\tvar rRight = _n6.e;\n\t\t\tif (clr.$ === 'Black') {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));\n\t\t\t} else {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn dict;\n\t}\n};\nvar elm$core$Dict$removeHelpPrepEQGT = F7(\n\tfunction (targetKey, dict, color, key, value, left, right) {\n\t\tif ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {\n\t\t\tvar _n1 = left.a;\n\t\t\tvar lK = left.b;\n\t\t\tvar lV = left.c;\n\t\t\tvar lLeft = left.d;\n\t\t\tvar lRight = left.e;\n\t\t\treturn A5(\n\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\tcolor,\n\t\t\t\tlK,\n\t\t\t\tlV,\n\t\t\t\tlLeft,\n\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, lRight, right));\n\t\t} else {\n\t\t\t_n2$2:\n\t\t\twhile (true) {\n\t\t\t\tif ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {\n\t\t\t\t\tif (right.d.$ === 'RBNode_elm_builtin') {\n\t\t\t\t\t\tif (right.d.a.$ === 'Black') {\n\t\t\t\t\t\t\tvar _n3 = right.a;\n\t\t\t\t\t\t\tvar _n4 = right.d;\n\t\t\t\t\t\t\tvar _n5 = _n4.a;\n\t\t\t\t\t\t\treturn elm$core$Dict$moveRedRight(dict);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak _n2$2;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _n6 = right.a;\n\t\t\t\t\t\tvar _n7 = right.d;\n\t\t\t\t\t\treturn elm$core$Dict$moveRedRight(dict);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak _n2$2;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn dict;\n\t\t}\n\t});\nvar elm$core$Dict$removeMin = function (dict) {\n\tif ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {\n\t\tvar color = dict.a;\n\t\tvar key = dict.b;\n\t\tvar value = dict.c;\n\t\tvar left = dict.d;\n\t\tvar lColor = left.a;\n\t\tvar lLeft = left.d;\n\t\tvar right = dict.e;\n\t\tif (lColor.$ === 'Black') {\n\t\t\tif ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {\n\t\t\t\tvar _n3 = lLeft.a;\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\tcolor,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\telm$core$Dict$removeMin(left),\n\t\t\t\t\tright);\n\t\t\t} else {\n\t\t\t\tvar _n4 = elm$core$Dict$moveRedLeft(dict);\n\t\t\t\tif (_n4.$ === 'RBNode_elm_builtin') {\n\t\t\t\t\tvar nColor = _n4.a;\n\t\t\t\t\tvar nKey = _n4.b;\n\t\t\t\t\tvar nValue = _n4.c;\n\t\t\t\t\tvar nLeft = _n4.d;\n\t\t\t\t\tvar nRight = _n4.e;\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\t\tnColor,\n\t\t\t\t\t\tnKey,\n\t\t\t\t\t\tnValue,\n\t\t\t\t\t\telm$core$Dict$removeMin(nLeft),\n\t\t\t\t\t\tnRight);\n\t\t\t\t} else {\n\t\t\t\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn A5(\n\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\tcolor,\n\t\t\t\tkey,\n\t\t\t\tvalue,\n\t\t\t\telm$core$Dict$removeMin(left),\n\t\t\t\tright);\n\t\t}\n\t} else {\n\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t}\n};\nvar elm$core$Dict$removeHelp = F2(\n\tfunction (targetKey, dict) {\n\t\tif (dict.$ === 'RBEmpty_elm_builtin') {\n\t\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t\t} else {\n\t\t\tvar color = dict.a;\n\t\t\tvar key = dict.b;\n\t\t\tvar value = dict.c;\n\t\t\tvar left = dict.d;\n\t\t\tvar right = dict.e;\n\t\t\tif (_Utils_cmp(targetKey, key) < 0) {\n\t\t\t\tif ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {\n\t\t\t\t\tvar _n4 = left.a;\n\t\t\t\t\tvar lLeft = left.d;\n\t\t\t\t\tif ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {\n\t\t\t\t\t\tvar _n6 = lLeft.a;\n\t\t\t\t\t\treturn A5(\n\t\t\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\t\t\tcolor,\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tA2(elm$core$Dict$removeHelp, targetKey, left),\n\t\t\t\t\t\t\tright);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _n7 = elm$core$Dict$moveRedLeft(dict);\n\t\t\t\t\t\tif (_n7.$ === 'RBNode_elm_builtin') {\n\t\t\t\t\t\t\tvar nColor = _n7.a;\n\t\t\t\t\t\t\tvar nKey = _n7.b;\n\t\t\t\t\t\t\tvar nValue = _n7.c;\n\t\t\t\t\t\t\tvar nLeft = _n7.d;\n\t\t\t\t\t\t\tvar nRight = _n7.e;\n\t\t\t\t\t\t\treturn A5(\n\t\t\t\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\t\t\t\tnColor,\n\t\t\t\t\t\t\t\tnKey,\n\t\t\t\t\t\t\t\tnValue,\n\t\t\t\t\t\t\t\tA2(elm$core$Dict$removeHelp, targetKey, nLeft),\n\t\t\t\t\t\t\t\tnRight);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\t\tcolor,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tA2(elm$core$Dict$removeHelp, targetKey, left),\n\t\t\t\t\t\tright);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Dict$removeHelpEQGT,\n\t\t\t\t\ttargetKey,\n\t\t\t\t\tA7(elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Dict$removeHelpEQGT = F2(\n\tfunction (targetKey, dict) {\n\t\tif (dict.$ === 'RBNode_elm_builtin') {\n\t\t\tvar color = dict.a;\n\t\t\tvar key = dict.b;\n\t\t\tvar value = dict.c;\n\t\t\tvar left = dict.d;\n\t\t\tvar right = dict.e;\n\t\t\tif (_Utils_eq(targetKey, key)) {\n\t\t\t\tvar _n1 = elm$core$Dict$getMin(right);\n\t\t\t\tif (_n1.$ === 'RBNode_elm_builtin') {\n\t\t\t\t\tvar minKey = _n1.b;\n\t\t\t\t\tvar minValue = _n1.c;\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\t\tcolor,\n\t\t\t\t\t\tminKey,\n\t\t\t\t\t\tminValue,\n\t\t\t\t\t\tleft,\n\t\t\t\t\t\telm$core$Dict$removeMin(right));\n\t\t\t\t} else {\n\t\t\t\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\tcolor,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tleft,\n\t\t\t\t\tA2(elm$core$Dict$removeHelp, targetKey, right));\n\t\t\t}\n\t\t} else {\n\t\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t\t}\n\t});\nvar elm$core$Dict$remove = F2(\n\tfunction (key, dict) {\n\t\tvar _n0 = A2(elm$core$Dict$removeHelp, key, dict);\n\t\tif ((_n0.$ === 'RBNode_elm_builtin') && (_n0.a.$ === 'Red')) {\n\t\t\tvar _n1 = _n0.a;\n\t\t\tvar k = _n0.b;\n\t\t\tvar v = _n0.c;\n\t\t\tvar l = _n0.d;\n\t\t\tvar r = _n0.e;\n\t\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, k, v, l, r);\n\t\t} else {\n\t\t\tvar x = _n0;\n\t\t\treturn x;\n\t\t}\n\t});\nvar elm$core$Dict$update = F3(\n\tfunction (targetKey, alter, dictionary) {\n\t\tvar _n0 = alter(\n\t\t\tA2(elm$core$Dict$get, targetKey, dictionary));\n\t\tif (_n0.$ === 'Just') {\n\t\t\tvar value = _n0.a;\n\t\t\treturn A3(elm$core$Dict$insert, targetKey, value, dictionary);\n\t\t} else {\n\t\t\treturn A2(elm$core$Dict$remove, targetKey, dictionary);\n\t\t}\n\t});\nvar elm$core$Maybe$isJust = function (maybe) {\n\tif (maybe.$ === 'Just') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\nvar elm$core$Platform$sendToApp = _Platform_sendToApp;\nvar elm$core$Platform$sendToSelf = _Platform_sendToSelf;\nvar elm$core$Result$map = F2(\n\tfunction (func, ra) {\n\t\tif (ra.$ === 'Ok') {\n\t\t\tvar a = ra.a;\n\t\t\treturn elm$core$Result$Ok(\n\t\t\t\tfunc(a));\n\t\t} else {\n\t\t\tvar e = ra.a;\n\t\t\treturn elm$core$Result$Err(e);\n\t\t}\n\t});\nvar elm$http$Http$BadStatus_ = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'BadStatus_', a: a, b: b};\n\t});\nvar elm$http$Http$BadUrl_ = function (a) {\n\treturn {$: 'BadUrl_', a: a};\n};\nvar elm$http$Http$GoodStatus_ = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'GoodStatus_', a: a, b: b};\n\t});\nvar elm$http$Http$NetworkError_ = {$: 'NetworkError_'};\nvar elm$http$Http$Receiving = function (a) {\n\treturn {$: 'Receiving', a: a};\n};\nvar elm$http$Http$Sending = function (a) {\n\treturn {$: 'Sending', a: a};\n};\nvar elm$http$Http$Timeout_ = {$: 'Timeout_'};\nvar elm$http$Http$emptyBody = _Http_emptyBody;\nvar elm$core$Result$mapError = F2(\n\tfunction (f, result) {\n\t\tif (result.$ === 'Ok') {\n\t\t\tvar v = result.a;\n\t\t\treturn elm$core$Result$Ok(v);\n\t\t} else {\n\t\t\tvar e = result.a;\n\t\t\treturn elm$core$Result$Err(\n\t\t\t\tf(e));\n\t\t}\n\t});\nvar elm$core$Basics$composeR = F3(\n\tfunction (f, g, x) {\n\t\treturn g(\n\t\t\tf(x));\n\t});\nvar elm$http$Http$expectStringResponse = F2(\n\tfunction (toMsg, toResult) {\n\t\treturn A3(\n\t\t\t_Http_expect,\n\t\t\t'',\n\t\t\telm$core$Basics$identity,\n\t\t\tA2(elm$core$Basics$composeR, toResult, toMsg));\n\t});\nvar elm$http$Http$BadBody = function (a) {\n\treturn {$: 'BadBody', a: a};\n};\nvar elm$http$Http$BadStatus = function (a) {\n\treturn {$: 'BadStatus', a: a};\n};\nvar elm$http$Http$BadUrl = function (a) {\n\treturn {$: 'BadUrl', a: a};\n};\nvar elm$http$Http$NetworkError = {$: 'NetworkError'};\nvar elm$http$Http$Timeout = {$: 'Timeout'};\nvar elm$http$Http$resolve = F2(\n\tfunction (toResult, response) {\n\t\tswitch (response.$) {\n\t\t\tcase 'BadUrl_':\n\t\t\t\tvar url = response.a;\n\t\t\t\treturn elm$core$Result$Err(\n\t\t\t\t\telm$http$Http$BadUrl(url));\n\t\t\tcase 'Timeout_':\n\t\t\t\treturn elm$core$Result$Err(elm$http$Http$Timeout);\n\t\t\tcase 'NetworkError_':\n\t\t\t\treturn elm$core$Result$Err(elm$http$Http$NetworkError);\n\t\t\tcase 'BadStatus_':\n\t\t\t\tvar metadata = response.a;\n\t\t\t\treturn elm$core$Result$Err(\n\t\t\t\t\telm$http$Http$BadStatus(metadata.statusCode));\n\t\t\tdefault:\n\t\t\t\tvar body = response.b;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Result$mapError,\n\t\t\t\t\telm$http$Http$BadBody,\n\t\t\t\t\ttoResult(body));\n\t\t}\n\t});\nvar elm$json$Json$Decode$decodeString = _Json_runOnString;\nvar elm$http$Http$expectJson = F2(\n\tfunction (toMsg, decoder) {\n\t\treturn A2(\n\t\t\telm$http$Http$expectStringResponse,\n\t\t\ttoMsg,\n\t\t\telm$http$Http$resolve(\n\t\t\t\tfunction (string) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$Result$mapError,\n\t\t\t\t\t\telm$json$Json$Decode$errorToString,\n\t\t\t\t\t\tA2(elm$json$Json$Decode$decodeString, decoder, string));\n\t\t\t\t}));\n\t});\nvar elm$http$Http$Header = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Header', a: a, b: b};\n\t});\nvar elm$http$Http$header = elm$http$Http$Header;\nvar elm$http$Http$Request = function (a) {\n\treturn {$: 'Request', a: a};\n};\nvar elm$core$Task$succeed = _Scheduler_succeed;\nvar elm$http$Http$State = F2(\n\tfunction (reqs, subs) {\n\t\treturn {reqs: reqs, subs: subs};\n\t});\nvar elm$http$Http$init = elm$core$Task$succeed(\n\tA2(elm$http$Http$State, elm$core$Dict$empty, _List_Nil));\nvar elm$core$Task$andThen = _Scheduler_andThen;\nvar elm$core$Process$kill = _Scheduler_kill;\nvar elm$core$Process$spawn = _Scheduler_spawn;\nvar elm$http$Http$updateReqs = F3(\n\tfunction (router, cmds, reqs) {\n\t\tupdateReqs:\n\t\twhile (true) {\n\t\t\tif (!cmds.b) {\n\t\t\t\treturn elm$core$Task$succeed(reqs);\n\t\t\t} else {\n\t\t\t\tvar cmd = cmds.a;\n\t\t\t\tvar otherCmds = cmds.b;\n\t\t\t\tif (cmd.$ === 'Cancel') {\n\t\t\t\t\tvar tracker = cmd.a;\n\t\t\t\t\tvar _n2 = A2(elm$core$Dict$get, tracker, reqs);\n\t\t\t\t\tif (_n2.$ === 'Nothing') {\n\t\t\t\t\t\tvar $temp$router = router,\n\t\t\t\t\t\t\t$temp$cmds = otherCmds,\n\t\t\t\t\t\t\t$temp$reqs = reqs;\n\t\t\t\t\t\trouter = $temp$router;\n\t\t\t\t\t\tcmds = $temp$cmds;\n\t\t\t\t\t\treqs = $temp$reqs;\n\t\t\t\t\t\tcontinue updateReqs;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar pid = _n2.a;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$core$Task$andThen,\n\t\t\t\t\t\t\tfunction (_n3) {\n\t\t\t\t\t\t\t\treturn A3(\n\t\t\t\t\t\t\t\t\telm$http$Http$updateReqs,\n\t\t\t\t\t\t\t\t\trouter,\n\t\t\t\t\t\t\t\t\totherCmds,\n\t\t\t\t\t\t\t\t\tA2(elm$core$Dict$remove, tracker, reqs));\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\telm$core$Process$kill(pid));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar req = cmd.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$Task$andThen,\n\t\t\t\t\t\tfunction (pid) {\n\t\t\t\t\t\t\tvar _n4 = req.tracker;\n\t\t\t\t\t\t\tif (_n4.$ === 'Nothing') {\n\t\t\t\t\t\t\t\treturn A3(elm$http$Http$updateReqs, router, otherCmds, reqs);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar tracker = _n4.a;\n\t\t\t\t\t\t\t\treturn A3(\n\t\t\t\t\t\t\t\t\telm$http$Http$updateReqs,\n\t\t\t\t\t\t\t\t\trouter,\n\t\t\t\t\t\t\t\t\totherCmds,\n\t\t\t\t\t\t\t\t\tA3(elm$core$Dict$insert, tracker, pid, reqs));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\telm$core$Process$spawn(\n\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t_Http_toTask,\n\t\t\t\t\t\t\t\trouter,\n\t\t\t\t\t\t\t\telm$core$Platform$sendToApp(router),\n\t\t\t\t\t\t\t\treq)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$http$Http$onEffects = F4(\n\tfunction (router, cmds, subs, state) {\n\t\treturn A2(\n\t\t\telm$core$Task$andThen,\n\t\t\tfunction (reqs) {\n\t\t\t\treturn elm$core$Task$succeed(\n\t\t\t\t\tA2(elm$http$Http$State, reqs, subs));\n\t\t\t},\n\t\t\tA3(elm$http$Http$updateReqs, router, cmds, state.reqs));\n\t});\nvar elm$core$List$maybeCons = F3(\n\tfunction (f, mx, xs) {\n\t\tvar _n0 = f(mx);\n\t\tif (_n0.$ === 'Just') {\n\t\t\tvar x = _n0.a;\n\t\t\treturn A2(elm$core$List$cons, x, xs);\n\t\t} else {\n\t\t\treturn xs;\n\t\t}\n\t});\nvar elm$core$List$filterMap = F2(\n\tfunction (f, xs) {\n\t\treturn A3(\n\t\t\telm$core$List$foldr,\n\t\t\telm$core$List$maybeCons(f),\n\t\t\t_List_Nil,\n\t\t\txs);\n\t});\nvar elm$core$Task$map2 = F3(\n\tfunction (func, taskA, taskB) {\n\t\treturn A2(\n\t\t\telm$core$Task$andThen,\n\t\t\tfunction (a) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Task$andThen,\n\t\t\t\t\tfunction (b) {\n\t\t\t\t\t\treturn elm$core$Task$succeed(\n\t\t\t\t\t\t\tA2(func, a, b));\n\t\t\t\t\t},\n\t\t\t\t\ttaskB);\n\t\t\t},\n\t\t\ttaskA);\n\t});\nvar elm$core$Task$sequence = function (tasks) {\n\treturn A3(\n\t\telm$core$List$foldr,\n\t\telm$core$Task$map2(elm$core$List$cons),\n\t\telm$core$Task$succeed(_List_Nil),\n\t\ttasks);\n};\nvar elm$http$Http$maybeSend = F4(\n\tfunction (router, desiredTracker, progress, _n0) {\n\t\tvar actualTracker = _n0.a;\n\t\tvar toMsg = _n0.b;\n\t\treturn _Utils_eq(desiredTracker, actualTracker) ? elm$core$Maybe$Just(\n\t\t\tA2(\n\t\t\t\telm$core$Platform$sendToApp,\n\t\t\t\trouter,\n\t\t\t\ttoMsg(progress))) : elm$core$Maybe$Nothing;\n\t});\nvar elm$http$Http$onSelfMsg = F3(\n\tfunction (router, _n0, state) {\n\t\tvar tracker = _n0.a;\n\t\tvar progress = _n0.b;\n\t\treturn A2(\n\t\t\telm$core$Task$andThen,\n\t\t\tfunction (_n1) {\n\t\t\t\treturn elm$core$Task$succeed(state);\n\t\t\t},\n\t\t\telm$core$Task$sequence(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$filterMap,\n\t\t\t\t\tA3(elm$http$Http$maybeSend, router, tracker, progress),\n\t\t\t\t\tstate.subs)));\n\t});\nvar elm$http$Http$Cancel = function (a) {\n\treturn {$: 'Cancel', a: a};\n};\nvar elm$http$Http$cmdMap = F2(\n\tfunction (func, cmd) {\n\t\tif (cmd.$ === 'Cancel') {\n\t\t\tvar tracker = cmd.a;\n\t\t\treturn elm$http$Http$Cancel(tracker);\n\t\t} else {\n\t\t\tvar r = cmd.a;\n\t\t\treturn elm$http$Http$Request(\n\t\t\t\t{\n\t\t\t\t\tallowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,\n\t\t\t\t\tbody: r.body,\n\t\t\t\t\texpect: A2(_Http_mapExpect, func, r.expect),\n\t\t\t\t\theaders: r.headers,\n\t\t\t\t\tmethod: r.method,\n\t\t\t\t\ttimeout: r.timeout,\n\t\t\t\t\ttracker: r.tracker,\n\t\t\t\t\turl: r.url\n\t\t\t\t});\n\t\t}\n\t});\nvar elm$http$Http$MySub = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'MySub', a: a, b: b};\n\t});\nvar elm$http$Http$subMap = F2(\n\tfunction (func, _n0) {\n\t\tvar tracker = _n0.a;\n\t\tvar toMsg = _n0.b;\n\t\treturn A2(\n\t\t\telm$http$Http$MySub,\n\t\t\ttracker,\n\t\t\tA2(elm$core$Basics$composeR, toMsg, func));\n\t});\n_Platform_effectManagers['Http'] = _Platform_createManager(elm$http$Http$init, elm$http$Http$onEffects, elm$http$Http$onSelfMsg, elm$http$Http$cmdMap, elm$http$Http$subMap);\nvar elm$http$Http$command = _Platform_leaf('Http');\nvar elm$http$Http$subscription = _Platform_leaf('Http');\nvar elm$http$Http$request = function (r) {\n\treturn elm$http$Http$command(\n\t\telm$http$Http$Request(\n\t\t\t{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));\n};\nvar author$project$Main$loadUser = function (token) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$emptyBody,\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Main$Response, author$project$User$decodeUser),\n\t\t\theaders: _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$http$Http$header, 'auth', token)\n\t\t\t\t]),\n\t\t\tmethod: 'GET',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/account/auth'\n\t\t});\n};\nvar author$project$Main$Gallery = function (a) {\n\treturn {$: 'Gallery', a: a};\n};\nvar author$project$Main$GalleryMsg = function (a) {\n\treturn {$: 'GalleryMsg', a: a};\n};\nvar elm$core$Platform$Cmd$map = _Platform_map;\nvar author$project$Main$stepGallery = F2(\n\tfunction (model, _n0) {\n\t\tvar gallery = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Gallery(gallery)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$GalleryMsg, cmd));\n\t});\nvar author$project$Main$Home = function (a) {\n\treturn {$: 'Home', a: a};\n};\nvar author$project$Main$HomeMsg = function (a) {\n\treturn {$: 'HomeMsg', a: a};\n};\nvar author$project$Main$stepHome = F2(\n\tfunction (model, _n0) {\n\t\tvar home = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Home(home)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$HomeMsg, cmd));\n\t});\nvar author$project$Main$Post = function (a) {\n\treturn {$: 'Post', a: a};\n};\nvar author$project$Main$PostMsg = function (a) {\n\treturn {$: 'PostMsg', a: a};\n};\nvar author$project$Main$stepPost = F2(\n\tfunction (model, _n0) {\n\t\tvar post = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Post(post)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$PostMsg, cmd));\n\t});\nvar author$project$Main$Profile = function (a) {\n\treturn {$: 'Profile', a: a};\n};\nvar author$project$Main$ProfileMsg = function (a) {\n\treturn {$: 'ProfileMsg', a: a};\n};\nvar author$project$Main$stepProfile = F2(\n\tfunction (model, _n0) {\n\t\tvar profile = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Profile(profile)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$ProfileMsg, cmd));\n\t});\nvar author$project$Main$Results = function (a) {\n\treturn {$: 'Results', a: a};\n};\nvar author$project$Main$ResultsMsg = function (a) {\n\treturn {$: 'ResultsMsg', a: a};\n};\nvar author$project$Main$stepResults = F2(\n\tfunction (model, _n0) {\n\t\tvar results = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Results(results)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$ResultsMsg, cmd));\n\t});\nvar author$project$Main$SignIn = function (a) {\n\treturn {$: 'SignIn', a: a};\n};\nvar author$project$Main$SignInMsg = function (a) {\n\treturn {$: 'SignInMsg', a: a};\n};\nvar author$project$Session$Session = function (user) {\n\treturn {user: user};\n};\nvar author$project$Session$init = author$project$Session$Session(elm$core$Maybe$Nothing);\nvar author$project$Session$update = F2(\n\tfunction (msg, model) {\n\t\tif (msg.$ === 'NoUpdate') {\n\t\t\treturn model;\n\t\t} else {\n\t\t\tvar usr = msg.a;\n\t\t\treturn _Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tuser: elm$core$Maybe$Just(usr)\n\t\t\t\t});\n\t\t}\n\t});\nvar author$project$Main$stepSignIn = F2(\n\tfunction (model, _n0) {\n\t\tvar signin = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\tvar session = _n0.c;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$SignIn(signin),\n\t\t\t\t\tstate: author$project$Main$Ready(\n\t\t\t\t\t\tA2(author$project$Session$update, session, author$project$Session$init))\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$SignInMsg, cmd));\n\t});\nvar author$project$Main$SignUp = function (a) {\n\treturn {$: 'SignUp', a: a};\n};\nvar author$project$Main$SignUpMsg = function (a) {\n\treturn {$: 'SignUpMsg', a: a};\n};\nvar author$project$Main$stepSignUp = F2(\n\tfunction (model, _n0) {\n\t\tvar signup = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$SignUp(signup)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$SignUpMsg, cmd));\n\t});\nvar author$project$Main$Tags = function (a) {\n\treturn {$: 'Tags', a: a};\n};\nvar author$project$Main$TagsMsg = function (a) {\n\treturn {$: 'TagsMsg', a: a};\n};\nvar author$project$Main$stepTags = F2(\n\tfunction (model, _n0) {\n\t\tvar tags = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Tags(tags)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$TagsMsg, cmd));\n\t});\nvar author$project$Main$Upload = function (a) {\n\treturn {$: 'Upload', a: a};\n};\nvar author$project$Main$UploadMsg = function (a) {\n\treturn {$: 'UploadMsg', a: a};\n};\nvar author$project$Main$stepUpload = F2(\n\tfunction (model, _n0) {\n\t\tvar upload = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Upload(upload)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$UploadMsg, cmd));\n\t});\nvar author$project$Main$Users = function (a) {\n\treturn {$: 'Users', a: a};\n};\nvar author$project$Main$UsersMsg = function (a) {\n\treturn {$: 'UsersMsg', a: a};\n};\nvar author$project$Main$stepUsers = F2(\n\tfunction (model, _n0) {\n\t\tvar users = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Users(users)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$UsersMsg, cmd));\n\t});\nvar author$project$Pages$Gallery$Loading = {$: 'Loading'};\nvar author$project$Pages$Gallery$Model = F4(\n\tfunction (status, page, key, sort) {\n\t\treturn {key: key, page: page, sort: sort, status: status};\n\t});\nvar author$project$Image$PreviewContainer = F2(\n\tfunction (total, images) {\n\t\treturn {images: images, total: total};\n\t});\nvar author$project$Image$Preview = F8(\n\tfunction (id, title, url, author, points, views, favorites, uploaded) {\n\t\treturn {author: author, favorites: favorites, id: id, points: points, title: title, uploaded: uploaded, url: url, views: views};\n\t});\nvar elm$json$Json$Decode$int = _Json_decodeInt;\nvar author$project$Image$decodePreview = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'uploaded',\n\telm_community$json_extra$Json$Decode$Extra$datetime,\n\tA4(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t'favorites',\n\t\telm$json$Json$Decode$int,\n\t\t0,\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'views',\n\t\t\telm$json$Json$Decode$int,\n\t\t\tA3(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t'points',\n\t\t\t\telm$json$Json$Decode$int,\n\t\t\t\tA4(\n\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t'author',\n\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t'Anonymous',\n\t\t\t\t\tA3(\n\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t'file',\n\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t'title',\n\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t\t'id',\n\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\telm$json$Json$Decode$succeed(author$project$Image$Preview)))))))));\nvar elm$json$Json$Decode$list = _Json_decodeList;\nvar author$project$Image$decodePreviewContainer = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'images',\n\telm$json$Json$Decode$list(author$project$Image$decodePreview),\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'total',\n\t\telm$json$Json$Decode$int,\n\t\telm$json$Json$Decode$succeed(author$project$Image$PreviewContainer)));\nvar author$project$Pages$Gallery$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Gallery$getSort = function (sort) {\n\tswitch (sort) {\n\t\tcase 'popular':\n\t\t\treturn 'views';\n\t\tcase 'rating':\n\t\t\treturn 'points';\n\t\tdefault:\n\t\t\treturn 'uploaded';\n\t}\n};\nvar elm$http$Http$get = function (r) {\n\treturn elm$http$Http$request(\n\t\t{body: elm$http$Http$emptyBody, expect: r.expect, headers: _List_Nil, method: 'GET', timeout: elm$core$Maybe$Nothing, tracker: elm$core$Maybe$Nothing, url: r.url});\n};\nvar author$project$Pages$Gallery$get = F2(\n\tfunction (sort, page) {\n\t\treturn elm$http$Http$get(\n\t\t\t{\n\t\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Gallery$Response, author$project$Image$decodePreviewContainer),\n\t\t\t\turl: author$project$Server$url + ('/images/get' + ('?page=' + (elm$core$String$fromInt(page) + ('&sort=' + (author$project$Pages$Gallery$getSort(sort) + ('&order=' + elm$core$String$fromInt(-1)))))))\n\t\t\t});\n\t});\nvar author$project$Pages$Gallery$init = F4(\n\tfunction (user, key, page, sort) {\n\t\tif (page.$ === 'Just') {\n\t\t\tvar _int = page.a;\n\t\t\tif (sort.$ === 'Just') {\n\t\t\t\tvar string = sort.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA4(author$project$Pages$Gallery$Model, author$project$Pages$Gallery$Loading, _int, key, string),\n\t\t\t\t\tA2(author$project$Pages$Gallery$get, string, _int));\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA4(author$project$Pages$Gallery$Model, author$project$Pages$Gallery$Loading, _int, key, 'newest'),\n\t\t\t\t\tA2(author$project$Pages$Gallery$get, 'newest', _int));\n\t\t\t}\n\t\t} else {\n\t\t\treturn _Utils_Tuple2(\n\t\t\t\tA4(author$project$Pages$Gallery$Model, author$project$Pages$Gallery$Loading, 1, key, 'newest'),\n\t\t\t\tA2(author$project$Pages$Gallery$get, 'newest', 1));\n\t\t}\n\t});\nvar author$project$Components$Carousel$Right = {$: 'Right'};\nvar author$project$Components$Carousel$Start = {$: 'Start'};\nvar author$project$Components$Carousel$init = function (imgs) {\n\treturn {counter: author$project$Components$Carousel$Start, current: 0, dir: author$project$Components$Carousel$Right, source: imgs};\n};\nvar author$project$Pages$Home$Loading = {$: 'Loading'};\nvar author$project$Pages$Home$LoadingTags = {$: 'LoadingTags'};\nvar author$project$Pages$Home$Model = F5(\n\tfunction (key, carousel, user, status, tagStatus) {\n\t\treturn {carousel: carousel, key: key, status: status, tagStatus: tagStatus, user: user};\n\t});\nvar author$project$Pages$Home$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Home$getLatest = elm$http$Http$get(\n\t{\n\t\texpect: A2(\n\t\t\telm$http$Http$expectJson,\n\t\t\tauthor$project$Pages$Home$Response,\n\t\t\telm$json$Json$Decode$list(author$project$Image$decodePreview)),\n\t\turl: author$project$Server$url + '/posts/latest'\n\t});\nvar author$project$Pages$Home$TagsResponse = function (a) {\n\treturn {$: 'TagsResponse', a: a};\n};\nvar author$project$Pages$Home$getTrending = elm$http$Http$get(\n\t{\n\t\texpect: A2(\n\t\t\telm$http$Http$expectJson,\n\t\t\tauthor$project$Pages$Home$TagsResponse,\n\t\t\telm$json$Json$Decode$list(elm$json$Json$Decode$string)),\n\t\turl: author$project$Server$url + '/tags/trending'\n\t});\nvar elm$core$Array$fromListHelp = F3(\n\tfunction (list, nodeList, nodeListSize) {\n\t\tfromListHelp:\n\t\twhile (true) {\n\t\t\tvar _n0 = A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, list);\n\t\t\tvar jsArray = _n0.a;\n\t\t\tvar remainingItems = _n0.b;\n\t\t\tif (_Utils_cmp(\n\t\t\t\telm$core$Elm$JsArray$length(jsArray),\n\t\t\t\telm$core$Array$branchFactor) < 0) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Array$builderToArray,\n\t\t\t\t\ttrue,\n\t\t\t\t\t{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});\n\t\t\t} else {\n\t\t\t\tvar $temp$list = remainingItems,\n\t\t\t\t\t$temp$nodeList = A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\telm$core$Array$Leaf(jsArray),\n\t\t\t\t\tnodeList),\n\t\t\t\t\t$temp$nodeListSize = nodeListSize + 1;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tnodeList = $temp$nodeList;\n\t\t\t\tnodeListSize = $temp$nodeListSize;\n\t\t\t\tcontinue fromListHelp;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Array$fromList = function (list) {\n\tif (!list.b) {\n\t\treturn elm$core$Array$empty;\n\t} else {\n\t\treturn A3(elm$core$Array$fromListHelp, list, _List_Nil, 0);\n\t}\n};\nvar author$project$Pages$Home$init = F2(\n\tfunction (user, key) {\n\t\treturn _Utils_Tuple2(\n\t\t\tA5(\n\t\t\t\tauthor$project$Pages$Home$Model,\n\t\t\t\tkey,\n\t\t\t\tauthor$project$Components$Carousel$init(\n\t\t\t\t\telm$core$Array$fromList(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t['assets/carousel/1.jpg', 'assets/carousel/2.jpg', 'assets/carousel/3.jpg', 'assets/carousel/4.jpg', 'assets/carousel/5.jpg', 'assets/carousel/6.jpg']))),\n\t\t\t\tuser,\n\t\t\t\tauthor$project$Pages$Home$Loading,\n\t\t\t\tauthor$project$Pages$Home$LoadingTags),\n\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[author$project$Pages$Home$getLatest, author$project$Pages$Home$getTrending])));\n\t});\nvar author$project$Pages$Post$Empty = {$: 'Empty'};\nvar author$project$Pages$Post$Loading = {$: 'Loading'};\nvar author$project$Pages$Post$LoadingComments = {$: 'LoadingComments'};\nvar author$project$Pages$Post$LoadingInfo = {$: 'LoadingInfo'};\nvar author$project$Pages$Post$LoadingStats = {$: 'LoadingStats'};\nvar author$project$Pages$Post$Model = function (key) {\n\treturn function (user) {\n\t\treturn function (status) {\n\t\t\treturn function (comments) {\n\t\t\t\treturn function (comment) {\n\t\t\t\t\treturn function (id) {\n\t\t\t\t\t\treturn function (stats) {\n\t\t\t\t\t\t\treturn function (vote) {\n\t\t\t\t\t\t\t\treturn function (editing) {\n\t\t\t\t\t\t\t\t\treturn function (edit) {\n\t\t\t\t\t\t\t\t\t\treturn function (deleting) {\n\t\t\t\t\t\t\t\t\t\t\treturn function (title) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn {comment: comment, comments: comments, deleting: deleting, edit: edit, editing: editing, id: id, key: key, stats: stats, status: status, title: title, user: user, vote: vote};\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\nvar author$project$Image$Model = F7(\n\tfunction (title, url, id, description, author, tags, uploaded) {\n\t\treturn {author: author, description: description, id: id, tags: tags, title: title, uploaded: uploaded, url: url};\n\t});\nvar author$project$Image$decodeImage = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'uploaded',\n\telm_community$json_extra$Json$Decode$Extra$datetime,\n\tA4(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t'tags',\n\t\telm$json$Json$Decode$list(elm$json$Json$Decode$string),\n\t\t_List_Nil,\n\t\tA4(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t'author',\n\t\t\telm$json$Json$Decode$string,\n\t\t\t'Anonymous',\n\t\t\tA4(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t'description',\n\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t'No description',\n\t\t\t\tA3(\n\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t'id',\n\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\tA3(\n\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t'file',\n\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t'title',\n\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\telm$json$Json$Decode$succeed(author$project$Image$Model))))))));\nvar author$project$Pages$Post$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Post$get = function (id) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$emptyBody,\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Post$Response, author$project$Image$decodeImage),\n\t\t\theaders: _List_Nil,\n\t\t\tmethod: 'GET',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + ('/image' + ('?id=' + id))\n\t\t});\n};\nvar author$project$Pages$Post$InfoResponse = function (a) {\n\treturn {$: 'InfoResponse', a: a};\n};\nvar author$project$Pages$Post$Info = F2(\n\tfunction (vote, favorite) {\n\t\treturn {favorite: favorite, vote: vote};\n\t});\nvar author$project$Pages$Post$decodeUserInfo = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'favorite',\n\telm$json$Json$Decode$bool,\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'vote',\n\t\telm$json$Json$Decode$string,\n\t\telm$json$Json$Decode$succeed(author$project$Pages$Post$Info)));\nvar author$project$Pages$Post$getUserInfo = F2(\n\tfunction (id, mbyUser) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$emptyBody,\n\t\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Post$InfoResponse, author$project$Pages$Post$decodeUserInfo),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tif (mbyUser.$ === 'Just') {\n\t\t\t\t\t\t\tvar user = mbyUser.a;\n\t\t\t\t\t\t\treturn A2(elm$http$Http$header, 'auth', user.token);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn A2(elm$http$Http$header, 'auth', '');\n\t\t\t\t\t\t}\n\t\t\t\t\t}()\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'GET',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + ('/image/info' + ('?id=' + id))\n\t\t\t});\n\t});\nvar author$project$Image$Comment$Model = F7(\n\tfunction (content, username, url, date, points, id, edited) {\n\t\treturn {content: content, date: date, edited: edited, id: id, points: points, url: url, username: username};\n\t});\nvar author$project$Image$Comment$commentDecoder = A4(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t'edited',\n\telm$json$Json$Decode$nullable(elm_community$json_extra$Json$Decode$Extra$datetime),\n\telm$core$Maybe$Nothing,\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'_id',\n\t\telm$json$Json$Decode$string,\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'points',\n\t\t\telm$json$Json$Decode$int,\n\t\t\tA3(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t'uploaded',\n\t\t\t\telm_community$json_extra$Json$Decode$Extra$datetime,\n\t\t\t\tA4(\n\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t'avatar',\n\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t'placeholder',\n\t\t\t\t\tA3(\n\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t'username',\n\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t'content',\n\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\telm$json$Json$Decode$succeed(author$project$Image$Comment$Model))))))));\nvar author$project$Pages$Post$LoadComments = function (a) {\n\treturn {$: 'LoadComments', a: a};\n};\nvar author$project$Pages$Post$loadComments = function (id) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$Post$LoadComments,\n\t\t\t\telm$json$Json$Decode$list(author$project$Image$Comment$commentDecoder)),\n\t\t\turl: author$project$Server$url + ('/comment/get' + ('?id=' + id))\n\t\t});\n};\nvar elm$browser$Browser$External = function (a) {\n\treturn {$: 'External', a: a};\n};\nvar elm$browser$Browser$Internal = function (a) {\n\treturn {$: 'Internal', a: a};\n};\nvar elm$browser$Browser$Dom$NotFound = function (a) {\n\treturn {$: 'NotFound', a: a};\n};\nvar elm$core$Basics$never = function (_n0) {\n\tnever:\n\twhile (true) {\n\t\tvar nvr = _n0.a;\n\t\tvar $temp$_n0 = nvr;\n\t\t_n0 = $temp$_n0;\n\t\tcontinue never;\n\t}\n};\nvar elm$core$Task$Perform = function (a) {\n\treturn {$: 'Perform', a: a};\n};\nvar elm$core$Task$init = elm$core$Task$succeed(_Utils_Tuple0);\nvar elm$core$Task$map = F2(\n\tfunction (func, taskA) {\n\t\treturn A2(\n\t\t\telm$core$Task$andThen,\n\t\t\tfunction (a) {\n\t\t\t\treturn elm$core$Task$succeed(\n\t\t\t\t\tfunc(a));\n\t\t\t},\n\t\t\ttaskA);\n\t});\nvar elm$core$Task$spawnCmd = F2(\n\tfunction (router, _n0) {\n\t\tvar task = _n0.a;\n\t\treturn _Scheduler_spawn(\n\t\t\tA2(\n\t\t\t\telm$core$Task$andThen,\n\t\t\t\telm$core$Platform$sendToApp(router),\n\t\t\t\ttask));\n\t});\nvar elm$core$Task$onEffects = F3(\n\tfunction (router, commands, state) {\n\t\treturn A2(\n\t\t\telm$core$Task$map,\n\t\t\tfunction (_n0) {\n\t\t\t\treturn _Utils_Tuple0;\n\t\t\t},\n\t\t\telm$core$Task$sequence(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\telm$core$Task$spawnCmd(router),\n\t\t\t\t\tcommands)));\n\t});\nvar elm$core$Task$onSelfMsg = F3(\n\tfunction (_n0, _n1, _n2) {\n\t\treturn elm$core$Task$succeed(_Utils_Tuple0);\n\t});\nvar elm$core$Task$cmdMap = F2(\n\tfunction (tagger, _n0) {\n\t\tvar task = _n0.a;\n\t\treturn elm$core$Task$Perform(\n\t\t\tA2(elm$core$Task$map, tagger, task));\n\t});\n_Platform_effectManagers['Task'] = _Platform_createManager(elm$core$Task$init, elm$core$Task$onEffects, elm$core$Task$onSelfMsg, elm$core$Task$cmdMap);\nvar elm$core$Task$command = _Platform_leaf('Task');\nvar elm$core$Task$perform = F2(\n\tfunction (toMessage, task) {\n\t\treturn elm$core$Task$command(\n\t\t\telm$core$Task$Perform(\n\t\t\t\tA2(elm$core$Task$map, toMessage, task)));\n\t});\nvar elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {\n\tswitch (handler.$) {\n\t\tcase 'Normal':\n\t\t\treturn 0;\n\t\tcase 'MayStopPropagation':\n\t\t\treturn 1;\n\t\tcase 'MayPreventDefault':\n\t\t\treturn 2;\n\t\tdefault:\n\t\t\treturn 3;\n\t}\n};\nvar elm$core$String$dropLeft = F2(\n\tfunction (n, string) {\n\t\treturn (n < 1) ? string : A3(\n\t\t\telm$core$String$slice,\n\t\t\tn,\n\t\t\telm$core$String$length(string),\n\t\t\tstring);\n\t});\nvar elm$core$String$startsWith = _String_startsWith;\nvar elm$url$Url$Http = {$: 'Http'};\nvar elm$url$Url$Https = {$: 'Https'};\nvar elm$core$String$indexes = _String_indexes;\nvar elm$core$String$left = F2(\n\tfunction (n, string) {\n\t\treturn (n < 1) ? '' : A3(elm$core$String$slice, 0, n, string);\n\t});\nvar elm$core$String$contains = _String_contains;\nvar elm$url$Url$Url = F6(\n\tfunction (protocol, host, port_, path, query, fragment) {\n\t\treturn {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};\n\t});\nvar elm$url$Url$chompBeforePath = F5(\n\tfunction (protocol, path, params, frag, str) {\n\t\tif (elm$core$String$isEmpty(str) || A2(elm$core$String$contains, '@', str)) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar _n0 = A2(elm$core$String$indexes, ':', str);\n\t\t\tif (!_n0.b) {\n\t\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t\tA6(elm$url$Url$Url, protocol, str, elm$core$Maybe$Nothing, path, params, frag));\n\t\t\t} else {\n\t\t\t\tif (!_n0.b.b) {\n\t\t\t\t\tvar i = _n0.a;\n\t\t\t\t\tvar _n1 = elm$core$String$toInt(\n\t\t\t\t\t\tA2(elm$core$String$dropLeft, i + 1, str));\n\t\t\t\t\tif (_n1.$ === 'Nothing') {\n\t\t\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar port_ = _n1;\n\t\t\t\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t\t\t\tA6(\n\t\t\t\t\t\t\t\telm$url$Url$Url,\n\t\t\t\t\t\t\t\tprotocol,\n\t\t\t\t\t\t\t\tA2(elm$core$String$left, i, str),\n\t\t\t\t\t\t\t\tport_,\n\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\t\tfrag));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$url$Url$chompBeforeQuery = F4(\n\tfunction (protocol, params, frag, str) {\n\t\tif (elm$core$String$isEmpty(str)) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar _n0 = A2(elm$core$String$indexes, '/', str);\n\t\t\tif (!_n0.b) {\n\t\t\t\treturn A5(elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);\n\t\t\t} else {\n\t\t\t\tvar i = _n0.a;\n\t\t\t\treturn A5(\n\t\t\t\t\telm$url$Url$chompBeforePath,\n\t\t\t\t\tprotocol,\n\t\t\t\t\tA2(elm$core$String$dropLeft, i, str),\n\t\t\t\t\tparams,\n\t\t\t\t\tfrag,\n\t\t\t\t\tA2(elm$core$String$left, i, str));\n\t\t\t}\n\t\t}\n\t});\nvar elm$url$Url$chompBeforeFragment = F3(\n\tfunction (protocol, frag, str) {\n\t\tif (elm$core$String$isEmpty(str)) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar _n0 = A2(elm$core$String$indexes, '?', str);\n\t\t\tif (!_n0.b) {\n\t\t\t\treturn A4(elm$url$Url$chompBeforeQuery, protocol, elm$core$Maybe$Nothing, frag, str);\n\t\t\t} else {\n\t\t\t\tvar i = _n0.a;\n\t\t\t\treturn A4(\n\t\t\t\t\telm$url$Url$chompBeforeQuery,\n\t\t\t\t\tprotocol,\n\t\t\t\t\telm$core$Maybe$Just(\n\t\t\t\t\t\tA2(elm$core$String$dropLeft, i + 1, str)),\n\t\t\t\t\tfrag,\n\t\t\t\t\tA2(elm$core$String$left, i, str));\n\t\t\t}\n\t\t}\n\t});\nvar elm$url$Url$chompAfterProtocol = F2(\n\tfunction (protocol, str) {\n\t\tif (elm$core$String$isEmpty(str)) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar _n0 = A2(elm$core$String$indexes, '#', str);\n\t\t\tif (!_n0.b) {\n\t\t\t\treturn A3(elm$url$Url$chompBeforeFragment, protocol, elm$core$Maybe$Nothing, str);\n\t\t\t} else {\n\t\t\t\tvar i = _n0.a;\n\t\t\t\treturn A3(\n\t\t\t\t\telm$url$Url$chompBeforeFragment,\n\t\t\t\t\tprotocol,\n\t\t\t\t\telm$core$Maybe$Just(\n\t\t\t\t\t\tA2(elm$core$String$dropLeft, i + 1, str)),\n\t\t\t\t\tA2(elm$core$String$left, i, str));\n\t\t\t}\n\t\t}\n\t});\nvar elm$url$Url$fromString = function (str) {\n\treturn A2(elm$core$String$startsWith, 'http://', str) ? A2(\n\t\telm$url$Url$chompAfterProtocol,\n\t\telm$url$Url$Http,\n\t\tA2(elm$core$String$dropLeft, 7, str)) : (A2(elm$core$String$startsWith, 'https://', str) ? A2(\n\t\telm$url$Url$chompAfterProtocol,\n\t\telm$url$Url$Https,\n\t\tA2(elm$core$String$dropLeft, 8, str)) : elm$core$Maybe$Nothing);\n};\nvar elm$browser$Browser$Dom$setViewport = _Browser_setViewport;\nvar author$project$Pages$Post$init = F3(\n\tfunction (key, user, fragment) {\n\t\treturn _Utils_Tuple2(\n\t\t\tauthor$project$Pages$Post$Model(key)(user)(author$project$Pages$Post$Loading)(author$project$Pages$Post$LoadingComments)('')(fragment)(author$project$Pages$Post$LoadingStats)(author$project$Pages$Post$LoadingInfo)(elm$core$Maybe$Nothing)('')(elm$core$Maybe$Nothing)('Loading'),\n\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Pages$Post$get(fragment),\n\t\t\t\t\t\tA2(author$project$Pages$Post$getUserInfo, fragment, user),\n\t\t\t\t\t\tauthor$project$Pages$Post$loadComments(fragment),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\tfunction (_n0) {\n\t\t\t\t\t\t\treturn author$project$Pages$Post$Empty;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0))\n\t\t\t\t\t])));\n\t});\nvar author$project$Pages$Profile$Information = {$: 'Information'};\nvar author$project$Pages$Profile$Loading = {$: 'Loading'};\nvar author$project$Pages$Profile$LoadingPosts = {$: 'LoadingPosts'};\nvar author$project$Pages$Profile$Model = F6(\n\tfunction (user, key, tab, fragment, status, postsStatus) {\n\t\treturn {fragment: fragment, key: key, postsStatus: postsStatus, status: status, tab: tab, user: user};\n\t});\nvar author$project$Pages$Profile$Success = {$: 'Success'};\nvar author$project$Pages$Profile$PostsResponse = function (a) {\n\treturn {$: 'PostsResponse', a: a};\n};\nvar author$project$Pages$Profile$getPosts = F2(\n\tfunction (username, limit) {\n\t\treturn elm$http$Http$get(\n\t\t\t{\n\t\t\t\texpect: A2(\n\t\t\t\t\telm$http$Http$expectJson,\n\t\t\t\t\tauthor$project$Pages$Profile$PostsResponse,\n\t\t\t\t\telm$json$Json$Decode$list(author$project$Image$decodePreview)),\n\t\t\t\turl: author$project$Server$url + ('/account/posts' + ('?username=' + (username + ('&limit=' + elm$core$String$fromInt(limit)))))\n\t\t\t});\n\t});\nvar author$project$Pages$Profile$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded = A2(elm$core$Basics$composeR, elm$json$Json$Decode$succeed, NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom);\nvar author$project$User$decodeUserNotLoggedIn = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'registeredAt',\n\telm_community$json_extra$Json$Decode$Extra$datetime,\n\tA2(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,\n\t\t'Hidden',\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'github',\n\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\tA3(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t'twitter',\n\t\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\t\tA3(\n\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t'facebook',\n\t\t\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\t\t\tA3(\n\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t'verif',\n\t\t\t\t\t\telm$json$Json$Decode$bool,\n\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t\t\t'bio',\n\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t'No description',\n\t\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t\t\t\t'profilePic',\n\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\tauthor$project$Server$url + '/img/profile/default.jpg',\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,\n\t\t\t\t\t\t\t\t\t'Hidden',\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t\t\t\t'username',\n\t\t\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\t\t\telm$json$Json$Decode$succeed(author$project$User$Model)))))))))));\nvar author$project$Pages$Profile$loadUser = function (username) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Profile$Response, author$project$User$decodeUserNotLoggedIn),\n\t\t\turl: author$project$Server$url + ('/account/user' + ('?username=' + username))\n\t\t});\n};\nvar author$project$Pages$Profile$postCount = 5;\nvar author$project$Pages$Profile$init = F3(\n\tfunction (key, user, fragment) {\n\t\treturn _Utils_eq(fragment, user.username) ? _Utils_Tuple2(\n\t\t\tA6(author$project$Pages$Profile$Model, user, key, author$project$Pages$Profile$Information, fragment, author$project$Pages$Profile$Success, author$project$Pages$Profile$LoadingPosts),\n\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(author$project$Pages$Profile$getPosts, fragment, author$project$Pages$Profile$postCount)\n\t\t\t\t\t]))) : _Utils_Tuple2(\n\t\t\tA6(author$project$Pages$Profile$Model, user, key, author$project$Pages$Profile$Information, fragment, author$project$Pages$Profile$Loading, author$project$Pages$Profile$LoadingPosts),\n\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Pages$Profile$loadUser(fragment),\n\t\t\t\t\t\tA2(author$project$Pages$Profile$getPosts, fragment, author$project$Pages$Profile$postCount)\n\t\t\t\t\t])));\n\t});\nvar author$project$Pages$Results$Empty = {$: 'Empty'};\nvar author$project$Pages$Results$LoadingImage = {$: 'LoadingImage'};\nvar author$project$Pages$Results$LoadingUser = {$: 'LoadingUser'};\nvar author$project$Pages$Results$Model = F3(\n\tfunction (query, imageStatus, userStatus) {\n\t\treturn {imageStatus: imageStatus, query: query, userStatus: userStatus};\n\t});\nvar author$project$Pages$Results$ImageResponse = function (a) {\n\treturn {$: 'ImageResponse', a: a};\n};\nvar author$project$Pages$Results$getPosts = function (q) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Results$ImageResponse, author$project$Image$decodePreviewContainer),\n\t\t\turl: author$project$Server$url + ('/images/search' + ('?q=' + q))\n\t\t});\n};\nvar author$project$Pages$Results$UsersResponse = function (a) {\n\treturn {$: 'UsersResponse', a: a};\n};\nvar author$project$User$PreviewContainer = F2(\n\tfunction (total, users) {\n\t\treturn {total: total, users: users};\n\t});\nvar author$project$User$Preview = F3(\n\tfunction (username, avatar, verif) {\n\t\treturn {avatar: avatar, username: username, verif: verif};\n\t});\nvar author$project$User$decodePreview = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'verif',\n\telm$json$Json$Decode$bool,\n\tA4(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t'profilePic',\n\t\telm$json$Json$Decode$string,\n\t\tauthor$project$Server$url + '/img/profile/default.jpg',\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'username',\n\t\t\telm$json$Json$Decode$string,\n\t\t\telm$json$Json$Decode$succeed(author$project$User$Preview))));\nvar author$project$User$decodePreviewContainer = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'users',\n\telm$json$Json$Decode$list(author$project$User$decodePreview),\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'total',\n\t\telm$json$Json$Decode$int,\n\t\telm$json$Json$Decode$succeed(author$project$User$PreviewContainer)));\nvar author$project$Pages$Results$getUsers = function (q) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Results$UsersResponse, author$project$User$decodePreviewContainer),\n\t\t\turl: author$project$Server$url + ('/accounts/search' + ('?q=' + q))\n\t\t});\n};\nvar author$project$Pages$Results$init = function (fragment) {\n\tif (fragment.$ === 'Just') {\n\t\tvar q = fragment.a;\n\t\treturn _Utils_Tuple2(\n\t\t\tA3(author$project$Pages$Results$Model, q, author$project$Pages$Results$LoadingImage, author$project$Pages$Results$LoadingUser),\n\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\treturn author$project$Pages$Results$Empty;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)),\n\t\t\t\t\t\tauthor$project$Pages$Results$getUsers(q),\n\t\t\t\t\t\tauthor$project$Pages$Results$getPosts(q)\n\t\t\t\t\t])));\n\t} else {\n\t\treturn _Utils_Tuple2(\n\t\t\tA3(author$project$Pages$Results$Model, '', author$project$Pages$Results$LoadingImage, author$project$Pages$Results$LoadingUser),\n\t\t\telm$core$Platform$Cmd$none);\n\t}\n};\nvar author$project$Pages$SignIn$Empty = {$: 'Empty'};\nvar author$project$Pages$SignIn$Loading = {$: 'Loading'};\nvar author$project$Pages$SignIn$Model = F5(\n\tfunction (name, password, warning, status, key) {\n\t\treturn {key: key, name: name, password: password, status: status, warning: warning};\n\t});\nvar author$project$Session$NoUpdate = {$: 'NoUpdate'};\nvar author$project$Pages$SignIn$init = function (key) {\n\treturn _Utils_Tuple3(\n\t\tA5(author$project$Pages$SignIn$Model, '', '', '', author$project$Pages$SignIn$Loading, key),\n\t\tA2(\n\t\t\telm$core$Task$perform,\n\t\t\tfunction (_n0) {\n\t\t\t\treturn author$project$Pages$SignIn$Empty;\n\t\t\t},\n\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)),\n\t\tauthor$project$Session$NoUpdate);\n};\nvar author$project$Pages$SignUp$Empty = {$: 'Empty'};\nvar author$project$Pages$SignUp$Loading = {$: 'Loading'};\nvar author$project$Pages$SignUp$Model = function (name) {\n\treturn function (password) {\n\t\treturn function (passwordAgain) {\n\t\t\treturn function (email) {\n\t\t\t\treturn function (warning) {\n\t\t\t\t\treturn function (status) {\n\t\t\t\t\t\treturn function (verification) {\n\t\t\t\t\t\t\treturn function (key) {\n\t\t\t\t\t\t\t\treturn function (errorUsername) {\n\t\t\t\t\t\t\t\t\treturn function (errorEmail) {\n\t\t\t\t\t\t\t\t\t\treturn {email: email, errorEmail: errorEmail, errorUsername: errorUsername, key: key, name: name, password: password, passwordAgain: passwordAgain, status: status, verification: verification, warning: warning};\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\nvar author$project$Pages$SignUp$init = function (key) {\n\treturn _Utils_Tuple2(\n\t\tauthor$project$Pages$SignUp$Model('')('')('')('')('')(author$project$Pages$SignUp$Loading)('')(key)(false)(false),\n\t\tA2(\n\t\t\telm$core$Task$perform,\n\t\t\tfunction (_n0) {\n\t\t\t\treturn author$project$Pages$SignUp$Empty;\n\t\t\t},\n\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)));\n};\nvar author$project$Pages$Tags$Empty = {$: 'Empty'};\nvar author$project$Pages$Tags$Loading = {$: 'Loading'};\nvar author$project$Pages$Tags$Model = F3(\n\tfunction (query, status, page) {\n\t\treturn {page: page, query: query, status: status};\n\t});\nvar author$project$Pages$Tags$Request = {$: 'Request'};\nvar author$project$Pages$Tags$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Tags$getImages = F2(\n\tfunction (query, page) {\n\t\treturn elm$http$Http$get(\n\t\t\t{\n\t\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Tags$Response, author$project$Image$decodePreviewContainer),\n\t\t\t\turl: author$project$Server$url + ('/tags' + ('?q=' + (query + ('&page=' + elm$core$String$fromInt(page)))))\n\t\t\t});\n\t});\nvar elm$json$Json$Encode$int = _Json_wrap;\nvar elm$json$Json$Encode$object = function (pairs) {\n\treturn _Json_wrap(\n\t\tA3(\n\t\t\telm$core$List$foldl,\n\t\t\tF2(\n\t\t\t\tfunction (_n0, obj) {\n\t\t\t\t\tvar k = _n0.a;\n\t\t\t\t\tvar v = _n0.b;\n\t\t\t\t\treturn A3(_Json_addField, k, v, obj);\n\t\t\t\t}),\n\t\t\t_Json_emptyObject(_Utils_Tuple0),\n\t\t\tpairs));\n};\nvar elm$json$Json$Encode$string = _Json_wrap;\nvar author$project$Query$encode = F2(\n\tfunction (query, page) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'query',\n\t\t\t\t\telm$json$Json$Encode$string(query)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'page',\n\t\t\t\t\telm$json$Json$Encode$int(page))\n\t\t\t\t]));\n\t});\nvar author$project$Query$saveState = _Platform_outgoingPort('saveState', elm$core$Basics$identity);\nvar author$project$Pages$Tags$init = F2(\n\tfunction (key, query) {\n\t\tif (query.$ === 'Just') {\n\t\t\tvar q = query.a;\n\t\t\treturn _Utils_Tuple2(\n\t\t\t\tA3(author$project$Pages$Tags$Model, q, author$project$Pages$Tags$Loading, 1),\n\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\t\treturn author$project$Pages$Tags$Empty;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)),\n\t\t\t\t\t\t\tA2(author$project$Pages$Tags$getImages, q, 1),\n\t\t\t\t\t\t\tauthor$project$Query$saveState(\n\t\t\t\t\t\t\tA2(author$project$Query$encode, q, 1))\n\t\t\t\t\t\t])));\n\t\t} else {\n\t\t\treturn _Utils_Tuple2(\n\t\t\t\tA3(author$project$Pages$Tags$Model, '', author$project$Pages$Tags$Loading, 1),\n\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\t\tfunction (_n2) {\n\t\t\t\t\t\t\t\treturn author$project$Pages$Tags$Request;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0))\n\t\t\t\t\t\t])));\n\t\t}\n\t});\nvar author$project$Pages$Upload$Empty = {$: 'Empty'};\nvar author$project$Pages$Upload$Loading = {$: 'Loading'};\nvar author$project$Pages$Upload$Model = function (preview) {\n\treturn function (key) {\n\t\treturn function (user) {\n\t\t\treturn function (tag) {\n\t\t\t\treturn function (tags) {\n\t\t\t\t\treturn function (fileSize) {\n\t\t\t\t\t\treturn function (mime) {\n\t\t\t\t\t\t\treturn function (title) {\n\t\t\t\t\t\t\t\treturn function (description) {\n\t\t\t\t\t\t\t\t\treturn function (status) {\n\t\t\t\t\t\t\t\t\t\treturn function (warning) {\n\t\t\t\t\t\t\t\t\t\t\treturn function (fileStatus) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn function (id) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn function (fraction) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn {description: description, fileSize: fileSize, fileStatus: fileStatus, fraction: fraction, id: id, key: key, mime: mime, preview: preview, status: status, tag: tag, tags: tags, title: title, user: user, warning: warning};\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\nvar author$project$Pages$Upload$NotLoaded = {$: 'NotLoaded'};\nvar author$project$Pages$Upload$init = F2(\n\tfunction (user, key) {\n\t\treturn _Utils_Tuple2(\n\t\t\tauthor$project$Pages$Upload$Model('')(key)(user)('')(_List_Nil)(0)('')('')('')(author$project$Pages$Upload$Loading)('')(author$project$Pages$Upload$NotLoaded)('')(0.0),\n\t\t\tA2(\n\t\t\t\telm$core$Task$perform,\n\t\t\t\tfunction (_n0) {\n\t\t\t\t\treturn author$project$Pages$Upload$Empty;\n\t\t\t\t},\n\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)));\n\t});\nvar author$project$Pages$Users$Loading = {$: 'Loading'};\nvar author$project$Pages$Users$Model = F4(\n\tfunction (key, status, query, page) {\n\t\treturn {key: key, page: page, query: query, status: status};\n\t});\nvar author$project$Pages$Users$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Users$getUsers = F2(\n\tfunction (query, page) {\n\t\treturn elm$http$Http$get(\n\t\t\t{\n\t\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Users$Response, author$project$User$decodePreviewContainer),\n\t\t\t\turl: author$project$Server$url + ('/accounts/paginate' + ('?q=' + (query + ('&page=' + elm$core$String$fromInt(page)))))\n\t\t\t});\n\t});\nvar author$project$Pages$Users$init = function (key) {\n\treturn _Utils_Tuple2(\n\t\tA4(author$project$Pages$Users$Model, key, author$project$Pages$Users$Loading, '', 1),\n\t\tA2(author$project$Pages$Users$getUsers, '', 1));\n};\nvar elm$core$Maybe$withDefault = F2(\n\tfunction (_default, maybe) {\n\t\tif (maybe.$ === 'Just') {\n\t\t\tvar value = maybe.a;\n\t\t\treturn value;\n\t\t} else {\n\t\t\treturn _default;\n\t\t}\n\t});\nvar elm$url$Url$Parser$Parser = function (a) {\n\treturn {$: 'Parser', a: a};\n};\nvar elm$url$Url$Parser$State = F5(\n\tfunction (visited, unvisited, params, frag, value) {\n\t\treturn {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};\n\t});\nvar elm$url$Url$Parser$mapState = F2(\n\tfunction (func, _n0) {\n\t\tvar visited = _n0.visited;\n\t\tvar unvisited = _n0.unvisited;\n\t\tvar params = _n0.params;\n\t\tvar frag = _n0.frag;\n\t\tvar value = _n0.value;\n\t\treturn A5(\n\t\t\telm$url$Url$Parser$State,\n\t\t\tvisited,\n\t\t\tunvisited,\n\t\t\tparams,\n\t\t\tfrag,\n\t\t\tfunc(value));\n\t});\nvar elm$url$Url$Parser$map = F2(\n\tfunction (subValue, _n0) {\n\t\tvar parseArg = _n0.a;\n\t\treturn elm$url$Url$Parser$Parser(\n\t\t\tfunction (_n1) {\n\t\t\t\tvar visited = _n1.visited;\n\t\t\t\tvar unvisited = _n1.unvisited;\n\t\t\t\tvar params = _n1.params;\n\t\t\t\tvar frag = _n1.frag;\n\t\t\t\tvar value = _n1.value;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\telm$url$Url$Parser$mapState(value),\n\t\t\t\t\tparseArg(\n\t\t\t\t\t\tA5(elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));\n\t\t\t});\n\t});\nvar elm$core$List$append = F2(\n\tfunction (xs, ys) {\n\t\tif (!ys.b) {\n\t\t\treturn xs;\n\t\t} else {\n\t\t\treturn A3(elm$core$List$foldr, elm$core$List$cons, ys, xs);\n\t\t}\n\t});\nvar elm$core$List$concat = function (lists) {\n\treturn A3(elm$core$List$foldr, elm$core$List$append, _List_Nil, lists);\n};\nvar elm$core$List$concatMap = F2(\n\tfunction (f, list) {\n\t\treturn elm$core$List$concat(\n\t\t\tA2(elm$core$List$map, f, list));\n\t});\nvar elm$url$Url$Parser$oneOf = function (parsers) {\n\treturn elm$url$Url$Parser$Parser(\n\t\tfunction (state) {\n\t\t\treturn A2(\n\t\t\t\telm$core$List$concatMap,\n\t\t\t\tfunction (_n0) {\n\t\t\t\t\tvar parser = _n0.a;\n\t\t\t\t\treturn parser(state);\n\t\t\t\t},\n\t\t\t\tparsers);\n\t\t});\n};\nvar elm$url$Url$Parser$getFirstMatch = function (states) {\n\tgetFirstMatch:\n\twhile (true) {\n\t\tif (!states.b) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar state = states.a;\n\t\t\tvar rest = states.b;\n\t\t\tvar _n1 = state.unvisited;\n\t\t\tif (!_n1.b) {\n\t\t\t\treturn elm$core$Maybe$Just(state.value);\n\t\t\t} else {\n\t\t\t\tif ((_n1.a === '') && (!_n1.b.b)) {\n\t\t\t\t\treturn elm$core$Maybe$Just(state.value);\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$states = rest;\n\t\t\t\t\tstates = $temp$states;\n\t\t\t\t\tcontinue getFirstMatch;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nvar elm$url$Url$Parser$removeFinalEmpty = function (segments) {\n\tif (!segments.b) {\n\t\treturn _List_Nil;\n\t} else {\n\t\tif ((segments.a === '') && (!segments.b.b)) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tvar segment = segments.a;\n\t\t\tvar rest = segments.b;\n\t\t\treturn A2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tsegment,\n\t\t\t\telm$url$Url$Parser$removeFinalEmpty(rest));\n\t\t}\n\t}\n};\nvar elm$url$Url$Parser$preparePath = function (path) {\n\tvar _n0 = A2(elm$core$String$split, '/', path);\n\tif (_n0.b && (_n0.a === '')) {\n\t\tvar segments = _n0.b;\n\t\treturn elm$url$Url$Parser$removeFinalEmpty(segments);\n\t} else {\n\t\tvar segments = _n0;\n\t\treturn elm$url$Url$Parser$removeFinalEmpty(segments);\n\t}\n};\nvar elm$url$Url$percentDecode = _Url_percentDecode;\nvar elm$url$Url$Parser$addToParametersHelp = F2(\n\tfunction (value, maybeList) {\n\t\tif (maybeList.$ === 'Nothing') {\n\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[value]));\n\t\t} else {\n\t\t\tvar list = maybeList.a;\n\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\tA2(elm$core$List$cons, value, list));\n\t\t}\n\t});\nvar elm$url$Url$Parser$addParam = F2(\n\tfunction (segment, dict) {\n\t\tvar _n0 = A2(elm$core$String$split, '=', segment);\n\t\tif ((_n0.b && _n0.b.b) && (!_n0.b.b.b)) {\n\t\t\tvar rawKey = _n0.a;\n\t\t\tvar _n1 = _n0.b;\n\t\t\tvar rawValue = _n1.a;\n\t\t\tvar _n2 = elm$url$Url$percentDecode(rawKey);\n\t\t\tif (_n2.$ === 'Nothing') {\n\t\t\t\treturn dict;\n\t\t\t} else {\n\t\t\t\tvar key = _n2.a;\n\t\t\t\tvar _n3 = elm$url$Url$percentDecode(rawValue);\n\t\t\t\tif (_n3.$ === 'Nothing') {\n\t\t\t\t\treturn dict;\n\t\t\t\t} else {\n\t\t\t\t\tvar value = _n3.a;\n\t\t\t\t\treturn A3(\n\t\t\t\t\t\telm$core$Dict$update,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\telm$url$Url$Parser$addToParametersHelp(value),\n\t\t\t\t\t\tdict);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn dict;\n\t\t}\n\t});\nvar elm$url$Url$Parser$prepareQuery = function (maybeQuery) {\n\tif (maybeQuery.$ === 'Nothing') {\n\t\treturn elm$core$Dict$empty;\n\t} else {\n\t\tvar qry = maybeQuery.a;\n\t\treturn A3(\n\t\t\telm$core$List$foldr,\n\t\t\telm$url$Url$Parser$addParam,\n\t\t\telm$core$Dict$empty,\n\t\t\tA2(elm$core$String$split, '&', qry));\n\t}\n};\nvar elm$url$Url$Parser$parse = F2(\n\tfunction (_n0, url) {\n\t\tvar parser = _n0.a;\n\t\treturn elm$url$Url$Parser$getFirstMatch(\n\t\t\tparser(\n\t\t\t\tA5(\n\t\t\t\t\telm$url$Url$Parser$State,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\telm$url$Url$Parser$preparePath(url.path),\n\t\t\t\t\telm$url$Url$Parser$prepareQuery(url.query),\n\t\t\t\t\turl.fragment,\n\t\t\t\t\telm$core$Basics$identity)));\n\t});\nvar elm$url$Url$Parser$query = function (_n0) {\n\tvar queryParser = _n0.a;\n\treturn elm$url$Url$Parser$Parser(\n\t\tfunction (_n1) {\n\t\t\tvar visited = _n1.visited;\n\t\t\tvar unvisited = _n1.unvisited;\n\t\t\tvar params = _n1.params;\n\t\t\tvar frag = _n1.frag;\n\t\t\tvar value = _n1.value;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA5(\n\t\t\t\t\telm$url$Url$Parser$State,\n\t\t\t\t\tvisited,\n\t\t\t\t\tunvisited,\n\t\t\t\t\tparams,\n\t\t\t\t\tfrag,\n\t\t\t\t\tvalue(\n\t\t\t\t\t\tqueryParser(params)))\n\t\t\t\t]);\n\t\t});\n};\nvar elm$url$Url$Parser$slash = F2(\n\tfunction (_n0, _n1) {\n\t\tvar parseBefore = _n0.a;\n\t\tvar parseAfter = _n1.a;\n\t\treturn elm$url$Url$Parser$Parser(\n\t\t\tfunction (state) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$concatMap,\n\t\t\t\t\tparseAfter,\n\t\t\t\t\tparseBefore(state));\n\t\t\t});\n\t});\nvar elm$url$Url$Parser$questionMark = F2(\n\tfunction (parser, queryParser) {\n\t\treturn A2(\n\t\t\telm$url$Url$Parser$slash,\n\t\t\tparser,\n\t\t\telm$url$Url$Parser$query(queryParser));\n\t});\nvar elm$url$Url$Parser$s = function (str) {\n\treturn elm$url$Url$Parser$Parser(\n\t\tfunction (_n0) {\n\t\t\tvar visited = _n0.visited;\n\t\t\tvar unvisited = _n0.unvisited;\n\t\t\tvar params = _n0.params;\n\t\t\tvar frag = _n0.frag;\n\t\t\tvar value = _n0.value;\n\t\t\tif (!unvisited.b) {\n\t\t\t\treturn _List_Nil;\n\t\t\t} else {\n\t\t\t\tvar next = unvisited.a;\n\t\t\t\tvar rest = unvisited.b;\n\t\t\t\treturn _Utils_eq(next, str) ? _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA5(\n\t\t\t\t\t\telm$url$Url$Parser$State,\n\t\t\t\t\t\tA2(elm$core$List$cons, next, visited),\n\t\t\t\t\t\trest,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\tfrag,\n\t\t\t\t\t\tvalue)\n\t\t\t\t\t]) : _List_Nil;\n\t\t\t}\n\t\t});\n};\nvar elm$url$Url$Parser$custom = F2(\n\tfunction (tipe, stringToSomething) {\n\t\treturn elm$url$Url$Parser$Parser(\n\t\t\tfunction (_n0) {\n\t\t\t\tvar visited = _n0.visited;\n\t\t\t\tvar unvisited = _n0.unvisited;\n\t\t\t\tvar params = _n0.params;\n\t\t\t\tvar frag = _n0.frag;\n\t\t\t\tvar value = _n0.value;\n\t\t\t\tif (!unvisited.b) {\n\t\t\t\t\treturn _List_Nil;\n\t\t\t\t} else {\n\t\t\t\t\tvar next = unvisited.a;\n\t\t\t\t\tvar rest = unvisited.b;\n\t\t\t\t\tvar _n2 = stringToSomething(next);\n\t\t\t\t\tif (_n2.$ === 'Just') {\n\t\t\t\t\t\tvar nextValue = _n2.a;\n\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA5(\n\t\t\t\t\t\t\t\telm$url$Url$Parser$State,\n\t\t\t\t\t\t\t\tA2(elm$core$List$cons, next, visited),\n\t\t\t\t\t\t\t\trest,\n\t\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\t\tfrag,\n\t\t\t\t\t\t\t\tvalue(nextValue))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _List_Nil;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t});\nvar elm$url$Url$Parser$string = A2(elm$url$Url$Parser$custom, 'STRING', elm$core$Maybe$Just);\nvar elm$url$Url$Parser$top = elm$url$Url$Parser$Parser(\n\tfunction (state) {\n\t\treturn _List_fromArray(\n\t\t\t[state]);\n\t});\nvar elm$url$Url$Parser$Internal$Parser = function (a) {\n\treturn {$: 'Parser', a: a};\n};\nvar elm$url$Url$Parser$Query$custom = F2(\n\tfunction (key, func) {\n\t\treturn elm$url$Url$Parser$Internal$Parser(\n\t\t\tfunction (dict) {\n\t\t\t\treturn func(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(elm$core$Dict$get, key, dict)));\n\t\t\t});\n\t});\nvar elm$url$Url$Parser$Query$int = function (key) {\n\treturn A2(\n\t\telm$url$Url$Parser$Query$custom,\n\t\tkey,\n\t\tfunction (stringList) {\n\t\t\tif (stringList.b && (!stringList.b.b)) {\n\t\t\t\tvar str = stringList.a;\n\t\t\t\treturn elm$core$String$toInt(str);\n\t\t\t} else {\n\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t}\n\t\t});\n};\nvar elm$url$Url$Parser$Query$string = function (key) {\n\treturn A2(\n\t\telm$url$Url$Parser$Query$custom,\n\t\tkey,\n\t\tfunction (stringList) {\n\t\t\tif (stringList.b && (!stringList.b.b)) {\n\t\t\t\tvar str = stringList.a;\n\t\t\t\treturn elm$core$Maybe$Just(str);\n\t\t\t} else {\n\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t}\n\t\t});\n};\nvar author$project$Main$routeUrl = F2(\n\tfunction (url, model) {\n\t\tvar parser = elm$url$Url$Parser$oneOf(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tF2(\n\t\t\t\t\t\tfunction (page, sort) {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\tauthor$project$Main$stepGallery,\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Gallery$init,\n\t\t\t\t\t\t\t\t\tauthor$project$Main$getUser(model.state),\n\t\t\t\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t\t\t\tpage,\n\t\t\t\t\t\t\t\t\tsort));\n\t\t\t\t\t\t}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$url$Url$Parser$questionMark,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$url$Url$Parser$questionMark,\n\t\t\t\t\t\t\telm$url$Url$Parser$s('gallery'),\n\t\t\t\t\t\t\telm$url$Url$Parser$Query$int('page')),\n\t\t\t\t\t\telm$url$Url$Parser$Query$string('sort'))),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Main$stepSignUp,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tauthor$project$Pages$SignUp$init(model.key)),\n\t\t\t\t\telm$url$Url$Parser$s('sign_up')),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Main$stepSignIn,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tauthor$project$Pages$SignIn$init(model.key)),\n\t\t\t\t\telm$url$Url$Parser$s('sign_in')),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Main$stepUpload,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tauthor$project$Pages$Upload$init,\n\t\t\t\t\t\t\tauthor$project$Main$getUser(model.state),\n\t\t\t\t\t\t\tmodel.key)),\n\t\t\t\t\telm$url$Url$Parser$s('upload')),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Main$stepHome,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tauthor$project$Pages$Home$init,\n\t\t\t\t\t\t\tauthor$project$Main$getUser(model.state),\n\t\t\t\t\t\t\tmodel.key)),\n\t\t\t\t\telm$url$Url$Parser$top),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n1 = author$project$Main$getUser(model.state);\n\t\t\t\t\t\tif (_n1.$ === 'Just') {\n\t\t\t\t\t\t\tvar userAcc = _n1.a;\n\t\t\t\t\t\t\treturn function (user) {\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\tauthor$project$Main$stepProfile,\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\tA3(author$project$Pages$Profile$init, model.key, userAcc, user));\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn function (user) {\n\t\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpage: author$project$Main$NotFound('You must be logged in to do this')\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}(),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$url$Url$Parser$slash,\n\t\t\t\t\t\telm$url$Url$Parser$s('profile'),\n\t\t\t\t\t\telm$url$Url$Parser$string)),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Main$stepUsers,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tauthor$project$Pages$Users$init(model.key)),\n\t\t\t\t\telm$url$Url$Parser$s('users')),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n2 = model.state;\n\t\t\t\t\t\tif (_n2.$ === 'Ready') {\n\t\t\t\t\t\t\tvar session = _n2.a;\n\t\t\t\t\t\t\treturn function (id) {\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\tauthor$project$Main$stepPost,\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\tA3(author$project$Pages$Post$init, model.key, session.user, id));\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn function (id) {\n\t\t\t\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}(),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$url$Url$Parser$slash,\n\t\t\t\t\t\telm$url$Url$Parser$s('post'),\n\t\t\t\t\t\telm$url$Url$Parser$string)),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tfunction (q) {\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tauthor$project$Main$stepResults,\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\tauthor$project$Pages$Results$init(q));\n\t\t\t\t\t},\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$url$Url$Parser$questionMark,\n\t\t\t\t\t\telm$url$Url$Parser$s('search'),\n\t\t\t\t\t\telm$url$Url$Parser$Query$string('q'))),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tfunction (q) {\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tauthor$project$Main$stepTags,\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\tA2(author$project$Pages$Tags$init, model.key, q));\n\t\t\t\t\t},\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$url$Url$Parser$questionMark,\n\t\t\t\t\t\telm$url$Url$Parser$s('tags'),\n\t\t\t\t\t\telm$url$Url$Parser$Query$string('q')))\n\t\t\t\t]));\n\t\tvar _n0 = model.state;\n\t\tif (_n0.$ === 'NotReady') {\n\t\t\tvar token = _n0.a;\n\t\t\treturn _Utils_Tuple2(\n\t\t\t\t_Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{page: author$project$Main$Loading}),\n\t\t\t\tauthor$project$Main$loadUser(token));\n\t\t} else {\n\t\t\treturn A2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpage: author$project$Main$NotFound('Oops, this page doesn\\'t exist!')\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none),\n\t\t\t\tA2(elm$url$Url$Parser$parse, parser, url));\n\t\t}\n\t});\nvar author$project$Main$init = F3(\n\tfunction (flag, url, key) {\n\t\tif (flag.$ === 'Nothing') {\n\t\t\treturn A2(\n\t\t\t\tauthor$project$Main$routeUrl,\n\t\t\t\turl,\n\t\t\t\t{\n\t\t\t\t\tkey: key,\n\t\t\t\t\tpage: author$project$Main$Loading,\n\t\t\t\t\tsearch: author$project$Components$SearchBar$init(key),\n\t\t\t\t\tstate: author$project$Main$Ready(author$project$Session$init),\n\t\t\t\t\turl: url\n\t\t\t\t});\n\t\t} else {\n\t\t\tvar token = flag.a;\n\t\t\treturn A2(\n\t\t\t\tauthor$project$Main$routeUrl,\n\t\t\t\turl,\n\t\t\t\t{\n\t\t\t\t\tkey: key,\n\t\t\t\t\tpage: author$project$Main$Loading,\n\t\t\t\t\tsearch: author$project$Components$SearchBar$init(key),\n\t\t\t\t\tstate: author$project$Main$NotReady(token),\n\t\t\t\t\turl: url\n\t\t\t\t});\n\t\t}\n\t});\nvar author$project$Components$Carousel$Reset = {$: 'Reset'};\nvar author$project$Components$Carousel$SwitchLeft = function (a) {\n\treturn {$: 'SwitchLeft', a: a};\n};\nvar author$project$Components$Carousel$SwitchRight = function (a) {\n\treturn {$: 'SwitchRight', a: a};\n};\nvar elm$time$Time$Every = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Every', a: a, b: b};\n\t});\nvar elm$time$Time$State = F2(\n\tfunction (taggers, processes) {\n\t\treturn {processes: processes, taggers: taggers};\n\t});\nvar elm$time$Time$init = elm$core$Task$succeed(\n\tA2(elm$time$Time$State, elm$core$Dict$empty, elm$core$Dict$empty));\nvar elm$core$Dict$foldl = F3(\n\tfunction (func, acc, dict) {\n\t\tfoldl:\n\t\twhile (true) {\n\t\t\tif (dict.$ === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar key = dict.b;\n\t\t\t\tvar value = dict.c;\n\t\t\t\tvar left = dict.d;\n\t\t\t\tvar right = dict.e;\n\t\t\t\tvar $temp$func = func,\n\t\t\t\t\t$temp$acc = A3(\n\t\t\t\t\tfunc,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tA3(elm$core$Dict$foldl, func, acc, left)),\n\t\t\t\t\t$temp$dict = right;\n\t\t\t\tfunc = $temp$func;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tdict = $temp$dict;\n\t\t\t\tcontinue foldl;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Dict$merge = F6(\n\tfunction (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {\n\t\tvar stepState = F3(\n\t\t\tfunction (rKey, rValue, _n0) {\n\t\t\t\tstepState:\n\t\t\t\twhile (true) {\n\t\t\t\t\tvar list = _n0.a;\n\t\t\t\t\tvar result = _n0.b;\n\t\t\t\t\tif (!list.b) {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\tlist,\n\t\t\t\t\t\t\tA3(rightStep, rKey, rValue, result));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _n2 = list.a;\n\t\t\t\t\t\tvar lKey = _n2.a;\n\t\t\t\t\t\tvar lValue = _n2.b;\n\t\t\t\t\t\tvar rest = list.b;\n\t\t\t\t\t\tif (_Utils_cmp(lKey, rKey) < 0) {\n\t\t\t\t\t\t\tvar $temp$rKey = rKey,\n\t\t\t\t\t\t\t\t$temp$rValue = rValue,\n\t\t\t\t\t\t\t\t$temp$_n0 = _Utils_Tuple2(\n\t\t\t\t\t\t\t\trest,\n\t\t\t\t\t\t\t\tA3(leftStep, lKey, lValue, result));\n\t\t\t\t\t\t\trKey = $temp$rKey;\n\t\t\t\t\t\t\trValue = $temp$rValue;\n\t\t\t\t\t\t\t_n0 = $temp$_n0;\n\t\t\t\t\t\t\tcontinue stepState;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_Utils_cmp(lKey, rKey) > 0) {\n\t\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\t\tlist,\n\t\t\t\t\t\t\t\t\tA3(rightStep, rKey, rValue, result));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\t\trest,\n\t\t\t\t\t\t\t\t\tA4(bothStep, lKey, lValue, rValue, result));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\tvar _n3 = A3(\n\t\t\telm$core$Dict$foldl,\n\t\t\tstepState,\n\t\t\t_Utils_Tuple2(\n\t\t\t\telm$core$Dict$toList(leftDict),\n\t\t\t\tinitialResult),\n\t\t\trightDict);\n\t\tvar leftovers = _n3.a;\n\t\tvar intermediateResult = _n3.b;\n\t\treturn A3(\n\t\t\telm$core$List$foldl,\n\t\t\tF2(\n\t\t\t\tfunction (_n4, result) {\n\t\t\t\t\tvar k = _n4.a;\n\t\t\t\t\tvar v = _n4.b;\n\t\t\t\t\treturn A3(leftStep, k, v, result);\n\t\t\t\t}),\n\t\t\tintermediateResult,\n\t\t\tleftovers);\n\t});\nvar elm$time$Time$addMySub = F2(\n\tfunction (_n0, state) {\n\t\tvar interval = _n0.a;\n\t\tvar tagger = _n0.b;\n\t\tvar _n1 = A2(elm$core$Dict$get, interval, state);\n\t\tif (_n1.$ === 'Nothing') {\n\t\t\treturn A3(\n\t\t\t\telm$core$Dict$insert,\n\t\t\t\tinterval,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[tagger]),\n\t\t\t\tstate);\n\t\t} else {\n\t\t\tvar taggers = _n1.a;\n\t\t\treturn A3(\n\t\t\t\telm$core$Dict$insert,\n\t\t\t\tinterval,\n\t\t\t\tA2(elm$core$List$cons, tagger, taggers),\n\t\t\t\tstate);\n\t\t}\n\t});\nvar elm$time$Time$Name = function (a) {\n\treturn {$: 'Name', a: a};\n};\nvar elm$time$Time$Offset = function (a) {\n\treturn {$: 'Offset', a: a};\n};\nvar elm$time$Time$Zone = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Zone', a: a, b: b};\n\t});\nvar elm$time$Time$customZone = elm$time$Time$Zone;\nvar elm$time$Time$setInterval = _Time_setInterval;\nvar elm$time$Time$spawnHelp = F3(\n\tfunction (router, intervals, processes) {\n\t\tif (!intervals.b) {\n\t\t\treturn elm$core$Task$succeed(processes);\n\t\t} else {\n\t\t\tvar interval = intervals.a;\n\t\t\tvar rest = intervals.b;\n\t\t\tvar spawnTimer = elm$core$Process$spawn(\n\t\t\t\tA2(\n\t\t\t\t\telm$time$Time$setInterval,\n\t\t\t\t\tinterval,\n\t\t\t\t\tA2(elm$core$Platform$sendToSelf, router, interval)));\n\t\t\tvar spawnRest = function (id) {\n\t\t\t\treturn A3(\n\t\t\t\t\telm$time$Time$spawnHelp,\n\t\t\t\t\trouter,\n\t\t\t\t\trest,\n\t\t\t\t\tA3(elm$core$Dict$insert, interval, id, processes));\n\t\t\t};\n\t\t\treturn A2(elm$core$Task$andThen, spawnRest, spawnTimer);\n\t\t}\n\t});\nvar elm$time$Time$onEffects = F3(\n\tfunction (router, subs, _n0) {\n\t\tvar processes = _n0.processes;\n\t\tvar rightStep = F3(\n\t\t\tfunction (_n6, id, _n7) {\n\t\t\t\tvar spawns = _n7.a;\n\t\t\t\tvar existing = _n7.b;\n\t\t\t\tvar kills = _n7.c;\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\tspawns,\n\t\t\t\t\texisting,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Task$andThen,\n\t\t\t\t\t\tfunction (_n5) {\n\t\t\t\t\t\t\treturn kills;\n\t\t\t\t\t\t},\n\t\t\t\t\t\telm$core$Process$kill(id)));\n\t\t\t});\n\t\tvar newTaggers = A3(elm$core$List$foldl, elm$time$Time$addMySub, elm$core$Dict$empty, subs);\n\t\tvar leftStep = F3(\n\t\t\tfunction (interval, taggers, _n4) {\n\t\t\t\tvar spawns = _n4.a;\n\t\t\t\tvar existing = _n4.b;\n\t\t\t\tvar kills = _n4.c;\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\tA2(elm$core$List$cons, interval, spawns),\n\t\t\t\t\texisting,\n\t\t\t\t\tkills);\n\t\t\t});\n\t\tvar bothStep = F4(\n\t\t\tfunction (interval, taggers, id, _n3) {\n\t\t\t\tvar spawns = _n3.a;\n\t\t\t\tvar existing = _n3.b;\n\t\t\t\tvar kills = _n3.c;\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\tspawns,\n\t\t\t\t\tA3(elm$core$Dict$insert, interval, id, existing),\n\t\t\t\t\tkills);\n\t\t\t});\n\t\tvar _n1 = A6(\n\t\t\telm$core$Dict$merge,\n\t\t\tleftStep,\n\t\t\tbothStep,\n\t\t\trightStep,\n\t\t\tnewTaggers,\n\t\t\tprocesses,\n\t\t\t_Utils_Tuple3(\n\t\t\t\t_List_Nil,\n\t\t\t\telm$core$Dict$empty,\n\t\t\t\telm$core$Task$succeed(_Utils_Tuple0)));\n\t\tvar spawnList = _n1.a;\n\t\tvar existingDict = _n1.b;\n\t\tvar killTask = _n1.c;\n\t\treturn A2(\n\t\t\telm$core$Task$andThen,\n\t\t\tfunction (newProcesses) {\n\t\t\t\treturn elm$core$Task$succeed(\n\t\t\t\t\tA2(elm$time$Time$State, newTaggers, newProcesses));\n\t\t\t},\n\t\t\tA2(\n\t\t\t\telm$core$Task$andThen,\n\t\t\t\tfunction (_n2) {\n\t\t\t\t\treturn A3(elm$time$Time$spawnHelp, router, spawnList, existingDict);\n\t\t\t\t},\n\t\t\t\tkillTask));\n\t});\nvar elm$time$Time$now = _Time_now(elm$time$Time$millisToPosix);\nvar elm$time$Time$onSelfMsg = F3(\n\tfunction (router, interval, state) {\n\t\tvar _n0 = A2(elm$core$Dict$get, interval, state.taggers);\n\t\tif (_n0.$ === 'Nothing') {\n\t\t\treturn elm$core$Task$succeed(state);\n\t\t} else {\n\t\t\tvar taggers = _n0.a;\n\t\t\tvar tellTaggers = function (time) {\n\t\t\t\treturn elm$core$Task$sequence(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\tfunction (tagger) {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$Platform$sendToApp,\n\t\t\t\t\t\t\t\trouter,\n\t\t\t\t\t\t\t\ttagger(time));\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttaggers));\n\t\t\t};\n\t\t\treturn A2(\n\t\t\t\telm$core$Task$andThen,\n\t\t\t\tfunction (_n1) {\n\t\t\t\t\treturn elm$core$Task$succeed(state);\n\t\t\t\t},\n\t\t\t\tA2(elm$core$Task$andThen, tellTaggers, elm$time$Time$now));\n\t\t}\n\t});\nvar elm$core$Basics$composeL = F3(\n\tfunction (g, f, x) {\n\t\treturn g(\n\t\t\tf(x));\n\t});\nvar elm$time$Time$subMap = F2(\n\tfunction (f, _n0) {\n\t\tvar interval = _n0.a;\n\t\tvar tagger = _n0.b;\n\t\treturn A2(\n\t\t\telm$time$Time$Every,\n\t\t\tinterval,\n\t\t\tA2(elm$core$Basics$composeL, f, tagger));\n\t});\n_Platform_effectManagers['Time'] = _Platform_createManager(elm$time$Time$init, elm$time$Time$onEffects, elm$time$Time$onSelfMsg, 0, elm$time$Time$subMap);\nvar elm$time$Time$subscription = _Platform_leaf('Time');\nvar elm$time$Time$every = F2(\n\tfunction (interval, tagger) {\n\t\treturn elm$time$Time$subscription(\n\t\t\tA2(elm$time$Time$Every, interval, tagger));\n\t});\nvar author$project$Components$Carousel$subscriptions = function (model) {\n\tvar _n0 = model.counter;\n\tif (_n0.$ === 'Start') {\n\t\treturn A2(\n\t\t\telm$time$Time$every,\n\t\t\t5000,\n\t\t\tfunction (_n1) {\n\t\t\t\tvar _n2 = model.dir;\n\t\t\t\tif (_n2.$ === 'Right') {\n\t\t\t\t\treturn author$project$Components$Carousel$SwitchRight(model.current);\n\t\t\t\t} else {\n\t\t\t\t\treturn author$project$Components$Carousel$SwitchLeft(model.current);\n\t\t\t\t}\n\t\t\t});\n\t} else {\n\t\treturn A2(\n\t\t\telm$time$Time$every,\n\t\t\t1000,\n\t\t\tfunction (_n3) {\n\t\t\t\treturn author$project$Components$Carousel$Reset;\n\t\t\t});\n\t}\n};\nvar author$project$Pages$Home$Reload = {$: 'Reload'};\nvar author$project$Pages$Home$UpdateCarousel = function (a) {\n\treturn {$: 'UpdateCarousel', a: a};\n};\nvar elm$core$Platform$Sub$batch = _Platform_batch;\nvar elm$core$Platform$Sub$map = _Platform_map;\nvar author$project$Pages$Home$subscriptions = function (model) {\n\treturn elm$core$Platform$Sub$batch(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$core$Platform$Sub$map,\n\t\t\t\tauthor$project$Pages$Home$UpdateCarousel,\n\t\t\t\tauthor$project$Components$Carousel$subscriptions(model.carousel)),\n\t\t\t\tA2(\n\t\t\t\telm$time$Time$every,\n\t\t\t\t30000,\n\t\t\t\tfunction (_n0) {\n\t\t\t\t\treturn author$project$Pages$Home$Reload;\n\t\t\t\t})\n\t\t\t]));\n};\nvar author$project$Pages$Post$Reload = {$: 'Reload'};\nvar author$project$Pages$Post$subscriptions = function (model) {\n\treturn A2(\n\t\telm$time$Time$every,\n\t\t30000,\n\t\tfunction (_n0) {\n\t\t\treturn author$project$Pages$Post$Reload;\n\t\t});\n};\nvar author$project$Pages$Tags$Restore = function (a) {\n\treturn {$: 'Restore', a: a};\n};\nvar author$project$Query$restoreState = _Platform_incomingPort(\n\t'restoreState',\n\telm$json$Json$Decode$oneOf(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$json$Json$Decode$null(elm$core$Maybe$Nothing),\n\t\t\t\tA2(elm$json$Json$Decode$map, elm$core$Maybe$Just, elm$json$Json$Decode$value)\n\t\t\t])));\nvar author$project$Pages$Tags$subscriptions = function (model) {\n\treturn author$project$Query$restoreState(author$project$Pages$Tags$Restore);\n};\nvar author$project$Pages$Upload$Progress = function (a) {\n\treturn {$: 'Progress', a: a};\n};\nvar elm$http$Http$track = F2(\n\tfunction (tracker, toMsg) {\n\t\treturn elm$http$Http$subscription(\n\t\t\tA2(elm$http$Http$MySub, tracker, toMsg));\n\t});\nvar author$project$Pages$Upload$subscriptions = function (model) {\n\treturn A2(elm$http$Http$track, 'upload', author$project$Pages$Upload$Progress);\n};\nvar elm$core$Platform$Sub$none = elm$core$Platform$Sub$batch(_List_Nil);\nvar author$project$Main$subscriptions = function (model) {\n\tvar _n0 = model.page;\n\tswitch (_n0.$) {\n\t\tcase 'Home':\n\t\t\tvar home = _n0.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$Platform$Sub$map,\n\t\t\t\tauthor$project$Main$HomeMsg,\n\t\t\t\tauthor$project$Pages$Home$subscriptions(home));\n\t\tcase 'Post':\n\t\t\tvar post = _n0.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$Platform$Sub$map,\n\t\t\t\tauthor$project$Main$PostMsg,\n\t\t\t\tauthor$project$Pages$Post$subscriptions(post));\n\t\tcase 'Tags':\n\t\t\tvar tags = _n0.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$Platform$Sub$map,\n\t\t\t\tauthor$project$Main$TagsMsg,\n\t\t\t\tauthor$project$Pages$Tags$subscriptions(tags));\n\t\tcase 'Upload':\n\t\t\tvar upload = _n0.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$Platform$Sub$map,\n\t\t\t\tauthor$project$Main$UploadMsg,\n\t\t\t\tauthor$project$Pages$Upload$subscriptions(upload));\n\t\tdefault:\n\t\t\treturn elm$core$Platform$Sub$none;\n\t}\n};\nvar author$project$Components$SearchBar$getModel = function (_n0) {\n\tvar model = _n0.a;\n\tvar cmd = _n0.b;\n\treturn model;\n};\nvar author$project$Components$SearchBar$Valid = {$: 'Valid'};\nvar elm$browser$Browser$Navigation$replaceUrl = _Browser_replaceUrl;\nvar author$project$Components$SearchBar$update = F2(\n\tfunction (msg, model) {\n\t\tif (msg.$ === 'UpdateValue') {\n\t\t\tvar val = msg.a;\n\t\t\treturn (elm$core$String$length(val) < 2) ? _Utils_Tuple2(\n\t\t\t\t_Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{searchValue: val, state: author$project$Components$SearchBar$Invalid}),\n\t\t\t\telm$core$Platform$Cmd$none) : _Utils_Tuple2(\n\t\t\t\t_Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{searchValue: val, state: author$project$Components$SearchBar$Valid}),\n\t\t\t\telm$core$Platform$Cmd$none);\n\t\t} else {\n\t\t\tvar key = msg.a;\n\t\t\tif (key === 13) {\n\t\t\t\tvar _n2 = model.state;\n\t\t\t\tif (_n2.$ === 'Invalid') {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{searchValue: '', state: author$project$Components$SearchBar$Invalid}),\n\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$replaceUrl, model.key, '/search?q=' + model.searchValue));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t}\n\t\t}\n\t});\nvar author$project$Main$Failure = {$: 'Failure'};\nvar author$project$Main$UpdateSearch = function (a) {\n\treturn {$: 'UpdateSearch', a: a};\n};\nvar author$project$Main$stepSearch = F2(\n\tfunction (model, _n0) {\n\t\tvar search = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tsearch: _Utils_Tuple2(search, cmd)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$UpdateSearch, cmd));\n\t});\nvar author$project$Pages$Gallery$Empty = {$: 'Empty'};\nvar author$project$Pages$Gallery$Failure = {$: 'Failure'};\nvar author$project$Pages$Gallery$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;\nvar author$project$Pages$Gallery$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar imageUrl = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Gallery$Success(imageUrl)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{status: author$project$Pages$Gallery$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'SortNewest':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{sort: 'newest', status: author$project$Pages$Gallery$Loading}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t'gallery?page=' + (elm$core$String$fromInt(1) + '&sort=newest')));\n\t\t\tcase 'SortPopular':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{sort: 'popular', status: author$project$Pages$Gallery$Loading}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t'gallery?page=' + (elm$core$String$fromInt(1) + '&sort=popular')));\n\t\t\tcase 'SortTop':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{sort: 'rating', status: author$project$Pages$Gallery$Loading}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t'gallery?page=' + (elm$core$String$fromInt(1) + '&sort=rating')));\n\t\t\tdefault:\n\t\t\t\tvar sort = msg.a;\n\t\t\t\tvar page = msg.b;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t\t\t'/gallery?page=' + (elm$core$String$fromInt(page) + ('&sort=' + model.sort))),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\t\t\tfunction (_n2) {\n\t\t\t\t\t\t\t\t\treturn author$project$Pages$Gallery$Empty;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0))\n\t\t\t\t\t\t\t])));\n\t\t}\n\t});\nvar author$project$Components$Carousel$Left = {$: 'Left'};\nvar author$project$Components$Carousel$Stop = {$: 'Stop'};\nvar elm$core$Array$length = function (_n0) {\n\tvar len = _n0.a;\n\treturn len;\n};\nvar elm$core$Basics$ge = _Utils_ge;\nvar author$project$Components$Carousel$handle = F2(\n\tfunction (current, model) {\n\t\treturn (current < 0) ? (elm$core$Array$length(model.source) - 1) : ((_Utils_cmp(\n\t\t\tcurrent,\n\t\t\telm$core$Array$length(model.source)) > -1) ? 0 : current);\n\t});\nvar author$project$Components$Carousel$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'SwitchRight':\n\t\t\t\tvar i = msg.a;\n\t\t\t\treturn _Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{\n\t\t\t\t\t\tcounter: author$project$Components$Carousel$Stop,\n\t\t\t\t\t\tcurrent: A2(author$project$Components$Carousel$handle, i + 1, model),\n\t\t\t\t\t\tdir: author$project$Components$Carousel$Right\n\t\t\t\t\t});\n\t\t\tcase 'SwitchLeft':\n\t\t\t\tvar i = msg.a;\n\t\t\t\treturn _Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{\n\t\t\t\t\t\tcounter: author$project$Components$Carousel$Stop,\n\t\t\t\t\t\tcurrent: A2(author$project$Components$Carousel$handle, i - 1, model),\n\t\t\t\t\t\tdir: author$project$Components$Carousel$Left\n\t\t\t\t\t});\n\t\t\tcase 'Jump':\n\t\t\t\tvar i = msg.a;\n\t\t\t\treturn _Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{counter: author$project$Components$Carousel$Stop, current: i});\n\t\t\tdefault:\n\t\t\t\treturn _Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{counter: author$project$Components$Carousel$Start});\n\t\t}\n\t});\nvar author$project$Pages$Home$Failure = {$: 'Failure'};\nvar author$project$Pages$Home$FailureTags = {$: 'FailureTags'};\nvar author$project$Pages$Home$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$Home$SuccessTags = function (a) {\n\treturn {$: 'SuccessTags', a: a};\n};\nvar author$project$Pages$Home$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'UpdateCarousel':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcarousel: A2(author$project$Components$Carousel$update, mesg, model.carousel)\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar images = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Home$Success(images)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{status: author$project$Pages$Home$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'TagsResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar tags = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttagStatus: author$project$Pages$Home$SuccessTags(tags)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{tagStatus: author$project$Pages$Home$FailureTags}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[author$project$Pages$Home$getLatest, author$project$Pages$Home$getTrending])));\n\t\t}\n\t});\nvar author$project$Pages$Post$Failure = {$: 'Failure'};\nvar author$project$Pages$Post$FailureComments = {$: 'FailureComments'};\nvar author$project$Pages$Post$FailureInfo = {$: 'FailureInfo'};\nvar author$project$Pages$Post$FailureStats = {$: 'FailureStats'};\nvar author$project$Pages$Post$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$Post$SuccessComments = function (a) {\n\treturn {$: 'SuccessComments', a: a};\n};\nvar author$project$Pages$Post$SuccessInfo = function (a) {\n\treturn {$: 'SuccessInfo', a: a};\n};\nvar author$project$Pages$Post$SuccessStats = function (a) {\n\treturn {$: 'SuccessStats', a: a};\n};\nvar author$project$Pages$Post$ManageCommentResponse = function (a) {\n\treturn {$: 'ManageCommentResponse', a: a};\n};\nvar author$project$Pages$Post$encodeID = function (id) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'id',\n\t\t\t\telm$json$Json$Encode$string(id))\n\t\t\t]));\n};\nvar elm$http$Http$expectBytesResponse = F2(\n\tfunction (toMsg, toResult) {\n\t\treturn A3(\n\t\t\t_Http_expect,\n\t\t\t'arraybuffer',\n\t\t\t_Http_toDataView,\n\t\t\tA2(elm$core$Basics$composeR, toResult, toMsg));\n\t});\nvar elm$http$Http$expectWhatever = function (toMsg) {\n\treturn A2(\n\t\telm$http$Http$expectBytesResponse,\n\t\ttoMsg,\n\t\telm$http$Http$resolve(\n\t\t\tfunction (_n0) {\n\t\t\t\treturn elm$core$Result$Ok(_Utils_Tuple0);\n\t\t\t}));\n};\nvar elm$http$Http$jsonBody = function (value) {\n\treturn A2(\n\t\t_Http_pair,\n\t\t'application/json',\n\t\tA2(elm$json$Json$Encode$encode, 0, value));\n};\nvar author$project$Pages$Post$deleteComment = function (id) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$Post$encodeID(id)),\n\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$ManageCommentResponse),\n\t\t\theaders: _List_Nil,\n\t\t\tmethod: 'DELETE',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/comment/delete'\n\t\t});\n};\nvar author$project$Pages$Post$DeleteResponse = function (a) {\n\treturn {$: 'DeleteResponse', a: a};\n};\nvar author$project$Pages$Post$deletePost = F2(\n\tfunction (id, token) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tauthor$project$Pages$Post$encodeID(id)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$DeleteResponse),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', token)\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'DELETE',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/image/delete'\n\t\t\t});\n\t});\nvar author$project$Pages$Post$encodeEdit = F2(\n\tfunction (id, comment) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'id',\n\t\t\t\t\telm$json$Json$Encode$string(id)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'comment',\n\t\t\t\t\telm$json$Json$Encode$string(comment))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Post$editComment = F2(\n\tfunction (id, comment) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tA2(author$project$Pages$Post$encodeEdit, id, comment)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$ManageCommentResponse),\n\t\t\t\theaders: _List_Nil,\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/comment/edit'\n\t\t\t});\n\t});\nvar author$project$Pages$Post$RateResponse = function (a) {\n\treturn {$: 'RateResponse', a: a};\n};\nvar author$project$Pages$Post$favorite = function (model) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$Post$encodeID(model.id)),\n\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$RateResponse),\n\t\t\theaders: function () {\n\t\t\t\tvar _n0 = model.user;\n\t\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\t\tvar user = _n0.a;\n\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', user.token)\n\t\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\treturn _List_Nil;\n\t\t\t\t}\n\t\t\t}(),\n\t\t\tmethod: 'POST',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/image/favorite'\n\t\t});\n};\nvar author$project$Image$Stats$Model = F3(\n\tfunction (views, points, favorites) {\n\t\treturn {favorites: favorites, points: points, views: views};\n\t});\nvar author$project$Image$Stats$statsDecoder = A4(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t'favorites',\n\telm$json$Json$Decode$int,\n\t0,\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'points',\n\t\telm$json$Json$Decode$int,\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'views',\n\t\t\telm$json$Json$Decode$int,\n\t\t\telm$json$Json$Decode$succeed(author$project$Image$Stats$Model))));\nvar author$project$Pages$Post$StatsResponse = function (a) {\n\treturn {$: 'StatsResponse', a: a};\n};\nvar author$project$Pages$Post$loadStats = function (id) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Post$StatsResponse, author$project$Image$Stats$statsDecoder),\n\t\t\turl: author$project$Server$url + ('/image/stats' + ('?id=' + id))\n\t\t});\n};\nvar author$project$Pages$Post$CommentResponse = function (a) {\n\treturn {$: 'CommentResponse', a: a};\n};\nvar author$project$Pages$Post$encodeComment = F3(\n\tfunction (id, username, content) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'id',\n\t\t\t\t\telm$json$Json$Encode$string(id)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'username',\n\t\t\t\t\telm$json$Json$Encode$string(username)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'content',\n\t\t\t\t\telm$json$Json$Encode$string(content))\n\t\t\t\t]));\n\t});\nvar elm$http$Http$post = function (r) {\n\treturn elm$http$Http$request(\n\t\t{body: r.body, expect: r.expect, headers: _List_Nil, method: 'POST', timeout: elm$core$Maybe$Nothing, tracker: elm$core$Maybe$Nothing, url: r.url});\n};\nvar author$project$Pages$Post$postComment = F3(\n\tfunction (id, username, content) {\n\t\treturn elm$http$Http$post(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tA3(author$project$Pages$Post$encodeComment, id, username, content)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$CommentResponse),\n\t\t\t\turl: author$project$Server$url + '/comment/add'\n\t\t\t});\n\t});\nvar author$project$Pages$Post$encodeRate = F2(\n\tfunction (vote, id) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'vote',\n\t\t\t\t\telm$json$Json$Encode$string(vote)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'id',\n\t\t\t\t\telm$json$Json$Encode$string(id))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Post$rate = F2(\n\tfunction (model, vote) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tA2(author$project$Pages$Post$encodeRate, vote, model.id)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$RateResponse),\n\t\t\t\theaders: function () {\n\t\t\t\t\tvar _n0 = model.user;\n\t\t\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\t\t\tvar user = _n0.a;\n\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', user.token)\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _List_Nil;\n\t\t\t\t\t}\n\t\t\t\t}(),\n\t\t\t\tmethod: 'POST',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/image/rate'\n\t\t\t});\n\t});\nvar author$project$Pages$Post$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar image = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: image.id,\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Post$Success(image),\n\t\t\t\t\t\t\t\ttitle: image.title\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tauthor$project$Pages$Post$loadStats(model.id));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{status: author$project$Pages$Post$Failure, title: 'Failed to load'}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'LoadComments':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar comments = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcomments: author$project$Pages$Post$SuccessComments(comments)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{comments: author$project$Pages$Post$FailureComments}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'CommentResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tauthor$project$Pages$Post$loadComments(model.id));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'RateResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Post$loadStats(model.id),\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Post$getUserInfo, model.id, model.user)\n\t\t\t\t\t\t\t\t])));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'StatsResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar stats = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstats: author$project$Pages$Post$SuccessStats(stats)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{stats: author$project$Pages$Post$FailureStats}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Comment':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{comment: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'DeletePost':\n\t\t\t\tvar id = msg.a;\n\t\t\t\tvar token = msg.b;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Post$deletePost, id, token));\n\t\t\tcase 'DeleteResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/'));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'ManageCommentResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tauthor$project$Pages$Post$loadComments(model.id));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'InfoResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar info = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvote: author$project$Pages$Post$SuccessInfo(info)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{vote: author$project$Pages$Post$FailureInfo}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Submit':\n\t\t\t\tvar _n9 = model.user;\n\t\t\t\tif (_n9.$ === 'Just') {\n\t\t\t\t\tvar user = _n9.a;\n\t\t\t\t\treturn (model.comment === '') ? _Utils_Tuple2(model, elm$core$Platform$Cmd$none) : _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{comment: ''}),\n\t\t\t\t\t\tA3(author$project$Pages$Post$postComment, model.id, user.username, model.comment));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Upvote':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Post$rate, model, 'upvote'));\n\t\t\tcase 'Downvote':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Post$rate, model, 'downvote'));\n\t\t\tcase 'Veto':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Post$rate, model, 'veto'));\n\t\t\tcase 'Favorite':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Pages$Post$favorite(model));\n\t\t\tcase 'EditComment':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{edit: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Edit':\n\t\t\t\tvar id = msg.a;\n\t\t\t\tvar content = msg.b;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdeleting: elm$core$Maybe$Nothing,\n\t\t\t\t\t\t\tedit: content,\n\t\t\t\t\t\t\tediting: elm$core$Maybe$Just(id)\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'EditCancel':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{edit: '', editing: elm$core$Maybe$Nothing}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'EditConfirm':\n\t\t\t\tvar _n10 = model.editing;\n\t\t\t\tif (_n10.$ === 'Just') {\n\t\t\t\t\tvar id = _n10.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{edit: '', editing: elm$core$Maybe$Nothing}),\n\t\t\t\t\t\tA2(author$project$Pages$Post$editComment, id, model.edit));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{edit: '', editing: elm$core$Maybe$Nothing}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'DeleteComment':\n\t\t\t\tvar id = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdeleting: elm$core$Maybe$Just(id),\n\t\t\t\t\t\t\tediting: elm$core$Maybe$Nothing\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'DeleteCommentConfirm':\n\t\t\t\tvar _n11 = model.deleting;\n\t\t\t\tif (_n11.$ === 'Just') {\n\t\t\t\t\tvar id = _n11.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{deleting: elm$core$Maybe$Nothing}),\n\t\t\t\t\t\tauthor$project$Pages$Post$deleteComment(id));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{deleting: elm$core$Maybe$Nothing}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'DeleteCommentCancel':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{deleting: elm$core$Maybe$Nothing}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tdefault:\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tauthor$project$Pages$Post$loadComments(model.id),\n\t\t\t\t\t\t\t\tauthor$project$Pages$Post$loadStats(model.id)\n\t\t\t\t\t\t\t])));\n\t\t}\n\t});\nvar author$project$Pages$Profile$Failure = {$: 'Failure'};\nvar author$project$Pages$Profile$FailurePosts = {$: 'FailurePosts'};\nvar author$project$Pages$Profile$Favorites = function (a) {\n\treturn {$: 'Favorites', a: a};\n};\nvar author$project$Pages$Profile$FavoritesMsg = function (a) {\n\treturn {$: 'FavoritesMsg', a: a};\n};\nvar author$project$Pages$Profile$GotFile = function (a) {\n\treturn {$: 'GotFile', a: a};\n};\nvar author$project$Pages$Profile$History = function (a) {\n\treturn {$: 'History', a: a};\n};\nvar author$project$Pages$Profile$HistoryMsg = function (a) {\n\treturn {$: 'HistoryMsg', a: a};\n};\nvar author$project$Pages$Profile$Security = function (a) {\n\treturn {$: 'Security', a: a};\n};\nvar author$project$Pages$Profile$Settings = function (a) {\n\treturn {$: 'Settings', a: a};\n};\nvar author$project$Pages$Profile$SuccessPosts = function (a) {\n\treturn {$: 'SuccessPosts', a: a};\n};\nvar author$project$Pages$Profile$AvatarResponse = function (a) {\n\treturn {$: 'AvatarResponse', a: a};\n};\nvar elm$file$File$name = _File_name;\nvar elm$http$Http$fileBody = _Http_pair('');\nvar author$project$Pages$Profile$put = F2(\n\tfunction (file, user) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$fileBody(file),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Profile$AvatarResponse),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$http$Http$header,\n\t\t\t\t\t\t'name',\n\t\t\t\t\t\telm$file$File$name(file)),\n\t\t\t\t\t\tA2(elm$http$Http$header, 'user', user)\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'PUT',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/upload/profile'\n\t\t\t});\n\t});\nvar author$project$Pages$Profile$stepFavorites = F2(\n\tfunction (model, _n0) {\n\t\tvar fav = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\ttab: author$project$Pages$Profile$Favorites(fav)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Pages$Profile$FavoritesMsg, cmd));\n\t});\nvar author$project$Pages$Profile$stepHistory = F2(\n\tfunction (model, _n0) {\n\t\tvar hist = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\ttab: author$project$Pages$Profile$History(hist)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Pages$Profile$HistoryMsg, cmd));\n\t});\nvar author$project$Pages$Profile$SecurityMsg = function (a) {\n\treturn {$: 'SecurityMsg', a: a};\n};\nvar author$project$Pages$Profile$stepSecurity = F2(\n\tfunction (model, _n0) {\n\t\tvar sec = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\ttab: author$project$Pages$Profile$Security(sec)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Pages$Profile$SecurityMsg, cmd));\n\t});\nvar author$project$Pages$Profile$SettingsMsg = function (a) {\n\treturn {$: 'SettingsMsg', a: a};\n};\nvar author$project$Pages$Profile$stepSettings = F2(\n\tfunction (model, _n0) {\n\t\tvar settings = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\ttab: author$project$Pages$Profile$Settings(settings)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Pages$Profile$SettingsMsg, cmd));\n\t});\nvar author$project$Pages$Profile$Favorites$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Profile$Favorites$getFavs = function (username) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$Profile$Favorites$Response,\n\t\t\t\telm$json$Json$Decode$list(author$project$Image$decodePreview)),\n\t\t\turl: author$project$Server$url + ('/account/favorites' + ('?username=' + username))\n\t\t});\n};\nvar author$project$Pages$Profile$Favorites$getModel = function (_n0) {\n\tvar model = _n0.a;\n\tvar cmd = _n0.b;\n\treturn model;\n};\nvar author$project$Pages$Profile$Favorites$Loading = {$: 'Loading'};\nvar author$project$Pages$Profile$Favorites$Model = F2(\n\tfunction (user, status) {\n\t\treturn {status: status, user: user};\n\t});\nvar author$project$Pages$Profile$Favorites$init = function (user) {\n\treturn _Utils_Tuple2(\n\t\tA2(author$project$Pages$Profile$Favorites$Model, user, author$project$Pages$Profile$Favorites$Loading),\n\t\telm$core$Platform$Cmd$none);\n};\nvar author$project$Pages$Profile$Favorites$Failure = {$: 'Failure'};\nvar author$project$Pages$Profile$Favorites$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$Profile$Favorites$update = F2(\n\tfunction (msg, model) {\n\t\tif (msg.$ === 'Empty') {\n\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t} else {\n\t\t\tvar response = msg.a;\n\t\t\tif (response.$ === 'Ok') {\n\t\t\t\tvar images = response.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstatus: author$project$Pages$Profile$Favorites$Success(images)\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{status: author$project$Pages$Profile$Favorites$Failure}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$Profile$History$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Profile$History$Activity = F2(\n\tfunction (day, count) {\n\t\treturn {count: count, day: day};\n\t});\nvar author$project$Pages$Profile$History$decodeActivity = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'count',\n\telm$json$Json$Decode$int,\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'day',\n\t\telm$json$Json$Decode$int,\n\t\telm$json$Json$Decode$succeed(author$project$Pages$Profile$History$Activity)));\nvar author$project$Pages$Profile$History$get = F2(\n\tfunction (username, date) {\n\t\treturn elm$http$Http$get(\n\t\t\t{\n\t\t\t\texpect: A2(\n\t\t\t\t\telm$http$Http$expectJson,\n\t\t\t\t\tauthor$project$Pages$Profile$History$Response,\n\t\t\t\t\telm$json$Json$Decode$list(author$project$Pages$Profile$History$decodeActivity)),\n\t\t\t\turl: author$project$Server$url + ('/account/activity' + ('?username=' + (username + ('&date=' + elm$core$String$fromInt(date)))))\n\t\t\t});\n\t});\nvar author$project$Pages$Profile$History$getModel = function (_n0) {\n\tvar model = _n0.a;\n\tvar cmd = _n0.b;\n\treturn model;\n};\nvar author$project$Pages$Profile$History$Loading = {$: 'Loading'};\nvar author$project$Pages$Profile$History$Model = F2(\n\tfunction (user, status) {\n\t\treturn {status: status, user: user};\n\t});\nvar author$project$Pages$Profile$History$init = function (user) {\n\treturn _Utils_Tuple2(\n\t\tA2(author$project$Pages$Profile$History$Model, user, author$project$Pages$Profile$History$Loading),\n\t\telm$core$Platform$Cmd$none);\n};\nvar author$project$Pages$Profile$History$Failure = {$: 'Failure'};\nvar author$project$Pages$Profile$History$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$Profile$History$update = F2(\n\tfunction (msg, model) {\n\t\tif (msg.$ === 'Empty') {\n\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t} else {\n\t\t\tvar response = msg.a;\n\t\t\tif (response.$ === 'Ok') {\n\t\t\t\tvar act = response.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstatus: author$project$Pages$Profile$History$Success(act)\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{status: author$project$Pages$Profile$History$Failure}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$Profile$Security$getModel = function (_n0) {\n\tvar model = _n0.a;\n\tvar cmd = _n0.b;\n\treturn model;\n};\nvar author$project$Pages$Profile$Security$Loading = {$: 'Loading'};\nvar author$project$Pages$Profile$Security$Model = F9(\n\tfunction (user, key, code, password, newPassword, passStatus, delStatus, mailStatus, codeStatus) {\n\t\treturn {code: code, codeStatus: codeStatus, delStatus: delStatus, key: key, mailStatus: mailStatus, newPassword: newPassword, passStatus: passStatus, password: password, user: user};\n\t});\nvar author$project$Pages$Profile$Security$None = {$: 'None'};\nvar author$project$Pages$Profile$Security$init = F2(\n\tfunction (key, user) {\n\t\treturn _Utils_Tuple2(\n\t\t\tA9(author$project$Pages$Profile$Security$Model, user, key, '', '', '', author$project$Pages$Profile$Security$Loading, author$project$Pages$Profile$Security$None, author$project$Pages$Profile$Security$Loading, author$project$Pages$Profile$Security$Loading),\n\t\t\telm$core$Platform$Cmd$none);\n\t});\nvar author$project$Pages$Profile$Security$Failure = {$: 'Failure'};\nvar author$project$Pages$Profile$Security$Success = {$: 'Success'};\nvar author$project$Pages$Profile$Security$PasswordResponse = function (a) {\n\treturn {$: 'PasswordResponse', a: a};\n};\nvar ktonon$elm_crypto$Crypto$SHA$Alg$SHA256 = {$: 'SHA256'};\nvar ktonon$elm_crypto$Crypto$SHA$Alg$SHA512 = {$: 'SHA512'};\nvar ktonon$elm_word$Word$Bit32 = {$: 'Bit32'};\nvar ktonon$elm_word$Word$Bit64 = {$: 'Bit64'};\nvar ktonon$elm_crypto$Crypto$SHA$Alg$wordSize = function (alg) {\n\twordSize:\n\twhile (true) {\n\t\tswitch (alg.$) {\n\t\t\tcase 'SHA224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue wordSize;\n\t\t\tcase 'SHA256':\n\t\t\t\treturn ktonon$elm_word$Word$Bit32;\n\t\t\tcase 'SHA384':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue wordSize;\n\t\t\tcase 'SHA512':\n\t\t\t\treturn ktonon$elm_word$Word$Bit64;\n\t\t\tcase 'SHA512_224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue wordSize;\n\t\t\tdefault:\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue wordSize;\n\t\t}\n\t}\n};\nvar elm$core$List$repeatHelp = F3(\n\tfunction (result, n, value) {\n\t\trepeatHelp:\n\t\twhile (true) {\n\t\t\tif (n <= 0) {\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\tvar $temp$result = A2(elm$core$List$cons, value, result),\n\t\t\t\t\t$temp$n = n - 1,\n\t\t\t\t\t$temp$value = value;\n\t\t\t\tresult = $temp$result;\n\t\t\t\tn = $temp$n;\n\t\t\t\tvalue = $temp$value;\n\t\t\t\tcontinue repeatHelp;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$repeat = F2(\n\tfunction (n, value) {\n\t\treturn A3(elm$core$List$repeatHelp, _List_Nil, n, value);\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInBytes = function (alg) {\n\tsizeInBytes:\n\twhile (true) {\n\t\tswitch (alg.$) {\n\t\t\tcase 'SHA224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue sizeInBytes;\n\t\t\tcase 'SHA256':\n\t\t\t\treturn 64;\n\t\t\tcase 'SHA384':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue sizeInBytes;\n\t\t\tcase 'SHA512':\n\t\t\t\treturn 128;\n\t\t\tcase 'SHA512_224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue sizeInBytes;\n\t\t\tdefault:\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue sizeInBytes;\n\t\t}\n\t}\n};\nvar ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInBits = A2(\n\telm$core$Basics$composeR,\n\tktonon$elm_crypto$Crypto$SHA$Chunk$sizeInBytes,\n\telm$core$Basics$mul(8));\nvar ktonon$elm_crypto$Crypto$SHA$Preprocess$messageSizeBytes = function (alg) {\n\tmessageSizeBytes:\n\twhile (true) {\n\t\tswitch (alg.$) {\n\t\t\tcase 'SHA224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue messageSizeBytes;\n\t\t\tcase 'SHA256':\n\t\t\t\treturn 8;\n\t\t\tcase 'SHA384':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue messageSizeBytes;\n\t\t\tcase 'SHA512':\n\t\t\t\treturn 16;\n\t\t\tcase 'SHA512_224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue messageSizeBytes;\n\t\t\tdefault:\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue messageSizeBytes;\n\t\t}\n\t}\n};\nvar ktonon$elm_crypto$Crypto$SHA$Preprocess$calculateK = F2(\n\tfunction (alg, l) {\n\t\tvar c = ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInBits(alg);\n\t\treturn A2(\n\t\t\telm$core$Basics$modBy,\n\t\t\tc,\n\t\t\t((c - 1) - (8 * ktonon$elm_crypto$Crypto$SHA$Preprocess$messageSizeBytes(alg))) - A2(elm$core$Basics$modBy, c, l));\n\t});\nvar elm$core$Basics$pow = _Basics_pow;\nvar elm$core$Bitwise$and = _Bitwise_and;\nvar elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;\nvar ktonon$elm_word$Word$Bytes$fromInt = F2(\n\tfunction (byteCount, value) {\n\t\treturn (byteCount > 4) ? A2(\n\t\t\telm$core$List$append,\n\t\t\tA2(\n\t\t\t\tktonon$elm_word$Word$Bytes$fromInt,\n\t\t\t\tbyteCount - 4,\n\t\t\t\t(value / A2(elm$core$Basics$pow, 2, 32)) | 0),\n\t\t\tA2(ktonon$elm_word$Word$Bytes$fromInt, 4, 4294967295 & value)) : A2(\n\t\t\telm$core$List$map,\n\t\t\tfunction (i) {\n\t\t\t\treturn 255 & (value >>> ((byteCount - i) * A2(elm$core$Basics$pow, 2, 3)));\n\t\t\t},\n\t\t\tA2(elm$core$List$range, 1, byteCount));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Preprocess$postfix = F2(\n\tfunction (alg, messageSize) {\n\t\treturn elm$core$List$concat(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t[128]),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$core$List$repeat,\n\t\t\t\t\t((A2(ktonon$elm_crypto$Crypto$SHA$Preprocess$calculateK, alg, messageSize) - 7) / 8) | 0,\n\t\t\t\t\t0),\n\t\t\t\t\tA2(\n\t\t\t\t\tktonon$elm_word$Word$Bytes$fromInt,\n\t\t\t\t\tktonon$elm_crypto$Crypto$SHA$Preprocess$messageSizeBytes(alg),\n\t\t\t\t\tmessageSize)\n\t\t\t\t]));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Preprocess$preprocess = F2(\n\tfunction (alg, message) {\n\t\treturn A2(\n\t\t\telm$core$List$append,\n\t\t\tmessage,\n\t\t\tA2(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Preprocess$postfix,\n\t\t\t\talg,\n\t\t\t\t8 * elm$core$List$length(message)));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Types$WorkingVars = F8(\n\tfunction (a, b, c, d, e, f, g, h) {\n\t\treturn {a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h};\n\t});\nvar ktonon$elm_word$Word$D = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'D', a: a, b: b};\n\t});\nvar ktonon$elm_word$Word$W = function (a) {\n\treturn {$: 'W', a: a};\n};\nvar ktonon$elm_crypto$Crypto$SHA$Constants$initialHashValues = function (alg) {\n\tswitch (alg.$) {\n\t\tcase 'SHA224':\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tktonon$elm_word$Word$W(3238371032),\n\t\t\t\tktonon$elm_word$Word$W(914150663),\n\t\t\t\tktonon$elm_word$Word$W(812702999),\n\t\t\t\tktonon$elm_word$Word$W(4144912697),\n\t\t\t\tktonon$elm_word$Word$W(4290775857),\n\t\t\t\tktonon$elm_word$Word$W(1750603025),\n\t\t\t\tktonon$elm_word$Word$W(1694076839),\n\t\t\t\tktonon$elm_word$Word$W(3204075428));\n\t\tcase 'SHA256':\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tktonon$elm_word$Word$W(1779033703),\n\t\t\t\tktonon$elm_word$Word$W(3144134277),\n\t\t\t\tktonon$elm_word$Word$W(1013904242),\n\t\t\t\tktonon$elm_word$Word$W(2773480762),\n\t\t\t\tktonon$elm_word$Word$W(1359893119),\n\t\t\t\tktonon$elm_word$Word$W(2600822924),\n\t\t\t\tktonon$elm_word$Word$W(528734635),\n\t\t\t\tktonon$elm_word$Word$W(1541459225));\n\t\tcase 'SHA384':\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tA2(ktonon$elm_word$Word$D, 3418070365, 3238371032),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1654270250, 914150663),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2438529370, 812702999),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 355462360, 4144912697),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1731405415, 4290775857),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2394180231, 1750603025),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 3675008525, 1694076839),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1203062813, 3204075428));\n\t\tcase 'SHA512':\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1779033703, 4089235720),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 3144134277, 2227873595),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1013904242, 4271175723),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2773480762, 1595750129),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1359893119, 2917565137),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2600822924, 725511199),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 528734635, 4215389547),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1541459225, 327033209));\n\t\tcase 'SHA512_224':\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2352822216, 424955298),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1944164710, 2312950998),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 502970286, 855612546),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1738396948, 1479516111),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 258812777, 2077511080),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2011393907, 79989058),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1067287976, 1780299464),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 286451373, 2446758561));\n\t\tdefault:\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tA2(ktonon$elm_word$Word$D, 573645204, 4230739756),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2673172387, 3360449730),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 596883563, 1867755857),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2520282905, 1497426621),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2519219938, 2827943907),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 3193839141, 1401305490),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 721525244, 746961066),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 246885852, 2177182882));\n\t}\n};\nvar elm$core$List$drop = F2(\n\tfunction (n, list) {\n\t\tdrop:\n\t\twhile (true) {\n\t\t\tif (n <= 0) {\n\t\t\t\treturn list;\n\t\t\t} else {\n\t\t\t\tif (!list.b) {\n\t\t\t\t\treturn list;\n\t\t\t\t} else {\n\t\t\t\t\tvar x = list.a;\n\t\t\t\t\tvar xs = list.b;\n\t\t\t\t\tvar $temp$n = n - 1,\n\t\t\t\t\t\t$temp$list = xs;\n\t\t\t\t\tn = $temp$n;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tcontinue drop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$isEmpty = function (xs) {\n\tif (!xs.b) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\nvar elm$core$List$takeReverse = F3(\n\tfunction (n, list, kept) {\n\t\ttakeReverse:\n\t\twhile (true) {\n\t\t\tif (n <= 0) {\n\t\t\t\treturn kept;\n\t\t\t} else {\n\t\t\t\tif (!list.b) {\n\t\t\t\t\treturn kept;\n\t\t\t\t} else {\n\t\t\t\t\tvar x = list.a;\n\t\t\t\t\tvar xs = list.b;\n\t\t\t\t\tvar $temp$n = n - 1,\n\t\t\t\t\t\t$temp$list = xs,\n\t\t\t\t\t\t$temp$kept = A2(elm$core$List$cons, x, kept);\n\t\t\t\t\tn = $temp$n;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tkept = $temp$kept;\n\t\t\t\t\tcontinue takeReverse;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$takeTailRec = F2(\n\tfunction (n, list) {\n\t\treturn elm$core$List$reverse(\n\t\t\tA3(elm$core$List$takeReverse, n, list, _List_Nil));\n\t});\nvar elm$core$List$takeFast = F3(\n\tfunction (ctr, n, list) {\n\t\tif (n <= 0) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tvar _n0 = _Utils_Tuple2(n, list);\n\t\t\t_n0$1:\n\t\t\twhile (true) {\n\t\t\t\t_n0$5:\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!_n0.b.b) {\n\t\t\t\t\t\treturn list;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_n0.b.b.b) {\n\t\t\t\t\t\t\tswitch (_n0.a) {\n\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\tbreak _n0$1;\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\t\t\t\tvar x = _n2.a;\n\t\t\t\t\t\t\t\t\tvar _n3 = _n2.b;\n\t\t\t\t\t\t\t\t\tvar y = _n3.a;\n\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[x, y]);\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tif (_n0.b.b.b.b) {\n\t\t\t\t\t\t\t\t\t\tvar _n4 = _n0.b;\n\t\t\t\t\t\t\t\t\t\tvar x = _n4.a;\n\t\t\t\t\t\t\t\t\t\tvar _n5 = _n4.b;\n\t\t\t\t\t\t\t\t\t\tvar y = _n5.a;\n\t\t\t\t\t\t\t\t\t\tvar _n6 = _n5.b;\n\t\t\t\t\t\t\t\t\t\tvar z = _n6.a;\n\t\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[x, y, z]);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbreak _n0$5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tif (_n0.b.b.b.b && _n0.b.b.b.b.b) {\n\t\t\t\t\t\t\t\t\t\tvar _n7 = _n0.b;\n\t\t\t\t\t\t\t\t\t\tvar x = _n7.a;\n\t\t\t\t\t\t\t\t\t\tvar _n8 = _n7.b;\n\t\t\t\t\t\t\t\t\t\tvar y = _n8.a;\n\t\t\t\t\t\t\t\t\t\tvar _n9 = _n8.b;\n\t\t\t\t\t\t\t\t\t\tvar z = _n9.a;\n\t\t\t\t\t\t\t\t\t\tvar _n10 = _n9.b;\n\t\t\t\t\t\t\t\t\t\tvar w = _n10.a;\n\t\t\t\t\t\t\t\t\t\tvar tl = _n10.b;\n\t\t\t\t\t\t\t\t\t\treturn (ctr > 1000) ? A2(\n\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\tz,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tw,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$takeTailRec, n - 4, tl))))) : A2(\n\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\tz,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tw,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA3(elm$core$List$takeFast, ctr + 1, n - 4, tl)))));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbreak _n0$5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_n0.a === 1) {\n\t\t\t\t\t\t\t\tbreak _n0$1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak _n0$5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t}\n\t\t\tvar _n1 = _n0.b;\n\t\t\tvar x = _n1.a;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[x]);\n\t\t}\n\t});\nvar elm$core$List$take = F2(\n\tfunction (n, list) {\n\t\treturn A3(elm$core$List$takeFast, 0, n, list);\n\t});\nvar ktonon$elm_word$Word$sizeInBytes = function (s) {\n\tif (s.$ === 'Bit32') {\n\t\treturn 4;\n\t} else {\n\t\treturn 8;\n\t}\n};\nvar ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInWords = function (alg) {\n\treturn (ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInBytes(alg) / ktonon$elm_word$Word$sizeInBytes(\n\t\tktonon$elm_crypto$Crypto$SHA$Alg$wordSize(alg))) | 0;\n};\nvar ktonon$elm_crypto$Crypto$SHA$Chunk$next = F2(\n\tfunction (alg, words) {\n\t\tvar n = ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInWords(alg);\n\t\tvar chunk = A2(elm$core$List$take, n, words);\n\t\treturn _Utils_Tuple2(\n\t\t\telm$core$List$isEmpty(chunk) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(chunk),\n\t\t\tA2(elm$core$List$drop, n, words));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Constants$roundConstants = function (alg) {\n\troundConstants:\n\twhile (true) {\n\t\tswitch (alg.$) {\n\t\t\tcase 'SHA224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue roundConstants;\n\t\t\tcase 'SHA256':\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tktonon$elm_word$Word$W(1116352408),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1899447441),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3049323471),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3921009573),\n\t\t\t\t\t\tktonon$elm_word$Word$W(961987163),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1508970993),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2453635748),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2870763221),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3624381080),\n\t\t\t\t\t\tktonon$elm_word$Word$W(310598401),\n\t\t\t\t\t\tktonon$elm_word$Word$W(607225278),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1426881987),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1925078388),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2162078206),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2614888103),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3248222580),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3835390401),\n\t\t\t\t\t\tktonon$elm_word$Word$W(4022224774),\n\t\t\t\t\t\tktonon$elm_word$Word$W(264347078),\n\t\t\t\t\t\tktonon$elm_word$Word$W(604807628),\n\t\t\t\t\t\tktonon$elm_word$Word$W(770255983),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1249150122),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1555081692),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1996064986),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2554220882),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2821834349),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2952996808),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3210313671),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3336571891),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3584528711),\n\t\t\t\t\t\tktonon$elm_word$Word$W(113926993),\n\t\t\t\t\t\tktonon$elm_word$Word$W(338241895),\n\t\t\t\t\t\tktonon$elm_word$Word$W(666307205),\n\t\t\t\t\t\tktonon$elm_word$Word$W(773529912),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1294757372),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1396182291),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1695183700),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1986661051),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2177026350),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2456956037),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2730485921),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2820302411),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3259730800),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3345764771),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3516065817),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3600352804),\n\t\t\t\t\t\tktonon$elm_word$Word$W(4094571909),\n\t\t\t\t\t\tktonon$elm_word$Word$W(275423344),\n\t\t\t\t\t\tktonon$elm_word$Word$W(430227734),\n\t\t\t\t\t\tktonon$elm_word$Word$W(506948616),\n\t\t\t\t\t\tktonon$elm_word$Word$W(659060556),\n\t\t\t\t\t\tktonon$elm_word$Word$W(883997877),\n\t\t\t\t\t\tktonon$elm_word$Word$W(958139571),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1322822218),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1537002063),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1747873779),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1955562222),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2024104815),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2227730452),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2361852424),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2428436474),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2756734187),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3204031479),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3329325298)\n\t\t\t\t\t]);\n\t\t\tcase 'SHA384':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue roundConstants;\n\t\t\tcase 'SHA512':\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1116352408, 3609767458),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1899447441, 602891725),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3049323471, 3964484399),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3921009573, 2173295548),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 961987163, 4081628472),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1508970993, 3053834265),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2453635748, 2937671579),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2870763221, 3664609560),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3624381080, 2734883394),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 310598401, 1164996542),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 607225278, 1323610764),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1426881987, 3590304994),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1925078388, 4068182383),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2162078206, 991336113),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2614888103, 633803317),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3248222580, 3479774868),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3835390401, 2666613458),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 4022224774, 944711139),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 264347078, 2341262773),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 604807628, 2007800933),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 770255983, 1495990901),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1249150122, 1856431235),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1555081692, 3175218132),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1996064986, 2198950837),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2554220882, 3999719339),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2821834349, 766784016),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2952996808, 2566594879),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3210313671, 3203337956),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3336571891, 1034457026),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3584528711, 2466948901),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 113926993, 3758326383),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 338241895, 168717936),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 666307205, 1188179964),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 773529912, 1546045734),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1294757372, 1522805485),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1396182291, 2643833823),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1695183700, 2343527390),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1986661051, 1014477480),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2177026350, 1206759142),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2456956037, 344077627),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2730485921, 1290863460),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2820302411, 3158454273),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3259730800, 3505952657),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3345764771, 106217008),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3516065817, 3606008344),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3600352804, 1432725776),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 4094571909, 1467031594),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 275423344, 851169720),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 430227734, 3100823752),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 506948616, 1363258195),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 659060556, 3750685593),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 883997877, 3785050280),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 958139571, 3318307427),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1322822218, 3812723403),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1537002063, 2003034995),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1747873779, 3602036899),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1955562222, 1575990012),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2024104815, 1125592928),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2227730452, 2716904306),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2361852424, 442776044),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2428436474, 593698344),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2756734187, 3733110249),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3204031479, 2999351573),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3329325298, 3815920427),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3391569614, 3928383900),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3515267271, 566280711),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3940187606, 3454069534),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 4118630271, 4000239992),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 116418474, 1914138554),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 174292421, 2731055270),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 289380356, 3203993006),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 460393269, 320620315),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 685471733, 587496836),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 852142971, 1086792851),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1017036298, 365543100),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1126000580, 2618297676),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1288033470, 3409855158),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1501505948, 4234509866),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1607167915, 987167468),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1816402316, 1246189591)\n\t\t\t\t\t]);\n\t\t\tcase 'SHA512_224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue roundConstants;\n\t\t\tdefault:\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue roundConstants;\n\t\t}\n\t}\n};\nvar elm$core$Elm$JsArray$appendN = _JsArray_appendN;\nvar elm$core$Elm$JsArray$slice = _JsArray_slice;\nvar elm$core$Array$appendHelpBuilder = F2(\n\tfunction (tail, builder) {\n\t\tvar tailLen = elm$core$Elm$JsArray$length(tail);\n\t\tvar notAppended = (elm$core$Array$branchFactor - elm$core$Elm$JsArray$length(builder.tail)) - tailLen;\n\t\tvar appended = A3(elm$core$Elm$JsArray$appendN, elm$core$Array$branchFactor, builder.tail, tail);\n\t\treturn (notAppended < 0) ? {\n\t\t\tnodeList: A2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\telm$core$Array$Leaf(appended),\n\t\t\t\tbuilder.nodeList),\n\t\t\tnodeListSize: builder.nodeListSize + 1,\n\t\t\ttail: A3(elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)\n\t\t} : ((!notAppended) ? {\n\t\t\tnodeList: A2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\telm$core$Array$Leaf(appended),\n\t\t\t\tbuilder.nodeList),\n\t\t\tnodeListSize: builder.nodeListSize + 1,\n\t\t\ttail: elm$core$Elm$JsArray$empty\n\t\t} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});\n\t});\nvar elm$core$Array$bitMask = 4294967295 >>> (32 - elm$core$Array$shiftStep);\nvar elm$core$Elm$JsArray$push = _JsArray_push;\nvar elm$core$Elm$JsArray$singleton = _JsArray_singleton;\nvar elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;\nvar elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;\nvar elm$core$Array$insertTailInTree = F4(\n\tfunction (shift, index, tail, tree) {\n\t\tvar pos = elm$core$Array$bitMask & (index >>> shift);\n\t\tif (_Utils_cmp(\n\t\t\tpos,\n\t\t\telm$core$Elm$JsArray$length(tree)) > -1) {\n\t\t\tif (shift === 5) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Elm$JsArray$push,\n\t\t\t\t\telm$core$Array$Leaf(tail),\n\t\t\t\t\ttree);\n\t\t\t} else {\n\t\t\t\tvar newSub = elm$core$Array$SubTree(\n\t\t\t\t\tA4(elm$core$Array$insertTailInTree, shift - elm$core$Array$shiftStep, index, tail, elm$core$Elm$JsArray$empty));\n\t\t\t\treturn A2(elm$core$Elm$JsArray$push, newSub, tree);\n\t\t\t}\n\t\t} else {\n\t\t\tvar value = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);\n\t\t\tif (value.$ === 'SubTree') {\n\t\t\t\tvar subTree = value.a;\n\t\t\t\tvar newSub = elm$core$Array$SubTree(\n\t\t\t\t\tA4(elm$core$Array$insertTailInTree, shift - elm$core$Array$shiftStep, index, tail, subTree));\n\t\t\t\treturn A3(elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);\n\t\t\t} else {\n\t\t\t\tvar newSub = elm$core$Array$SubTree(\n\t\t\t\t\tA4(\n\t\t\t\t\t\telm$core$Array$insertTailInTree,\n\t\t\t\t\t\tshift - elm$core$Array$shiftStep,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\ttail,\n\t\t\t\t\t\telm$core$Elm$JsArray$singleton(value)));\n\t\t\t\treturn A3(elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;\nvar elm$core$Array$unsafeReplaceTail = F2(\n\tfunction (newTail, _n0) {\n\t\tvar len = _n0.a;\n\t\tvar startShift = _n0.b;\n\t\tvar tree = _n0.c;\n\t\tvar tail = _n0.d;\n\t\tvar originalTailLen = elm$core$Elm$JsArray$length(tail);\n\t\tvar newTailLen = elm$core$Elm$JsArray$length(newTail);\n\t\tvar newArrayLen = len + (newTailLen - originalTailLen);\n\t\tif (_Utils_eq(newTailLen, elm$core$Array$branchFactor)) {\n\t\t\tvar overflow = _Utils_cmp(newArrayLen >>> elm$core$Array$shiftStep, 1 << startShift) > 0;\n\t\t\tif (overflow) {\n\t\t\t\tvar newShift = startShift + elm$core$Array$shiftStep;\n\t\t\t\tvar newTree = A4(\n\t\t\t\t\telm$core$Array$insertTailInTree,\n\t\t\t\t\tnewShift,\n\t\t\t\t\tlen,\n\t\t\t\t\tnewTail,\n\t\t\t\t\telm$core$Elm$JsArray$singleton(\n\t\t\t\t\t\telm$core$Array$SubTree(tree)));\n\t\t\t\treturn A4(elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, elm$core$Elm$JsArray$empty);\n\t\t\t} else {\n\t\t\t\treturn A4(\n\t\t\t\t\telm$core$Array$Array_elm_builtin,\n\t\t\t\t\tnewArrayLen,\n\t\t\t\t\tstartShift,\n\t\t\t\t\tA4(elm$core$Array$insertTailInTree, startShift, len, newTail, tree),\n\t\t\t\t\telm$core$Elm$JsArray$empty);\n\t\t\t}\n\t\t} else {\n\t\t\treturn A4(elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);\n\t\t}\n\t});\nvar elm$core$Array$appendHelpTree = F2(\n\tfunction (toAppend, array) {\n\t\tvar len = array.a;\n\t\tvar tree = array.c;\n\t\tvar tail = array.d;\n\t\tvar itemsToAppend = elm$core$Elm$JsArray$length(toAppend);\n\t\tvar notAppended = (elm$core$Array$branchFactor - elm$core$Elm$JsArray$length(tail)) - itemsToAppend;\n\t\tvar appended = A3(elm$core$Elm$JsArray$appendN, elm$core$Array$branchFactor, tail, toAppend);\n\t\tvar newArray = A2(elm$core$Array$unsafeReplaceTail, appended, array);\n\t\tif (notAppended < 0) {\n\t\t\tvar nextTail = A3(elm$core$Elm$JsArray$slice, notAppended, itemsToAppend, toAppend);\n\t\t\treturn A2(elm$core$Array$unsafeReplaceTail, nextTail, newArray);\n\t\t} else {\n\t\t\treturn newArray;\n\t\t}\n\t});\nvar elm$core$Elm$JsArray$foldl = _JsArray_foldl;\nvar elm$core$Array$builderFromArray = function (_n0) {\n\tvar len = _n0.a;\n\tvar tree = _n0.c;\n\tvar tail = _n0.d;\n\tvar helper = F2(\n\t\tfunction (node, acc) {\n\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\tvar subTree = node.a;\n\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, helper, acc, subTree);\n\t\t\t} else {\n\t\t\t\treturn A2(elm$core$List$cons, node, acc);\n\t\t\t}\n\t\t});\n\treturn {\n\t\tnodeList: A3(elm$core$Elm$JsArray$foldl, helper, _List_Nil, tree),\n\t\tnodeListSize: (len / elm$core$Array$branchFactor) | 0,\n\t\ttail: tail\n\t};\n};\nvar elm$core$Array$append = F2(\n\tfunction (a, _n0) {\n\t\tvar aTail = a.d;\n\t\tvar bLen = _n0.a;\n\t\tvar bTree = _n0.c;\n\t\tvar bTail = _n0.d;\n\t\tif (_Utils_cmp(bLen, elm$core$Array$branchFactor * 4) < 1) {\n\t\t\tvar foldHelper = F2(\n\t\t\t\tfunction (node, array) {\n\t\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\t\tvar tree = node.a;\n\t\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, foldHelper, array, tree);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar leaf = node.a;\n\t\t\t\t\t\treturn A2(elm$core$Array$appendHelpTree, leaf, array);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\treturn A2(\n\t\t\t\telm$core$Array$appendHelpTree,\n\t\t\t\tbTail,\n\t\t\t\tA3(elm$core$Elm$JsArray$foldl, foldHelper, a, bTree));\n\t\t} else {\n\t\t\tvar foldHelper = F2(\n\t\t\t\tfunction (node, builder) {\n\t\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\t\tvar tree = node.a;\n\t\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, foldHelper, builder, tree);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar leaf = node.a;\n\t\t\t\t\t\treturn A2(elm$core$Array$appendHelpBuilder, leaf, builder);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\treturn A2(\n\t\t\t\telm$core$Array$builderToArray,\n\t\t\t\ttrue,\n\t\t\t\tA2(\n\t\t\t\t\telm$core$Array$appendHelpBuilder,\n\t\t\t\t\tbTail,\n\t\t\t\t\tA3(\n\t\t\t\t\t\telm$core$Elm$JsArray$foldl,\n\t\t\t\t\t\tfoldHelper,\n\t\t\t\t\t\telm$core$Array$builderFromArray(a),\n\t\t\t\t\t\tbTree)));\n\t\t}\n\t});\nvar elm$core$Array$getHelp = F3(\n\tfunction (shift, index, tree) {\n\t\tgetHelp:\n\t\twhile (true) {\n\t\t\tvar pos = elm$core$Array$bitMask & (index >>> shift);\n\t\t\tvar _n0 = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);\n\t\t\tif (_n0.$ === 'SubTree') {\n\t\t\t\tvar subTree = _n0.a;\n\t\t\t\tvar $temp$shift = shift - elm$core$Array$shiftStep,\n\t\t\t\t\t$temp$index = index,\n\t\t\t\t\t$temp$tree = subTree;\n\t\t\t\tshift = $temp$shift;\n\t\t\t\tindex = $temp$index;\n\t\t\t\ttree = $temp$tree;\n\t\t\t\tcontinue getHelp;\n\t\t\t} else {\n\t\t\t\tvar values = _n0.a;\n\t\t\t\treturn A2(elm$core$Elm$JsArray$unsafeGet, elm$core$Array$bitMask & index, values);\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Array$tailIndex = function (len) {\n\treturn (len >>> 5) << 5;\n};\nvar elm$core$Array$get = F2(\n\tfunction (index, _n0) {\n\t\tvar len = _n0.a;\n\t\tvar startShift = _n0.b;\n\t\tvar tree = _n0.c;\n\t\tvar tail = _n0.d;\n\t\treturn ((index < 0) || (_Utils_cmp(index, len) > -1)) ? elm$core$Maybe$Nothing : ((_Utils_cmp(\n\t\t\tindex,\n\t\t\telm$core$Array$tailIndex(len)) > -1) ? elm$core$Maybe$Just(\n\t\t\tA2(elm$core$Elm$JsArray$unsafeGet, elm$core$Array$bitMask & index, tail)) : elm$core$Maybe$Just(\n\t\t\tA3(elm$core$Array$getHelp, startShift, index, tree)));\n\t});\nvar ktonon$elm_word$Word$Mismatch = {$: 'Mismatch'};\nvar ktonon$elm_crypto$Crypto$SHA$MessageSchedule$at = function (i) {\n\treturn A2(\n\t\telm$core$Basics$composeR,\n\t\telm$core$Array$get(i),\n\t\telm$core$Maybe$withDefault(ktonon$elm_word$Word$Mismatch));\n};\nvar ktonon$elm_word$Word$Helpers$lowMask = function (n) {\n\tswitch (n) {\n\t\tcase 0:\n\t\t\treturn 0;\n\t\tcase 1:\n\t\t\treturn 1;\n\t\tcase 2:\n\t\t\treturn 3;\n\t\tcase 3:\n\t\t\treturn 7;\n\t\tcase 4:\n\t\t\treturn 15;\n\t\tcase 5:\n\t\t\treturn 31;\n\t\tcase 6:\n\t\t\treturn 63;\n\t\tcase 7:\n\t\t\treturn 127;\n\t\tcase 8:\n\t\t\treturn 255;\n\t\tcase 9:\n\t\t\treturn 511;\n\t\tcase 10:\n\t\t\treturn 1023;\n\t\tcase 11:\n\t\t\treturn 2047;\n\t\tcase 12:\n\t\t\treturn 4095;\n\t\tcase 13:\n\t\t\treturn 8191;\n\t\tcase 14:\n\t\t\treturn 16383;\n\t\tcase 15:\n\t\t\treturn 32767;\n\t\tcase 16:\n\t\t\treturn 65535;\n\t\tcase 17:\n\t\t\treturn 131071;\n\t\tcase 18:\n\t\t\treturn 262143;\n\t\tcase 19:\n\t\t\treturn 524287;\n\t\tcase 20:\n\t\t\treturn 1048575;\n\t\tcase 21:\n\t\t\treturn 2097151;\n\t\tcase 22:\n\t\t\treturn 4194303;\n\t\tcase 23:\n\t\t\treturn 8388607;\n\t\tcase 24:\n\t\t\treturn 16777215;\n\t\tcase 25:\n\t\t\treturn 33554431;\n\t\tcase 26:\n\t\t\treturn 67108863;\n\t\tcase 27:\n\t\t\treturn 134217727;\n\t\tcase 28:\n\t\t\treturn 268435455;\n\t\tcase 29:\n\t\t\treturn 536870911;\n\t\tcase 30:\n\t\t\treturn 1073741823;\n\t\tcase 31:\n\t\t\treturn 2147483647;\n\t\tdefault:\n\t\t\treturn 4294967295;\n\t}\n};\nvar ktonon$elm_word$Word$Helpers$safeShiftRightZfBy = F2(\n\tfunction (n, val) {\n\t\treturn (n >= 32) ? 0 : (val >>> n);\n\t});\nvar ktonon$elm_word$Word$dShiftRightZfBy = F2(\n\tfunction (n, _n0) {\n\t\tvar xh = _n0.a;\n\t\tvar xl = _n0.b;\n\t\treturn (n > 32) ? _Utils_Tuple2(\n\t\t\t0,\n\t\t\tA2(ktonon$elm_word$Word$Helpers$safeShiftRightZfBy, n - 32, xh)) : _Utils_Tuple2(\n\t\t\tA2(ktonon$elm_word$Word$Helpers$safeShiftRightZfBy, n, xh),\n\t\t\tA2(ktonon$elm_word$Word$Helpers$safeShiftRightZfBy, n, xl) + ((ktonon$elm_word$Word$Helpers$lowMask(n) & xh) << (32 - n)));\n\t});\nvar ktonon$elm_word$Word$Helpers$rotatedLowBits = F2(\n\tfunction (n, val) {\n\t\treturn elm$core$Basics$add(\n\t\t\t(ktonon$elm_word$Word$Helpers$lowMask(n) & val) << (32 - n));\n\t});\nvar ktonon$elm_word$Word$rotateRightBy = F2(\n\tfunction (unboundN, word) {\n\t\tswitch (word.$) {\n\t\t\tcase 'W':\n\t\t\t\tvar x = word.a;\n\t\t\t\tvar n = A2(elm$core$Basics$modBy, 32, unboundN);\n\t\t\t\treturn ktonon$elm_word$Word$W(\n\t\t\t\t\tA3(\n\t\t\t\t\t\tktonon$elm_word$Word$Helpers$rotatedLowBits,\n\t\t\t\t\t\tn,\n\t\t\t\t\t\tx,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$Helpers$safeShiftRightZfBy, n, x)));\n\t\t\tcase 'D':\n\t\t\t\tvar xh = word.a;\n\t\t\t\tvar xl = word.b;\n\t\t\t\tvar n = A2(elm$core$Basics$modBy, 64, unboundN);\n\t\t\t\tif (n > 32) {\n\t\t\t\t\tvar n_ = n - 32;\n\t\t\t\t\tvar _n1 = A2(\n\t\t\t\t\t\tktonon$elm_word$Word$dShiftRightZfBy,\n\t\t\t\t\t\tn_,\n\t\t\t\t\t\t_Utils_Tuple2(xl, xh));\n\t\t\t\t\tvar zh = _n1.a;\n\t\t\t\t\tvar zl = _n1.b;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$D,\n\t\t\t\t\t\tA3(ktonon$elm_word$Word$Helpers$rotatedLowBits, n_, xh, zh),\n\t\t\t\t\t\tzl);\n\t\t\t\t} else {\n\t\t\t\t\tvar _n2 = A2(\n\t\t\t\t\t\tktonon$elm_word$Word$dShiftRightZfBy,\n\t\t\t\t\t\tn,\n\t\t\t\t\t\t_Utils_Tuple2(xh, xl));\n\t\t\t\t\tvar zh = _n2.a;\n\t\t\t\t\tvar zl = _n2.b;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$D,\n\t\t\t\t\t\tA3(ktonon$elm_word$Word$Helpers$rotatedLowBits, n, xl, zh),\n\t\t\t\t\t\tzl);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn ktonon$elm_word$Word$Mismatch;\n\t\t}\n\t});\nvar ktonon$elm_word$Word$shiftRightZfBy = F2(\n\tfunction (n, word) {\n\t\tswitch (word.$) {\n\t\t\tcase 'W':\n\t\t\t\tvar x = word.a;\n\t\t\t\treturn ktonon$elm_word$Word$W(\n\t\t\t\t\tA2(ktonon$elm_word$Word$Helpers$safeShiftRightZfBy, n, x));\n\t\t\tcase 'D':\n\t\t\t\tvar xh = word.a;\n\t\t\t\tvar xl = word.b;\n\t\t\t\tvar _n1 = A2(\n\t\t\t\t\tktonon$elm_word$Word$dShiftRightZfBy,\n\t\t\t\t\tn,\n\t\t\t\t\t_Utils_Tuple2(xh, xl));\n\t\t\t\tvar zh = _n1.a;\n\t\t\t\tvar zl = _n1.b;\n\t\t\t\treturn A2(ktonon$elm_word$Word$D, zh, zl);\n\t\t\tdefault:\n\t\t\t\treturn ktonon$elm_word$Word$Mismatch;\n\t\t}\n\t});\nvar elm$core$Bitwise$xor = _Bitwise_xor;\nvar ktonon$elm_word$Word$xor = F2(\n\tfunction (wx, wy) {\n\t\tvar _n0 = _Utils_Tuple2(wx, wy);\n\t\t_n0$2:\n\t\twhile (true) {\n\t\t\tswitch (_n0.a.$) {\n\t\t\t\tcase 'W':\n\t\t\t\t\tif (_n0.b.$ === 'W') {\n\t\t\t\t\t\tvar x = _n0.a.a;\n\t\t\t\t\t\tvar y = _n0.b.a;\n\t\t\t\t\t\treturn ktonon$elm_word$Word$W(x ^ y);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tcase 'D':\n\t\t\t\t\tif (_n0.b.$ === 'D') {\n\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\tvar xh = _n1.a;\n\t\t\t\t\t\tvar xl = _n1.b;\n\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\tvar yh = _n2.a;\n\t\t\t\t\t\tvar yl = _n2.b;\n\t\t\t\t\t\treturn A2(ktonon$elm_word$Word$D, xh ^ yh, xl ^ yl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tbreak _n0$2;\n\t\t\t}\n\t\t}\n\t\treturn ktonon$elm_word$Word$Mismatch;\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$MessageSchedule$sigma0 = F2(\n\tfunction (alg, word) {\n\t\tsigma0:\n\t\twhile (true) {\n\t\t\tswitch (alg.$) {\n\t\t\t\tcase 'SHA224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma0;\n\t\t\t\tcase 'SHA384':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma0;\n\t\t\t\tcase 'SHA256':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$shiftRightZfBy, 3, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 18, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 7, word)));\n\t\t\t\tcase 'SHA512':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$shiftRightZfBy, 7, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 8, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 1, word)));\n\t\t\t\tcase 'SHA512_224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma0;\n\t\t\t\tdefault:\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma0;\n\t\t\t}\n\t\t}\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$MessageSchedule$sigma1 = F2(\n\tfunction (alg, word) {\n\t\tsigma1:\n\t\twhile (true) {\n\t\t\tswitch (alg.$) {\n\t\t\t\tcase 'SHA224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma1;\n\t\t\t\tcase 'SHA384':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma1;\n\t\t\t\tcase 'SHA256':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$shiftRightZfBy, 10, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 19, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 17, word)));\n\t\t\t\tcase 'SHA512':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$shiftRightZfBy, 6, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 61, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 19, word)));\n\t\t\t\tcase 'SHA512_224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma1;\n\t\t\t\tdefault:\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma1;\n\t\t\t}\n\t\t}\n\t});\nvar ktonon$elm_word$Word$low31mask = 2147483647;\nvar ktonon$elm_word$Word$carry32 = F2(\n\tfunction (x, y) {\n\t\tvar _n0 = (x >>> 31) + (y >>> 31);\n\t\tswitch (_n0) {\n\t\t\tcase 0:\n\t\t\t\treturn 0;\n\t\t\tcase 2:\n\t\t\t\treturn 1;\n\t\t\tdefault:\n\t\t\t\treturn (1 === (((ktonon$elm_word$Word$low31mask & x) + (ktonon$elm_word$Word$low31mask & y)) >>> 31)) ? 1 : 0;\n\t\t}\n\t});\nvar ktonon$elm_word$Word$mod32 = function (val) {\n\treturn A2(\n\t\telm$core$Basics$modBy,\n\t\tA2(elm$core$Basics$pow, 2, 32),\n\t\tval);\n};\nvar ktonon$elm_word$Word$add = F2(\n\tfunction (wx, wy) {\n\t\tvar _n0 = _Utils_Tuple2(wx, wy);\n\t\t_n0$2:\n\t\twhile (true) {\n\t\t\tswitch (_n0.a.$) {\n\t\t\t\tcase 'W':\n\t\t\t\t\tif (_n0.b.$ === 'W') {\n\t\t\t\t\t\tvar x = _n0.a.a;\n\t\t\t\t\t\tvar y = _n0.b.a;\n\t\t\t\t\t\treturn ktonon$elm_word$Word$W(\n\t\t\t\t\t\t\tktonon$elm_word$Word$mod32(x + y));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tcase 'D':\n\t\t\t\t\tif (_n0.b.$ === 'D') {\n\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\tvar xh = _n1.a;\n\t\t\t\t\t\tvar xl = _n1.b;\n\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\tvar yh = _n2.a;\n\t\t\t\t\t\tvar yl = _n2.b;\n\t\t\t\t\t\tvar zl = xl + yl;\n\t\t\t\t\t\tvar zh = (xh + yh) + A2(ktonon$elm_word$Word$carry32, xl, yl);\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$D,\n\t\t\t\t\t\t\tktonon$elm_word$Word$mod32(zh),\n\t\t\t\t\t\t\tktonon$elm_word$Word$mod32(zl));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tbreak _n0$2;\n\t\t\t}\n\t\t}\n\t\treturn ktonon$elm_word$Word$Mismatch;\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$MessageSchedule$nextPart = F3(\n\tfunction (alg, i, w) {\n\t\tvar i2 = A2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$at, i - 2, w);\n\t\tvar s1 = A2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$sigma1, alg, i2);\n\t\tvar i15 = A2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$at, i - 15, w);\n\t\tvar s0 = A2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$sigma0, alg, i15);\n\t\treturn A2(\n\t\t\telm$core$Array$append,\n\t\t\tw,\n\t\t\telm$core$Array$fromList(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tktonon$elm_word$Word$add,\n\t\t\t\t\t\ts1,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$add,\n\t\t\t\t\t\t\tA2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$at, i - 7, w),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\tktonon$elm_word$Word$add,\n\t\t\t\t\t\t\t\ts0,\n\t\t\t\t\t\t\t\tA2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$at, i - 16, w))))\n\t\t\t\t\t])));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$MessageSchedule$fromChunk = F2(\n\tfunction (alg, chunk) {\n\t\tvar n = elm$core$List$length(\n\t\t\tktonon$elm_crypto$Crypto$SHA$Constants$roundConstants(alg));\n\t\treturn A3(\n\t\t\telm$core$List$foldl,\n\t\t\tktonon$elm_crypto$Crypto$SHA$MessageSchedule$nextPart(alg),\n\t\t\telm$core$Array$fromList(chunk),\n\t\t\tA2(elm$core$List$range, 16, n - 1));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Process$sum0 = F2(\n\tfunction (alg, word) {\n\t\tsum0:\n\t\twhile (true) {\n\t\t\tswitch (alg.$) {\n\t\t\t\tcase 'SHA224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum0;\n\t\t\t\tcase 'SHA384':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum0;\n\t\t\t\tcase 'SHA256':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 22, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 13, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 2, word)));\n\t\t\t\tcase 'SHA512':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 39, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 34, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 28, word)));\n\t\t\t\tcase 'SHA512_224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum0;\n\t\t\t\tdefault:\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum0;\n\t\t\t}\n\t\t}\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Process$sum1 = F2(\n\tfunction (alg, word) {\n\t\tsum1:\n\t\twhile (true) {\n\t\t\tswitch (alg.$) {\n\t\t\t\tcase 'SHA224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum1;\n\t\t\t\tcase 'SHA384':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum1;\n\t\t\t\tcase 'SHA256':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 25, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 11, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 6, word)));\n\t\t\t\tcase 'SHA512':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 41, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 18, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 14, word)));\n\t\t\t\tcase 'SHA512_224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum1;\n\t\t\t\tdefault:\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum1;\n\t\t\t}\n\t\t}\n\t});\nvar ktonon$elm_word$Word$and = F2(\n\tfunction (wx, wy) {\n\t\tvar _n0 = _Utils_Tuple2(wx, wy);\n\t\t_n0$2:\n\t\twhile (true) {\n\t\t\tswitch (_n0.a.$) {\n\t\t\t\tcase 'W':\n\t\t\t\t\tif (_n0.b.$ === 'W') {\n\t\t\t\t\t\tvar x = _n0.a.a;\n\t\t\t\t\t\tvar y = _n0.b.a;\n\t\t\t\t\t\treturn ktonon$elm_word$Word$W(x & y);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tcase 'D':\n\t\t\t\t\tif (_n0.b.$ === 'D') {\n\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\tvar xh = _n1.a;\n\t\t\t\t\t\tvar xl = _n1.b;\n\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\tvar yh = _n2.a;\n\t\t\t\t\t\tvar yl = _n2.b;\n\t\t\t\t\t\treturn A2(ktonon$elm_word$Word$D, xh & yh, xl & yl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tbreak _n0$2;\n\t\t\t}\n\t\t}\n\t\treturn ktonon$elm_word$Word$Mismatch;\n\t});\nvar elm$core$Bitwise$complement = _Bitwise_complement;\nvar ktonon$elm_word$Word$complement = function (word) {\n\tswitch (word.$) {\n\t\tcase 'W':\n\t\t\tvar x = word.a;\n\t\t\treturn ktonon$elm_word$Word$W(~x);\n\t\tcase 'D':\n\t\t\tvar xh = word.a;\n\t\t\tvar xl = word.b;\n\t\t\treturn A2(ktonon$elm_word$Word$D, ~xh, ~xl);\n\t\tdefault:\n\t\t\treturn ktonon$elm_word$Word$Mismatch;\n\t}\n};\nvar ktonon$elm_crypto$Crypto$SHA$Process$compress = F3(\n\tfunction (alg, _n0, _n1) {\n\t\tvar k = _n0.a;\n\t\tvar w = _n0.b;\n\t\tvar a = _n1.a;\n\t\tvar b = _n1.b;\n\t\tvar c = _n1.c;\n\t\tvar d = _n1.d;\n\t\tvar e = _n1.e;\n\t\tvar f = _n1.f;\n\t\tvar g = _n1.g;\n\t\tvar h = _n1.h;\n\t\tvar s1 = A2(ktonon$elm_crypto$Crypto$SHA$Process$sum1, alg, e);\n\t\tvar s0 = A2(ktonon$elm_crypto$Crypto$SHA$Process$sum0, alg, a);\n\t\tvar maj = A2(\n\t\t\tktonon$elm_word$Word$xor,\n\t\t\tA2(ktonon$elm_word$Word$and, b, c),\n\t\t\tA2(\n\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\tA2(ktonon$elm_word$Word$and, a, c),\n\t\t\t\tA2(ktonon$elm_word$Word$and, a, b)));\n\t\tvar temp2 = A2(ktonon$elm_word$Word$add, s0, maj);\n\t\tvar ch = A2(\n\t\t\tktonon$elm_word$Word$xor,\n\t\t\tA2(\n\t\t\t\tktonon$elm_word$Word$and,\n\t\t\t\tg,\n\t\t\t\tktonon$elm_word$Word$complement(e)),\n\t\t\tA2(ktonon$elm_word$Word$and, e, f));\n\t\tvar temp1 = A2(\n\t\t\tktonon$elm_word$Word$add,\n\t\t\tw,\n\t\t\tA2(\n\t\t\t\tktonon$elm_word$Word$add,\n\t\t\t\tk,\n\t\t\t\tA2(\n\t\t\t\t\tktonon$elm_word$Word$add,\n\t\t\t\t\tch,\n\t\t\t\t\tA2(ktonon$elm_word$Word$add, s1, h))));\n\t\treturn A8(\n\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\tA2(ktonon$elm_word$Word$add, temp1, temp2),\n\t\t\ta,\n\t\t\tb,\n\t\t\tc,\n\t\t\tA2(ktonon$elm_word$Word$add, d, temp1),\n\t\t\te,\n\t\t\tf,\n\t\t\tg);\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Process$compressLoop = F3(\n\tfunction (alg, workingVars, messageSchedule) {\n\t\treturn A3(\n\t\t\telm$core$List$foldl,\n\t\t\tktonon$elm_crypto$Crypto$SHA$Process$compress(alg),\n\t\t\tworkingVars,\n\t\t\tA3(\n\t\t\t\telm$core$List$map2,\n\t\t\t\tF2(\n\t\t\t\t\tfunction (a, b) {\n\t\t\t\t\t\treturn _Utils_Tuple2(a, b);\n\t\t\t\t\t}),\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Constants$roundConstants(alg),\n\t\t\t\telm$core$Array$toList(messageSchedule)));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Types$addWorkingVars = F2(\n\tfunction (x, y) {\n\t\treturn A8(\n\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\tA2(ktonon$elm_word$Word$add, x.a, y.a),\n\t\t\tA2(ktonon$elm_word$Word$add, x.b, y.b),\n\t\t\tA2(ktonon$elm_word$Word$add, x.c, y.c),\n\t\t\tA2(ktonon$elm_word$Word$add, x.d, y.d),\n\t\t\tA2(ktonon$elm_word$Word$add, x.e, y.e),\n\t\t\tA2(ktonon$elm_word$Word$add, x.f, y.f),\n\t\t\tA2(ktonon$elm_word$Word$add, x.g, y.g),\n\t\t\tA2(ktonon$elm_word$Word$add, x.h, y.h));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Process$chunks_ = F3(\n\tfunction (alg, words, currentHash) {\n\t\tchunks_:\n\t\twhile (true) {\n\t\t\tvar _n0 = A2(ktonon$elm_crypto$Crypto$SHA$Chunk$next, alg, words);\n\t\t\tif (_n0.a.$ === 'Nothing') {\n\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\treturn currentHash;\n\t\t\t} else {\n\t\t\t\tvar chunk = _n0.a.a;\n\t\t\t\tvar rest = _n0.b;\n\t\t\t\tvar vars = A2(\n\t\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$addWorkingVars,\n\t\t\t\t\tcurrentHash,\n\t\t\t\t\tA3(\n\t\t\t\t\t\tktonon$elm_crypto$Crypto$SHA$Process$compressLoop,\n\t\t\t\t\t\talg,\n\t\t\t\t\t\tcurrentHash,\n\t\t\t\t\t\tA2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$fromChunk, alg, chunk)));\n\t\t\t\tvar $temp$alg = alg,\n\t\t\t\t\t$temp$words = rest,\n\t\t\t\t\t$temp$currentHash = vars;\n\t\t\t\talg = $temp$alg;\n\t\t\t\twords = $temp$words;\n\t\t\t\tcurrentHash = $temp$currentHash;\n\t\t\t\tcontinue chunks_;\n\t\t\t}\n\t\t}\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Types$toSingleWord = function (word) {\n\tif (word.$ === 'D') {\n\t\tvar xh = word.a;\n\t\tvar xl = word.b;\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\tktonon$elm_word$Word$W(xh),\n\t\t\t\tktonon$elm_word$Word$W(xl)\n\t\t\t]);\n\t} else {\n\t\treturn _List_fromArray(\n\t\t\t[word]);\n\t}\n};\nvar ktonon$elm_crypto$Crypto$SHA$Types$workingVarsToWords = F2(\n\tfunction (alg, _n0) {\n\t\tvar a = _n0.a;\n\t\tvar b = _n0.b;\n\t\tvar c = _n0.c;\n\t\tvar d = _n0.d;\n\t\tvar e = _n0.e;\n\t\tvar f = _n0.f;\n\t\tvar g = _n0.g;\n\t\tvar h = _n0.h;\n\t\tswitch (alg.$) {\n\t\t\tcase 'SHA224':\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a, b, c, d, e, f, g]));\n\t\t\tcase 'SHA256':\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a, b, c, d, e, f, g, h]));\n\t\t\tcase 'SHA384':\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a, b, c, d, e, f]));\n\t\t\tcase 'SHA512':\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a, b, c, d, e, f, g, h]));\n\t\t\tcase 'SHA512_224':\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$take,\n\t\t\t\t\t\t7,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$List$concatMap,\n\t\t\t\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$toSingleWord,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[a, b, c, d]))));\n\t\t\tdefault:\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a, b, c, d]));\n\t\t}\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Process$chunks = F2(\n\tfunction (alg, words) {\n\t\treturn A2(\n\t\t\tktonon$elm_crypto$Crypto$SHA$Types$workingVarsToWords,\n\t\t\talg,\n\t\t\tA3(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Process$chunks_,\n\t\t\t\talg,\n\t\t\t\telm$core$Array$toList(words),\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Constants$initialHashValues(alg)));\n\t});\nvar elm$core$Array$push = F2(\n\tfunction (a, array) {\n\t\tvar tail = array.d;\n\t\treturn A2(\n\t\t\telm$core$Array$unsafeReplaceTail,\n\t\t\tA2(elm$core$Elm$JsArray$push, a, tail),\n\t\t\tarray);\n\t});\nvar ktonon$elm_word$Word$FourBytes = F4(\n\tfunction (a, b, c, d) {\n\t\treturn {$: 'FourBytes', a: a, b: b, c: c, d: d};\n\t});\nvar ktonon$elm_word$Word$int32FromBytes = function (_n0) {\n\tvar x3 = _n0.a;\n\tvar x2 = _n0.b;\n\tvar x1 = _n0.c;\n\tvar x0 = _n0.d;\n\treturn ((x0 + (x1 * A2(elm$core$Basics$pow, 2, 8))) + (x2 * A2(elm$core$Basics$pow, 2, 16))) + (x3 * A2(elm$core$Basics$pow, 2, 24));\n};\nvar ktonon$elm_word$Word$pad4 = function (bytes) {\n\t_n0$4:\n\twhile (true) {\n\t\tif (bytes.b) {\n\t\t\tif (bytes.b.b) {\n\t\t\t\tif (bytes.b.b.b) {\n\t\t\t\t\tif (bytes.b.b.b.b) {\n\t\t\t\t\t\tif (!bytes.b.b.b.b.b) {\n\t\t\t\t\t\t\tvar x3 = bytes.a;\n\t\t\t\t\t\t\tvar _n1 = bytes.b;\n\t\t\t\t\t\t\tvar x2 = _n1.a;\n\t\t\t\t\t\t\tvar _n2 = _n1.b;\n\t\t\t\t\t\t\tvar x1 = _n2.a;\n\t\t\t\t\t\t\tvar _n3 = _n2.b;\n\t\t\t\t\t\t\tvar x0 = _n3.a;\n\t\t\t\t\t\t\treturn A4(ktonon$elm_word$Word$FourBytes, x3, x2, x1, x0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak _n0$4;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar x3 = bytes.a;\n\t\t\t\t\t\tvar _n4 = bytes.b;\n\t\t\t\t\t\tvar x2 = _n4.a;\n\t\t\t\t\t\tvar _n5 = _n4.b;\n\t\t\t\t\t\tvar x1 = _n5.a;\n\t\t\t\t\t\treturn A4(ktonon$elm_word$Word$FourBytes, x3, x2, x1, 0);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar x3 = bytes.a;\n\t\t\t\t\tvar _n6 = bytes.b;\n\t\t\t\t\tvar x2 = _n6.a;\n\t\t\t\t\treturn A4(ktonon$elm_word$Word$FourBytes, x3, x2, 0, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar x3 = bytes.a;\n\t\t\t\treturn A4(ktonon$elm_word$Word$FourBytes, x3, 0, 0, 0);\n\t\t\t}\n\t\t} else {\n\t\t\tbreak _n0$4;\n\t\t}\n\t}\n\treturn A4(ktonon$elm_word$Word$FourBytes, 0, 0, 0, 0);\n};\nvar ktonon$elm_word$Word$accWords = F3(\n\tfunction (wordSize, bytes, acc) {\n\t\taccWords:\n\t\twhile (true) {\n\t\t\tvar _n0 = _Utils_Tuple2(wordSize, bytes);\n\t\t\t_n0$2:\n\t\t\twhile (true) {\n\t\t\t\tif (_n0.a.$ === 'Bit32') {\n\t\t\t\t\tif (_n0.b.b) {\n\t\t\t\t\t\tif ((_n0.b.b.b && _n0.b.b.b.b) && _n0.b.b.b.b.b) {\n\t\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\t\tvar x3 = _n2.a;\n\t\t\t\t\t\t\tvar _n3 = _n2.b;\n\t\t\t\t\t\t\tvar x2 = _n3.a;\n\t\t\t\t\t\t\tvar _n4 = _n3.b;\n\t\t\t\t\t\t\tvar x1 = _n4.a;\n\t\t\t\t\t\t\tvar _n5 = _n4.b;\n\t\t\t\t\t\t\tvar x0 = _n5.a;\n\t\t\t\t\t\t\tvar rest = _n5.b;\n\t\t\t\t\t\t\tvar acc2 = A2(\n\t\t\t\t\t\t\t\telm$core$Array$push,\n\t\t\t\t\t\t\t\tktonon$elm_word$Word$W(\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tA4(ktonon$elm_word$Word$FourBytes, x3, x2, x1, x0))),\n\t\t\t\t\t\t\t\tacc);\n\t\t\t\t\t\t\tvar $temp$wordSize = wordSize,\n\t\t\t\t\t\t\t\t$temp$bytes = rest,\n\t\t\t\t\t\t\t\t$temp$acc = acc2;\n\t\t\t\t\t\t\twordSize = $temp$wordSize;\n\t\t\t\t\t\t\tbytes = $temp$bytes;\n\t\t\t\t\t\t\tacc = $temp$acc;\n\t\t\t\t\t\t\tcontinue accWords;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n15 = _n0.a;\n\t\t\t\t\t\t\tvar rest = _n0.b;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$Array$push,\n\t\t\t\t\t\t\t\tktonon$elm_word$Word$W(\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$pad4(rest))),\n\t\t\t\t\t\t\t\tacc);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (_n0.b.b) {\n\t\t\t\t\t\tif ((((((_n0.b.b.b && _n0.b.b.b.b) && _n0.b.b.b.b.b) && _n0.b.b.b.b.b.b) && _n0.b.b.b.b.b.b.b) && _n0.b.b.b.b.b.b.b.b) && _n0.b.b.b.b.b.b.b.b.b) {\n\t\t\t\t\t\t\tvar _n6 = _n0.a;\n\t\t\t\t\t\t\tvar _n7 = _n0.b;\n\t\t\t\t\t\t\tvar x7 = _n7.a;\n\t\t\t\t\t\t\tvar _n8 = _n7.b;\n\t\t\t\t\t\t\tvar x6 = _n8.a;\n\t\t\t\t\t\t\tvar _n9 = _n8.b;\n\t\t\t\t\t\t\tvar x5 = _n9.a;\n\t\t\t\t\t\t\tvar _n10 = _n9.b;\n\t\t\t\t\t\t\tvar x4 = _n10.a;\n\t\t\t\t\t\t\tvar _n11 = _n10.b;\n\t\t\t\t\t\t\tvar x3 = _n11.a;\n\t\t\t\t\t\t\tvar _n12 = _n11.b;\n\t\t\t\t\t\t\tvar x2 = _n12.a;\n\t\t\t\t\t\t\tvar _n13 = _n12.b;\n\t\t\t\t\t\t\tvar x1 = _n13.a;\n\t\t\t\t\t\t\tvar _n14 = _n13.b;\n\t\t\t\t\t\t\tvar x0 = _n14.a;\n\t\t\t\t\t\t\tvar rest = _n14.b;\n\t\t\t\t\t\t\tvar acc2 = A2(\n\t\t\t\t\t\t\t\telm$core$Array$push,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$D,\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tA4(ktonon$elm_word$Word$FourBytes, x7, x6, x5, x4)),\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tA4(ktonon$elm_word$Word$FourBytes, x3, x2, x1, x0))),\n\t\t\t\t\t\t\t\tacc);\n\t\t\t\t\t\t\tvar $temp$wordSize = wordSize,\n\t\t\t\t\t\t\t\t$temp$bytes = rest,\n\t\t\t\t\t\t\t\t$temp$acc = acc2;\n\t\t\t\t\t\t\twordSize = $temp$wordSize;\n\t\t\t\t\t\t\tbytes = $temp$bytes;\n\t\t\t\t\t\t\tacc = $temp$acc;\n\t\t\t\t\t\t\tcontinue accWords;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n16 = _n0.a;\n\t\t\t\t\t\t\tvar rest = _n0.b;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$Array$push,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$D,\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$pad4(\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$take, 4, rest))),\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$pad4(\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$drop, 4, rest)))),\n\t\t\t\t\t\t\t\tacc);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\t});\nvar ktonon$elm_word$Word$fromBytes = F2(\n\tfunction (wordSize, bytes) {\n\t\treturn A3(ktonon$elm_word$Word$accWords, wordSize, bytes, elm$core$Array$empty);\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$digest = function (alg) {\n\treturn A2(\n\t\telm$core$Basics$composeR,\n\t\tktonon$elm_crypto$Crypto$SHA$Preprocess$preprocess(alg),\n\t\tA2(\n\t\t\telm$core$Basics$composeR,\n\t\t\tktonon$elm_word$Word$fromBytes(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Alg$wordSize(alg)),\n\t\t\tktonon$elm_crypto$Crypto$SHA$Process$chunks(alg)));\n};\nvar elm$core$String$foldr = _String_foldr;\nvar elm$core$String$toList = function (string) {\n\treturn A3(elm$core$String$foldr, elm$core$List$cons, _List_Nil, string);\n};\nvar elm$core$Bitwise$or = _Bitwise_or;\nvar ktonon$elm_word$Word$Bytes$splitUtf8 = function (x) {\n\treturn (x < 128) ? _List_fromArray(\n\t\t[x]) : ((x < 2048) ? _List_fromArray(\n\t\t[192 | ((1984 & x) >>> 6), 128 | (63 & x)]) : _List_fromArray(\n\t\t[224 | ((61440 & x) >>> 12), 128 | ((4032 & x) >>> 6), 128 | (63 & x)]));\n};\nvar ktonon$elm_word$Word$Bytes$fromUTF8 = A2(\n\telm$core$Basics$composeR,\n\telm$core$String$toList,\n\tA2(\n\t\telm$core$List$foldl,\n\t\tF2(\n\t\t\tfunction (_char, acc) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$append,\n\t\t\t\t\tacc,\n\t\t\t\t\tktonon$elm_word$Word$Bytes$splitUtf8(\n\t\t\t\t\t\telm$core$Char$toCode(_char)));\n\t\t\t}),\n\t\t_List_Nil));\nvar elm$core$Array$foldl = F3(\n\tfunction (func, baseCase, _n0) {\n\t\tvar tree = _n0.c;\n\t\tvar tail = _n0.d;\n\t\tvar helper = F2(\n\t\t\tfunction (node, acc) {\n\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\tvar subTree = node.a;\n\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, helper, acc, subTree);\n\t\t\t\t} else {\n\t\t\t\t\tvar values = node.a;\n\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, func, acc, values);\n\t\t\t\t}\n\t\t\t});\n\t\treturn A3(\n\t\t\telm$core$Elm$JsArray$foldl,\n\t\t\tfunc,\n\t\t\tA3(elm$core$Elm$JsArray$foldl, helper, baseCase, tree),\n\t\t\ttail);\n\t});\nvar ktonon$elm_word$Word$Hex$fromArray = function (toHex) {\n\treturn A2(\n\t\telm$core$Array$foldl,\n\t\tF2(\n\t\t\tfunction (val, acc) {\n\t\t\t\treturn _Utils_ap(\n\t\t\t\t\tacc,\n\t\t\t\t\ttoHex(val));\n\t\t\t}),\n\t\t'');\n};\nvar elm$core$Char$fromCode = _Char_fromCode;\nvar elm$core$String$cons = _String_cons;\nvar ktonon$elm_word$Word$Hex$fromIntAccumulator = function (x) {\n\treturn elm$core$String$cons(\n\t\telm$core$Char$fromCode(\n\t\t\t(x < 10) ? (x + 48) : ((x + 97) - 10)));\n};\nvar ktonon$elm_word$Word$Hex$fromInt = F2(\n\tfunction (charCount, value) {\n\t\treturn A3(\n\t\t\telm$core$List$foldl,\n\t\t\tfunction (i) {\n\t\t\t\treturn ktonon$elm_word$Word$Hex$fromIntAccumulator(\n\t\t\t\t\t15 & (value >>> (i * A2(elm$core$Basics$pow, 2, 2))));\n\t\t\t},\n\t\t\t'',\n\t\t\tA2(elm$core$List$range, 0, charCount - 1));\n\t});\nvar ktonon$elm_word$Word$Hex$fromWord = function (word) {\n\tswitch (word.$) {\n\t\tcase 'W':\n\t\t\tvar x = word.a;\n\t\t\treturn A2(ktonon$elm_word$Word$Hex$fromInt, 8, x);\n\t\tcase 'D':\n\t\t\tvar h = word.a;\n\t\t\tvar l = word.b;\n\t\t\treturn _Utils_ap(\n\t\t\t\tA2(ktonon$elm_word$Word$Hex$fromInt, 8, h),\n\t\t\t\tA2(ktonon$elm_word$Word$Hex$fromInt, 8, l));\n\t\tdefault:\n\t\t\treturn 'M';\n\t}\n};\nvar ktonon$elm_word$Word$Hex$fromWordArray = ktonon$elm_word$Word$Hex$fromArray(ktonon$elm_word$Word$Hex$fromWord);\nvar ktonon$elm_crypto$Crypto$Hash$sha256 = function (message) {\n\treturn ktonon$elm_word$Word$Hex$fromWordArray(\n\t\tA2(\n\t\t\tktonon$elm_crypto$Crypto$SHA$digest,\n\t\t\tktonon$elm_crypto$Crypto$SHA$Alg$SHA256,\n\t\t\tktonon$elm_word$Word$Bytes$fromUTF8(message)));\n};\nvar author$project$Pages$Profile$Security$passwordEncoder = F2(\n\tfunction (oldP, newP) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'oldPassword',\n\t\t\t\t\telm$json$Json$Encode$string(\n\t\t\t\t\t\tktonon$elm_crypto$Crypto$Hash$sha256(oldP))),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'newPassword',\n\t\t\t\t\telm$json$Json$Encode$string(\n\t\t\t\t\t\tktonon$elm_crypto$Crypto$Hash$sha256(newP)))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Profile$Security$changePassword = function (model) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tA2(author$project$Pages$Profile$Security$passwordEncoder, model.password, model.newPassword)),\n\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Profile$Security$PasswordResponse),\n\t\t\theaders: _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$http$Http$header, 'auth', model.user.token)\n\t\t\t\t]),\n\t\t\tmethod: 'PATCH',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/account/password'\n\t\t});\n};\nvar author$project$Pages$Profile$Security$DeleteResponse = function (a) {\n\treturn {$: 'DeleteResponse', a: a};\n};\nvar author$project$Pages$Profile$Security$deleteEncoder = function (password) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'password',\n\t\t\t\telm$json$Json$Encode$string(\n\t\t\t\t\tktonon$elm_crypto$Crypto$Hash$sha256(password)))\n\t\t\t]));\n};\nvar author$project$Pages$Profile$Security$deleteAccount = function (model) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$Profile$Security$deleteEncoder(model.password)),\n\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Profile$Security$DeleteResponse),\n\t\t\theaders: _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$http$Http$header, 'auth', model.user.token)\n\t\t\t\t]),\n\t\t\tmethod: 'DELETE',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/account/delete'\n\t\t});\n};\nvar author$project$Pages$Profile$Security$MailResponse = function (a) {\n\treturn {$: 'MailResponse', a: a};\n};\nvar author$project$Pages$Profile$Security$requestMail = function (email) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Profile$Security$MailResponse),\n\t\t\turl: author$project$Server$url + ('/mailer/send' + ('?mail=' + email))\n\t\t});\n};\nvar author$project$Pages$Profile$Security$VerifyResponse = function (a) {\n\treturn {$: 'VerifyResponse', a: a};\n};\nvar author$project$Pages$Profile$Security$verifyCode = function (model) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$emptyBody,\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$Profile$Security$VerifyResponse,\n\t\t\t\tA2(elm$json$Json$Decode$field, 'response', elm$json$Json$Decode$bool)),\n\t\t\theaders: _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$http$Http$header, 'auth', model.user.token)\n\t\t\t\t]),\n\t\t\tmethod: 'GET',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + ('/account/verify' + ('?username=' + (model.user.username + ('&code=' + model.code))))\n\t\t});\n};\nvar elm$core$Maybe$destruct = F3(\n\tfunction (_default, func, maybe) {\n\t\tif (maybe.$ === 'Just') {\n\t\t\tvar a = maybe.a;\n\t\t\treturn func(a);\n\t\t} else {\n\t\t\treturn _default;\n\t\t}\n\t});\nvar elm$json$Json$Encode$null = _Json_encodeNull;\nvar author$project$User$storeToken = _Platform_outgoingPort(\n\t'storeToken',\n\tfunction ($) {\n\t\treturn A3(elm$core$Maybe$destruct, elm$json$Json$Encode$null, elm$json$Json$Encode$string, $);\n\t});\nvar author$project$User$logout = author$project$User$storeToken(elm$core$Maybe$Nothing);\nvar elm$browser$Browser$Navigation$reload = _Browser_reload(false);\nvar author$project$Pages$Profile$Security$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Request':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Pages$Profile$Security$requestMail(model.user.email));\n\t\t\tcase 'Verify':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Pages$Profile$Security$verifyCode(model));\n\t\t\tcase 'VerifyResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar bool = response.a;\n\t\t\t\t\tif (bool) {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{codeStatus: author$project$Pages$Profile$Security$Success}),\n\t\t\t\t\t\t\telm$browser$Browser$Navigation$reload);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{codeStatus: author$project$Pages$Profile$Security$Failure}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{codeStatus: author$project$Pages$Profile$Security$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'MailResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{mailStatus: author$project$Pages$Profile$Security$Success}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{mailStatus: author$project$Pages$Profile$Security$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Code':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{code: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Password':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{password: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'NewPassword':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{newPassword: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Delete':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{delStatus: author$project$Pages$Profile$Security$Loading}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'ConfirmDelete':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Pages$Profile$Security$deleteAccount(model));\n\t\t\tcase 'ChangePassword':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Pages$Profile$Security$changePassword(model));\n\t\t\tcase 'PasswordResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{passStatus: author$project$Pages$Profile$Security$Success}),\n\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tauthor$project$User$logout,\n\t\t\t\t\t\t\t\t\telm$browser$Browser$Navigation$reload,\n\t\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/sign_in')\n\t\t\t\t\t\t\t\t])));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{passStatus: author$project$Pages$Profile$Security$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{delStatus: author$project$Pages$Profile$Security$Success}),\n\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tauthor$project$User$logout,\n\t\t\t\t\t\t\t\t\telm$browser$Browser$Navigation$reload,\n\t\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/')\n\t\t\t\t\t\t\t\t])));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{delStatus: author$project$Pages$Profile$Security$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$Profile$Settings$getModel = function (_n0) {\n\tvar model = _n0.a;\n\tvar cmd = _n0.b;\n\treturn model;\n};\nvar author$project$Pages$Profile$Settings$Model = F6(\n\tfunction (user, bio, facebook, twitter, github, warning) {\n\t\treturn {bio: bio, facebook: facebook, github: github, twitter: twitter, user: user, warning: warning};\n\t});\nvar author$project$Social$getLink = function (link) {\n\tif (link.$ === 'Nothing') {\n\t\treturn '';\n\t} else {\n\t\tvar url = link.a;\n\t\treturn url;\n\t}\n};\nvar author$project$Pages$Profile$Settings$init = function (user) {\n\treturn _Utils_Tuple2(\n\t\tA6(\n\t\t\tauthor$project$Pages$Profile$Settings$Model,\n\t\t\tuser,\n\t\t\tuser.bio,\n\t\t\tauthor$project$Social$getLink(user.facebook),\n\t\t\tauthor$project$Social$getLink(user.twitter),\n\t\t\tauthor$project$Social$getLink(user.github),\n\t\t\t_List_Nil),\n\t\telm$core$Platform$Cmd$none);\n};\nvar author$project$Pages$Profile$Settings$UpdateResponse = function (a) {\n\treturn {$: 'UpdateResponse', a: a};\n};\nvar author$project$Pages$Profile$Settings$settingsEncoder = function (model) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'facebook',\n\t\t\t\telm$json$Json$Encode$string(model.facebook)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'twitter',\n\t\t\t\telm$json$Json$Encode$string(model.twitter)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'github',\n\t\t\t\telm$json$Json$Encode$string(model.github)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'bio',\n\t\t\t\telm$json$Json$Encode$string(model.bio))\n\t\t\t]));\n};\nvar author$project$Pages$Profile$Settings$patch = F2(\n\tfunction (model, token) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tauthor$project$Pages$Profile$Settings$settingsEncoder(model)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Profile$Settings$UpdateResponse),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', token)\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/account/update'\n\t\t\t});\n\t});\nvar author$project$Social$validate = F2(\n\tfunction (url, social) {\n\t\treturn ((A2(elm$core$String$startsWith, 'http', url) && (A2(elm$core$String$contains, social, url) && A2(elm$core$String$contains, '.com', url))) || (url === '')) ? true : false;\n\t});\nvar author$project$Pages$Profile$Settings$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'UpdateResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$browser$Browser$Navigation$reload);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Bio':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{bio: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Facebook':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{facebook: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Twitter':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{twitter: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Github':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{github: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tdefault:\n\t\t\t\treturn (A2(author$project$Social$validate, model.facebook, 'facebook') && (A2(author$project$Social$validate, model.twitter, 'twitter') && A2(author$project$Social$validate, model.github, 'github'))) ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: _List_Nil}),\n\t\t\t\t\tA2(author$project$Pages$Profile$Settings$patch, model, model.user.token)) : _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twarning: A2(elm$core$List$cons, 'Invalid social network link', _List_Nil)\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t}\n\t});\nvar elm$file$File$Select$file = F2(\n\tfunction (mimes, toMsg) {\n\t\treturn A2(\n\t\t\telm$core$Task$perform,\n\t\t\ttoMsg,\n\t\t\t_File_uploadOne(mimes));\n\t});\nvar author$project$Pages$Profile$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'SwitchInformation':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{tab: author$project$Pages$Profile$Information}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'SwitchSettings':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttab: author$project$Pages$Profile$Settings(\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Settings$getModel(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Settings$init(model.user)))\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'SwitchSecurity':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttab: author$project$Pages$Profile$Security(\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Security$getModel(\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Profile$Security$init, model.key, model.user)))\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'SwitchHistory':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttab: author$project$Pages$Profile$History(\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$History$getModel(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$History$init(model.user)))\n\t\t\t\t\t\t}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Platform$Cmd$map,\n\t\t\t\t\t\tauthor$project$Pages$Profile$HistoryMsg,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$History$get, model.user.username, 5)));\n\t\t\tcase 'SwitchFavorites':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttab: author$project$Pages$Profile$Favorites(\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Favorites$getModel(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Favorites$init(model.user)))\n\t\t\t\t\t\t}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Platform$Cmd$map,\n\t\t\t\t\t\tauthor$project$Pages$Profile$FavoritesMsg,\n\t\t\t\t\t\tauthor$project$Pages$Profile$Favorites$getFavs(model.fragment)));\n\t\t\tcase 'SettingsMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n1 = model.tab;\n\t\t\t\tif (_n1.$ === 'Settings') {\n\t\t\t\t\tvar sett = _n1.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Pages$Profile$stepSettings,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$Settings$update, mesg, sett));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'SecurityMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n2 = model.tab;\n\t\t\t\tif (_n2.$ === 'Security') {\n\t\t\t\t\tvar sec = _n2.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Pages$Profile$stepSecurity,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$Security$update, mesg, sec));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'HistoryMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n3 = model.tab;\n\t\t\t\tif (_n3.$ === 'History') {\n\t\t\t\t\tvar hist = _n3.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Pages$Profile$stepHistory,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$History$update, mesg, hist));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'FavoritesMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n4 = model.tab;\n\t\t\t\tif (_n4.$ === 'Favorites') {\n\t\t\t\t\tvar fav = _n4.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Pages$Profile$stepFavorites,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$Favorites$update, mesg, fav));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Select':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$file$File$Select$file,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t['image/*']),\n\t\t\t\t\t\tauthor$project$Pages$Profile$GotFile));\n\t\t\tcase 'GotFile':\n\t\t\t\tvar file = msg.a;\n\t\t\t\tvar username = model.user.username;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Profile$put, file, username));\n\t\t\tcase 'AvatarResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$browser$Browser$Navigation$reload);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar user = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{status: author$project$Pages$Profile$Success, user: user}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{status: author$project$Pages$Profile$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'LoadMore':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Profile$getPosts, model.user.username, 0));\n\t\t\tdefault:\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar posts = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpostsStatus: author$project$Pages$Profile$SuccessPosts(posts)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{postsStatus: author$project$Pages$Profile$FailurePosts}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$Results$FailureImage = {$: 'FailureImage'};\nvar author$project$Pages$Results$FailureUser = {$: 'FailureUser'};\nvar author$project$Pages$Results$SuccessImage = function (a) {\n\treturn {$: 'SuccessImage', a: a};\n};\nvar author$project$Pages$Results$SuccessUser = function (a) {\n\treturn {$: 'SuccessUser', a: a};\n};\nvar author$project$Pages$Results$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'ImageResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar images = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\timageStatus: author$project$Pages$Results$SuccessImage(images)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{imageStatus: author$project$Pages$Results$FailureImage}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar users = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tuserStatus: author$project$Pages$Results$SuccessUser(users)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{userStatus: author$project$Pages$Results$FailureUser}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$SignIn$Failure = function (a) {\n\treturn {$: 'Failure', a: a};\n};\nvar author$project$Pages$SignIn$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$SignIn$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$SignIn$encodeLogin = function (model) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'username',\n\t\t\t\telm$json$Json$Encode$string(model.name)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'password',\n\t\t\t\telm$json$Json$Encode$string(\n\t\t\t\t\tktonon$elm_crypto$Crypto$Hash$sha256(model.password)))\n\t\t\t]));\n};\nvar author$project$Pages$SignIn$login = function (model) {\n\treturn elm$http$Http$post(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$SignIn$encodeLogin(model)),\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$SignIn$Response, author$project$User$decodeUser),\n\t\t\turl: author$project$Server$url + '/account/sign_in'\n\t\t});\n};\nvar author$project$Session$Update = function (a) {\n\treturn {$: 'Update', a: a};\n};\nvar author$project$User$encodeForStorage = function (user) {\n\treturn author$project$User$storeToken(\n\t\telm$core$Maybe$Just(user.token));\n};\nvar author$project$Pages$SignIn$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple3(model, elm$core$Platform$Cmd$none, author$project$Session$NoUpdate);\n\t\t\tcase 'Name':\n\t\t\t\tvar name = msg.a;\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{name: name}),\n\t\t\t\t\telm$core$Platform$Cmd$none,\n\t\t\t\t\tauthor$project$Session$NoUpdate);\n\t\t\tcase 'Password':\n\t\t\t\tvar password = msg.a;\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{password: password}),\n\t\t\t\t\telm$core$Platform$Cmd$none,\n\t\t\t\t\tauthor$project$Session$NoUpdate);\n\t\t\tcase 'Submit':\n\t\t\t\treturn (model.name === '') ? _Utils_Tuple3(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter your username'}),\n\t\t\t\t\telm$core$Platform$Cmd$none,\n\t\t\t\t\tauthor$project$Session$NoUpdate) : ((model.password === '') ? _Utils_Tuple3(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter your password'}),\n\t\t\t\t\telm$core$Platform$Cmd$none,\n\t\t\t\t\tauthor$project$Session$NoUpdate) : _Utils_Tuple3(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{status: author$project$Pages$SignIn$Loading, warning: 'Loading'}),\n\t\t\t\t\tauthor$project$Pages$SignIn$login(model),\n\t\t\t\t\tauthor$project$Session$NoUpdate));\n\t\t\tdefault:\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar user = response.a;\n\t\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignIn$Success('')\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/'),\n\t\t\t\t\t\t\t\t\tauthor$project$User$encodeForStorage(user)\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Session$Update(user));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignIn$Failure(log)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none,\n\t\t\t\t\t\tauthor$project$Session$NoUpdate);\n\t\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$SignUp$Failure = function (a) {\n\treturn {$: 'Failure', a: a};\n};\nvar author$project$Pages$SignUp$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$SignUp$EmailResponse = function (a) {\n\treturn {$: 'EmailResponse', a: a};\n};\nvar author$project$Pages$SignUp$emailEncoder = function (email) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'email',\n\t\t\t\telm$json$Json$Encode$string(email))\n\t\t\t]));\n};\nvar author$project$Pages$SignUp$checkEmail = function (email) {\n\treturn elm$http$Http$post(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$SignUp$emailEncoder(email)),\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$SignUp$EmailResponse,\n\t\t\t\tA2(elm$json$Json$Decode$field, 'response', elm$json$Json$Decode$string)),\n\t\t\turl: author$project$Server$url + '/account/validate'\n\t\t});\n};\nvar author$project$Pages$SignUp$UsernameResponse = function (a) {\n\treturn {$: 'UsernameResponse', a: a};\n};\nvar author$project$Pages$SignUp$usernameEncoder = function (name) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'username',\n\t\t\t\telm$json$Json$Encode$string(name))\n\t\t\t]));\n};\nvar author$project$Pages$SignUp$checkUsername = function (username) {\n\treturn elm$http$Http$post(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$SignUp$usernameEncoder(username)),\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$SignUp$UsernameResponse,\n\t\t\t\tA2(elm$json$Json$Decode$field, 'response', elm$json$Json$Decode$string)),\n\t\t\turl: author$project$Server$url + '/account/validate'\n\t\t});\n};\nvar author$project$Pages$SignUp$len = function (pass) {\n\treturn (elm$core$String$length(pass) > 6) ? true : false;\n};\nvar author$project$Pages$SignUp$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$SignUp$userEncoder = function (model) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'username',\n\t\t\t\telm$json$Json$Encode$string(model.name)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'password',\n\t\t\t\telm$json$Json$Encode$string(\n\t\t\t\t\tktonon$elm_crypto$Crypto$Hash$sha256(model.password))),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'email',\n\t\t\t\telm$json$Json$Encode$string(model.email))\n\t\t\t]));\n};\nvar author$project$Pages$SignUp$post = function (model) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$SignUp$userEncoder(model)),\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$SignUp$Response,\n\t\t\t\tA2(elm$json$Json$Decode$field, 'response', elm$json$Json$Decode$string)),\n\t\t\theaders: _List_Nil,\n\t\t\tmethod: 'POST',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/account/sign_up'\n\t\t});\n};\nvar elm$core$String$fromChar = function (_char) {\n\treturn A2(elm$core$String$cons, _char, '');\n};\nvar tricycle$elm_email$Email$parseDomain = A2(\n\telm$parser$Parser$andThen,\n\tfunction (a) {\n\t\treturn (elm$core$String$length(a) < 1) ? elm$parser$Parser$problem('Domain has to be atleast 1 character long.') : elm$parser$Parser$succeed(a);\n\t},\n\telm$parser$Parser$getChompedString(\n\t\tA2(\n\t\t\telm$parser$Parser$ignorer,\n\t\t\telm$parser$Parser$succeed(_Utils_Tuple0),\n\t\t\telm$parser$Parser$chompWhile(\n\t\t\t\tfunction (a) {\n\t\t\t\t\treturn (elm$core$Char$isAlphaNum(a) || _Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('-'))) && ((!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('@'))) && (!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('.'))));\n\t\t\t\t}))));\nvar elm$core$String$endsWith = _String_endsWith;\nvar tricycle$elm_email$Email$parseLocalPart = A2(\n\telm$parser$Parser$andThen,\n\tfunction (localPart) {\n\t\treturn (A2(elm$core$String$startsWith, '.', localPart) || (A2(elm$core$String$endsWith, '.', localPart) || (!_Utils_eq(\n\t\t\tA2(elm$core$String$indexes, '..', localPart),\n\t\t\t_List_Nil)))) ? elm$parser$Parser$problem('localPart can\\'t start or end with a dot, nor can there be double dots') : elm$parser$Parser$succeed(localPart);\n\t},\n\telm$parser$Parser$getChompedString(\n\t\tA2(\n\t\t\telm$parser$Parser$ignorer,\n\t\t\telm$parser$Parser$succeed(_Utils_Tuple0),\n\t\t\telm$parser$Parser$chompWhile(\n\t\t\t\tfunction (a) {\n\t\t\t\t\treturn (!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('+'))) && ((!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('@'))) && ((!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('\\\\'))) && (!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('\\\"')))));\n\t\t\t\t}))));\nvar tricycle$elm_email$Email$parseTld = A2(\n\telm$parser$Parser$andThen,\n\tfunction (a) {\n\t\treturn (elm$core$String$length(a) >= 2) ? elm$parser$Parser$succeed(a) : elm$parser$Parser$problem('Tld needs to be at least 2 character long.');\n\t},\n\telm$parser$Parser$getChompedString(\n\t\tA2(\n\t\t\telm$parser$Parser$ignorer,\n\t\t\telm$parser$Parser$succeed(_Utils_Tuple0),\n\t\t\telm$parser$Parser$chompWhile(\n\t\t\t\tfunction (a) {\n\t\t\t\t\treturn elm$core$Char$isUpper(a) || elm$core$Char$isLower(a);\n\t\t\t\t}))));\nvar tricycle$elm_email$Email$parseEmail = function () {\n\tvar split = F2(\n\t\tfunction (_char, parser) {\n\t\t\treturn A2(\n\t\t\t\telm$parser$Parser$loop,\n\t\t\t\t_List_Nil,\n\t\t\t\tfunction (r) {\n\t\t\t\t\treturn elm$parser$Parser$oneOf(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(\n\t\t\t\t\t\t\t\t\t\tfunction (tld) {\n\t\t\t\t\t\t\t\t\t\t\treturn elm$parser$Parser$Loop(\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$cons, tld, r));\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol(\n\t\t\t\t\t\t\t\t\t\telm$core$String$fromChar(_char))),\n\t\t\t\t\t\t\t\tparser),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\t\t\treturn elm$parser$Parser$Done(\n\t\t\t\t\t\t\t\t\t\telm$core$List$reverse(r));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\telm$parser$Parser$succeed(_Utils_Tuple0))\n\t\t\t\t\t\t\t]));\n\t\t\t\t});\n\t\t});\n\treturn A2(\n\t\telm$parser$Parser$keeper,\n\t\tA2(\n\t\t\telm$parser$Parser$keeper,\n\t\t\tA2(\n\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\telm$parser$Parser$succeed(\n\t\t\t\t\t\tF4(\n\t\t\t\t\t\t\tfunction (localPart, tags, domain, tlds) {\n\t\t\t\t\t\t\t\tvar fullLocalPart = A2(\n\t\t\t\t\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tlocalPart,\n\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\tif (!tags.b) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn '+' + A2(elm$core$String$join, '+', tags);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\treturn (elm$core$String$length(fullLocalPart) > 64) ? elm$core$Maybe$Nothing : ((elm$core$List$length(tlds) < 1) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(\n\t\t\t\t\t\t\t\t\t{domain: domain, localPart: localPart, tags: tags, tld: tlds}));\n\t\t\t\t\t\t\t})),\n\t\t\t\t\ttricycle$elm_email$Email$parseLocalPart),\n\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tsplit,\n\t\t\t\t\t\t_Utils_chr('+'),\n\t\t\t\t\t\ttricycle$elm_email$Email$parseLocalPart),\n\t\t\t\t\telm$parser$Parser$symbol('@'))),\n\t\t\ttricycle$elm_email$Email$parseDomain),\n\t\tA2(\n\t\t\telm$parser$Parser$ignorer,\n\t\t\tA2(\n\t\t\t\tsplit,\n\t\t\t\t_Utils_chr('.'),\n\t\t\t\ttricycle$elm_email$Email$parseTld),\n\t\t\telm$parser$Parser$end));\n}();\nvar tricycle$elm_email$Email$fromString = function (string) {\n\tvar _n0 = A2(elm$parser$Parser$run, tricycle$elm_email$Email$parseEmail, string);\n\tif (_n0.$ === 'Ok') {\n\t\tvar result = _n0.a;\n\t\treturn result;\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar author$project$Pages$SignUp$validateEmail = function (email) {\n\treturn tricycle$elm_email$Email$fromString(email);\n};\nvar author$project$Pages$SignUp$validatePassword = F2(\n\tfunction (pass, passAgain) {\n\t\treturn (_Utils_eq(pass, passAgain) && (passAgain !== '')) ? true : false;\n\t});\nvar author$project$Pages$SignUp$validateUsername = function (name) {\n\treturn (name !== '') ? true : false;\n};\nvar author$project$Pages$SignUp$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Name':\n\t\t\t\tvar name = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{name: name}),\n\t\t\t\t\tauthor$project$Pages$SignUp$checkUsername(name));\n\t\t\tcase 'Password':\n\t\t\t\tvar password = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{password: password}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'PasswordAgain':\n\t\t\t\tvar password = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{passwordAgain: password}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Email':\n\t\t\t\tvar email = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{email: email}),\n\t\t\t\t\tauthor$project$Pages$SignUp$checkEmail(email));\n\t\t\tcase 'Warning':\n\t\t\t\tvar error = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: error}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Submit':\n\t\t\t\treturn (model.name === '') ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter your username'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : ((!author$project$Pages$SignUp$validateUsername(model.name)) ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Username must be longer'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : (model.errorUsername ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Username is already taken'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : (_Utils_eq(\n\t\t\t\t\tauthor$project$Pages$SignUp$validateEmail(model.email),\n\t\t\t\t\telm$core$Maybe$Nothing) ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter a valid e-mail address'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : (model.errorEmail ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'E-mail is already taken'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : ((model.password === '') ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter your password'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : ((!author$project$Pages$SignUp$len(model.password)) ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Password is too short'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : ((model.passwordAgain === '') ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter your password again'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : ((!A2(author$project$Pages$SignUp$validatePassword, model.password, model.passwordAgain)) ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Passwords do not match'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{status: author$project$Pages$SignUp$Loading, warning: 'Loading'}),\n\t\t\t\t\tauthor$project$Pages$SignUp$post(model))))))))));\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar string = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignUp$Success(string)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/sign_in'));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignUp$Failure(log)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'UsernameResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar string = response.a;\n\t\t\t\t\tif (string === 'OK') {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{errorUsername: true}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{errorUsername: false}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignUp$Failure(log)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'EmailResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar string = response.a;\n\t\t\t\t\tif (string === 'OK') {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{errorEmail: true}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{errorEmail: false}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignUp$Failure(log)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tvar code = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{verification: code}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t}\n\t});\nvar author$project$Pages$Tags$Failure = function (a) {\n\treturn {$: 'Failure', a: a};\n};\nvar author$project$Pages$Tags$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar elm$json$Json$Decode$at = F2(\n\tfunction (fields, decoder) {\n\t\treturn A3(elm$core$List$foldr, elm$json$Json$Decode$field, decoder, fields);\n\t});\nvar author$project$Query$decodePage = function (json) {\n\tvar _n0 = A2(\n\t\telm$json$Json$Decode$decodeValue,\n\t\tA2(\n\t\t\telm$json$Json$Decode$at,\n\t\t\t_List_fromArray(\n\t\t\t\t['page']),\n\t\t\telm$json$Json$Decode$int),\n\t\tjson);\n\tif (_n0.$ === 'Err') {\n\t\treturn 1;\n\t} else {\n\t\tvar a = _n0.a;\n\t\treturn a;\n\t}\n};\nvar author$project$Query$decodeQuery = function (json) {\n\tvar _n0 = A2(\n\t\telm$json$Json$Decode$decodeValue,\n\t\tA2(\n\t\t\telm$json$Json$Decode$at,\n\t\t\t_List_fromArray(\n\t\t\t\t['query']),\n\t\t\telm$json$Json$Decode$string),\n\t\tjson);\n\tif (_n0.$ === 'Err') {\n\t\treturn '';\n\t} else {\n\t\tvar a = _n0.a;\n\t\treturn a;\n\t}\n};\nvar author$project$Query$request = _Platform_outgoingPort(\n\t'request',\n\tfunction ($) {\n\t\treturn elm$json$Json$Encode$null;\n\t});\nvar author$project$Pages$Tags$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Request':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Query$request(_Utils_Tuple0));\n\t\t\tcase 'Jump':\n\t\t\t\tvar _int = msg.a;\n\t\t\t\treturn (model.query === '') ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: _int, status: author$project$Pages$Tags$Loading}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: _int}),\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(author$project$Pages$Tags$getImages, model.query, _int),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\t\t\treturn author$project$Pages$Tags$Empty;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)),\n\t\t\t\t\t\t\t\tauthor$project$Query$saveState(\n\t\t\t\t\t\t\t\tA2(author$project$Query$encode, model.query, _int))\n\t\t\t\t\t\t\t])));\n\t\t\tcase 'Query':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn (string === '') ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: 1, query: string, status: author$project$Pages$Tags$Loading}),\n\t\t\t\t\tauthor$project$Query$saveState(\n\t\t\t\t\t\tA2(author$project$Query$encode, string, model.page))) : _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: 1, query: string}),\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(author$project$Pages$Tags$getImages, string, model.page),\n\t\t\t\t\t\t\t\tauthor$project$Query$saveState(\n\t\t\t\t\t\t\t\tA2(author$project$Query$encode, string, model.page))\n\t\t\t\t\t\t\t])));\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar container = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Tags$Success(container)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Tags$Failure('Connection error')\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tvar value = msg.a;\n\t\t\t\tif (value.$ === 'Nothing') {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar json = value.a;\n\t\t\t\t\tvar query = author$project$Query$decodeQuery(json);\n\t\t\t\t\tvar page = author$project$Query$decodePage(json);\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{page: page, query: query}),\n\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Tags$getImages, query, page),\n\t\t\t\t\t\t\t\t\tauthor$project$Query$saveState(\n\t\t\t\t\t\t\t\t\tA2(author$project$Query$encode, query, page))\n\t\t\t\t\t\t\t\t])));\n\t\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$Upload$GetPreview = function (a) {\n\treturn {$: 'GetPreview', a: a};\n};\nvar author$project$Pages$Upload$GotFiles = function (a) {\n\treturn {$: 'GotFiles', a: a};\n};\nvar author$project$Pages$Upload$Loaded = function (a) {\n\treturn {$: 'Loaded', a: a};\n};\nvar author$project$Pages$Upload$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar elm$json$Json$Encode$list = F2(\n\tfunction (func, entries) {\n\t\treturn _Json_wrap(\n\t\t\tA3(\n\t\t\t\telm$core$List$foldl,\n\t\t\t\t_Json_addEntry(func),\n\t\t\t\t_Json_emptyArray(_Utils_Tuple0),\n\t\t\t\tentries));\n\t});\nvar author$project$Pages$Upload$encodeMetadata = F2(\n\tfunction (model, id) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'title',\n\t\t\t\t\telm$json$Json$Encode$string(model.title)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'tags',\n\t\t\t\t\tA2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, model.tags)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'description',\n\t\t\t\t\telm$json$Json$Encode$string(model.description)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'id',\n\t\t\t\t\telm$json$Json$Encode$string(id))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Upload$postMetatada = F3(\n\tfunction (model, token, id) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tA2(author$project$Pages$Upload$encodeMetadata, model, id)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Upload$Response),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', token)\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'POST',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/upload/metadata'\n\t\t\t});\n\t});\nvar author$project$Pages$Upload$UploadResponse = function (a) {\n\treturn {$: 'UploadResponse', a: a};\n};\nvar author$project$Pages$Upload$put = F3(\n\tfunction (model, file, token) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$fileBody(file),\n\t\t\t\texpect: A2(\n\t\t\t\t\telm$http$Http$expectJson,\n\t\t\t\t\tauthor$project$Pages$Upload$UploadResponse,\n\t\t\t\t\tA2(elm$json$Json$Decode$field, 'response', elm$json$Json$Decode$string)),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$http$Http$header,\n\t\t\t\t\t\t'name',\n\t\t\t\t\t\telm$file$File$name(file)),\n\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', token)\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'PUT',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Just('upload'),\n\t\t\t\turl: author$project$Server$url + '/upload/image'\n\t\t\t});\n\t});\nvar elm$file$File$mime = _File_mime;\nvar elm$file$File$size = _File_size;\nvar elm$file$File$toUrl = _File_toUrl;\nvar elm$core$Basics$clamp = F3(\n\tfunction (low, high, number) {\n\t\treturn (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);\n\t});\nvar elm$http$Http$fractionSent = function (p) {\n\treturn (!p.size) ? 1 : A3(elm$core$Basics$clamp, 0, 1, p.sent / p.size);\n};\nvar author$project$Pages$Upload$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Pick':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$file$File$Select$file,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t['image/*', 'application/pdf']),\n\t\t\t\t\t\tauthor$project$Pages$Upload$GotFiles));\n\t\t\tcase 'Title':\n\t\t\t\tvar title = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{title: title}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Description':\n\t\t\t\tvar desc = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{description: desc}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'GotFiles':\n\t\t\t\tvar file = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfileSize: elm$file$File$size(file),\n\t\t\t\t\t\t\tfileStatus: author$project$Pages$Upload$Loaded(file),\n\t\t\t\t\t\t\tfraction: 0.0,\n\t\t\t\t\t\t\tmime: elm$file$File$mime(file)\n\t\t\t\t\t\t}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\tauthor$project$Pages$Upload$GetPreview,\n\t\t\t\t\t\telm$file$File$toUrl(file)));\n\t\t\tcase 'Progress':\n\t\t\t\tvar progress = msg.a;\n\t\t\t\tif (progress.$ === 'Sending') {\n\t\t\t\t\tvar f = progress.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfraction: elm$http$Http$fractionSent(f)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'GetPreview':\n\t\t\t\tvar url = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{preview: url}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Upload':\n\t\t\t\tif (model.title === '') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{warning: 'You need to choose a title for your image'}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar _n2 = model.fileStatus;\n\t\t\t\t\tif (_n2.$ === 'Loaded') {\n\t\t\t\t\t\tvar img = _n2.a;\n\t\t\t\t\t\tvar _n3 = model.user;\n\t\t\t\t\t\tif (_n3.$ === 'Just') {\n\t\t\t\t\t\t\tvar user = _n3.a;\n\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t{warning: 'Loading'}),\n\t\t\t\t\t\t\t\tA3(author$project$Pages$Upload$put, model, img, user.token));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{warning: 'Choose an image to upload'}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase 'UploadResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar id = response.a;\n\t\t\t\t\tvar _n5 = model.user;\n\t\t\t\t\tif (_n5.$ === 'Just') {\n\t\t\t\t\t\tvar user = _n5.a;\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{id: id}),\n\t\t\t\t\t\t\tA3(author$project$Pages$Upload$postMetatada, model, user.token, id));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{warning: 'Connection error, please try again later'}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar string = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/post/' + model.id));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{warning: 'Connection error, please try again later'}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'KeyHandler':\n\t\t\t\tvar keyCode = msg.a;\n\t\t\t\tif (keyCode === 13) {\n\t\t\t\t\treturn (model.tag !== '') ? _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttag: '',\n\t\t\t\t\t\t\t\ttags: A2(elm$core$List$cons, model.tag, model.tags)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none) : _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Tag':\n\t\t\t\tvar tag = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{tag: tag}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tdefault:\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{fileSize: 0, fileStatus: author$project$Pages$Upload$NotLoaded}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t}\n\t});\nvar author$project$Pages$Users$Empty = {$: 'Empty'};\nvar author$project$Pages$Users$Failure = function (a) {\n\treturn {$: 'Failure', a: a};\n};\nvar author$project$Pages$Users$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$Users$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Test':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Jump':\n\t\t\t\tvar _int = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: _int}),\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(author$project$Pages$Users$getUsers, model.query, _int),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\t\t\treturn author$project$Pages$Users$Empty;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0))\n\t\t\t\t\t\t\t])));\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar container = response.a;\n\t\t\t\t\tvar users = container.users;\n\t\t\t\t\treturn elm$core$List$isEmpty(users) ? _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Users$Failure('Query returned no results')\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none) : _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Users$Success(container)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Users$Failure('Connection error')\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Query':\n\t\t\t\tvar query = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: 1, query: query, status: author$project$Pages$Users$Loading}),\n\t\t\t\t\tA2(author$project$Pages$Users$getUsers, query, 1));\n\t\t\tdefault:\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t}\n\t});\nvar author$project$Session$set = function (model) {\n\treturn author$project$Session$Session(\n\t\telm$core$Maybe$Just(model));\n};\nvar elm$browser$Browser$Navigation$load = _Browser_load;\nvar elm$url$Url$addPort = F2(\n\tfunction (maybePort, starter) {\n\t\tif (maybePort.$ === 'Nothing') {\n\t\t\treturn starter;\n\t\t} else {\n\t\t\tvar port_ = maybePort.a;\n\t\t\treturn starter + (':' + elm$core$String$fromInt(port_));\n\t\t}\n\t});\nvar elm$url$Url$addPrefixed = F3(\n\tfunction (prefix, maybeSegment, starter) {\n\t\tif (maybeSegment.$ === 'Nothing') {\n\t\t\treturn starter;\n\t\t} else {\n\t\t\tvar segment = maybeSegment.a;\n\t\t\treturn _Utils_ap(\n\t\t\t\tstarter,\n\t\t\t\t_Utils_ap(prefix, segment));\n\t\t}\n\t});\nvar elm$url$Url$toString = function (url) {\n\tvar http = function () {\n\t\tvar _n0 = url.protocol;\n\t\tif (_n0.$ === 'Http') {\n\t\t\treturn 'http://';\n\t\t} else {\n\t\t\treturn 'https://';\n\t\t}\n\t}();\n\treturn A3(\n\t\telm$url$Url$addPrefixed,\n\t\t'#',\n\t\turl.fragment,\n\t\tA3(\n\t\t\telm$url$Url$addPrefixed,\n\t\t\t'?',\n\t\t\turl.query,\n\t\t\t_Utils_ap(\n\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$addPort,\n\t\t\t\t\turl.port_,\n\t\t\t\t\t_Utils_ap(http, url.host)),\n\t\t\t\turl.path)));\n};\nvar author$project$Main$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'UrlRequest':\n\t\t\t\tvar urlRequest = msg.a;\n\t\t\t\tif (urlRequest.$ === 'Internal') {\n\t\t\t\t\tvar url = urlRequest.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t\telm$url$Url$toString(url)));\n\t\t\t\t} else {\n\t\t\t\t\tvar url = urlRequest.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\telm$browser$Browser$Navigation$load(url));\n\t\t\t\t}\n\t\t\tcase 'UrlChange':\n\t\t\t\tvar url = msg.a;\n\t\t\t\treturn A2(author$project$Main$routeUrl, url, model);\n\t\t\tcase 'LogOut':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate: author$project$Main$Ready(author$project$Session$init)\n\t\t\t\t\t\t}),\n\t\t\t\t\tauthor$project$User$logout);\n\t\t\tcase 'UpdateSearch':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\treturn A2(\n\t\t\t\t\tauthor$project$Main$stepSearch,\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Components$SearchBar$update,\n\t\t\t\t\t\tmesg,\n\t\t\t\t\t\tauthor$project$Components$SearchBar$getModel(model.search)));\n\t\t\tcase 'SignUpMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n2 = model.page;\n\t\t\t\tif (_n2.$ === 'SignUp') {\n\t\t\t\t\tvar signup = _n2.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepSignUp,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$SignUp$update, mesg, signup));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'SignInMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n3 = model.page;\n\t\t\t\tif (_n3.$ === 'SignIn') {\n\t\t\t\t\tvar signin = _n3.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepSignIn,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$SignIn$update, mesg, signin));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'GalleryMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n4 = model.page;\n\t\t\t\tif (_n4.$ === 'Gallery') {\n\t\t\t\t\tvar gallery = _n4.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepGallery,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Gallery$update, mesg, gallery));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'UploadMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n5 = model.page;\n\t\t\t\tif (_n5.$ === 'Upload') {\n\t\t\t\t\tvar upload = _n5.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepUpload,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Upload$update, mesg, upload));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'HomeMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n6 = model.page;\n\t\t\t\tif (_n6.$ === 'Home') {\n\t\t\t\t\tvar home = _n6.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepHome,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Home$update, mesg, home));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'ProfileMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n7 = model.page;\n\t\t\t\tif (_n7.$ === 'Profile') {\n\t\t\t\t\tvar profile = _n7.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepProfile,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$update, mesg, profile));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'UsersMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n8 = model.page;\n\t\t\t\tif (_n8.$ === 'Users') {\n\t\t\t\t\tvar users = _n8.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepUsers,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Users$update, mesg, users));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'PostMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n9 = model.page;\n\t\t\t\tif (_n9.$ === 'Post') {\n\t\t\t\t\tvar post = _n9.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepPost,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Post$update, mesg, post));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'ResultsMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n10 = model.page;\n\t\t\t\tif (_n10.$ === 'Results') {\n\t\t\t\t\tvar results = _n10.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepResults,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Results$update, mesg, results));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'TagsMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n11 = model.page;\n\t\t\t\tif (_n11.$ === 'Tags') {\n\t\t\t\t\tvar tags = _n11.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepTags,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Tags$update, mesg, tags));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar user = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate: author$project$Main$Ready(\n\t\t\t\t\t\t\t\t\tauthor$project$Session$set(user))\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t\telm$url$Url$toString(model.url)));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\tif (log.$ === 'BadStatus') {\n\t\t\t\t\t\tvar code = log.a;\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstate: author$project$Main$Ready(author$project$Session$init)\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[author$project$User$logout, elm$browser$Browser$Navigation$reload])));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{state: author$project$Main$Failure}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t});\nvar elm$html$Html$div = _VirtualDom_node('div');\nvar elm$html$Html$h2 = _VirtualDom_node('h2');\nvar elm$virtual_dom$VirtualDom$text = _VirtualDom_text;\nvar elm$html$Html$text = elm$virtual_dom$VirtualDom$text;\nvar elm$virtual_dom$VirtualDom$style = _VirtualDom_style;\nvar elm$html$Html$Attributes$style = elm$virtual_dom$VirtualDom$style;\nvar author$project$Main$viewBody = F2(\n\tfunction (model, error) {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '800px'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '25%'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text(error)\n\t\t\t\t\t\t]))\n\t\t\t\t]));\n\t});\nvar elm$html$Html$a = _VirtualDom_node('a');\nvar elm$html$Html$li = _VirtualDom_node('li');\nvar elm$html$Html$ul = _VirtualDom_node('ul');\nvar elm$html$Html$Attributes$stringProperty = F2(\n\tfunction (key, string) {\n\t\treturn A2(\n\t\t\t_VirtualDom_property,\n\t\t\tkey,\n\t\t\telm$json$Json$Encode$string(string));\n\t});\nvar elm$html$Html$Attributes$class = elm$html$Html$Attributes$stringProperty('className');\nvar elm$html$Html$Attributes$href = function (url) {\n\treturn A2(\n\t\telm$html$Html$Attributes$stringProperty,\n\t\t'href',\n\t\t_VirtualDom_noJavaScriptUri(url));\n};\nvar author$project$Main$viewFooter = A2(\n\telm$html$Html$div,\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(elm$html$Html$Attributes$style, 'bottom', '0%'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'height', '100px'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'padding-top', '25px'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', '#222'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.98'),\n\t\t\telm$html$Html$Attributes$class('container-fluid text-center'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t]),\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$html$Html$ul,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('https://github.com/jaruji/Elm_project'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('© 2020 Juraj Bedej')\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t]))\n\t\t\t\t]))\n\t\t]));\nvar akoppela$elm_logo$ElmLogo$size = 100;\nvar elm$core$String$fromFloat = _String_fromNumber;\nvar elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');\nvar elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');\nvar akoppela$elm_logo$ElmLogo$attrs = function (width) {\n\treturn _List_fromArray(\n\t\t[\n\t\t\telm$svg$Svg$Attributes$width(\n\t\t\telm$core$String$fromInt(width)),\n\t\t\telm$svg$Svg$Attributes$viewBox(\n\t\t\t'0 0 ' + (elm$core$String$fromFloat(akoppela$elm_logo$ElmLogo$size) + (' ' + elm$core$String$fromFloat(akoppela$elm_logo$ElmLogo$size))))\n\t\t]);\n};\nvar elm$core$Basics$sqrt = _Basics_sqrt;\nvar akoppela$elm_logo$ElmLogo$distance = elm$core$Basics$sqrt(2);\nvar akoppela$elm_logo$ElmLogo$points = function (list) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t' ',\n\t\tA2(\n\t\t\telm$core$List$map,\n\t\t\tfunction (_n0) {\n\t\t\t\tvar fst = _n0.a;\n\t\t\t\tvar snd = _n0.b;\n\t\t\t\treturn elm$core$String$fromFloat(fst) + (',' + elm$core$String$fromFloat(snd));\n\t\t\t},\n\t\t\tlist));\n};\nvar akoppela$elm_logo$ElmLogo$shift = (2 * akoppela$elm_logo$ElmLogo$distance) / elm$core$Basics$sqrt(2);\nvar elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');\nvar elm$svg$Svg$polygon = elm$svg$Svg$trustedNode('polygon');\nvar elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');\nvar elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');\nvar akoppela$elm_logo$ElmLogo$group = _List_fromArray(\n\t[\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#5A6378'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2(0, akoppela$elm_logo$ElmLogo$shift),\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size / 2) - akoppela$elm_logo$ElmLogo$shift, akoppela$elm_logo$ElmLogo$size / 2),\n\t\t\t\t\t\t\t_Utils_Tuple2(0, akoppela$elm_logo$ElmLogo$size - akoppela$elm_logo$ElmLogo$shift)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#7FD13B'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$shift, 0),\n\t\t\t\t\t\t\t_Utils_Tuple2(((akoppela$elm_logo$ElmLogo$size / 4) + akoppela$elm_logo$ElmLogo$shift) - akoppela$elm_logo$ElmLogo$distance, (akoppela$elm_logo$ElmLogo$size / 4) - akoppela$elm_logo$ElmLogo$distance),\n\t\t\t\t\t\t\t_Utils_Tuple2((((akoppela$elm_logo$ElmLogo$size * 3) / 4) - akoppela$elm_logo$ElmLogo$shift) - akoppela$elm_logo$ElmLogo$distance, (akoppela$elm_logo$ElmLogo$size / 4) - akoppela$elm_logo$ElmLogo$distance),\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size / 2) - akoppela$elm_logo$ElmLogo$shift, 0)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#F0AD00'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2(((akoppela$elm_logo$ElmLogo$size / 4) + akoppela$elm_logo$ElmLogo$shift) + akoppela$elm_logo$ElmLogo$distance, (akoppela$elm_logo$ElmLogo$size / 4) + akoppela$elm_logo$ElmLogo$distance),\n\t\t\t\t\t\t\t_Utils_Tuple2((((akoppela$elm_logo$ElmLogo$size * 3) / 4) - akoppela$elm_logo$ElmLogo$shift) - akoppela$elm_logo$ElmLogo$distance, (akoppela$elm_logo$ElmLogo$size / 4) + akoppela$elm_logo$ElmLogo$distance),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size / 2, (akoppela$elm_logo$ElmLogo$size / 2) - akoppela$elm_logo$ElmLogo$shift)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#60B5CC'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size / 2) + akoppela$elm_logo$ElmLogo$shift, 0),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size, 0),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size, (akoppela$elm_logo$ElmLogo$size / 2) - akoppela$elm_logo$ElmLogo$shift)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#F0AD00'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size, (akoppela$elm_logo$ElmLogo$size / 2) + akoppela$elm_logo$ElmLogo$shift),\n\t\t\t\t\t\t\t_Utils_Tuple2(((akoppela$elm_logo$ElmLogo$size * 3) / 4) + akoppela$elm_logo$ElmLogo$shift, (akoppela$elm_logo$ElmLogo$size * 3) / 4),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size, akoppela$elm_logo$ElmLogo$size - akoppela$elm_logo$ElmLogo$shift)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#60B5CC'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$shift, akoppela$elm_logo$ElmLogo$size),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size / 2, (akoppela$elm_logo$ElmLogo$size / 2) + akoppela$elm_logo$ElmLogo$shift),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size - akoppela$elm_logo$ElmLogo$shift, akoppela$elm_logo$ElmLogo$size)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#7FD13B'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size / 2) + akoppela$elm_logo$ElmLogo$shift, akoppela$elm_logo$ElmLogo$size / 2),\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size * 3) / 4, (akoppela$elm_logo$ElmLogo$size / 4) + akoppela$elm_logo$ElmLogo$shift),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size - akoppela$elm_logo$ElmLogo$shift, akoppela$elm_logo$ElmLogo$size / 2),\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size * 3) / 4, ((akoppela$elm_logo$ElmLogo$size * 3) / 4) - akoppela$elm_logo$ElmLogo$shift)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil)\n\t]);\nvar elm$virtual_dom$VirtualDom$nodeNS = function (tag) {\n\treturn _VirtualDom_nodeNS(\n\t\t_VirtualDom_noScript(tag));\n};\nvar elm$svg$Svg$node = elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');\nvar akoppela$elm_logo$ElmLogo$svg = function (width) {\n\treturn A3(\n\t\telm$svg$Svg$node,\n\t\t'svg',\n\t\takoppela$elm_logo$ElmLogo$attrs(width),\n\t\takoppela$elm_logo$ElmLogo$group);\n};\nvar author$project$Components$SearchBar$KeyHandler = function (a) {\n\treturn {$: 'KeyHandler', a: a};\n};\nvar author$project$Components$SearchBar$UpdateValue = function (a) {\n\treturn {$: 'UpdateValue', a: a};\n};\nvar elm$html$Html$Events$keyCode = A2(elm$json$Json$Decode$field, 'keyCode', elm$json$Json$Decode$int);\nvar elm$virtual_dom$VirtualDom$Normal = function (a) {\n\treturn {$: 'Normal', a: a};\n};\nvar elm$virtual_dom$VirtualDom$on = _VirtualDom_on;\nvar elm$html$Html$Events$on = F2(\n\tfunction (event, decoder) {\n\t\treturn A2(\n\t\t\telm$virtual_dom$VirtualDom$on,\n\t\t\tevent,\n\t\t\telm$virtual_dom$VirtualDom$Normal(decoder));\n\t});\nvar author$project$Components$SearchBar$keyPress = function (tagger) {\n\treturn A2(\n\t\telm$html$Html$Events$on,\n\t\t'keydown',\n\t\tA2(elm$json$Json$Decode$map, tagger, elm$html$Html$Events$keyCode));\n};\nvar elm$html$Html$input = _VirtualDom_node('input');\nvar elm$html$Html$span = _VirtualDom_node('span');\nvar elm$html$Html$Attributes$placeholder = elm$html$Html$Attributes$stringProperty('placeholder');\nvar elm$html$Html$Attributes$type_ = elm$html$Html$Attributes$stringProperty('type');\nvar elm$html$Html$Attributes$value = elm$html$Html$Attributes$stringProperty('value');\nvar elm$html$Html$Events$alwaysStop = function (x) {\n\treturn _Utils_Tuple2(x, true);\n};\nvar elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {\n\treturn {$: 'MayStopPropagation', a: a};\n};\nvar elm$html$Html$Events$stopPropagationOn = F2(\n\tfunction (event, decoder) {\n\t\treturn A2(\n\t\t\telm$virtual_dom$VirtualDom$on,\n\t\t\tevent,\n\t\t\telm$virtual_dom$VirtualDom$MayStopPropagation(decoder));\n\t});\nvar elm$html$Html$Events$targetValue = A2(\n\telm$json$Json$Decode$at,\n\t_List_fromArray(\n\t\t['target', 'value']),\n\telm$json$Json$Decode$string);\nvar elm$html$Html$Events$onInput = function (tagger) {\n\treturn A2(\n\t\telm$html$Html$Events$stopPropagationOn,\n\t\t'input',\n\t\tA2(\n\t\t\telm$json$Json$Decode$map,\n\t\t\telm$html$Html$Events$alwaysStop,\n\t\t\tA2(elm$json$Json$Decode$map, tagger, elm$html$Html$Events$targetValue)));\n};\nvar author$project$Components$SearchBar$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('form-inline'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$input,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Search'),\n\t\t\t\t\t\telm$html$Html$Attributes$value(model.searchValue),\n\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Components$SearchBar$UpdateValue),\n\t\t\t\t\t\tauthor$project$Components$SearchBar$keyPress(author$project$Components$SearchBar$KeyHandler)\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$span,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'grey'),\n\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-search form-control-feedback')\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar author$project$Main$LogOut = {$: 'LogOut'};\nvar elm$html$Html$img = _VirtualDom_node('img');\nvar elm$virtual_dom$VirtualDom$map = _VirtualDom_map;\nvar elm$html$Html$map = elm$virtual_dom$VirtualDom$map;\nvar elm$virtual_dom$VirtualDom$attribute = F2(\n\tfunction (key, value) {\n\t\treturn A2(\n\t\t\t_VirtualDom_attribute,\n\t\t\t_VirtualDom_noOnOrFormAction(key),\n\t\t\t_VirtualDom_noJavaScriptOrHtmlUri(value));\n\t});\nvar elm$html$Html$Attributes$attribute = elm$virtual_dom$VirtualDom$attribute;\nvar elm$html$Html$Attributes$height = function (n) {\n\treturn A2(\n\t\t_VirtualDom_attribute,\n\t\t'height',\n\t\telm$core$String$fromInt(n));\n};\nvar elm$html$Html$Attributes$src = function (url) {\n\treturn A2(\n\t\telm$html$Html$Attributes$stringProperty,\n\t\t'src',\n\t\t_VirtualDom_noJavaScriptOrHtmlUri(url));\n};\nvar elm$html$Html$Attributes$width = function (n) {\n\treturn A2(\n\t\t_VirtualDom_attribute,\n\t\t'width',\n\t\telm$core$String$fromInt(n));\n};\nvar elm$html$Html$Events$onClick = function (msg) {\n\treturn A2(\n\t\telm$html$Html$Events$on,\n\t\t'click',\n\t\telm$json$Json$Decode$succeed(msg));\n};\nvar elm$svg$Svg$svg = elm$svg$Svg$trustedNode('svg');\nvar author$project$Main$viewHeader = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('navbar navbar-inverse navbar-fixed-top'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.95')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('container-fluid')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('navbar-header')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('navbar-brand')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$svg$Svg$svg,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$svg$Svg$Attributes$width('35'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$svg$Svg$Attributes$viewBox('0 0 35 35')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\takoppela$elm_logo$ElmLogo$svg(35)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$ul,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav navbar-nav')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/'),\n\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _n0 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\tif (_n0.$ === 'Home') {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Home')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/gallery?page=1&sort=newest'),\n\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _n1 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\tif (_n1.$ === 'Gallery') {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Gallery')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/upload'),\n\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _n2 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\tif (_n2.$ === 'Upload') {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Upload')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/users'),\n\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _n3 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\tif (_n3.$ === 'Users') {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Users')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/tags'),\n\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _n4 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\tif (_n4.$ === 'Tags') {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Tags')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\t\t\tauthor$project$Main$UpdateSearch,\n\t\t\t\t\t\t\t\t\t\tauthor$project$Components$SearchBar$view(\n\t\t\t\t\t\t\t\t\t\t\tauthor$project$Components$SearchBar$getModel(model.search)))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n5 = author$project$Main$getUser(model.state);\n\t\t\t\t\t\tif (_n5.$ === 'Nothing') {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$ul,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav navbar-nav navbar-right')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_in'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n6 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n6.$ === 'SignIn') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-user')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(' Sign In')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_up'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n7 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n7.$ === 'SignUp') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-user')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(' Sign Up')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar user = _n5.a;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$ul,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav navbar-nav navbar-right')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('avatar'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(user.avatar),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(40),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(40)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + user.username),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n8 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n8.$ === 'Profile') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(user.username)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Main$LogOut)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-log-out'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '2px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Log Out')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}()\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar perzanko$elm_loading$Loading$Circle = {$: 'Circle'};\nvar perzanko$elm_loading$Loading$On = {$: 'On'};\nvar perzanko$elm_loading$Loading$defaultConfig = {className: '', color: '#74b4c9', size: 30, speed: 1};\nvar elm$core$List$head = function (list) {\n\tif (list.b) {\n\t\tvar x = list.a;\n\t\tvar xs = list.b;\n\t\treturn elm$core$Maybe$Just(x);\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$AppendProperty = function (a) {\n\treturn {$: 'AppendProperty', a: a};\n};\nvar rtfeldman$elm_css$Css$Internal$property = F2(\n\tfunction (key, value) {\n\t\treturn rtfeldman$elm_css$Css$Preprocess$AppendProperty(key + (':' + value));\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$ApplyStyles = function (a) {\n\treturn {$: 'ApplyStyles', a: a};\n};\nvar rtfeldman$elm_css$Css$Internal$getOverloadedProperty = F3(\n\tfunction (functionName, desiredKey, style) {\n\t\tgetOverloadedProperty:\n\t\twhile (true) {\n\t\t\tswitch (style.$) {\n\t\t\t\tcase 'AppendProperty':\n\t\t\t\t\tvar str = style.a;\n\t\t\t\t\tvar key = A2(\n\t\t\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t\t\t'',\n\t\t\t\t\t\telm$core$List$head(\n\t\t\t\t\t\t\tA2(elm$core$String$split, ':', str)));\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, key);\n\t\t\t\tcase 'ExtendSelector':\n\t\t\t\t\tvar selector = style.a;\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-selector'));\n\t\t\t\tcase 'NestSnippet':\n\t\t\t\t\tvar combinator = style.a;\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-combinator'));\n\t\t\t\tcase 'WithPseudoElement':\n\t\t\t\t\tvar pseudoElement = style.a;\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-pseudo-element setter'));\n\t\t\t\tcase 'WithMedia':\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-media-query'));\n\t\t\t\tcase 'WithKeyframes':\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-keyframes'));\n\t\t\t\tdefault:\n\t\t\t\t\tif (!style.a.b) {\n\t\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-empty-Style'));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!style.a.b.b) {\n\t\t\t\t\t\t\tvar _n1 = style.a;\n\t\t\t\t\t\t\tvar only = _n1.a;\n\t\t\t\t\t\t\tvar $temp$functionName = functionName,\n\t\t\t\t\t\t\t\t$temp$desiredKey = desiredKey,\n\t\t\t\t\t\t\t\t$temp$style = only;\n\t\t\t\t\t\t\tfunctionName = $temp$functionName;\n\t\t\t\t\t\t\tdesiredKey = $temp$desiredKey;\n\t\t\t\t\t\t\tstyle = $temp$style;\n\t\t\t\t\t\t\tcontinue getOverloadedProperty;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n2 = style.a;\n\t\t\t\t\t\t\tvar first = _n2.a;\n\t\t\t\t\t\t\tvar rest = _n2.b;\n\t\t\t\t\t\t\tvar $temp$functionName = functionName,\n\t\t\t\t\t\t\t\t$temp$desiredKey = desiredKey,\n\t\t\t\t\t\t\t\t$temp$style = rtfeldman$elm_css$Css$Preprocess$ApplyStyles(rest);\n\t\t\t\t\t\t\tfunctionName = $temp$functionName;\n\t\t\t\t\t\t\tdesiredKey = $temp$desiredKey;\n\t\t\t\t\t\t\tstyle = $temp$style;\n\t\t\t\t\t\t\tcontinue getOverloadedProperty;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Internal$IncompatibleUnits = {$: 'IncompatibleUnits'};\nvar rtfeldman$elm_css$Css$Structure$Compatible = {$: 'Compatible'};\nvar rtfeldman$elm_css$Css$Internal$lengthConverter = F3(\n\tfunction (units, unitLabel, numericValue) {\n\t\treturn {\n\t\t\tabsoluteLength: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tcalc: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tflexBasis: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tfontSize: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlength: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrAuto: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrAutoOrCoverOrContain: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrMinMaxDimension: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrNone: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrNoneOrMinMaxDimension: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrNumber: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrNumberOrAutoOrNoneOrContent: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tnumericValue: numericValue,\n\t\t\ttextIndent: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tunitLabel: unitLabel,\n\t\t\tunits: units,\n\t\t\tvalue: _Utils_ap(\n\t\t\t\telm$core$String$fromFloat(numericValue),\n\t\t\t\tunitLabel)\n\t\t};\n\t});\nvar rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty = A3(rtfeldman$elm_css$Css$Internal$lengthConverter, rtfeldman$elm_css$Css$Internal$IncompatibleUnits, '', 0);\nvar rtfeldman$elm_css$Css$alignItems = function (fn) {\n\treturn A3(\n\t\trtfeldman$elm_css$Css$Internal$getOverloadedProperty,\n\t\t'alignItems',\n\t\t'align-items',\n\t\tfn(rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));\n};\nvar rtfeldman$elm_css$Css$property = F2(\n\tfunction (key, value) {\n\t\treturn rtfeldman$elm_css$Css$Preprocess$AppendProperty(key + (':' + value));\n\t});\nvar rtfeldman$elm_css$Css$prop1 = F2(\n\tfunction (key, arg) {\n\t\treturn A2(rtfeldman$elm_css$Css$property, key, arg.value);\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$WithKeyframes = function (a) {\n\treturn {$: 'WithKeyframes', a: a};\n};\nvar rtfeldman$elm_css$Css$animationName = function (arg) {\n\treturn ((arg.value === 'none') || ((arg.value === 'inherit') || ((arg.value === 'unset') || (arg.value === 'initial')))) ? A2(rtfeldman$elm_css$Css$prop1, 'animation-name', arg) : rtfeldman$elm_css$Css$Preprocess$WithKeyframes(arg.value);\n};\nvar rtfeldman$elm_css$Css$auto = {alignItemsOrAuto: rtfeldman$elm_css$Css$Structure$Compatible, cursor: rtfeldman$elm_css$Css$Structure$Compatible, flexBasis: rtfeldman$elm_css$Css$Structure$Compatible, intOrAuto: rtfeldman$elm_css$Css$Structure$Compatible, justifyContentOrAuto: rtfeldman$elm_css$Css$Structure$Compatible, lengthOrAuto: rtfeldman$elm_css$Css$Structure$Compatible, lengthOrAutoOrCoverOrContain: rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNumberOrAutoOrNoneOrContent: rtfeldman$elm_css$Css$Structure$Compatible, overflow: rtfeldman$elm_css$Css$Structure$Compatible, pointerEvents: rtfeldman$elm_css$Css$Structure$Compatible, tableLayout: rtfeldman$elm_css$Css$Structure$Compatible, textRendering: rtfeldman$elm_css$Css$Structure$Compatible, touchAction: rtfeldman$elm_css$Css$Structure$Compatible, value: 'auto'};\nvar rtfeldman$elm_css$Css$backgroundColor = function (c) {\n\treturn A2(rtfeldman$elm_css$Css$property, 'background-color', c.value);\n};\nvar rtfeldman$elm_css$Css$borderRadius = rtfeldman$elm_css$Css$prop1('border-radius');\nvar rtfeldman$elm_css$Css$flexEnd = rtfeldman$elm_css$Css$prop1('flex-end');\nvar rtfeldman$elm_css$Css$height = rtfeldman$elm_css$Css$prop1('height');\nvar rtfeldman$elm_css$Css$withPrecedingHash = function (str) {\n\treturn A2(elm$core$String$startsWith, '#', str) ? str : A2(\n\t\telm$core$String$cons,\n\t\t_Utils_chr('#'),\n\t\tstr);\n};\nvar rtfeldman$elm_css$Css$erroneousHex = function (str) {\n\treturn {\n\t\talpha: 1,\n\t\tblue: 0,\n\t\tcolor: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tgreen: 0,\n\t\tred: 0,\n\t\tvalue: rtfeldman$elm_css$Css$withPrecedingHash(str)\n\t};\n};\nvar elm$core$String$fromList = _String_fromList;\nvar elm$core$String$toLower = _String_toLower;\nvar elm$core$List$tail = function (list) {\n\tif (list.b) {\n\t\tvar x = list.a;\n\t\tvar xs = list.b;\n\t\treturn elm$core$Maybe$Just(xs);\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar rtfeldman$elm_hex$Hex$fromStringHelp = F3(\n\tfunction (position, chars, accumulated) {\n\t\tfromStringHelp:\n\t\twhile (true) {\n\t\t\tif (!chars.b) {\n\t\t\t\treturn elm$core$Result$Ok(accumulated);\n\t\t\t} else {\n\t\t\t\tvar _char = chars.a;\n\t\t\t\tvar rest = chars.b;\n\t\t\t\tswitch (_char.valueOf()) {\n\t\t\t\t\tcase '0':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated;\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '1':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + A2(elm$core$Basics$pow, 16, position);\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '2':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (2 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '3':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (3 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '4':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (4 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '5':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (5 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '6':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (6 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '7':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (7 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '8':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (8 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '9':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (9 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'a':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (10 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (11 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (12 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (13 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'e':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (14 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'f':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (15 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar nonHex = _char;\n\t\t\t\t\t\treturn elm$core$Result$Err(\n\t\t\t\t\t\t\telm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_hex$Hex$fromString = function (str) {\n\tif (elm$core$String$isEmpty(str)) {\n\t\treturn elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');\n\t} else {\n\t\tvar result = function () {\n\t\t\tif (A2(elm$core$String$startsWith, '-', str)) {\n\t\t\t\tvar list = A2(\n\t\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\telm$core$List$tail(\n\t\t\t\t\t\telm$core$String$toList(str)));\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Result$map,\n\t\t\t\t\telm$core$Basics$negate,\n\t\t\t\t\tA3(\n\t\t\t\t\t\trtfeldman$elm_hex$Hex$fromStringHelp,\n\t\t\t\t\t\telm$core$List$length(list) - 1,\n\t\t\t\t\t\tlist,\n\t\t\t\t\t\t0));\n\t\t\t} else {\n\t\t\t\treturn A3(\n\t\t\t\t\trtfeldman$elm_hex$Hex$fromStringHelp,\n\t\t\t\t\telm$core$String$length(str) - 1,\n\t\t\t\t\telm$core$String$toList(str),\n\t\t\t\t\t0);\n\t\t\t}\n\t\t}();\n\t\tvar formatError = function (err) {\n\t\t\treturn A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t' ',\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t['\\\"' + (str + '\\\"'), 'is not a valid hexadecimal string because', err]));\n\t\t};\n\t\treturn A2(elm$core$Result$mapError, formatError, result);\n\t}\n};\nvar rtfeldman$elm_css$Css$validHex = F5(\n\tfunction (str, _n0, _n1, _n2, _n3) {\n\t\tvar r1 = _n0.a;\n\t\tvar r2 = _n0.b;\n\t\tvar g1 = _n1.a;\n\t\tvar g2 = _n1.b;\n\t\tvar b1 = _n2.a;\n\t\tvar b2 = _n2.b;\n\t\tvar a1 = _n3.a;\n\t\tvar a2 = _n3.b;\n\t\tvar toResult = A2(\n\t\t\telm$core$Basics$composeR,\n\t\t\telm$core$String$fromList,\n\t\t\tA2(elm$core$Basics$composeR, elm$core$String$toLower, rtfeldman$elm_hex$Hex$fromString));\n\t\tvar results = _Utils_Tuple2(\n\t\t\t_Utils_Tuple2(\n\t\t\t\ttoResult(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[r1, r2])),\n\t\t\t\ttoResult(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[g1, g2]))),\n\t\t\t_Utils_Tuple2(\n\t\t\t\ttoResult(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[b1, b2])),\n\t\t\t\ttoResult(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a1, a2]))));\n\t\tif ((((results.a.a.$ === 'Ok') && (results.a.b.$ === 'Ok')) && (results.b.a.$ === 'Ok')) && (results.b.b.$ === 'Ok')) {\n\t\t\tvar _n5 = results.a;\n\t\t\tvar red = _n5.a.a;\n\t\t\tvar green = _n5.b.a;\n\t\t\tvar _n6 = results.b;\n\t\t\tvar blue = _n6.a.a;\n\t\t\tvar alpha = _n6.b.a;\n\t\t\treturn {\n\t\t\t\talpha: alpha / 255,\n\t\t\t\tblue: blue,\n\t\t\t\tcolor: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\t\tgreen: green,\n\t\t\t\tred: red,\n\t\t\t\tvalue: rtfeldman$elm_css$Css$withPrecedingHash(str)\n\t\t\t};\n\t\t} else {\n\t\t\treturn rtfeldman$elm_css$Css$erroneousHex(str);\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$hex = function (str) {\n\tvar withoutHash = A2(elm$core$String$startsWith, '#', str) ? A2(elm$core$String$dropLeft, 1, str) : str;\n\tvar _n0 = elm$core$String$toList(withoutHash);\n\t_n0$4:\n\twhile (true) {\n\t\tif ((_n0.b && _n0.b.b) && _n0.b.b.b) {\n\t\t\tif (!_n0.b.b.b.b) {\n\t\t\t\tvar r = _n0.a;\n\t\t\t\tvar _n1 = _n0.b;\n\t\t\t\tvar g = _n1.a;\n\t\t\t\tvar _n2 = _n1.b;\n\t\t\t\tvar b = _n2.a;\n\t\t\t\treturn A5(\n\t\t\t\t\trtfeldman$elm_css$Css$validHex,\n\t\t\t\t\tstr,\n\t\t\t\t\t_Utils_Tuple2(r, r),\n\t\t\t\t\t_Utils_Tuple2(g, g),\n\t\t\t\t\t_Utils_Tuple2(b, b),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t_Utils_chr('f'),\n\t\t\t\t\t\t_Utils_chr('f')));\n\t\t\t} else {\n\t\t\t\tif (!_n0.b.b.b.b.b) {\n\t\t\t\t\tvar r = _n0.a;\n\t\t\t\t\tvar _n3 = _n0.b;\n\t\t\t\t\tvar g = _n3.a;\n\t\t\t\t\tvar _n4 = _n3.b;\n\t\t\t\t\tvar b = _n4.a;\n\t\t\t\t\tvar _n5 = _n4.b;\n\t\t\t\t\tvar a = _n5.a;\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\trtfeldman$elm_css$Css$validHex,\n\t\t\t\t\t\tstr,\n\t\t\t\t\t\t_Utils_Tuple2(r, r),\n\t\t\t\t\t\t_Utils_Tuple2(g, g),\n\t\t\t\t\t\t_Utils_Tuple2(b, b),\n\t\t\t\t\t\t_Utils_Tuple2(a, a));\n\t\t\t\t} else {\n\t\t\t\t\tif (_n0.b.b.b.b.b.b) {\n\t\t\t\t\t\tif (!_n0.b.b.b.b.b.b.b) {\n\t\t\t\t\t\t\tvar r1 = _n0.a;\n\t\t\t\t\t\t\tvar _n6 = _n0.b;\n\t\t\t\t\t\t\tvar r2 = _n6.a;\n\t\t\t\t\t\t\tvar _n7 = _n6.b;\n\t\t\t\t\t\t\tvar g1 = _n7.a;\n\t\t\t\t\t\t\tvar _n8 = _n7.b;\n\t\t\t\t\t\t\tvar g2 = _n8.a;\n\t\t\t\t\t\t\tvar _n9 = _n8.b;\n\t\t\t\t\t\t\tvar b1 = _n9.a;\n\t\t\t\t\t\t\tvar _n10 = _n9.b;\n\t\t\t\t\t\t\tvar b2 = _n10.a;\n\t\t\t\t\t\t\treturn A5(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$validHex,\n\t\t\t\t\t\t\t\tstr,\n\t\t\t\t\t\t\t\t_Utils_Tuple2(r1, r2),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(g1, g2),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(b1, b2),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t_Utils_chr('f'),\n\t\t\t\t\t\t\t\t\t_Utils_chr('f')));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_n0.b.b.b.b.b.b.b.b && (!_n0.b.b.b.b.b.b.b.b.b)) {\n\t\t\t\t\t\t\t\tvar r1 = _n0.a;\n\t\t\t\t\t\t\t\tvar _n11 = _n0.b;\n\t\t\t\t\t\t\t\tvar r2 = _n11.a;\n\t\t\t\t\t\t\t\tvar _n12 = _n11.b;\n\t\t\t\t\t\t\t\tvar g1 = _n12.a;\n\t\t\t\t\t\t\t\tvar _n13 = _n12.b;\n\t\t\t\t\t\t\t\tvar g2 = _n13.a;\n\t\t\t\t\t\t\t\tvar _n14 = _n13.b;\n\t\t\t\t\t\t\t\tvar b1 = _n14.a;\n\t\t\t\t\t\t\t\tvar _n15 = _n14.b;\n\t\t\t\t\t\t\t\tvar b2 = _n15.a;\n\t\t\t\t\t\t\t\tvar _n16 = _n15.b;\n\t\t\t\t\t\t\t\tvar a1 = _n16.a;\n\t\t\t\t\t\t\t\tvar _n17 = _n16.b;\n\t\t\t\t\t\t\t\tvar a2 = _n17.a;\n\t\t\t\t\t\t\t\treturn A5(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$validHex,\n\t\t\t\t\t\t\t\t\tstr,\n\t\t\t\t\t\t\t\t\t_Utils_Tuple2(r1, r2),\n\t\t\t\t\t\t\t\t\t_Utils_Tuple2(g1, g2),\n\t\t\t\t\t\t\t\t\t_Utils_Tuple2(b1, b2),\n\t\t\t\t\t\t\t\t\t_Utils_Tuple2(a1, a2));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak _n0$4;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$4;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tbreak _n0$4;\n\t\t}\n\t}\n\treturn rtfeldman$elm_css$Css$erroneousHex(str);\n};\nvar rtfeldman$elm_css$Css$justifyContent = function (fn) {\n\treturn A3(\n\t\trtfeldman$elm_css$Css$Internal$getOverloadedProperty,\n\t\t'justifyContent',\n\t\t'justify-content',\n\t\tfn(rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));\n};\nvar rtfeldman$elm_css$Css$prop2 = F3(\n\tfunction (key, argA, argB) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\tkey,\n\t\t\tA2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t' ',\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[argA.value, argB.value])));\n\t});\nvar rtfeldman$elm_css$Css$margin2 = rtfeldman$elm_css$Css$prop2('margin');\nvar rtfeldman$elm_css$Css$position = rtfeldman$elm_css$Css$prop1('position');\nvar rtfeldman$elm_css$Css$PxUnits = {$: 'PxUnits'};\nvar rtfeldman$elm_css$Css$px = A2(rtfeldman$elm_css$Css$Internal$lengthConverter, rtfeldman$elm_css$Css$PxUnits, 'px');\nvar rtfeldman$elm_css$Css$relative = {position: rtfeldman$elm_css$Css$Structure$Compatible, value: 'relative'};\nvar rtfeldman$elm_css$Css$spaceBetween = rtfeldman$elm_css$Css$prop1('space-between');\nvar rtfeldman$elm_css$Css$width = rtfeldman$elm_css$Css$prop1('width');\nvar rtfeldman$elm_css$Css$Internal$printKeyframeSelector = function (_n0) {\n\tvar percentage = _n0.a;\n\tvar properties = _n0.b;\n\tvar propertiesStr = A2(\n\t\telm$core$String$join,\n\t\t'',\n\t\tA2(\n\t\t\telm$core$List$map,\n\t\t\tfunction (_n1) {\n\t\t\t\tvar prop = _n1.a;\n\t\t\t\treturn prop + ';';\n\t\t\t},\n\t\t\tproperties));\n\tvar percentageStr = elm$core$String$fromInt(percentage) + '%';\n\treturn percentageStr + (' {' + (propertiesStr + '}'));\n};\nvar rtfeldman$elm_css$Css$Internal$compileKeyframes = function (tuples) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n\\n',\n\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Internal$printKeyframeSelector, tuples));\n};\nvar rtfeldman$elm_css$Css$Animations$keyframes = function (tuples) {\n\treturn elm$core$List$isEmpty(tuples) ? {keyframes: rtfeldman$elm_css$Css$Structure$Compatible, none: rtfeldman$elm_css$Css$Structure$Compatible, value: 'none'} : {\n\t\tkeyframes: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tnone: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tvalue: rtfeldman$elm_css$Css$Internal$compileKeyframes(tuples)\n\t};\n};\nvar rtfeldman$elm_css$Css$Internal$Property = function (a) {\n\treturn {$: 'Property', a: a};\n};\nvar rtfeldman$elm_css$Css$Animations$property = F2(\n\tfunction (key, value) {\n\t\treturn rtfeldman$elm_css$Css$Internal$Property(key + (':' + value));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$Node = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'Node', a: a, b: b, c: c};\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$node = rtfeldman$elm_css$VirtualDom$Styled$Node;\nvar rtfeldman$elm_css$Html$Styled$node = rtfeldman$elm_css$VirtualDom$Styled$node;\nvar rtfeldman$elm_css$Html$Styled$div = rtfeldman$elm_css$Html$Styled$node('div');\nvar elm$virtual_dom$VirtualDom$property = F2(\n\tfunction (key, value) {\n\t\treturn A2(\n\t\t\t_VirtualDom_property,\n\t\t\t_VirtualDom_noInnerHtmlOrFormAction(key),\n\t\t\t_VirtualDom_noJavaScriptOrHtmlUri(value));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$Attribute = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'Attribute', a: a, b: b, c: c};\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$property = F2(\n\tfunction (key, value) {\n\t\treturn A3(\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$Attribute,\n\t\t\tA2(elm$virtual_dom$VirtualDom$property, key, value),\n\t\t\t_List_Nil,\n\t\t\t'');\n\t});\nvar rtfeldman$elm_css$Html$Styled$Attributes$stringProperty = F2(\n\tfunction (key, string) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$property,\n\t\t\tkey,\n\t\t\telm$json$Json$Encode$string(string));\n\t});\nvar rtfeldman$elm_css$Html$Styled$Attributes$class = rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('className');\nvar elm$core$List$singleton = function (value) {\n\treturn _List_fromArray(\n\t\t[value]);\n};\nvar rtfeldman$elm_css$Css$Preprocess$stylesheet = function (snippets) {\n\treturn {charset: elm$core$Maybe$Nothing, imports: _List_Nil, namespaces: _List_Nil, snippets: snippets};\n};\nvar rtfeldman$elm_css$Css$Preprocess$unwrapSnippet = function (_n0) {\n\tvar declarations = _n0.a;\n\treturn declarations;\n};\nvar elm$core$Maybe$map = F2(\n\tfunction (f, maybe) {\n\t\tif (maybe.$ === 'Just') {\n\t\t\tvar value = maybe.a;\n\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\tf(value));\n\t\t} else {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors = function (declarations) {\n\tcollectSelectors:\n\twhile (true) {\n\t\tif (!declarations.b) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tif (declarations.a.$ === 'StyleBlockDeclaration') {\n\t\t\t\tvar _n1 = declarations.a.a;\n\t\t\t\tvar firstSelector = _n1.a;\n\t\t\t\tvar otherSelectors = _n1.b;\n\t\t\t\tvar rest = declarations.b;\n\t\t\t\treturn _Utils_ap(\n\t\t\t\t\tA2(elm$core$List$cons, firstSelector, otherSelectors),\n\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(rest));\n\t\t\t} else {\n\t\t\t\tvar rest = declarations.b;\n\t\t\t\tvar $temp$declarations = rest;\n\t\t\t\tdeclarations = $temp$declarations;\n\t\t\t\tcontinue collectSelectors;\n\t\t\t}\n\t\t}\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$last = function (list) {\n\tlast:\n\twhile (true) {\n\t\tif (!list.b) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tif (!list.b.b) {\n\t\t\t\tvar singleton = list.a;\n\t\t\t\treturn elm$core$Maybe$Just(singleton);\n\t\t\t} else {\n\t\t\t\tvar rest = list.b;\n\t\t\t\tvar $temp$list = rest;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tcontinue last;\n\t\t\t}\n\t\t}\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration = function (declarations) {\n\tlastDeclaration:\n\twhile (true) {\n\t\tif (!declarations.b) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tif (!declarations.b.b) {\n\t\t\t\tvar x = declarations.a;\n\t\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[x]));\n\t\t\t} else {\n\t\t\t\tvar xs = declarations.b;\n\t\t\t\tvar $temp$declarations = xs;\n\t\t\t\tdeclarations = $temp$declarations;\n\t\t\t\tcontinue lastDeclaration;\n\t\t\t}\n\t\t}\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$oneOf = function (maybes) {\n\toneOf:\n\twhile (true) {\n\t\tif (!maybes.b) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar maybe = maybes.a;\n\t\t\tvar rest = maybes.b;\n\t\t\tif (maybe.$ === 'Nothing') {\n\t\t\t\tvar $temp$maybes = rest;\n\t\t\t\tmaybes = $temp$maybes;\n\t\t\t\tcontinue oneOf;\n\t\t\t} else {\n\t\t\t\treturn maybe;\n\t\t\t}\n\t\t}\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$FontFeatureValues = function (a) {\n\treturn {$: 'FontFeatureValues', a: a};\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues = function (tuples) {\n\tvar expandTuples = function (tuplesToExpand) {\n\t\tif (!tuplesToExpand.b) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tvar properties = tuplesToExpand.a;\n\t\t\tvar rest = tuplesToExpand.b;\n\t\t\treturn A2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tproperties,\n\t\t\t\texpandTuples(rest));\n\t\t}\n\t};\n\tvar newTuples = expandTuples(tuples);\n\treturn _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$Structure$FontFeatureValues(newTuples)\n\t\t]);\n};\nvar rtfeldman$elm_css$Css$Structure$DocumentRule = F5(\n\tfunction (a, b, c, d, e) {\n\t\treturn {$: 'DocumentRule', a: a, b: b, c: c, d: d, e: e};\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule = F5(\n\tfunction (str1, str2, str3, str4, declaration) {\n\t\tif (declaration.$ === 'StyleBlockDeclaration') {\n\t\t\tvar structureStyleBlock = declaration.a;\n\t\t\treturn A5(rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4, structureStyleBlock);\n\t\t} else {\n\t\t\treturn declaration;\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$MediaRule = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'MediaRule', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Structure$SupportsRule = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'SupportsRule', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule = F2(\n\tfunction (mediaQueries, declaration) {\n\t\tswitch (declaration.$) {\n\t\t\tcase 'StyleBlockDeclaration':\n\t\t\t\tvar structureStyleBlock = declaration.a;\n\t\t\t\treturn A2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\t\tmediaQueries,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[structureStyleBlock]));\n\t\t\tcase 'MediaRule':\n\t\t\t\tvar newMediaQueries = declaration.a;\n\t\t\t\tvar structureStyleBlocks = declaration.b;\n\t\t\t\treturn A2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\t\t_Utils_ap(mediaQueries, newMediaQueries),\n\t\t\t\t\tstructureStyleBlocks);\n\t\t\tcase 'SupportsRule':\n\t\t\t\tvar str = declaration.a;\n\t\t\t\tvar declarations = declaration.b;\n\t\t\t\treturn A2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$SupportsRule,\n\t\t\t\t\tstr,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule(mediaQueries),\n\t\t\t\t\t\tdeclarations));\n\t\t\tcase 'DocumentRule':\n\t\t\t\tvar str1 = declaration.a;\n\t\t\t\tvar str2 = declaration.b;\n\t\t\t\tvar str3 = declaration.c;\n\t\t\t\tvar str4 = declaration.d;\n\t\t\t\tvar structureStyleBlock = declaration.e;\n\t\t\t\treturn A5(rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4, structureStyleBlock);\n\t\t\tcase 'PageRule':\n\t\t\t\treturn declaration;\n\t\t\tcase 'FontFace':\n\t\t\t\treturn declaration;\n\t\t\tcase 'Keyframes':\n\t\t\t\treturn declaration;\n\t\t\tcase 'Viewport':\n\t\t\t\treturn declaration;\n\t\t\tcase 'CounterStyle':\n\t\t\t\treturn declaration;\n\t\t\tdefault:\n\t\t\t\treturn declaration;\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$CounterStyle = function (a) {\n\treturn {$: 'CounterStyle', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$FontFace = function (a) {\n\treturn {$: 'FontFace', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$Keyframes = function (a) {\n\treturn {$: 'Keyframes', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$PageRule = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'PageRule', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Structure$Selector = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'Selector', a: a, b: b, c: c};\n\t});\nvar rtfeldman$elm_css$Css$Structure$StyleBlock = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'StyleBlock', a: a, b: b, c: c};\n\t});\nvar rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration = function (a) {\n\treturn {$: 'StyleBlockDeclaration', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$Viewport = function (a) {\n\treturn {$: 'Viewport', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$mapLast = F2(\n\tfunction (update, list) {\n\t\tif (!list.b) {\n\t\t\treturn list;\n\t\t} else {\n\t\t\tif (!list.b.b) {\n\t\t\t\tvar only = list.a;\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tupdate(only)\n\t\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tvar first = list.a;\n\t\t\t\tvar rest = list.b;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\tfirst,\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$mapLast, update, rest));\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$withPropertyAppended = F2(\n\tfunction (property, _n0) {\n\t\tvar firstSelector = _n0.a;\n\t\tvar otherSelectors = _n0.b;\n\t\tvar properties = _n0.c;\n\t\treturn A3(\n\t\t\trtfeldman$elm_css$Css$Structure$StyleBlock,\n\t\t\tfirstSelector,\n\t\t\totherSelectors,\n\t\t\t_Utils_ap(\n\t\t\t\tproperties,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[property])));\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendProperty = F2(\n\tfunction (property, declarations) {\n\t\tif (!declarations.b) {\n\t\t\treturn declarations;\n\t\t} else {\n\t\t\tif (!declarations.b.b) {\n\t\t\t\tswitch (declarations.a.$) {\n\t\t\t\t\tcase 'StyleBlockDeclaration':\n\t\t\t\t\t\tvar styleBlock = declarations.a.a;\n\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$withPropertyAppended, property, styleBlock))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\tcase 'MediaRule':\n\t\t\t\t\t\tvar _n1 = declarations.a;\n\t\t\t\t\t\tvar mediaQueries = _n1.a;\n\t\t\t\t\t\tvar styleBlocks = _n1.b;\n\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\t\t\t\t\tmediaQueries,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$mapLast,\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$withPropertyAppended(property),\n\t\t\t\t\t\t\t\t\tstyleBlocks))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn declarations;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar first = declarations.a;\n\t\t\t\tvar rest = declarations.b;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\tfirst,\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendProperty, property, rest));\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendToLastSelector = F2(\n\tfunction (f, styleBlock) {\n\t\tif (!styleBlock.b.b) {\n\t\t\tvar only = styleBlock.a;\n\t\t\tvar properties = styleBlock.c;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, only, _List_Nil, properties),\n\t\t\t\t\tA3(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlock,\n\t\t\t\t\tf(only),\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_Nil)\n\t\t\t\t]);\n\t\t} else {\n\t\t\tvar first = styleBlock.a;\n\t\t\tvar rest = styleBlock.b;\n\t\t\tvar properties = styleBlock.c;\n\t\t\tvar newRest = A2(elm$core$List$map, f, rest);\n\t\t\tvar newFirst = f(first);\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, first, rest, properties),\n\t\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, newFirst, newRest, _List_Nil)\n\t\t\t\t]);\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$applyPseudoElement = F2(\n\tfunction (pseudo, _n0) {\n\t\tvar sequence = _n0.a;\n\t\tvar selectors = _n0.b;\n\t\treturn A3(\n\t\t\trtfeldman$elm_css$Css$Structure$Selector,\n\t\t\tsequence,\n\t\t\tselectors,\n\t\t\telm$core$Maybe$Just(pseudo));\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendPseudoElementToLastSelector = F2(\n\tfunction (pseudo, styleBlock) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$Css$Structure$appendToLastSelector,\n\t\t\trtfeldman$elm_css$Css$Structure$applyPseudoElement(pseudo),\n\t\t\tstyleBlock);\n\t});\nvar rtfeldman$elm_css$Css$Structure$CustomSelector = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'CustomSelector', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Structure$TypeSelectorSequence = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'TypeSelectorSequence', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence = function (a) {\n\treturn {$: 'UniversalSelectorSequence', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$appendRepeatable = F2(\n\tfunction (selector, sequence) {\n\t\tswitch (sequence.$) {\n\t\t\tcase 'TypeSelectorSequence':\n\t\t\t\tvar typeSelector = sequence.a;\n\t\t\t\tvar list = sequence.b;\n\t\t\t\treturn A2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$TypeSelectorSequence,\n\t\t\t\t\ttypeSelector,\n\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\tlist,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[selector])));\n\t\t\tcase 'UniversalSelectorSequence':\n\t\t\t\tvar list = sequence.a;\n\t\t\t\treturn rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(\n\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\tlist,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[selector])));\n\t\t\tdefault:\n\t\t\t\tvar str = sequence.a;\n\t\t\t\tvar list = sequence.b;\n\t\t\t\treturn A2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$CustomSelector,\n\t\t\t\t\tstr,\n\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\tlist,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[selector])));\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator = F2(\n\tfunction (selector, list) {\n\t\tif (!list.b) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tif (!list.b.b) {\n\t\t\t\tvar _n1 = list.a;\n\t\t\t\tvar combinator = _n1.a;\n\t\t\t\tvar sequence = _n1.b;\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\tcombinator,\n\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendRepeatable, selector, sequence))\n\t\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tvar first = list.a;\n\t\t\t\tvar rest = list.b;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\tfirst,\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator, selector, rest));\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendRepeatableSelector = F2(\n\tfunction (repeatableSimpleSelector, selector) {\n\t\tif (!selector.b.b) {\n\t\t\tvar sequence = selector.a;\n\t\t\tvar pseudoElement = selector.c;\n\t\t\treturn A3(\n\t\t\t\trtfeldman$elm_css$Css$Structure$Selector,\n\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendRepeatable, repeatableSimpleSelector, sequence),\n\t\t\t\t_List_Nil,\n\t\t\t\tpseudoElement);\n\t\t} else {\n\t\t\tvar firstSelector = selector.a;\n\t\t\tvar tuples = selector.b;\n\t\t\tvar pseudoElement = selector.c;\n\t\t\treturn A3(\n\t\t\t\trtfeldman$elm_css$Css$Structure$Selector,\n\t\t\t\tfirstSelector,\n\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator, repeatableSimpleSelector, tuples),\n\t\t\t\tpseudoElement);\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendRepeatableToLastSelector = F2(\n\tfunction (selector, styleBlock) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$Css$Structure$appendToLastSelector,\n\t\t\trtfeldman$elm_css$Css$Structure$appendRepeatableSelector(selector),\n\t\t\tstyleBlock);\n\t});\nvar rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock = F2(\n\tfunction (update, declarations) {\n\t\t_n0$12:\n\t\twhile (true) {\n\t\t\tif (!declarations.b) {\n\t\t\t\treturn declarations;\n\t\t\t} else {\n\t\t\t\tif (!declarations.b.b) {\n\t\t\t\t\tswitch (declarations.a.$) {\n\t\t\t\t\t\tcase 'StyleBlockDeclaration':\n\t\t\t\t\t\t\tvar styleBlock = declarations.a.a;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlockDeclaration,\n\t\t\t\t\t\t\t\tupdate(styleBlock));\n\t\t\t\t\t\tcase 'MediaRule':\n\t\t\t\t\t\t\tif (declarations.a.b.b) {\n\t\t\t\t\t\t\t\tif (!declarations.a.b.b.b) {\n\t\t\t\t\t\t\t\t\tvar _n1 = declarations.a;\n\t\t\t\t\t\t\t\t\tvar mediaQueries = _n1.a;\n\t\t\t\t\t\t\t\t\tvar _n2 = _n1.b;\n\t\t\t\t\t\t\t\t\tvar styleBlock = _n2.a;\n\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\t\t\t\t\t\t\t\tmediaQueries,\n\t\t\t\t\t\t\t\t\t\t\tupdate(styleBlock))\n\t\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar _n3 = declarations.a;\n\t\t\t\t\t\t\t\t\tvar mediaQueries = _n3.a;\n\t\t\t\t\t\t\t\t\tvar _n4 = _n3.b;\n\t\t\t\t\t\t\t\t\tvar first = _n4.a;\n\t\t\t\t\t\t\t\t\tvar rest = _n4.b;\n\t\t\t\t\t\t\t\t\tvar _n5 = A2(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock,\n\t\t\t\t\t\t\t\t\t\tupdate,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$MediaRule, mediaQueries, rest)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\tif ((_n5.b && (_n5.a.$ === 'MediaRule')) && (!_n5.b.b)) {\n\t\t\t\t\t\t\t\t\t\tvar _n6 = _n5.a;\n\t\t\t\t\t\t\t\t\t\tvar newMediaQueries = _n6.a;\n\t\t\t\t\t\t\t\t\t\tvar newStyleBlocks = _n6.b;\n\t\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\t\t\t\t\t\t\t\t\tnewMediaQueries,\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$cons, first, newStyleBlocks))\n\t\t\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tvar newDeclarations = _n5;\n\t\t\t\t\t\t\t\t\t\treturn newDeclarations;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak _n0$12;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 'SupportsRule':\n\t\t\t\t\t\t\tvar _n7 = declarations.a;\n\t\t\t\t\t\t\tvar str = _n7.a;\n\t\t\t\t\t\t\tvar nestedDeclarations = _n7.b;\n\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$SupportsRule,\n\t\t\t\t\t\t\t\t\tstr,\n\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, update, nestedDeclarations))\n\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\tcase 'DocumentRule':\n\t\t\t\t\t\t\tvar _n8 = declarations.a;\n\t\t\t\t\t\t\tvar str1 = _n8.a;\n\t\t\t\t\t\t\tvar str2 = _n8.b;\n\t\t\t\t\t\t\tvar str3 = _n8.c;\n\t\t\t\t\t\t\tvar str4 = _n8.d;\n\t\t\t\t\t\t\tvar styleBlock = _n8.e;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\tA4(rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4),\n\t\t\t\t\t\t\t\tupdate(styleBlock));\n\t\t\t\t\t\tcase 'PageRule':\n\t\t\t\t\t\t\tvar _n9 = declarations.a;\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t\tcase 'FontFace':\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t\tcase 'Keyframes':\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t\tcase 'Viewport':\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t\tcase 'CounterStyle':\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak _n0$12;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar first = declarations.a;\n\t\tvar rest = declarations.b;\n\t\treturn A2(\n\t\t\telm$core$List$cons,\n\t\t\tfirst,\n\t\t\tA2(rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, update, rest));\n\t});\nvar rtfeldman$elm_css$Css$Structure$styleBlockToMediaRule = F2(\n\tfunction (mediaQueries, declaration) {\n\t\tif (declaration.$ === 'StyleBlockDeclaration') {\n\t\t\tvar styleBlock = declaration.a;\n\t\t\treturn A2(\n\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\tmediaQueries,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[styleBlock]));\n\t\t} else {\n\t\t\treturn declaration;\n\t\t}\n\t});\nvar elm$core$String$foldl = _String_foldl;\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$HashData = F4(\n\tfunction (shift, seed, hash, charsProcessed) {\n\t\treturn {charsProcessed: charsProcessed, hash: hash, seed: seed, shift: shift};\n\t});\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$c1 = 3432918353;\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$c2 = 461845907;\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy = F2(\n\tfunction (b, a) {\n\t\treturn ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);\n\t});\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy = F2(\n\tfunction (b, a) {\n\t\treturn (a << b) | (a >>> (32 - b));\n\t});\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$finalize = function (data) {\n\tvar acc = data.hash ? (data.seed ^ A2(\n\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,\n\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$c2,\n\t\tA2(\n\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,\n\t\t\t15,\n\t\t\tA2(rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, rtfeldman$elm_css$ElmCssVendor$Murmur3$c1, data.hash)))) : data.seed;\n\tvar h0 = acc ^ data.charsProcessed;\n\tvar h1 = A2(rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));\n\tvar h2 = A2(rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));\n\treturn (h2 ^ (h2 >>> 16)) >>> 0;\n};\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$mix = F2(\n\tfunction (h1, k1) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,\n\t\t\t5,\n\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,\n\t\t\t\t13,\n\t\t\t\th1 ^ A2(\n\t\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,\n\t\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$c2,\n\t\t\t\t\tA2(\n\t\t\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,\n\t\t\t\t\t\t15,\n\t\t\t\t\t\tA2(rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, rtfeldman$elm_css$ElmCssVendor$Murmur3$c1, k1))))) + 3864292196;\n\t});\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$hashFold = F2(\n\tfunction (c, data) {\n\t\tvar res = data.hash | ((255 & elm$core$Char$toCode(c)) << data.shift);\n\t\tvar _n0 = data.shift;\n\t\tif (_n0 === 24) {\n\t\t\treturn {\n\t\t\t\tcharsProcessed: data.charsProcessed + 1,\n\t\t\t\thash: 0,\n\t\t\t\tseed: A2(rtfeldman$elm_css$ElmCssVendor$Murmur3$mix, data.seed, res),\n\t\t\t\tshift: 0\n\t\t\t};\n\t\t} else {\n\t\t\treturn {charsProcessed: data.charsProcessed + 1, hash: res, seed: data.seed, shift: data.shift + 8};\n\t\t}\n\t});\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$hashString = F2(\n\tfunction (seed, str) {\n\t\treturn rtfeldman$elm_css$ElmCssVendor$Murmur3$finalize(\n\t\t\tA3(\n\t\t\t\telm$core$String$foldl,\n\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$hashFold,\n\t\t\t\tA4(rtfeldman$elm_css$ElmCssVendor$Murmur3$HashData, 0, seed, 0, 0),\n\t\t\t\tstr));\n\t});\nvar rtfeldman$elm_css$Hash$murmurSeed = 15739;\nvar rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {\n\tunsafeToDigit:\n\twhile (true) {\n\t\tswitch (num) {\n\t\t\tcase 0:\n\t\t\t\treturn _Utils_chr('0');\n\t\t\tcase 1:\n\t\t\t\treturn _Utils_chr('1');\n\t\t\tcase 2:\n\t\t\t\treturn _Utils_chr('2');\n\t\t\tcase 3:\n\t\t\t\treturn _Utils_chr('3');\n\t\t\tcase 4:\n\t\t\t\treturn _Utils_chr('4');\n\t\t\tcase 5:\n\t\t\t\treturn _Utils_chr('5');\n\t\t\tcase 6:\n\t\t\t\treturn _Utils_chr('6');\n\t\t\tcase 7:\n\t\t\t\treturn _Utils_chr('7');\n\t\t\tcase 8:\n\t\t\t\treturn _Utils_chr('8');\n\t\t\tcase 9:\n\t\t\t\treturn _Utils_chr('9');\n\t\t\tcase 10:\n\t\t\t\treturn _Utils_chr('a');\n\t\t\tcase 11:\n\t\t\t\treturn _Utils_chr('b');\n\t\t\tcase 12:\n\t\t\t\treturn _Utils_chr('c');\n\t\t\tcase 13:\n\t\t\t\treturn _Utils_chr('d');\n\t\t\tcase 14:\n\t\t\t\treturn _Utils_chr('e');\n\t\t\tcase 15:\n\t\t\t\treturn _Utils_chr('f');\n\t\t\tdefault:\n\t\t\t\tvar $temp$num = num;\n\t\t\t\tnum = $temp$num;\n\t\t\t\tcontinue unsafeToDigit;\n\t\t}\n\t}\n};\nvar rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(\n\tfunction (digits, num) {\n\t\tunsafePositiveToDigits:\n\t\twhile (true) {\n\t\t\tif (num < 16) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\trtfeldman$elm_hex$Hex$unsafeToDigit(num),\n\t\t\t\t\tdigits);\n\t\t\t} else {\n\t\t\t\tvar $temp$digits = A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\trtfeldman$elm_hex$Hex$unsafeToDigit(\n\t\t\t\t\t\tA2(elm$core$Basics$modBy, 16, num)),\n\t\t\t\t\tdigits),\n\t\t\t\t\t$temp$num = (num / 16) | 0;\n\t\t\t\tdigits = $temp$digits;\n\t\t\t\tnum = $temp$num;\n\t\t\t\tcontinue unsafePositiveToDigits;\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_hex$Hex$toString = function (num) {\n\treturn elm$core$String$fromList(\n\t\t(num < 0) ? A2(\n\t\t\telm$core$List$cons,\n\t\t\t_Utils_chr('-'),\n\t\t\tA2(rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2(rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));\n};\nvar rtfeldman$elm_css$Hash$fromString = function (str) {\n\treturn A2(\n\t\telm$core$String$cons,\n\t\t_Utils_chr('_'),\n\t\trtfeldman$elm_hex$Hex$toString(\n\t\t\tA2(rtfeldman$elm_css$ElmCssVendor$Murmur3$hashString, rtfeldman$elm_css$Hash$murmurSeed, str)));\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast = F4(\n\tfunction (nestedStyles, rest, f, declarations) {\n\t\tvar withoutParent = function (decls) {\n\t\t\treturn A2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t_List_Nil,\n\t\t\t\telm$core$List$tail(decls));\n\t\t};\n\t\tvar nextResult = A2(\n\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\t\trest,\n\t\t\tA2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t_List_Nil,\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration(declarations)));\n\t\tvar newDeclarations = function () {\n\t\t\tvar _n14 = _Utils_Tuple2(\n\t\t\t\telm$core$List$head(nextResult),\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$last(declarations));\n\t\t\tif ((_n14.a.$ === 'Just') && (_n14.b.$ === 'Just')) {\n\t\t\t\tvar nextResultParent = _n14.a.a;\n\t\t\t\tvar originalParent = _n14.b.a;\n\t\t\t\treturn _Utils_ap(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$take,\n\t\t\t\t\t\telm$core$List$length(declarations) - 1,\n\t\t\t\t\t\tdeclarations),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t(!_Utils_eq(originalParent, nextResultParent)) ? nextResultParent : originalParent\n\t\t\t\t\t\t]));\n\t\t\t} else {\n\t\t\t\treturn declarations;\n\t\t\t}\n\t\t}();\n\t\tvar insertStylesToNestedDecl = function (lastDecl) {\n\t\t\treturn elm$core$List$concat(\n\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$mapLast,\n\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles(nestedStyles),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\telm$core$List$singleton,\n\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, f, lastDecl))));\n\t\t};\n\t\tvar initialResult = A2(\n\t\t\telm$core$Maybe$withDefault,\n\t\t\t_List_Nil,\n\t\t\tA2(\n\t\t\t\telm$core$Maybe$map,\n\t\t\t\tinsertStylesToNestedDecl,\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration(declarations)));\n\t\treturn _Utils_ap(\n\t\t\tnewDeclarations,\n\t\t\t_Utils_ap(\n\t\t\t\twithoutParent(initialResult),\n\t\t\t\twithoutParent(nextResult)));\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles = F2(\n\tfunction (styles, declarations) {\n\t\tif (!styles.b) {\n\t\t\treturn declarations;\n\t\t} else {\n\t\t\tswitch (styles.a.$) {\n\t\t\t\tcase 'AppendProperty':\n\t\t\t\t\tvar property = styles.a.a;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\t\t\t\t\trest,\n\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendProperty, property, declarations));\n\t\t\t\tcase 'ExtendSelector':\n\t\t\t\t\tvar _n4 = styles.a;\n\t\t\t\t\tvar selector = _n4.a;\n\t\t\t\t\tvar nestedStyles = _n4.b;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\treturn A4(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast,\n\t\t\t\t\t\tnestedStyles,\n\t\t\t\t\t\trest,\n\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$appendRepeatableToLastSelector(selector),\n\t\t\t\t\t\tdeclarations);\n\t\t\t\tcase 'NestSnippet':\n\t\t\t\t\tvar _n5 = styles.a;\n\t\t\t\t\tvar selectorCombinator = _n5.a;\n\t\t\t\t\tvar snippets = _n5.b;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\tvar chain = F2(\n\t\t\t\t\t\tfunction (_n9, _n10) {\n\t\t\t\t\t\t\tvar originalSequence = _n9.a;\n\t\t\t\t\t\t\tvar originalTuples = _n9.b;\n\t\t\t\t\t\t\tvar originalPseudoElement = _n9.c;\n\t\t\t\t\t\t\tvar newSequence = _n10.a;\n\t\t\t\t\t\t\tvar newTuples = _n10.b;\n\t\t\t\t\t\t\tvar newPseudoElement = _n10.c;\n\t\t\t\t\t\t\treturn A3(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$Selector,\n\t\t\t\t\t\t\t\toriginalSequence,\n\t\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\t\toriginalTuples,\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(selectorCombinator, newSequence),\n\t\t\t\t\t\t\t\t\t\tnewTuples)),\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$oneOf(\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[newPseudoElement, originalPseudoElement])));\n\t\t\t\t\t\t});\n\t\t\t\t\tvar expandDeclaration = function (declaration) {\n\t\t\t\t\t\tswitch (declaration.$) {\n\t\t\t\t\t\t\tcase 'StyleBlockDeclaration':\n\t\t\t\t\t\t\t\tvar _n7 = declaration.a;\n\t\t\t\t\t\t\t\tvar firstSelector = _n7.a;\n\t\t\t\t\t\t\t\tvar otherSelectors = _n7.b;\n\t\t\t\t\t\t\t\tvar nestedStyles = _n7.c;\n\t\t\t\t\t\t\t\tvar newSelectors = A2(\n\t\t\t\t\t\t\t\t\telm$core$List$concatMap,\n\t\t\t\t\t\t\t\t\tfunction (originalSelector) {\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\t\tchain(originalSelector),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$cons, firstSelector, otherSelectors));\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(declarations));\n\t\t\t\t\t\t\t\tvar newDeclarations = function () {\n\t\t\t\t\t\t\t\t\tif (!newSelectors.b) {\n\t\t\t\t\t\t\t\t\t\treturn _List_Nil;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tvar first = newSelectors.a;\n\t\t\t\t\t\t\t\t\t\tvar remainder = newSelectors.b;\n\t\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(\n\t\t\t\t\t\t\t\t\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, first, remainder, _List_Nil))\n\t\t\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}();\n\t\t\t\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, nestedStyles, newDeclarations);\n\t\t\t\t\t\t\tcase 'MediaRule':\n\t\t\t\t\t\t\t\tvar mediaQueries = declaration.a;\n\t\t\t\t\t\t\t\tvar styleBlocks = declaration.b;\n\t\t\t\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule, mediaQueries, styleBlocks);\n\t\t\t\t\t\t\tcase 'SupportsRule':\n\t\t\t\t\t\t\t\tvar str = declaration.a;\n\t\t\t\t\t\t\t\tvar otherSnippets = declaration.b;\n\t\t\t\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule, str, otherSnippets);\n\t\t\t\t\t\t\tcase 'DocumentRule':\n\t\t\t\t\t\t\t\tvar str1 = declaration.a;\n\t\t\t\t\t\t\t\tvar str2 = declaration.b;\n\t\t\t\t\t\t\t\tvar str3 = declaration.c;\n\t\t\t\t\t\t\t\tvar str4 = declaration.d;\n\t\t\t\t\t\t\t\tvar styleBlock = declaration.e;\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\tA4(rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule, str1, str2, str3, str4),\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));\n\t\t\t\t\t\t\tcase 'PageRule':\n\t\t\t\t\t\t\t\tvar str = declaration.a;\n\t\t\t\t\t\t\t\tvar properties = declaration.b;\n\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$PageRule, str, properties)\n\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tcase 'FontFace':\n\t\t\t\t\t\t\t\tvar properties = declaration.a;\n\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$FontFace(properties)\n\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tcase 'Viewport':\n\t\t\t\t\t\t\t\tvar properties = declaration.a;\n\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$Viewport(properties)\n\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tcase 'CounterStyle':\n\t\t\t\t\t\t\t\tvar properties = declaration.a;\n\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$CounterStyle(properties)\n\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tvar tuples = declaration.a;\n\t\t\t\t\t\t\t\treturn rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues(tuples);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\treturn elm$core$List$concat(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, rest, declarations)\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\texpandDeclaration,\n\t\t\t\t\t\t\t\tA2(elm$core$List$concatMap, rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets))));\n\t\t\t\tcase 'WithPseudoElement':\n\t\t\t\t\tvar _n11 = styles.a;\n\t\t\t\t\tvar pseudoElement = _n11.a;\n\t\t\t\t\tvar nestedStyles = _n11.b;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\treturn A4(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast,\n\t\t\t\t\t\tnestedStyles,\n\t\t\t\t\t\trest,\n\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$appendPseudoElementToLastSelector(pseudoElement),\n\t\t\t\t\t\tdeclarations);\n\t\t\t\tcase 'WithKeyframes':\n\t\t\t\t\tvar str = styles.a.a;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\tvar name = rtfeldman$elm_css$Hash$fromString(str);\n\t\t\t\t\tvar newProperty = 'animation-name:' + name;\n\t\t\t\t\tvar newDeclarations = A2(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\t\t\t\t\trest,\n\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendProperty, newProperty, declarations));\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$List$append,\n\t\t\t\t\t\tnewDeclarations,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$Keyframes(\n\t\t\t\t\t\t\t\t{declaration: str, name: name})\n\t\t\t\t\t\t\t]));\n\t\t\t\tcase 'WithMedia':\n\t\t\t\t\tvar _n12 = styles.a;\n\t\t\t\t\tvar mediaQueries = _n12.a;\n\t\t\t\t\tvar nestedStyles = _n12.b;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\tvar extraDeclarations = function () {\n\t\t\t\t\t\tvar _n13 = rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(declarations);\n\t\t\t\t\t\tif (!_n13.b) {\n\t\t\t\t\t\t\treturn _List_Nil;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar firstSelector = _n13.a;\n\t\t\t\t\t\t\tvar otherSelectors = _n13.b;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$styleBlockToMediaRule(mediaQueries),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\t\t\t\t\t\t\t\tnestedStyles,\n\t\t\t\t\t\t\t\t\telm$core$List$singleton(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(\n\t\t\t\t\t\t\t\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, firstSelector, otherSelectors, _List_Nil)))));\n\t\t\t\t\t\t}\n\t\t\t\t\t}();\n\t\t\t\t\treturn _Utils_ap(\n\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, rest, declarations),\n\t\t\t\t\t\textraDeclarations);\n\t\t\t\tdefault:\n\t\t\t\t\tvar otherStyles = styles.a.a;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\t\t\t\t\t_Utils_ap(otherStyles, rest),\n\t\t\t\t\t\tdeclarations);\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock = function (_n2) {\n\tvar firstSelector = _n2.a;\n\tvar otherSelectors = _n2.b;\n\tvar styles = _n2.c;\n\treturn A2(\n\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\tstyles,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(\n\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, firstSelector, otherSelectors, _List_Nil))\n\t\t\t]));\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$extract = function (snippetDeclarations) {\n\tif (!snippetDeclarations.b) {\n\t\treturn _List_Nil;\n\t} else {\n\t\tvar first = snippetDeclarations.a;\n\t\tvar rest = snippetDeclarations.b;\n\t\treturn _Utils_ap(\n\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$toDeclarations(first),\n\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$extract(rest));\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule = F2(\n\tfunction (mediaQueries, styleBlocks) {\n\t\tvar handleStyleBlock = function (styleBlock) {\n\t\t\treturn A2(\n\t\t\t\telm$core$List$map,\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule(mediaQueries),\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));\n\t\t};\n\t\treturn A2(elm$core$List$concatMap, handleStyleBlock, styleBlocks);\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule = F2(\n\tfunction (str, snippets) {\n\t\tvar declarations = rtfeldman$elm_css$Css$Preprocess$Resolve$extract(\n\t\t\tA2(elm$core$List$concatMap, rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets));\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$SupportsRule, str, declarations)\n\t\t\t]);\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$toDeclarations = function (snippetDeclaration) {\n\tswitch (snippetDeclaration.$) {\n\t\tcase 'StyleBlockDeclaration':\n\t\t\tvar styleBlock = snippetDeclaration.a;\n\t\t\treturn rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock);\n\t\tcase 'MediaRule':\n\t\t\tvar mediaQueries = snippetDeclaration.a;\n\t\t\tvar styleBlocks = snippetDeclaration.b;\n\t\t\treturn A2(rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule, mediaQueries, styleBlocks);\n\t\tcase 'SupportsRule':\n\t\t\tvar str = snippetDeclaration.a;\n\t\t\tvar snippets = snippetDeclaration.b;\n\t\t\treturn A2(rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule, str, snippets);\n\t\tcase 'DocumentRule':\n\t\t\tvar str1 = snippetDeclaration.a;\n\t\t\tvar str2 = snippetDeclaration.b;\n\t\t\tvar str3 = snippetDeclaration.c;\n\t\t\tvar str4 = snippetDeclaration.d;\n\t\t\tvar styleBlock = snippetDeclaration.e;\n\t\t\treturn A2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tA4(rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule, str1, str2, str3, str4),\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));\n\t\tcase 'PageRule':\n\t\t\tvar str = snippetDeclaration.a;\n\t\t\tvar properties = snippetDeclaration.b;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$PageRule, str, properties)\n\t\t\t\t]);\n\t\tcase 'FontFace':\n\t\t\tvar properties = snippetDeclaration.a;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$FontFace(properties)\n\t\t\t\t]);\n\t\tcase 'Viewport':\n\t\t\tvar properties = snippetDeclaration.a;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$Viewport(properties)\n\t\t\t\t]);\n\t\tcase 'CounterStyle':\n\t\t\tvar properties = snippetDeclaration.a;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$CounterStyle(properties)\n\t\t\t\t]);\n\t\tdefault:\n\t\t\tvar tuples = snippetDeclaration.a;\n\t\t\treturn rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues(tuples);\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$toStructure = function (_n0) {\n\tvar charset = _n0.charset;\n\tvar imports = _n0.imports;\n\tvar namespaces = _n0.namespaces;\n\tvar snippets = _n0.snippets;\n\tvar declarations = rtfeldman$elm_css$Css$Preprocess$Resolve$extract(\n\t\tA2(elm$core$List$concatMap, rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets));\n\treturn {charset: charset, declarations: declarations, imports: imports, namespaces: namespaces};\n};\nvar elm$core$List$any = F2(\n\tfunction (isOkay, list) {\n\t\tany:\n\t\twhile (true) {\n\t\t\tif (!list.b) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tvar x = list.a;\n\t\t\t\tvar xs = list.b;\n\t\t\t\tif (isOkay(x)) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$isOkay = isOkay,\n\t\t\t\t\t\t$temp$list = xs;\n\t\t\t\t\tisOkay = $temp$isOkay;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tcontinue any;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$all = F2(\n\tfunction (isOkay, list) {\n\t\treturn !A2(\n\t\t\telm$core$List$any,\n\t\t\tA2(elm$core$Basics$composeL, elm$core$Basics$not, isOkay),\n\t\t\tlist);\n\t});\nvar rtfeldman$elm_css$Css$Structure$compactHelp = F2(\n\tfunction (declaration, _n0) {\n\t\tvar keyframesByName = _n0.a;\n\t\tvar declarations = _n0.b;\n\t\tswitch (declaration.$) {\n\t\t\tcase 'StyleBlockDeclaration':\n\t\t\t\tvar _n2 = declaration.a;\n\t\t\t\tvar properties = _n2.c;\n\t\t\t\treturn elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'MediaRule':\n\t\t\t\tvar styleBlocks = declaration.b;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$all,\n\t\t\t\t\tfunction (_n3) {\n\t\t\t\t\t\tvar properties = _n3.c;\n\t\t\t\t\t\treturn elm$core$List$isEmpty(properties);\n\t\t\t\t\t},\n\t\t\t\t\tstyleBlocks) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'SupportsRule':\n\t\t\t\tvar otherDeclarations = declaration.b;\n\t\t\t\treturn elm$core$List$isEmpty(otherDeclarations) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'DocumentRule':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'PageRule':\n\t\t\t\tvar properties = declaration.b;\n\t\t\t\treturn elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'FontFace':\n\t\t\t\tvar properties = declaration.a;\n\t\t\t\treturn elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'Keyframes':\n\t\t\t\tvar record = declaration.a;\n\t\t\t\treturn elm$core$String$isEmpty(record.declaration) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tA3(elm$core$Dict$insert, record.name, record.declaration, keyframesByName),\n\t\t\t\t\tdeclarations);\n\t\t\tcase 'Viewport':\n\t\t\t\tvar properties = declaration.a;\n\t\t\t\treturn elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'CounterStyle':\n\t\t\t\tvar properties = declaration.a;\n\t\t\t\treturn elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tdefault:\n\t\t\t\tvar tuples = declaration.a;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$all,\n\t\t\t\t\tfunction (_n4) {\n\t\t\t\t\t\tvar properties = _n4.b;\n\t\t\t\t\t\treturn elm$core$List$isEmpty(properties);\n\t\t\t\t\t},\n\t\t\t\t\ttuples) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$withKeyframeDeclarations = F2(\n\tfunction (keyframesByName, compactedDeclarations) {\n\t\treturn A2(\n\t\t\telm$core$List$append,\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tfunction (_n0) {\n\t\t\t\t\tvar name = _n0.a;\n\t\t\t\t\tvar decl = _n0.b;\n\t\t\t\t\treturn rtfeldman$elm_css$Css$Structure$Keyframes(\n\t\t\t\t\t\t{declaration: decl, name: name});\n\t\t\t\t},\n\t\t\t\telm$core$Dict$toList(keyframesByName)),\n\t\t\tcompactedDeclarations);\n\t});\nvar rtfeldman$elm_css$Css$Structure$compactStylesheet = function (_n0) {\n\tvar charset = _n0.charset;\n\tvar imports = _n0.imports;\n\tvar namespaces = _n0.namespaces;\n\tvar declarations = _n0.declarations;\n\tvar _n1 = A3(\n\t\telm$core$List$foldr,\n\t\trtfeldman$elm_css$Css$Structure$compactHelp,\n\t\t_Utils_Tuple2(elm$core$Dict$empty, _List_Nil),\n\t\tdeclarations);\n\tvar keyframesByName = _n1.a;\n\tvar compactedDeclarations = _n1.b;\n\tvar finalDeclarations = A2(rtfeldman$elm_css$Css$Structure$withKeyframeDeclarations, keyframesByName, compactedDeclarations);\n\treturn {charset: charset, declarations: finalDeclarations, imports: imports, namespaces: namespaces};\n};\nvar elm$core$List$filter = F2(\n\tfunction (isGood, list) {\n\t\treturn A3(\n\t\t\telm$core$List$foldr,\n\t\t\tF2(\n\t\t\t\tfunction (x, xs) {\n\t\t\t\t\treturn isGood(x) ? A2(elm$core$List$cons, x, xs) : xs;\n\t\t\t\t}),\n\t\t\t_List_Nil,\n\t\t\tlist);\n\t});\nvar rtfeldman$elm_css$Css$Structure$Output$charsetToString = function (charset) {\n\treturn A2(\n\t\telm$core$Maybe$withDefault,\n\t\t'',\n\t\tA2(\n\t\t\telm$core$Maybe$map,\n\t\t\tfunction (str) {\n\t\t\t\treturn '@charset \\\"' + (str + '\\\"');\n\t\t\t},\n\t\t\tcharset));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString = function (expression) {\n\treturn '(' + (expression.feature + (A2(\n\t\telm$core$Maybe$withDefault,\n\t\t'',\n\t\tA2(\n\t\t\telm$core$Maybe$map,\n\t\t\telm$core$Basics$append(': '),\n\t\t\texpression.value)) + ')'));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$mediaTypeToString = function (mediaType) {\n\tswitch (mediaType.$) {\n\t\tcase 'Print':\n\t\t\treturn 'print';\n\t\tcase 'Screen':\n\t\t\treturn 'screen';\n\t\tdefault:\n\t\t\treturn 'speech';\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString = function (mediaQuery) {\n\tvar prefixWith = F3(\n\t\tfunction (str, mediaType, expressions) {\n\t\t\treturn str + (' ' + A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t' and ',\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$Output$mediaTypeToString(mediaType),\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString, expressions))));\n\t\t});\n\tswitch (mediaQuery.$) {\n\t\tcase 'AllQuery':\n\t\t\tvar expressions = mediaQuery.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t' and ',\n\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString, expressions));\n\t\tcase 'OnlyQuery':\n\t\t\tvar mediaType = mediaQuery.a;\n\t\t\tvar expressions = mediaQuery.b;\n\t\t\treturn A3(prefixWith, 'only', mediaType, expressions);\n\t\tcase 'NotQuery':\n\t\t\tvar mediaType = mediaQuery.a;\n\t\t\tvar expressions = mediaQuery.b;\n\t\t\treturn A3(prefixWith, 'not', mediaType, expressions);\n\t\tdefault:\n\t\t\tvar str = mediaQuery.a;\n\t\t\treturn str;\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$importMediaQueryToString = F2(\n\tfunction (name, mediaQuery) {\n\t\treturn '@import \\\"' + (name + (rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString(mediaQuery) + '\\\"'));\n\t});\nvar rtfeldman$elm_css$Css$Structure$Output$importToString = function (_n0) {\n\tvar name = _n0.a;\n\tvar mediaQueries = _n0.b;\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n',\n\t\tA2(\n\t\t\telm$core$List$map,\n\t\t\trtfeldman$elm_css$Css$Structure$Output$importMediaQueryToString(name),\n\t\t\tmediaQueries));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$namespaceToString = function (_n0) {\n\tvar prefix = _n0.a;\n\tvar str = _n0.b;\n\treturn '@namespace ' + (prefix + ('\\\"' + (str + '\\\"')));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$spaceIndent = '    ';\nvar rtfeldman$elm_css$Css$Structure$Output$indent = function (str) {\n\treturn _Utils_ap(rtfeldman$elm_css$Css$Structure$Output$spaceIndent, str);\n};\nvar rtfeldman$elm_css$Css$Structure$Output$noIndent = '';\nvar rtfeldman$elm_css$Css$Structure$Output$emitProperty = function (str) {\n\treturn str + ';';\n};\nvar rtfeldman$elm_css$Css$Structure$Output$emitProperties = function (properties) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n',\n\t\tA2(\n\t\t\telm$core$List$map,\n\t\t\tA2(elm$core$Basics$composeL, rtfeldman$elm_css$Css$Structure$Output$indent, rtfeldman$elm_css$Css$Structure$Output$emitProperty),\n\t\t\tproperties));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$pseudoElementToString = function (_n0) {\n\tvar str = _n0.a;\n\treturn '::' + str;\n};\nvar rtfeldman$elm_css$Css$Structure$Output$combinatorToString = function (combinator) {\n\tswitch (combinator.$) {\n\t\tcase 'AdjacentSibling':\n\t\t\treturn '+';\n\t\tcase 'GeneralSibling':\n\t\t\treturn '~';\n\t\tcase 'Child':\n\t\t\treturn '>';\n\t\tdefault:\n\t\t\treturn '';\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString = function (repeatableSimpleSelector) {\n\tswitch (repeatableSimpleSelector.$) {\n\t\tcase 'ClassSelector':\n\t\t\tvar str = repeatableSimpleSelector.a;\n\t\t\treturn '.' + str;\n\t\tcase 'IdSelector':\n\t\t\tvar str = repeatableSimpleSelector.a;\n\t\t\treturn '#' + str;\n\t\tcase 'PseudoClassSelector':\n\t\t\tvar str = repeatableSimpleSelector.a;\n\t\t\treturn ':' + str;\n\t\tdefault:\n\t\t\tvar str = repeatableSimpleSelector.a;\n\t\t\treturn '[' + (str + ']');\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString = function (simpleSelectorSequence) {\n\tswitch (simpleSelectorSequence.$) {\n\t\tcase 'TypeSelectorSequence':\n\t\t\tvar str = simpleSelectorSequence.a.a;\n\t\t\tvar repeatableSimpleSelectors = simpleSelectorSequence.b;\n\t\t\treturn A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t'',\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\tstr,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors)));\n\t\tcase 'UniversalSelectorSequence':\n\t\t\tvar repeatableSimpleSelectors = simpleSelectorSequence.a;\n\t\t\treturn elm$core$List$isEmpty(repeatableSimpleSelectors) ? '*' : A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t'',\n\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors));\n\t\tdefault:\n\t\t\tvar str = simpleSelectorSequence.a;\n\t\t\tvar repeatableSimpleSelectors = simpleSelectorSequence.b;\n\t\t\treturn A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t'',\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\tstr,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors)));\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$selectorChainToString = function (_n0) {\n\tvar combinator = _n0.a;\n\tvar sequence = _n0.b;\n\treturn A2(\n\t\telm$core$String$join,\n\t\t' ',\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Css$Structure$Output$combinatorToString(combinator),\n\t\t\t\trtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString(sequence)\n\t\t\t]));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$selectorToString = function (_n0) {\n\tvar simpleSelectorSequence = _n0.a;\n\tvar chain = _n0.b;\n\tvar pseudoElement = _n0.c;\n\tvar segments = A2(\n\t\telm$core$List$cons,\n\t\trtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString(simpleSelectorSequence),\n\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$selectorChainToString, chain));\n\tvar pseudoElementsString = A2(\n\t\telm$core$String$join,\n\t\t'',\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t'',\n\t\t\t\tA2(elm$core$Maybe$map, rtfeldman$elm_css$Css$Structure$Output$pseudoElementToString, pseudoElement))\n\t\t\t]));\n\treturn A2(\n\t\telm$core$String$append,\n\t\tA2(\n\t\t\telm$core$String$join,\n\t\t\t' ',\n\t\t\tA2(\n\t\t\t\telm$core$List$filter,\n\t\t\t\tA2(elm$core$Basics$composeL, elm$core$Basics$not, elm$core$String$isEmpty),\n\t\t\t\tsegments)),\n\t\tpseudoElementsString);\n};\nvar rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock = F2(\n\tfunction (indentLevel, _n0) {\n\t\tvar firstSelector = _n0.a;\n\t\tvar otherSelectors = _n0.b;\n\t\tvar properties = _n0.c;\n\t\tvar selectorStr = A2(\n\t\t\telm$core$String$join,\n\t\t\t', ',\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\trtfeldman$elm_css$Css$Structure$Output$selectorToString,\n\t\t\t\tA2(elm$core$List$cons, firstSelector, otherSelectors)));\n\t\treturn A2(\n\t\t\telm$core$String$join,\n\t\t\t'',\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tselectorStr,\n\t\t\t\t\t' {\\n',\n\t\t\t\t\tindentLevel,\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$Output$emitProperties(properties),\n\t\t\t\t\t'\\n',\n\t\t\t\t\tindentLevel,\n\t\t\t\t\t'}'\n\t\t\t\t]));\n\t});\nvar rtfeldman$elm_css$Css$Structure$Output$prettyPrintDeclaration = function (decl) {\n\tswitch (decl.$) {\n\t\tcase 'StyleBlockDeclaration':\n\t\t\tvar styleBlock = decl.a;\n\t\t\treturn A2(rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock, rtfeldman$elm_css$Css$Structure$Output$noIndent, styleBlock);\n\t\tcase 'MediaRule':\n\t\t\tvar mediaQueries = decl.a;\n\t\t\tvar styleBlocks = decl.b;\n\t\t\tvar query = A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t',\\n',\n\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString, mediaQueries));\n\t\t\tvar blocks = A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t'\\n\\n',\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Basics$composeL,\n\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$Output$indent,\n\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock(rtfeldman$elm_css$Css$Structure$Output$spaceIndent)),\n\t\t\t\t\tstyleBlocks));\n\t\t\treturn '@media ' + (query + (' {\\n' + (blocks + '\\n}')));\n\t\tcase 'SupportsRule':\n\t\t\treturn 'TODO';\n\t\tcase 'DocumentRule':\n\t\t\treturn 'TODO';\n\t\tcase 'PageRule':\n\t\t\treturn 'TODO';\n\t\tcase 'FontFace':\n\t\t\treturn 'TODO';\n\t\tcase 'Keyframes':\n\t\t\tvar name = decl.a.name;\n\t\t\tvar declaration = decl.a.declaration;\n\t\t\treturn '@keyframes ' + (name + (' {\\n' + (declaration + '\\n}')));\n\t\tcase 'Viewport':\n\t\t\treturn 'TODO';\n\t\tcase 'CounterStyle':\n\t\t\treturn 'TODO';\n\t\tdefault:\n\t\t\treturn 'TODO';\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$prettyPrint = function (_n0) {\n\tvar charset = _n0.charset;\n\tvar imports = _n0.imports;\n\tvar namespaces = _n0.namespaces;\n\tvar declarations = _n0.declarations;\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n\\n',\n\t\tA2(\n\t\t\telm$core$List$filter,\n\t\t\tA2(elm$core$Basics$composeL, elm$core$Basics$not, elm$core$String$isEmpty),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$Output$charsetToString(charset),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t'\\n',\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$importToString, imports)),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t'\\n',\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$namespaceToString, namespaces)),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t'\\n\\n',\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$prettyPrintDeclaration, declarations))\n\t\t\t\t])));\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$compileHelp = function (sheet) {\n\treturn rtfeldman$elm_css$Css$Structure$Output$prettyPrint(\n\t\trtfeldman$elm_css$Css$Structure$compactStylesheet(\n\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$toStructure(sheet)));\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$compile = function (styles) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n\\n',\n\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Preprocess$Resolve$compileHelp, styles));\n};\nvar rtfeldman$elm_css$Css$Preprocess$Snippet = function (a) {\n\treturn {$: 'Snippet', a: a};\n};\nvar rtfeldman$elm_css$Css$Preprocess$StyleBlock = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'StyleBlock', a: a, b: b, c: c};\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$StyleBlockDeclaration = function (a) {\n\treturn {$: 'StyleBlockDeclaration', a: a};\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$makeSnippet = F2(\n\tfunction (styles, sequence) {\n\t\tvar selector = A3(rtfeldman$elm_css$Css$Structure$Selector, sequence, _List_Nil, elm$core$Maybe$Nothing);\n\t\treturn rtfeldman$elm_css$Css$Preprocess$Snippet(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$StyleBlockDeclaration(\n\t\t\t\t\tA3(rtfeldman$elm_css$Css$Preprocess$StyleBlock, selector, _List_Nil, styles))\n\t\t\t\t]));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$murmurSeed = 15739;\nvar rtfeldman$elm_css$VirtualDom$Styled$getClassname = function (styles) {\n\treturn elm$core$List$isEmpty(styles) ? 'unstyled' : A2(\n\t\telm$core$String$cons,\n\t\t_Utils_chr('_'),\n\t\trtfeldman$elm_hex$Hex$toString(\n\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$hashString,\n\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$murmurSeed,\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$compile(\n\t\t\t\t\telm$core$List$singleton(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$stylesheet(\n\t\t\t\t\t\t\telm$core$List$singleton(\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$makeSnippet,\n\t\t\t\t\t\t\t\t\tstyles,\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(_List_Nil)))))))));\n};\nvar rtfeldman$elm_css$Html$Styled$Internal$css = function (styles) {\n\tvar classname = rtfeldman$elm_css$VirtualDom$Styled$getClassname(styles);\n\tvar classProperty = A2(\n\t\telm$virtual_dom$VirtualDom$property,\n\t\t'className',\n\t\telm$json$Json$Encode$string(classname));\n\treturn A3(rtfeldman$elm_css$VirtualDom$Styled$Attribute, classProperty, styles, classname);\n};\nvar rtfeldman$elm_css$Html$Styled$Attributes$css = rtfeldman$elm_css$Html$Styled$Internal$css;\nvar perzanko$elm_loading$Loading$Bars$view = function (config) {\n\tvar withSpeed = function (x) {\n\t\treturn elm$core$String$fromFloat(x / config.speed);\n\t};\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'display', 'flex'),\n\t\t\trtfeldman$elm_css$Css$justifyContent(rtfeldman$elm_css$Css$spaceBetween),\n\t\t\trtfeldman$elm_css$Css$alignItems(rtfeldman$elm_css$Css$flexEnd)\n\t\t]);\n\tvar childStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size / 3.5)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size / 3.5)),\n\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\trtfeldman$elm_css$Css$px(5)),\n\t\t\trtfeldman$elm_css$Css$backgroundColor(\n\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t'animation-duration',\n\t\t\twithSpeed(1.5) + 's'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-function', 'ease-in-out'),\n\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$property,\n\t\t\t\t\t\t\t\t'height',\n\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size / 3.5) + 'px'),\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t50,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$property,\n\t\t\t\t\t\t\t\t'height',\n\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size) + 'px'),\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t100,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$property,\n\t\t\t\t\t\t\t\t'height',\n\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size / 3.5) + 'px'),\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0)')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])))\n\t\t]);\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(1) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(0.5) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(1.0e-7) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar rtfeldman$elm_css$Css$block = {display: rtfeldman$elm_css$Css$Structure$Compatible, value: 'block'};\nvar rtfeldman$elm_css$Css$center = rtfeldman$elm_css$Css$prop1('center');\nvar rtfeldman$elm_css$Css$display = rtfeldman$elm_css$Css$prop1('display');\nvar rtfeldman$elm_css$Css$PercentageUnits = {$: 'PercentageUnits'};\nvar rtfeldman$elm_css$Css$pct = A2(rtfeldman$elm_css$Css$Internal$lengthConverter, rtfeldman$elm_css$Css$PercentageUnits, '%');\nvar perzanko$elm_loading$Loading$BouncingBalls$view = function (config) {\n\tvar withSpeed = function (x) {\n\t\treturn elm$core$String$fromFloat(x / config.speed);\n\t};\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'display', 'flex'),\n\t\t\trtfeldman$elm_css$Css$justifyContent(rtfeldman$elm_css$Css$spaceBetween),\n\t\t\trtfeldman$elm_css$Css$alignItems(rtfeldman$elm_css$Css$center)\n\t\t]);\n\tvar childStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$display(rtfeldman$elm_css$Css$block),\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size / 3.5)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size / 3.5)),\n\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\trtfeldman$elm_css$Css$backgroundColor(\n\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t'animation-duration',\n\t\t\twithSpeed(0.6) + 's'),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t'animation-delay',\n\t\t\twithSpeed(0.1) + 's'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-function', 'linear'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0) translateZ(0) translate(0,0)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t50,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$property,\n\t\t\t\t\t\t\t\t'transform',\n\t\t\t\t\t\t\t\t'translate3d(0,0,0) translateZ(0) translate(0,' + (elm$core$String$fromFloat(config.size / 3.5) + 'px)'))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t100,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0) translateZ(0) translate(0,0)')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])))\n\t\t]);\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(0.1) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(0.2) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(0.3) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar rtfeldman$elm_css$Css$absolute = {position: rtfeldman$elm_css$Css$Structure$Compatible, value: 'absolute'};\nvar rtfeldman$elm_css$Css$left = rtfeldman$elm_css$Css$prop1('left');\nvar rtfeldman$elm_css$Css$UnitlessFloat = {$: 'UnitlessFloat'};\nvar rtfeldman$elm_css$Css$num = function (val) {\n\treturn {\n\t\tlengthOrNumber: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tlengthOrNumberOrAutoOrNoneOrContent: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tnumber: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tnumberOrInfinite: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tnumericValue: val,\n\t\tunitLabel: '',\n\t\tunits: rtfeldman$elm_css$Css$UnitlessFloat,\n\t\tvalue: elm$core$String$fromFloat(val)\n\t};\n};\nvar rtfeldman$elm_css$Css$opacity = rtfeldman$elm_css$Css$prop1('opacity');\nvar rtfeldman$elm_css$Css$top = rtfeldman$elm_css$Css$prop1('top');\nvar perzanko$elm_loading$Loading$Circle$view = function (config) {\n\tvar withSpeed = function (x) {\n\t\treturn elm$core$String$fromFloat(x / config.speed);\n\t};\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size * 0.95)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto)\n\t\t]);\n\tvar childStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size - (2 * (config.size * 0.17)))),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size - (2 * (config.size * 0.17)))),\n\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\trtfeldman$elm_css$Css$pct(50)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$absolute),\n\t\t\trtfeldman$elm_css$Css$top(\n\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\trtfeldman$elm_css$Css$left(\n\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t'animation-duration',\n\t\t\twithSpeed(1.33) + 's'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-function', 'cubic-bezier(.51,.92,.24,1.15)'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0) rotate(0deg)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t100,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0) rotate(720deg)')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])))\n\t\t]);\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\telm$core$List$concat(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t'border',\n\t\t\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size * 0.17) + ('px ' + (config.color + ' solid'))),\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0.25))\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\telm$core$List$concat(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t'border',\n\t\t\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size * 0.17) + 'px transparent solid'),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t'border-top',\n\t\t\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size * 0.17) + ('px ' + (config.color + ' solid'))),\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0.8))\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar perzanko$elm_loading$Loading$DoubleBounce$view = function (config) {\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto)\n\t\t]);\n\tvar innerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\trtfeldman$elm_css$Css$pct(50)),\n\t\t\trtfeldman$elm_css$Css$backgroundColor(\n\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\trtfeldman$elm_css$Css$opacity(\n\t\t\trtfeldman$elm_css$Css$num(0.6)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$absolute),\n\t\t\trtfeldman$elm_css$Css$top(\n\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\trtfeldman$elm_css$Css$left(\n\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.0)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t50,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(1.0)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t100,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.0)')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t'animation-duration',\n\t\t\telm$core$String$fromFloat(2 / config.speed) + 's'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-function', 'ease-in-out'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite')\n\t\t]);\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(innerStyle)\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\telm$core$List$concat(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tinnerStyle,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\t\t'-' + (elm$core$String$fromFloat(1 / config.speed) + 's'))\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar rtfeldman$elm_css$Css$Preprocess$WithPseudoElement = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'WithPseudoElement', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Structure$PseudoElement = function (a) {\n\treturn {$: 'PseudoElement', a: a};\n};\nvar rtfeldman$elm_css$Css$pseudoElement = function (element) {\n\treturn rtfeldman$elm_css$Css$Preprocess$WithPseudoElement(\n\t\trtfeldman$elm_css$Css$Structure$PseudoElement(element));\n};\nvar rtfeldman$elm_css$Css$after = rtfeldman$elm_css$Css$pseudoElement('after');\nvar rtfeldman$elm_css$Css$before = rtfeldman$elm_css$Css$pseudoElement('before');\nvar rtfeldman$elm_css$Css$prop3 = F4(\n\tfunction (key, argA, argB, argC) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\tkey,\n\t\t\tA2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t' ',\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[argA.value, argB.value, argC.value])));\n\t});\nvar rtfeldman$elm_css$Css$border3 = rtfeldman$elm_css$Css$prop3('border');\nvar rtfeldman$elm_css$Css$solid = {borderStyle: rtfeldman$elm_css$Css$Structure$Compatible, textDecorationStyle: rtfeldman$elm_css$Css$Structure$Compatible, value: 'solid'};\nvar rtfeldman$elm_css$Css$Animations$opacity = function (_n0) {\n\tvar value = _n0.value;\n\treturn rtfeldman$elm_css$Css$Internal$Property('opacity:' + value);\n};\nvar perzanko$elm_loading$Loading$Sonar$view = function (config) {\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto),\n\t\t\trtfeldman$elm_css$Css$before(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'content', '\\' \\''),\n\t\t\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$absolute),\n\t\t\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\t\t\trtfeldman$elm_css$Css$pct(50)),\n\t\t\t\t\trtfeldman$elm_css$Css$width(\n\t\t\t\t\trtfeldman$elm_css$Css$px(config.size / 3)),\n\t\t\t\t\trtfeldman$elm_css$Css$height(\n\t\t\t\t\trtfeldman$elm_css$Css$px(config.size / 3)),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'top',\n\t\t\t\t\t'calc(50% - ' + (elm$core$String$fromFloat(config.size / 6) + 'px)')),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'left',\n\t\t\t\t\t'calc(50% - ' + (elm$core$String$fromFloat(config.size / 6) + 'px)')),\n\t\t\t\t\trtfeldman$elm_css$Css$backgroundColor(\n\t\t\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'animation-duration',\n\t\t\t\t\telm$core$String$fromFloat(3 / config.speed) + 's'),\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-funtion', 'linear'),\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(1))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t15,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(1)),\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.5)')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t60,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(4)'),\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t90,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0)),\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(3)')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t95,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(1))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t100,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(1)),\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(1)')\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])))\n\t\t\t\t])),\n\t\t\trtfeldman$elm_css$Css$after(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'content', '\\' \\''),\n\t\t\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$absolute),\n\t\t\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\t\t\trtfeldman$elm_css$Css$pct(50)),\n\t\t\t\t\trtfeldman$elm_css$Css$width(\n\t\t\t\t\trtfeldman$elm_css$Css$px(config.size / 3)),\n\t\t\t\t\trtfeldman$elm_css$Css$height(\n\t\t\t\t\trtfeldman$elm_css$Css$px(config.size / 3)),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'top',\n\t\t\t\t\t'calc(50% - ' + (elm$core$String$fromFloat(config.size / 6) + 'px)')),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'left',\n\t\t\t\t\t'calc(50% - ' + (elm$core$String$fromFloat(config.size / 6) + 'px)')),\n\t\t\t\t\tA3(\n\t\t\t\t\trtfeldman$elm_css$Css$border3,\n\t\t\t\t\trtfeldman$elm_css$Css$px(1),\n\t\t\t\t\trtfeldman$elm_css$Css$solid,\n\t\t\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\t\t\trtfeldman$elm_css$Css$opacity(\n\t\t\t\t\trtfeldman$elm_css$Css$num(0)),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'animation-duration',\n\t\t\t\t\telm$core$String$fromFloat(3 / config.speed) + 's'),\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-funtion', 'linear'),\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0)),\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(1)')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t30,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0)),\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(1)')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t60,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0.3))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t90,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(3)')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t100,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])))\n\t\t\t\t]))\n\t\t]);\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_Nil);\n};\nvar perzanko$elm_loading$Loading$Spinner$view = function (config) {\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto)\n\t\t]);\n\tvar childs = A2(elm$core$List$range, 1, 12);\n\tvar childStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$pct(100))\n\t\t]);\n\tvar calcAnimationDelay = function (x) {\n\t\treturn (x === 1) ? '0s' : (elm$core$String$fromFloat(-((1.1 - (x / 10)) / config.speed)) + 's');\n\t};\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)\n\t\t\t\t\t]),\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\tfunction (x) {\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$width(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$height(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$absolute),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$left(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$top(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t\t'transform',\n\t\t\t\t\t\t\t\t\t\t\t'rotate(' + (elm$core$String$fromInt((30 * x) - 30) + 'deg)')),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$before(\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\t\t\t\t\tcalcAnimationDelay(x)),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'content', '\\' \\''),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$display(rtfeldman$elm_css$Css$block),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$auto),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$width(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$pct(15)),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$height(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$pct(15)),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$backgroundColor(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'animation-duration',\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromFloat(1.2 / config.speed) + 's'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-fill-mode', 'both'),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.0)')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t40,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(1.0)')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t80,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.0)')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t100,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.0)')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t},\n\t\t\t\t\tchilds))\n\t\t\t]));\n};\nvar elm$virtual_dom$VirtualDom$node = function (tag) {\n\treturn _VirtualDom_node(\n\t\t_VirtualDom_noScript(tag));\n};\nvar elm$virtual_dom$VirtualDom$keyedNode = function (tag) {\n\treturn _VirtualDom_keyedNode(\n\t\t_VirtualDom_noScript(tag));\n};\nvar elm$virtual_dom$VirtualDom$keyedNodeNS = F2(\n\tfunction (namespace, tag) {\n\t\treturn A2(\n\t\t\t_VirtualDom_keyedNodeNS,\n\t\t\tnamespace,\n\t\t\t_VirtualDom_noScript(tag));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles = F2(\n\tfunction (_n0, styles) {\n\t\tvar newStyles = _n0.b;\n\t\tvar classname = _n0.c;\n\t\treturn elm$core$List$isEmpty(newStyles) ? styles : A3(elm$core$Dict$insert, classname, newStyles, styles);\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute = function (_n0) {\n\tvar val = _n0.a;\n\treturn val;\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml = F2(\n\tfunction (_n6, _n7) {\n\t\tvar key = _n6.a;\n\t\tvar html = _n6.b;\n\t\tvar pairs = _n7.a;\n\t\tvar styles = _n7.b;\n\t\tswitch (html.$) {\n\t\t\tcase 'Unstyled':\n\t\t\t\tvar vdom = html.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(key, vdom),\n\t\t\t\t\t\tpairs),\n\t\t\t\t\tstyles);\n\t\t\tcase 'Node':\n\t\t\t\tvar elemType = html.a;\n\t\t\t\tvar properties = html.b;\n\t\t\t\tvar children = html.c;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n9 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n9.a;\n\t\t\t\tvar finalStyles = _n9.b;\n\t\t\t\tvar vdom = A3(\n\t\t\t\t\telm$virtual_dom$VirtualDom$node,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(key, vdom),\n\t\t\t\t\t\tpairs),\n\t\t\t\t\tfinalStyles);\n\t\t\tcase 'NodeNS':\n\t\t\t\tvar ns = html.a;\n\t\t\t\tvar elemType = html.b;\n\t\t\t\tvar properties = html.c;\n\t\t\t\tvar children = html.d;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n10 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n10.a;\n\t\t\t\tvar finalStyles = _n10.b;\n\t\t\t\tvar vdom = A4(\n\t\t\t\t\telm$virtual_dom$VirtualDom$nodeNS,\n\t\t\t\t\tns,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(key, vdom),\n\t\t\t\t\t\tpairs),\n\t\t\t\t\tfinalStyles);\n\t\t\tcase 'KeyedNode':\n\t\t\t\tvar elemType = html.a;\n\t\t\t\tvar properties = html.b;\n\t\t\t\tvar children = html.c;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n11 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n11.a;\n\t\t\t\tvar finalStyles = _n11.b;\n\t\t\t\tvar vdom = A3(\n\t\t\t\t\telm$virtual_dom$VirtualDom$keyedNode,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(key, vdom),\n\t\t\t\t\t\tpairs),\n\t\t\t\t\tfinalStyles);\n\t\t\tdefault:\n\t\t\t\tvar ns = html.a;\n\t\t\t\tvar elemType = html.b;\n\t\t\t\tvar properties = html.c;\n\t\t\t\tvar children = html.d;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n12 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n12.a;\n\t\t\t\tvar finalStyles = _n12.b;\n\t\t\t\tvar vdom = A4(\n\t\t\t\t\telm$virtual_dom$VirtualDom$keyedNodeNS,\n\t\t\t\t\tns,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(key, vdom),\n\t\t\t\t\t\tpairs),\n\t\t\t\t\tfinalStyles);\n\t\t}\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml = F2(\n\tfunction (html, _n0) {\n\t\tvar nodes = _n0.a;\n\t\tvar styles = _n0.b;\n\t\tswitch (html.$) {\n\t\t\tcase 'Unstyled':\n\t\t\t\tvar vdomNode = html.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(elm$core$List$cons, vdomNode, nodes),\n\t\t\t\t\tstyles);\n\t\t\tcase 'Node':\n\t\t\t\tvar elemType = html.a;\n\t\t\t\tvar properties = html.b;\n\t\t\t\tvar children = html.c;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n2 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n2.a;\n\t\t\t\tvar finalStyles = _n2.b;\n\t\t\t\tvar vdomNode = A3(\n\t\t\t\t\telm$virtual_dom$VirtualDom$node,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(elm$core$List$cons, vdomNode, nodes),\n\t\t\t\t\tfinalStyles);\n\t\t\tcase 'NodeNS':\n\t\t\t\tvar ns = html.a;\n\t\t\t\tvar elemType = html.b;\n\t\t\t\tvar properties = html.c;\n\t\t\t\tvar children = html.d;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n3 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n3.a;\n\t\t\t\tvar finalStyles = _n3.b;\n\t\t\t\tvar vdomNode = A4(\n\t\t\t\t\telm$virtual_dom$VirtualDom$nodeNS,\n\t\t\t\t\tns,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(elm$core$List$cons, vdomNode, nodes),\n\t\t\t\t\tfinalStyles);\n\t\t\tcase 'KeyedNode':\n\t\t\t\tvar elemType = html.a;\n\t\t\t\tvar properties = html.b;\n\t\t\t\tvar children = html.c;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n4 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n4.a;\n\t\t\t\tvar finalStyles = _n4.b;\n\t\t\t\tvar vdomNode = A3(\n\t\t\t\t\telm$virtual_dom$VirtualDom$keyedNode,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(elm$core$List$cons, vdomNode, nodes),\n\t\t\t\t\tfinalStyles);\n\t\t\tdefault:\n\t\t\t\tvar ns = html.a;\n\t\t\t\tvar elemType = html.b;\n\t\t\t\tvar properties = html.c;\n\t\t\t\tvar children = html.d;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n5 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n5.a;\n\t\t\t\tvar finalStyles = _n5.b;\n\t\t\t\tvar vdomNode = A4(\n\t\t\t\t\telm$virtual_dom$VirtualDom$keyedNodeNS,\n\t\t\t\t\tns,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(elm$core$List$cons, vdomNode, nodes),\n\t\t\t\t\tfinalStyles);\n\t\t}\n\t});\nvar elm$core$Dict$singleton = F2(\n\tfunction (key, value) {\n\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, key, value, elm$core$Dict$RBEmpty_elm_builtin, elm$core$Dict$RBEmpty_elm_builtin);\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$stylesFromPropertiesHelp = F2(\n\tfunction (candidate, properties) {\n\t\tstylesFromPropertiesHelp:\n\t\twhile (true) {\n\t\t\tif (!properties.b) {\n\t\t\t\treturn candidate;\n\t\t\t} else {\n\t\t\t\tvar _n1 = properties.a;\n\t\t\t\tvar styles = _n1.b;\n\t\t\t\tvar classname = _n1.c;\n\t\t\t\tvar rest = properties.b;\n\t\t\t\tif (elm$core$String$isEmpty(classname)) {\n\t\t\t\t\tvar $temp$candidate = candidate,\n\t\t\t\t\t\t$temp$properties = rest;\n\t\t\t\t\tcandidate = $temp$candidate;\n\t\t\t\t\tproperties = $temp$properties;\n\t\t\t\t\tcontinue stylesFromPropertiesHelp;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$candidate = elm$core$Maybe$Just(\n\t\t\t\t\t\t_Utils_Tuple2(classname, styles)),\n\t\t\t\t\t\t$temp$properties = rest;\n\t\t\t\t\tcandidate = $temp$candidate;\n\t\t\t\t\tproperties = $temp$properties;\n\t\t\t\t\tcontinue stylesFromPropertiesHelp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties = function (properties) {\n\tvar _n0 = A2(rtfeldman$elm_css$VirtualDom$Styled$stylesFromPropertiesHelp, elm$core$Maybe$Nothing, properties);\n\tif (_n0.$ === 'Nothing') {\n\t\treturn elm$core$Dict$empty;\n\t} else {\n\t\tvar _n1 = _n0.a;\n\t\tvar classname = _n1.a;\n\t\tvar styles = _n1.b;\n\t\treturn A2(elm$core$Dict$singleton, classname, styles);\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$ClassSelector = function (a) {\n\treturn {$: 'ClassSelector', a: a};\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$snippetFromPair = function (_n0) {\n\tvar classname = _n0.a;\n\tvar styles = _n0.b;\n\treturn A2(\n\t\trtfeldman$elm_css$VirtualDom$Styled$makeSnippet,\n\t\tstyles,\n\t\trtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$ClassSelector(classname)\n\t\t\t\t])));\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$toDeclaration = function (dict) {\n\treturn rtfeldman$elm_css$Css$Preprocess$Resolve$compile(\n\t\telm$core$List$singleton(\n\t\t\trtfeldman$elm_css$Css$Preprocess$stylesheet(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$snippetFromPair,\n\t\t\t\t\telm$core$Dict$toList(dict)))));\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$toStyleNode = function (styles) {\n\treturn A3(\n\t\telm$virtual_dom$VirtualDom$node,\n\t\t'style',\n\t\t_List_Nil,\n\t\telm$core$List$singleton(\n\t\t\telm$virtual_dom$VirtualDom$text(\n\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$toDeclaration(styles))));\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$unstyle = F3(\n\tfunction (elemType, properties, children) {\n\t\tvar unstyledProperties = A2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);\n\t\tvar initialStyles = rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t_Utils_Tuple2(_List_Nil, initialStyles),\n\t\t\tchildren);\n\t\tvar childNodes = _n0.a;\n\t\tvar styles = _n0.b;\n\t\tvar styleNode = rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(styles);\n\t\treturn A3(\n\t\t\telm$virtual_dom$VirtualDom$node,\n\t\t\telemType,\n\t\t\tunstyledProperties,\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tstyleNode,\n\t\t\t\telm$core$List$reverse(childNodes)));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$containsKey = F2(\n\tfunction (key, pairs) {\n\t\tcontainsKey:\n\t\twhile (true) {\n\t\t\tif (!pairs.b) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tvar _n1 = pairs.a;\n\t\t\t\tvar str = _n1.a;\n\t\t\t\tvar rest = pairs.b;\n\t\t\t\tif (_Utils_eq(key, str)) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$key = key,\n\t\t\t\t\t\t$temp$pairs = rest;\n\t\t\t\t\tkey = $temp$key;\n\t\t\t\t\tpairs = $temp$pairs;\n\t\t\t\t\tcontinue containsKey;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$getUnusedKey = F2(\n\tfunction (_default, pairs) {\n\t\tgetUnusedKey:\n\t\twhile (true) {\n\t\t\tif (!pairs.b) {\n\t\t\t\treturn _default;\n\t\t\t} else {\n\t\t\t\tvar _n1 = pairs.a;\n\t\t\t\tvar firstKey = _n1.a;\n\t\t\t\tvar rest = pairs.b;\n\t\t\t\tvar newKey = '_' + firstKey;\n\t\t\t\tif (A2(rtfeldman$elm_css$VirtualDom$Styled$containsKey, newKey, rest)) {\n\t\t\t\t\tvar $temp$default = newKey,\n\t\t\t\t\t\t$temp$pairs = rest;\n\t\t\t\t\t_default = $temp$default;\n\t\t\t\t\tpairs = $temp$pairs;\n\t\t\t\t\tcontinue getUnusedKey;\n\t\t\t\t} else {\n\t\t\t\t\treturn newKey;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode = F2(\n\tfunction (allStyles, keyedChildNodes) {\n\t\tvar styleNodeKey = A2(rtfeldman$elm_css$VirtualDom$Styled$getUnusedKey, '_', keyedChildNodes);\n\t\tvar finalNode = rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(allStyles);\n\t\treturn _Utils_Tuple2(styleNodeKey, finalNode);\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyed = F3(\n\tfunction (elemType, properties, keyedChildren) {\n\t\tvar unstyledProperties = A2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);\n\t\tvar initialStyles = rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t_Utils_Tuple2(_List_Nil, initialStyles),\n\t\t\tkeyedChildren);\n\t\tvar keyedChildNodes = _n0.a;\n\t\tvar styles = _n0.b;\n\t\tvar keyedStyleNode = A2(rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode, styles, keyedChildNodes);\n\t\treturn A3(\n\t\t\telm$virtual_dom$VirtualDom$keyedNode,\n\t\t\telemType,\n\t\t\tunstyledProperties,\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tkeyedStyleNode,\n\t\t\t\telm$core$List$reverse(keyedChildNodes)));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyedNS = F4(\n\tfunction (ns, elemType, properties, keyedChildren) {\n\t\tvar unstyledProperties = A2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);\n\t\tvar initialStyles = rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t_Utils_Tuple2(_List_Nil, initialStyles),\n\t\t\tkeyedChildren);\n\t\tvar keyedChildNodes = _n0.a;\n\t\tvar styles = _n0.b;\n\t\tvar keyedStyleNode = A2(rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode, styles, keyedChildNodes);\n\t\treturn A4(\n\t\t\telm$virtual_dom$VirtualDom$keyedNodeNS,\n\t\t\tns,\n\t\t\telemType,\n\t\t\tunstyledProperties,\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tkeyedStyleNode,\n\t\t\t\telm$core$List$reverse(keyedChildNodes)));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$unstyleNS = F4(\n\tfunction (ns, elemType, properties, children) {\n\t\tvar unstyledProperties = A2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);\n\t\tvar initialStyles = rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t_Utils_Tuple2(_List_Nil, initialStyles),\n\t\t\tchildren);\n\t\tvar childNodes = _n0.a;\n\t\tvar styles = _n0.b;\n\t\tvar styleNode = rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(styles);\n\t\treturn A4(\n\t\t\telm$virtual_dom$VirtualDom$nodeNS,\n\t\t\tns,\n\t\t\telemType,\n\t\t\tunstyledProperties,\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tstyleNode,\n\t\t\t\telm$core$List$reverse(childNodes)));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$toUnstyled = function (vdom) {\n\tswitch (vdom.$) {\n\t\tcase 'Unstyled':\n\t\t\tvar plainNode = vdom.a;\n\t\t\treturn plainNode;\n\t\tcase 'Node':\n\t\t\tvar elemType = vdom.a;\n\t\t\tvar properties = vdom.b;\n\t\t\tvar children = vdom.c;\n\t\t\treturn A3(rtfeldman$elm_css$VirtualDom$Styled$unstyle, elemType, properties, children);\n\t\tcase 'NodeNS':\n\t\t\tvar ns = vdom.a;\n\t\t\tvar elemType = vdom.b;\n\t\t\tvar properties = vdom.c;\n\t\t\tvar children = vdom.d;\n\t\t\treturn A4(rtfeldman$elm_css$VirtualDom$Styled$unstyleNS, ns, elemType, properties, children);\n\t\tcase 'KeyedNode':\n\t\t\tvar elemType = vdom.a;\n\t\t\tvar properties = vdom.b;\n\t\t\tvar children = vdom.c;\n\t\t\treturn A3(rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyed, elemType, properties, children);\n\t\tdefault:\n\t\t\tvar ns = vdom.a;\n\t\t\tvar elemType = vdom.b;\n\t\t\tvar properties = vdom.c;\n\t\t\tvar children = vdom.d;\n\t\t\treturn A4(rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyedNS, ns, elemType, properties, children);\n\t}\n};\nvar rtfeldman$elm_css$Html$Styled$toUnstyled = rtfeldman$elm_css$VirtualDom$Styled$toUnstyled;\nvar perzanko$elm_loading$Loading$render = F3(\n\tfunction (loaderType, config, loadingState) {\n\t\tvar loader = function () {\n\t\t\tswitch (loaderType.$) {\n\t\t\t\tcase 'DoubleBounce':\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$DoubleBounce$view(config));\n\t\t\t\tcase 'Spinner':\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$Spinner$view(config));\n\t\t\t\tcase 'BouncingBalls':\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$BouncingBalls$view(config));\n\t\t\t\tcase 'Bars':\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$Bars$view(config));\n\t\t\t\tcase 'Circle':\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle$view(config));\n\t\t\t\tdefault:\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$Sonar$view(config));\n\t\t\t}\n\t\t}();\n\t\tif (loadingState.$ === 'On') {\n\t\t\treturn A2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('loading')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[loader]));\n\t\t} else {\n\t\t\treturn elm$html$Html$text(' ');\n\t\t}\n\t});\nvar author$project$Main$viewLoading = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '800px'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '25%'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h2,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Fetching data from the server')\n\t\t\t\t\t])),\n\t\t\t\tA3(\n\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t_Utils_update(\n\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t{size: 60}),\n\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t]));\n};\nvar author$project$Image$trimString = function (string) {\n\treturn (elm$core$String$length(string) > 25) ? A2(\n\t\telm$core$String$append,\n\t\tA3(elm$core$String$slice, 0, 25, string),\n\t\t'...') : string;\n};\nvar elm$html$Html$b = _VirtualDom_node('b');\nvar elm$html$Html$h3 = _VirtualDom_node('h3');\nvar elm$html$Html$hr = _VirtualDom_node('hr');\nvar elm$html$Html$Attributes$title = elm$html$Html$Attributes$stringProperty('title');\nvar elm$svg$Svg$circle = elm$svg$Svg$trustedNode('circle');\nvar elm$svg$Svg$polyline = elm$svg$Svg$trustedNode('polyline');\nvar elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');\nvar elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');\nvar elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');\nvar feathericons$elm_feather$FeatherIcons$Icon = function (a) {\n\treturn {$: 'Icon', a: a};\n};\nvar feathericons$elm_feather$FeatherIcons$defaultAttributes = function (name) {\n\treturn {\n\t\t_class: elm$core$Maybe$Just('feather feather-' + name),\n\t\tsize: 24,\n\t\tsizeUnit: '',\n\t\tstrokeWidth: 2,\n\t\tviewBox: '0 0 24 24'\n\t};\n};\nvar feathericons$elm_feather$FeatherIcons$makeBuilder = F2(\n\tfunction (name, src) {\n\t\treturn feathericons$elm_feather$FeatherIcons$Icon(\n\t\t\t{\n\t\t\t\tattrs: feathericons$elm_feather$FeatherIcons$defaultAttributes(name),\n\t\t\t\tsrc: src\n\t\t\t});\n\t});\nvar feathericons$elm_feather$FeatherIcons$award = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'award',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('8'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('7')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$polyline,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$points('8.21 13.89 7 23 12 20 17 23 15.79 13.88')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar elm$svg$Svg$path = elm$svg$Svg$trustedNode('path');\nvar elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');\nvar feathericons$elm_feather$FeatherIcons$eye = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'eye',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$d('M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('3')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar feathericons$elm_feather$FeatherIcons$heart = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'heart',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$d('M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar elm$svg$Svg$map = elm$virtual_dom$VirtualDom$map;\nvar elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');\nvar elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');\nvar elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');\nvar elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');\nvar elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');\nvar elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');\nvar feathericons$elm_feather$FeatherIcons$toHtml = F2(\n\tfunction (attributes, _n0) {\n\t\tvar src = _n0.a.src;\n\t\tvar attrs = _n0.a.attrs;\n\t\tvar strSize = elm$core$String$fromFloat(attrs.size);\n\t\tvar baseAttributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('none'),\n\t\t\t\telm$svg$Svg$Attributes$height(\n\t\t\t\t_Utils_ap(strSize, attrs.sizeUnit)),\n\t\t\t\telm$svg$Svg$Attributes$width(\n\t\t\t\t_Utils_ap(strSize, attrs.sizeUnit)),\n\t\t\t\telm$svg$Svg$Attributes$stroke('currentColor'),\n\t\t\t\telm$svg$Svg$Attributes$strokeLinecap('round'),\n\t\t\t\telm$svg$Svg$Attributes$strokeLinejoin('round'),\n\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\telm$core$String$fromFloat(attrs.strokeWidth)),\n\t\t\t\telm$svg$Svg$Attributes$viewBox(attrs.viewBox)\n\t\t\t]);\n\t\tvar combinedAttributes = _Utils_ap(\n\t\t\tfunction () {\n\t\t\t\tvar _n1 = attrs._class;\n\t\t\t\tif (_n1.$ === 'Just') {\n\t\t\t\t\tvar c = _n1.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\telm$svg$Svg$Attributes$class(c),\n\t\t\t\t\t\tbaseAttributes);\n\t\t\t\t} else {\n\t\t\t\t\treturn baseAttributes;\n\t\t\t\t}\n\t\t\t}(),\n\t\t\tattributes);\n\t\treturn A2(\n\t\t\telm$svg$Svg$svg,\n\t\t\tcombinedAttributes,\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\telm$svg$Svg$map(elm$core$Basics$never),\n\t\t\t\tsrc));\n\t});\nvar feathericons$elm_feather$FeatherIcons$withSize = F2(\n\tfunction (size, _n0) {\n\t\tvar attrs = _n0.a.attrs;\n\t\tvar src = _n0.a.src;\n\t\treturn feathericons$elm_feather$FeatherIcons$Icon(\n\t\t\t{\n\t\t\t\tattrs: _Utils_update(\n\t\t\t\t\tattrs,\n\t\t\t\t\t{size: size}),\n\t\t\t\tsrc: src\n\t\t\t});\n\t});\nvar feathericons$elm_feather$FeatherIcons$withStrokeWidth = F2(\n\tfunction (strokeWidth, _n0) {\n\t\tvar attrs = _n0.a.attrs;\n\t\tvar src = _n0.a.src;\n\t\treturn feathericons$elm_feather$FeatherIcons$Icon(\n\t\t\t{\n\t\t\t\tattrs: _Utils_update(\n\t\t\t\t\tattrs,\n\t\t\t\t\t{strokeWidth: strokeWidth}),\n\t\t\t\tsrc: src\n\t\t\t});\n\t});\nvar author$project$Image$showPreview = function (image) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'display', 'inline-block'),\n\t\t\t\telm$html$Html$Attributes$class('jumbotron'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', 'white')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-40px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + image.id)\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(image.url),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(400),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(400),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'object-fit', 'cover'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto 10px')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Could not display image')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('caption'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '400px'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '0.5px solid #F5F5F5'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '150px'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + image.id)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Image$trimString(image.title))\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-10px')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('by '),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + image.author),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(image.author)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.3')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Views')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 15, feathericons$elm_feather$FeatherIcons$eye))),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(image.views))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Points')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 15, feathericons$elm_feather$FeatherIcons$award))),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(image.points))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Favourites')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 15, feathericons$elm_feather$FeatherIcons$heart))),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(image.favorites))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Gallery$SortNewest = {$: 'SortNewest'};\nvar author$project$Pages$Gallery$SortPopular = {$: 'SortPopular'};\nvar author$project$Pages$Gallery$SortTop = {$: 'SortTop'};\nvar author$project$Pages$Gallery$pageSize = 9;\nvar author$project$Pages$Gallery$Jump = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Jump', a: a, b: b};\n\t});\nvar elm$html$Html$button = _VirtualDom_node('button');\nvar author$project$Pages$Gallery$viewButton = F2(\n\tfunction (model, num) {\n\t\treturn A2(\n\t\t\telm$html$Html$button,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$Attributes$class('btn btn-default'),\n\t\t\t\t\t_Utils_eq(model.page, num) ? A2(elm$html$Html$Attributes$style, 'opacity', '0.3') : A2(elm$html$Html$Attributes$style, '', ''),\n\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\tA2(author$project$Pages$Gallery$Jump, model.sort, num))\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\telm$core$String$fromInt(num))\n\t\t\t\t]));\n\t});\nvar elm$html$Html$h1 = _VirtualDom_node('h1');\nvar elm$html$Html$h4 = _VirtualDom_node('h4');\nvar author$project$Pages$Gallery$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h1,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Image Gallery')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Browse images uploaded by our users')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$hr,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '80%')\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-info'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '80%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Sort by: '),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Gallery$SortNewest),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '10px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t(model.sort === 'newest') ? A2(elm$html$Html$Attributes$style, 'text-decoration', 'underline') : A2(elm$html$Html$Attributes$style, '', '')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Newest')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Gallery$SortPopular),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '10px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t(model.sort === 'popular') ? A2(elm$html$Html$Attributes$style, 'text-decoration', 'underline') : A2(elm$html$Html$Attributes$style, '', '')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Most Popular')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Gallery$SortTop),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t(model.sort === 'rating') ? A2(elm$html$Html$Attributes$style, 'text-decoration', 'underline') : A2(elm$html$Html$Attributes$style, '', '')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Top Rated')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Currently sorting by: '),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n0 = model.sort;\n\t\t\t\t\t\tswitch (_n0) {\n\t\t\t\t\t\t\tcase 'rating':\n\t\t\t\t\t\t\t\treturn elm$html$Html$text('Top rated first');\n\t\t\t\t\t\t\tcase 'popular':\n\t\t\t\t\t\t\t\treturn elm$html$Html$text('Most popular first');\n\t\t\t\t\t\t\tcase 'newest':\n\t\t\t\t\t\t\t\treturn elm$html$Html$text('Newest first');\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn elm$html$Html$text('Invalid sort method');\n\t\t\t\t\t\t}\n\t\t\t\t\t}()\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n1 = model.status;\n\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '50px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Fetching data from the server')\n\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-danger'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '50px'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '50px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Gallery failed to load')\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar container = _n1.a;\n\t\t\t\t\t\tvar images = container.images;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$core$List$isEmpty(images) ? A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '50px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('There are no images in the gallery')\n\t\t\t\t\t\t\t\t\t\t])) : A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel panel-default'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Image$showPreview, images)),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Gallery$viewButton(model),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$range,\n\t\t\t\t\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Gallery$pageSize)))),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(model.page) + ('/' + elm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Gallery$pageSize))))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Components$Carousel$Jump = function (a) {\n\treturn {$: 'Jump', a: a};\n};\nvar feathericons$elm_feather$FeatherIcons$circle = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'circle',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('10')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar elm$svg$Svg$line = elm$svg$Svg$trustedNode('line');\nvar elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');\nvar elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');\nvar elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');\nvar elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');\nvar feathericons$elm_feather$FeatherIcons$xCircle = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'x-circle',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('10')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$line,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1('15'),\n\t\t\t\t\telm$svg$Svg$Attributes$y1('9'),\n\t\t\t\t\telm$svg$Svg$Attributes$x2('9'),\n\t\t\t\t\telm$svg$Svg$Attributes$y2('15')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$line,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1('9'),\n\t\t\t\t\telm$svg$Svg$Attributes$y1('9'),\n\t\t\t\t\telm$svg$Svg$Attributes$x2('15'),\n\t\t\t\t\telm$svg$Svg$Attributes$y2('15')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Components$Carousel$viewBullet = F3(\n\tfunction (model, index, string) {\n\t\treturn A2(\n\t\t\telm$html$Html$button,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.7'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'position', 'relative'),\n\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\tauthor$project$Components$Carousel$Jump(index))\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_eq(model.current, index) ? A2(\n\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 20, feathericons$elm_feather$FeatherIcons$xCircle))) : A2(\n\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 20, feathericons$elm_feather$FeatherIcons$circle)))\n\t\t\t\t]));\n\t});\nvar elm$core$Elm$JsArray$indexedMap = _JsArray_indexedMap;\nvar elm$core$Array$indexedMap = F2(\n\tfunction (func, _n0) {\n\t\tvar len = _n0.a;\n\t\tvar tree = _n0.c;\n\t\tvar tail = _n0.d;\n\t\tvar initialBuilder = {\n\t\t\tnodeList: _List_Nil,\n\t\t\tnodeListSize: 0,\n\t\t\ttail: A3(\n\t\t\t\telm$core$Elm$JsArray$indexedMap,\n\t\t\t\tfunc,\n\t\t\t\telm$core$Array$tailIndex(len),\n\t\t\t\ttail)\n\t\t};\n\t\tvar helper = F2(\n\t\t\tfunction (node, builder) {\n\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\tvar subTree = node.a;\n\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, helper, builder, subTree);\n\t\t\t\t} else {\n\t\t\t\t\tvar leaf = node.a;\n\t\t\t\t\tvar offset = builder.nodeListSize * elm$core$Array$branchFactor;\n\t\t\t\t\tvar mappedLeaf = elm$core$Array$Leaf(\n\t\t\t\t\t\tA3(elm$core$Elm$JsArray$indexedMap, func, offset, leaf));\n\t\t\t\t\treturn {\n\t\t\t\t\t\tnodeList: A2(elm$core$List$cons, mappedLeaf, builder.nodeList),\n\t\t\t\t\t\tnodeListSize: builder.nodeListSize + 1,\n\t\t\t\t\t\ttail: builder.tail\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\treturn A2(\n\t\t\telm$core$Array$builderToArray,\n\t\t\ttrue,\n\t\t\tA3(elm$core$Elm$JsArray$foldl, helper, initialBuilder, tree));\n\t});\nvar feathericons$elm_feather$FeatherIcons$chevronLeft = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'chevron-left',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$polyline,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$points('15 18 9 12 15 6')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar feathericons$elm_feather$FeatherIcons$chevronRight = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'chevron-right',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$polyline,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$points('9 18 15 12 9 6')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Components$Carousel$view = function (model) {\n\tvar _n0 = A2(elm$core$Array$get, model.current, model.source);\n\tif (_n0.$ === 'Just') {\n\t\tvar img = _n0.a;\n\t\tvar url = 'url(' + (img + ')');\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$Attributes$class('container-fluid text-center image'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '1000px'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-image', url),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', 'gray'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-size', 'cover'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'overflow', 'hidden'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all .5s ease-in-out')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '450px')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'position', 'absolute'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'left', '0px'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.7'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\t\t\t\t\tauthor$project$Components$Carousel$SwitchLeft(model.current))\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t3,\n\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 80, feathericons$elm_feather$FeatherIcons$chevronLeft)))\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'position', 'absolute'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'right', '0px'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.7'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\t\t\t\t\tauthor$project$Components$Carousel$SwitchRight(model.current))\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t3,\n\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 80, feathericons$elm_feather$FeatherIcons$chevronRight)))\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '900px')\n\t\t\t\t\t\t]),\n\t\t\t\t\telm$core$Array$toList(\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$Array$indexedMap,\n\t\t\t\t\t\t\tauthor$project$Components$Carousel$viewBullet(model),\n\t\t\t\t\t\t\tmodel.source)))\n\t\t\t\t]));\n\t} else {\n\t\treturn A2(elm$html$Html$div, _List_Nil, _List_Nil);\n\t}\n};\nvar author$project$TimeFormat$monthToString = function (month) {\n\tswitch (month.$) {\n\t\tcase 'Jan':\n\t\t\treturn 'January';\n\t\tcase 'Feb':\n\t\t\treturn 'February';\n\t\tcase 'Mar':\n\t\t\treturn 'March';\n\t\tcase 'Apr':\n\t\t\treturn 'April';\n\t\tcase 'May':\n\t\t\treturn 'May';\n\t\tcase 'Jun':\n\t\t\treturn 'June';\n\t\tcase 'Jul':\n\t\t\treturn 'July';\n\t\tcase 'Aug':\n\t\t\treturn 'August';\n\t\tcase 'Sep':\n\t\t\treturn 'September';\n\t\tcase 'Oct':\n\t\t\treturn 'October';\n\t\tcase 'Nov':\n\t\t\treturn 'November';\n\t\tdefault:\n\t\t\treturn 'December';\n\t}\n};\nvar elm$time$Time$flooredDiv = F2(\n\tfunction (numerator, denominator) {\n\t\treturn elm$core$Basics$floor(numerator / denominator);\n\t});\nvar elm$time$Time$posixToMillis = function (_n0) {\n\tvar millis = _n0.a;\n\treturn millis;\n};\nvar elm$time$Time$toAdjustedMinutesHelp = F3(\n\tfunction (defaultOffset, posixMinutes, eras) {\n\t\ttoAdjustedMinutesHelp:\n\t\twhile (true) {\n\t\t\tif (!eras.b) {\n\t\t\t\treturn posixMinutes + defaultOffset;\n\t\t\t} else {\n\t\t\t\tvar era = eras.a;\n\t\t\t\tvar olderEras = eras.b;\n\t\t\t\tif (_Utils_cmp(era.start, posixMinutes) < 0) {\n\t\t\t\t\treturn posixMinutes + era.offset;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$defaultOffset = defaultOffset,\n\t\t\t\t\t\t$temp$posixMinutes = posixMinutes,\n\t\t\t\t\t\t$temp$eras = olderEras;\n\t\t\t\t\tdefaultOffset = $temp$defaultOffset;\n\t\t\t\t\tposixMinutes = $temp$posixMinutes;\n\t\t\t\t\teras = $temp$eras;\n\t\t\t\t\tcontinue toAdjustedMinutesHelp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$time$Time$toAdjustedMinutes = F2(\n\tfunction (_n0, time) {\n\t\tvar defaultOffset = _n0.a;\n\t\tvar eras = _n0.b;\n\t\treturn A3(\n\t\t\telm$time$Time$toAdjustedMinutesHelp,\n\t\t\tdefaultOffset,\n\t\t\tA2(\n\t\t\t\telm$time$Time$flooredDiv,\n\t\t\t\telm$time$Time$posixToMillis(time),\n\t\t\t\t60000),\n\t\t\teras);\n\t});\nvar elm$time$Time$toCivil = function (minutes) {\n\tvar rawDay = A2(elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;\n\tvar era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;\n\tvar dayOfEra = rawDay - (era * 146097);\n\tvar yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;\n\tvar dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));\n\tvar mp = (((5 * dayOfYear) + 2) / 153) | 0;\n\tvar month = mp + ((mp < 10) ? 3 : (-9));\n\tvar year = yearOfEra + (era * 400);\n\treturn {\n\t\tday: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,\n\t\tmonth: month,\n\t\tyear: year + ((month <= 2) ? 1 : 0)\n\t};\n};\nvar elm$time$Time$toDay = F2(\n\tfunction (zone, time) {\n\t\treturn elm$time$Time$toCivil(\n\t\t\tA2(elm$time$Time$toAdjustedMinutes, zone, time)).day;\n\t});\nvar elm$time$Time$Apr = {$: 'Apr'};\nvar elm$time$Time$Aug = {$: 'Aug'};\nvar elm$time$Time$Dec = {$: 'Dec'};\nvar elm$time$Time$Feb = {$: 'Feb'};\nvar elm$time$Time$Jan = {$: 'Jan'};\nvar elm$time$Time$Jul = {$: 'Jul'};\nvar elm$time$Time$Jun = {$: 'Jun'};\nvar elm$time$Time$Mar = {$: 'Mar'};\nvar elm$time$Time$May = {$: 'May'};\nvar elm$time$Time$Nov = {$: 'Nov'};\nvar elm$time$Time$Oct = {$: 'Oct'};\nvar elm$time$Time$Sep = {$: 'Sep'};\nvar elm$time$Time$toMonth = F2(\n\tfunction (zone, time) {\n\t\tvar _n0 = elm$time$Time$toCivil(\n\t\t\tA2(elm$time$Time$toAdjustedMinutes, zone, time)).month;\n\t\tswitch (_n0) {\n\t\t\tcase 1:\n\t\t\t\treturn elm$time$Time$Jan;\n\t\t\tcase 2:\n\t\t\t\treturn elm$time$Time$Feb;\n\t\t\tcase 3:\n\t\t\t\treturn elm$time$Time$Mar;\n\t\t\tcase 4:\n\t\t\t\treturn elm$time$Time$Apr;\n\t\t\tcase 5:\n\t\t\t\treturn elm$time$Time$May;\n\t\t\tcase 6:\n\t\t\t\treturn elm$time$Time$Jun;\n\t\t\tcase 7:\n\t\t\t\treturn elm$time$Time$Jul;\n\t\t\tcase 8:\n\t\t\t\treturn elm$time$Time$Aug;\n\t\t\tcase 9:\n\t\t\t\treturn elm$time$Time$Sep;\n\t\t\tcase 10:\n\t\t\t\treturn elm$time$Time$Oct;\n\t\t\tcase 11:\n\t\t\t\treturn elm$time$Time$Nov;\n\t\t\tdefault:\n\t\t\t\treturn elm$time$Time$Dec;\n\t\t}\n\t});\nvar elm$time$Time$toYear = F2(\n\tfunction (zone, time) {\n\t\treturn elm$time$Time$toCivil(\n\t\t\tA2(elm$time$Time$toAdjustedMinutes, zone, time)).year;\n\t});\nvar justinmimbs$timezone_data$TimeZone$maxYear = 2037;\nvar justinmimbs$timezone_data$TimeZone$minYear = 1970;\nvar elm$core$Tuple$second = function (_n0) {\n\tvar y = _n0.b;\n\treturn y;\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$DateTime = F5(\n\tfunction (year, month, day, time, clock) {\n\t\treturn {clock: clock, day: day, month: month, time: time, year: year};\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$Universal = {$: 'Universal'};\nvar justinmimbs$timezone_data$TimeZone$Specification$dropChangesBeforeEpoch = function (_n0) {\n\tdropChangesBeforeEpoch:\n\twhile (true) {\n\t\tvar initial = _n0.a;\n\t\tvar changes = _n0.b;\n\t\tif (changes.b) {\n\t\t\tvar change = changes.a;\n\t\t\tvar rest = changes.b;\n\t\t\tif (change.start <= 0) {\n\t\t\t\tvar $temp$_n0 = _Utils_Tuple2(change.offset, rest);\n\t\t\t\t_n0 = $temp$_n0;\n\t\t\t\tcontinue dropChangesBeforeEpoch;\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(initial, changes);\n\t\t\t}\n\t\t} else {\n\t\t\treturn _Utils_Tuple2(initial, _List_Nil);\n\t\t}\n\t}\n};\nvar elm$core$List$sortBy = _List_sortBy;\nvar justinmimbs$timezone_data$RataDie$weekdayNumber = function (rd) {\n\tvar _n0 = A2(elm$core$Basics$modBy, 7, rd);\n\tif (!_n0) {\n\t\treturn 7;\n\t} else {\n\t\tvar n = _n0;\n\t\treturn n;\n\t}\n};\nvar justinmimbs$timezone_data$RataDie$weekdayToNumber = function (wd) {\n\tswitch (wd.$) {\n\t\tcase 'Mon':\n\t\t\treturn 1;\n\t\tcase 'Tue':\n\t\t\treturn 2;\n\t\tcase 'Wed':\n\t\t\treturn 3;\n\t\tcase 'Thu':\n\t\t\treturn 4;\n\t\tcase 'Fri':\n\t\t\treturn 5;\n\t\tcase 'Sat':\n\t\t\treturn 6;\n\t\tdefault:\n\t\t\treturn 7;\n\t}\n};\nvar justinmimbs$timezone_data$RataDie$floorWeekday = F2(\n\tfunction (weekday, rd) {\n\t\tvar daysSincePreviousWeekday = A2(\n\t\t\telm$core$Basics$modBy,\n\t\t\t7,\n\t\t\t(justinmimbs$timezone_data$RataDie$weekdayNumber(rd) + 7) - justinmimbs$timezone_data$RataDie$weekdayToNumber(weekday));\n\t\treturn rd - daysSincePreviousWeekday;\n\t});\nvar justinmimbs$timezone_data$RataDie$ceilingWeekday = F2(\n\tfunction (weekday, rd) {\n\t\tvar floored = A2(justinmimbs$timezone_data$RataDie$floorWeekday, weekday, rd);\n\t\treturn _Utils_eq(rd, floored) ? rd : (floored + 7);\n\t});\nvar justinmimbs$timezone_data$RataDie$isLeapYear = function (y) {\n\treturn ((!A2(elm$core$Basics$modBy, 4, y)) && A2(elm$core$Basics$modBy, 100, y)) || (!A2(elm$core$Basics$modBy, 400, y));\n};\nvar justinmimbs$timezone_data$RataDie$daysBeforeMonth = F2(\n\tfunction (y, m) {\n\t\tvar leapDays = justinmimbs$timezone_data$RataDie$isLeapYear(y) ? 1 : 0;\n\t\tswitch (m.$) {\n\t\t\tcase 'Jan':\n\t\t\t\treturn 0;\n\t\t\tcase 'Feb':\n\t\t\t\treturn 31;\n\t\t\tcase 'Mar':\n\t\t\t\treturn 59 + leapDays;\n\t\t\tcase 'Apr':\n\t\t\t\treturn 90 + leapDays;\n\t\t\tcase 'May':\n\t\t\t\treturn 120 + leapDays;\n\t\t\tcase 'Jun':\n\t\t\t\treturn 151 + leapDays;\n\t\t\tcase 'Jul':\n\t\t\t\treturn 181 + leapDays;\n\t\t\tcase 'Aug':\n\t\t\t\treturn 212 + leapDays;\n\t\t\tcase 'Sep':\n\t\t\t\treturn 243 + leapDays;\n\t\t\tcase 'Oct':\n\t\t\t\treturn 273 + leapDays;\n\t\t\tcase 'Nov':\n\t\t\t\treturn 304 + leapDays;\n\t\t\tdefault:\n\t\t\t\treturn 334 + leapDays;\n\t\t}\n\t});\nvar justinmimbs$timezone_data$RataDie$daysBeforeYear = function (y1) {\n\tvar y = y1 - 1;\n\tvar leapYears = (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);\n\treturn (365 * y) + leapYears;\n};\nvar justinmimbs$timezone_data$RataDie$dayOfMonth = F3(\n\tfunction (y, m, d) {\n\t\treturn (justinmimbs$timezone_data$RataDie$daysBeforeYear(y) + A2(justinmimbs$timezone_data$RataDie$daysBeforeMonth, y, m)) + d;\n\t});\nvar justinmimbs$timezone_data$RataDie$daysInMonth = F2(\n\tfunction (y, m) {\n\t\tswitch (m.$) {\n\t\t\tcase 'Jan':\n\t\t\t\treturn 31;\n\t\t\tcase 'Feb':\n\t\t\t\treturn justinmimbs$timezone_data$RataDie$isLeapYear(y) ? 29 : 28;\n\t\t\tcase 'Mar':\n\t\t\t\treturn 31;\n\t\t\tcase 'Apr':\n\t\t\t\treturn 30;\n\t\t\tcase 'May':\n\t\t\t\treturn 31;\n\t\t\tcase 'Jun':\n\t\t\t\treturn 30;\n\t\t\tcase 'Jul':\n\t\t\t\treturn 31;\n\t\t\tcase 'Aug':\n\t\t\t\treturn 31;\n\t\t\tcase 'Sep':\n\t\t\t\treturn 30;\n\t\t\tcase 'Oct':\n\t\t\t\treturn 31;\n\t\t\tcase 'Nov':\n\t\t\t\treturn 30;\n\t\t\tdefault:\n\t\t\t\treturn 31;\n\t\t}\n\t});\nvar justinmimbs$timezone_data$RataDie$lastOfMonth = F2(\n\tfunction (y, m) {\n\t\treturn (justinmimbs$timezone_data$RataDie$daysBeforeYear(y) + A2(justinmimbs$timezone_data$RataDie$daysBeforeMonth, y, m)) + A2(justinmimbs$timezone_data$RataDie$daysInMonth, y, m);\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$minutesFromRataDie = function (rd) {\n\treturn (rd - 719163) * 1440;\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$utcAdjustment = F2(\n\tfunction (clock, _n0) {\n\t\tvar standard = _n0.standard;\n\t\tvar save = _n0.save;\n\t\tswitch (clock.$) {\n\t\t\tcase 'Universal':\n\t\t\t\treturn 0;\n\t\t\tcase 'Standard':\n\t\t\t\treturn 0 - standard;\n\t\t\tdefault:\n\t\t\t\treturn 0 - (standard + save);\n\t\t}\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$minutesFromDateTime = function (_n0) {\n\tvar year = _n0.year;\n\tvar month = _n0.month;\n\tvar day = _n0.day;\n\tvar time = _n0.time;\n\treturn justinmimbs$timezone_data$TimeZone$Specification$minutesFromRataDie(\n\t\tA3(justinmimbs$timezone_data$RataDie$dayOfMonth, year, month, day)) + time;\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$utcMinutesFromDateTime = F2(\n\tfunction (offset, datetime) {\n\t\treturn justinmimbs$timezone_data$TimeZone$Specification$minutesFromDateTime(datetime) + A2(justinmimbs$timezone_data$TimeZone$Specification$utcAdjustment, datetime.clock, offset);\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$rulesToOffsetChanges = F5(\n\tfunction (previousOffset, start, until, standardOffset, rules) {\n\t\tvar transitions = A2(\n\t\t\telm$core$List$concatMap,\n\t\t\tfunction (year) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$sortBy,\n\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\treturn $.start;\n\t\t\t\t\t},\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\tfunction (rule) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tclock: rule.clock,\n\t\t\t\t\t\t\t\tsave: rule.save,\n\t\t\t\t\t\t\t\tstart: justinmimbs$timezone_data$TimeZone$Specification$minutesFromRataDie(\n\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\tvar _n2 = rule.day;\n\t\t\t\t\t\t\t\t\t\tswitch (_n2.$) {\n\t\t\t\t\t\t\t\t\t\t\tcase 'Day':\n\t\t\t\t\t\t\t\t\t\t\t\tvar day = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn A3(justinmimbs$timezone_data$RataDie$dayOfMonth, year, rule.month, day);\n\t\t\t\t\t\t\t\t\t\t\tcase 'Next':\n\t\t\t\t\t\t\t\t\t\t\t\tvar weekday = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\tvar after = _n2.b;\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\tjustinmimbs$timezone_data$RataDie$ceilingWeekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tweekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA3(justinmimbs$timezone_data$RataDie$dayOfMonth, year, rule.month, after));\n\t\t\t\t\t\t\t\t\t\t\tcase 'Prev':\n\t\t\t\t\t\t\t\t\t\t\t\tvar weekday = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\tvar before = _n2.b;\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\tjustinmimbs$timezone_data$RataDie$floorWeekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tweekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA3(justinmimbs$timezone_data$RataDie$dayOfMonth, year, rule.month, before));\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tvar weekday = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\tjustinmimbs$timezone_data$RataDie$floorWeekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tweekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(justinmimbs$timezone_data$RataDie$lastOfMonth, year, rule.month));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}()) + rule.time\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$List$filter,\n\t\t\t\t\t\t\tfunction (rule) {\n\t\t\t\t\t\t\t\treturn (_Utils_cmp(rule.from, year) < 1) && (_Utils_cmp(year, rule.to) < 1);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trules)));\n\t\t\t},\n\t\t\tA2(elm$core$List$range, start.year - 1, until.year));\n\t\tvar initialOffset = {save: 0, standard: standardOffset};\n\t\tvar initialChange = {\n\t\t\toffset: standardOffset,\n\t\t\tstart: A2(justinmimbs$timezone_data$TimeZone$Specification$utcMinutesFromDateTime, previousOffset, start)\n\t\t};\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\tF2(\n\t\t\t\tfunction (transition, _n1) {\n\t\t\t\t\tvar currentOffset = _n1.a;\n\t\t\t\t\tvar changes = _n1.b;\n\t\t\t\t\tvar newOffset = {save: transition.save, standard: standardOffset};\n\t\t\t\t\tif (_Utils_cmp(\n\t\t\t\t\t\ttransition.start + A2(justinmimbs$timezone_data$TimeZone$Specification$utcAdjustment, transition.clock, previousOffset),\n\t\t\t\t\t\tinitialChange.start) < 1) {\n\t\t\t\t\t\tvar updatedInitialChange = {offset: standardOffset + transition.save, start: initialChange.start};\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\tnewOffset,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[updatedInitialChange]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_Utils_cmp(\n\t\t\t\t\t\t\ttransition.start + A2(justinmimbs$timezone_data$TimeZone$Specification$utcAdjustment, transition.clock, currentOffset),\n\t\t\t\t\t\t\tA2(justinmimbs$timezone_data$TimeZone$Specification$utcMinutesFromDateTime, currentOffset, until)) < 0) {\n\t\t\t\t\t\t\tvar change = {\n\t\t\t\t\t\t\t\toffset: standardOffset + transition.save,\n\t\t\t\t\t\t\t\tstart: transition.start + A2(justinmimbs$timezone_data$TimeZone$Specification$utcAdjustment, transition.clock, currentOffset)\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\tnewOffset,\n\t\t\t\t\t\t\t\tA2(elm$core$List$cons, change, changes));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn _Utils_Tuple2(currentOffset, changes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t_Utils_Tuple2(\n\t\t\t\tinitialOffset,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[initialChange])),\n\t\t\ttransitions);\n\t\tvar nextOffset = _n0.a;\n\t\tvar descendingChanges = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\telm$core$List$reverse(descendingChanges),\n\t\t\tnextOffset);\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$stateToOffsetChanges = F4(\n\tfunction (previousOffset, start, until, _n0) {\n\t\tvar standardOffset = _n0.standardOffset;\n\t\tvar zoneRules = _n0.zoneRules;\n\t\tif (zoneRules.$ === 'Save') {\n\t\t\tvar save = zoneRules.a;\n\t\t\treturn _Utils_Tuple2(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\toffset: standardOffset + save,\n\t\t\t\t\t\tstart: A2(justinmimbs$timezone_data$TimeZone$Specification$utcMinutesFromDateTime, previousOffset, start)\n\t\t\t\t\t}\n\t\t\t\t\t]),\n\t\t\t\t{save: save, standard: standardOffset});\n\t\t} else {\n\t\t\tvar rules = zoneRules.a;\n\t\t\treturn A5(justinmimbs$timezone_data$TimeZone$Specification$rulesToOffsetChanges, previousOffset, start, until, standardOffset, rules);\n\t\t}\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$stripDuplicatesByHelp = F4(\n\tfunction (f, a, rev, list) {\n\t\tstripDuplicatesByHelp:\n\t\twhile (true) {\n\t\t\tif (!list.b) {\n\t\t\t\treturn elm$core$List$reverse(rev);\n\t\t\t} else {\n\t\t\t\tvar x = list.a;\n\t\t\t\tvar xs = list.b;\n\t\t\t\tvar b = f(x);\n\t\t\t\tvar rev_ = (!_Utils_eq(a, b)) ? A2(elm$core$List$cons, x, rev) : rev;\n\t\t\t\tvar $temp$f = f,\n\t\t\t\t\t$temp$a = b,\n\t\t\t\t\t$temp$rev = rev_,\n\t\t\t\t\t$temp$list = xs;\n\t\t\t\tf = $temp$f;\n\t\t\t\ta = $temp$a;\n\t\t\t\trev = $temp$rev;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tcontinue stripDuplicatesByHelp;\n\t\t\t}\n\t\t}\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$zoneToRanges = F3(\n\tfunction (zoneStart, zoneUntil, zone) {\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\tF2(\n\t\t\t\tfunction (_n1, _n2) {\n\t\t\t\t\tvar state = _n1.a;\n\t\t\t\t\tvar nextStart = _n1.b;\n\t\t\t\t\tvar start = _n2.a;\n\t\t\t\t\tvar ranges = _n2.b;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tnextStart,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t_Utils_Tuple3(start, state, nextStart),\n\t\t\t\t\t\t\tranges));\n\t\t\t\t}),\n\t\t\t_Utils_Tuple2(zoneStart, _List_Nil),\n\t\t\tzone.history);\n\t\tvar currentStart = _n0.a;\n\t\tvar historyRanges = _n0.b;\n\t\treturn elm$core$List$reverse(\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\t_Utils_Tuple3(currentStart, zone.current, zoneUntil),\n\t\t\t\thistoryRanges));\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$toOffsets = F3(\n\tfunction (minYear, maxYear, zone) {\n\t\tvar initialState = function () {\n\t\t\tvar _n5 = zone.history;\n\t\t\tif (_n5.b) {\n\t\t\t\tvar _n6 = _n5.a;\n\t\t\t\tvar earliest = _n6.a;\n\t\t\t\treturn earliest;\n\t\t\t} else {\n\t\t\t\treturn zone.current;\n\t\t\t}\n\t\t}();\n\t\tvar initialOffset = {\n\t\t\tsave: function () {\n\t\t\t\tvar _n4 = initialState.zoneRules;\n\t\t\t\tif (_n4.$ === 'Save') {\n\t\t\t\t\tvar save = _n4.a;\n\t\t\t\t\treturn save;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}(),\n\t\t\tstandard: initialState.standardOffset\n\t\t};\n\t\tvar ascendingChanges = A4(\n\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$stripDuplicatesByHelp,\n\t\t\tfunction ($) {\n\t\t\t\treturn $.offset;\n\t\t\t},\n\t\t\tinitialOffset.standard + initialOffset.save,\n\t\t\t_List_Nil,\n\t\t\tA3(\n\t\t\t\telm$core$List$foldl,\n\t\t\t\tF2(\n\t\t\t\t\tfunction (_n1, _n2) {\n\t\t\t\t\t\tvar start = _n1.a;\n\t\t\t\t\t\tvar state = _n1.b;\n\t\t\t\t\t\tvar until = _n1.c;\n\t\t\t\t\t\tvar prevOffset = _n2.a;\n\t\t\t\t\t\tvar prevChanges = _n2.b;\n\t\t\t\t\t\tvar _n3 = A4(justinmimbs$timezone_data$TimeZone$Specification$stateToOffsetChanges, prevOffset, start, until, state);\n\t\t\t\t\t\tvar nextChanges = _n3.a;\n\t\t\t\t\t\tvar nextOffset = _n3.b;\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\tnextOffset,\n\t\t\t\t\t\t\t_Utils_ap(prevChanges, nextChanges));\n\t\t\t\t\t}),\n\t\t\t\t_Utils_Tuple2(initialOffset, _List_Nil),\n\t\t\t\tA3(\n\t\t\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$zoneToRanges,\n\t\t\t\t\tA5(justinmimbs$timezone_data$TimeZone$Specification$DateTime, minYear, elm$time$Time$Jan, 1, 0, justinmimbs$timezone_data$TimeZone$Specification$Universal),\n\t\t\t\t\tA5(justinmimbs$timezone_data$TimeZone$Specification$DateTime, maxYear + 1, elm$time$Time$Jan, 1, 0, justinmimbs$timezone_data$TimeZone$Specification$Universal),\n\t\t\t\t\tzone)).b);\n\t\tvar _n0 = justinmimbs$timezone_data$TimeZone$Specification$dropChangesBeforeEpoch(\n\t\t\t_Utils_Tuple2(initialOffset.standard + initialOffset.save, ascendingChanges));\n\t\tvar initial = _n0.a;\n\t\tvar ascending = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\telm$core$List$reverse(ascending),\n\t\t\tinitial);\n\t});\nvar justinmimbs$timezone_data$TimeZone$fromSpecification = function (zone) {\n\tvar _n0 = A3(justinmimbs$timezone_data$TimeZone$Specification$toOffsets, justinmimbs$timezone_data$TimeZone$minYear, justinmimbs$timezone_data$TimeZone$maxYear, zone);\n\tvar descending = _n0.a;\n\tvar bottom = _n0.b;\n\treturn A2(elm$time$Time$customZone, bottom, descending);\n};\nvar elm$time$Time$Sun = {$: 'Sun'};\nvar justinmimbs$timezone_data$TimeZone$Specification$Day = function (a) {\n\treturn {$: 'Day', a: a};\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$Last = function (a) {\n\treturn {$: 'Last', a: a};\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$Next = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Next', a: a, b: b};\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$Rule = F7(\n\tfunction (from, to, month, day, time, clock, save) {\n\t\treturn {clock: clock, day: day, from: from, month: month, save: save, time: time, to: to};\n\t});\nvar justinmimbs$timezone_data$TimeZone$rules_EU = _List_fromArray(\n\t[\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1977,\n\t\t1980,\n\t\telm$time$Time$Apr,\n\t\tA2(justinmimbs$timezone_data$TimeZone$Specification$Next, elm$time$Time$Sun, 1),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t60),\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1977,\n\t\t1977,\n\t\telm$time$Time$Sep,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Last(elm$time$Time$Sun),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t0),\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1978,\n\t\t1978,\n\t\telm$time$Time$Oct,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Day(1),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t0),\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1979,\n\t\t1995,\n\t\telm$time$Time$Sep,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Last(elm$time$Time$Sun),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t0),\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1981,\n\t\tjustinmimbs$timezone_data$TimeZone$maxYear,\n\t\telm$time$Time$Mar,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Last(elm$time$Time$Sun),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t60),\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1996,\n\t\tjustinmimbs$timezone_data$TimeZone$maxYear,\n\t\telm$time$Time$Oct,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Last(elm$time$Time$Sun),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t0)\n\t]);\nvar justinmimbs$timezone_data$TimeZone$Specification$Rules = function (a) {\n\treturn {$: 'Rules', a: a};\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$Save = function (a) {\n\treturn {$: 'Save', a: a};\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$WallClock = {$: 'WallClock'};\nvar justinmimbs$timezone_data$TimeZone$Specification$Zone = F2(\n\tfunction (history, current) {\n\t\treturn {current: current, history: history};\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$ZoneState = F2(\n\tfunction (standardOffset, zoneRules) {\n\t\treturn {standardOffset: standardOffset, zoneRules: zoneRules};\n\t});\nvar justinmimbs$timezone_data$TimeZone$europe__prague = function (_n0) {\n\treturn justinmimbs$timezone_data$TimeZone$fromSpecification(\n\t\tA2(\n\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$Zone,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$ZoneState,\n\t\t\t\t\t\t60,\n\t\t\t\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$Save(0)),\n\t\t\t\t\tA5(justinmimbs$timezone_data$TimeZone$Specification$DateTime, 1979, elm$time$Time$Jan, 1, 0, justinmimbs$timezone_data$TimeZone$Specification$WallClock))\n\t\t\t\t]),\n\t\t\tA2(\n\t\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$ZoneState,\n\t\t\t\t60,\n\t\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rules(justinmimbs$timezone_data$TimeZone$rules_EU))));\n};\nvar justinmimbs$timezone_data$TimeZone$europe__bratislava = justinmimbs$timezone_data$TimeZone$europe__prague;\nvar author$project$TimeFormat$formatDate = function (time) {\n\tvar zone = justinmimbs$timezone_data$TimeZone$europe__bratislava(_Utils_Tuple0);\n\treturn author$project$TimeFormat$monthToString(\n\t\tA2(elm$time$Time$toMonth, zone, time)) + (' ' + (elm$core$String$fromInt(\n\t\tA2(elm$time$Time$toDay, zone, time)) + (' ' + elm$core$String$fromInt(\n\t\tA2(elm$time$Time$toYear, zone, time)))));\n};\nvar elm$html$Html$h5 = _VirtualDom_node('h5');\nvar elm$html$Html$h6 = _VirtualDom_node('h6');\nvar author$project$Pages$Home$showPost = function (post) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('media'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '70%'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('media-left')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + post.id)\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(post.url),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('avatar'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(170),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(170)\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('media-body well'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-heading')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + post.id),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(post.title)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h5,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t'Uploaded on ' + author$project$TimeFormat$formatDate(post.uploaded))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h6,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('by '),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + post.author),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(post.author)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h5,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(post.views) + ' views')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Tag$view = function (value) {\n\treturn A2(\n\t\telm$html$Html$a,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('badge preview'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', '#3b5998'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', '1px'),\n\t\t\t\telm$html$Html$Attributes$href('/tags?q=' + value)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$text(value)\n\t\t\t]));\n};\nvar author$project$Pages$Home$view = function (model) {\n\tvar url = 'url(' + (author$project$Server$url + ('/img/background.jpg' + ')'));\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\tauthor$project$Pages$Home$UpdateCarousel,\n\t\t\t\t\t\tauthor$project$Components$Carousel$view(model.carousel))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-600px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '25%')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$h1,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('lead'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '60px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.9')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Get Creative.')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('lead'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '30px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.9'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-25px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Website created for sharing images - powered by Elm.')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n0 = model.user;\n\t\t\t\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\t\t\t\tvar user = _n0.a;\n\t\t\t\t\t\t\treturn A2(elm$html$Html$div, _List_Nil, _List_Nil);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_up')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-lg btn-default')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Get started')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}()\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '470px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Trending tags')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Overview of trending tags')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n1 = model.tagStatus;\n\t\t\t\t\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\t\t\t\t\tcase 'LoadingTags':\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\tcase 'FailureTags':\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Connection error')\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tvar tags = _n1.a;\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('well'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Tag$view, tags));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Latest posts')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Overview of latest images posted to the site')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '70%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n2 = model.status;\n\t\t\t\t\t\t\t\tswitch (_n2.$) {\n\t\t\t\t\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Connection error')\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tvar images = _n2.a;\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Pages$Home$showPost, images))\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Image$Stats$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$span,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\telm$html$Html$Attributes$title('Views')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 20, feathericons$elm_feather$FeatherIcons$eye))),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\telm$core$String$fromInt(model.views))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$span,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\telm$html$Html$Attributes$title('Points')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 20, feathericons$elm_feather$FeatherIcons$award))),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\telm$core$String$fromInt(model.points))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$span,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\telm$html$Html$Attributes$title('Favourites')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 20, feathericons$elm_feather$FeatherIcons$heart))),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\telm$core$String$fromInt(model.favorites))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Post$Comment = function (a) {\n\treturn {$: 'Comment', a: a};\n};\nvar author$project$Pages$Post$DeletePost = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'DeletePost', a: a, b: b};\n\t});\nvar author$project$Pages$Post$Downvote = {$: 'Downvote'};\nvar author$project$Pages$Post$Favorite = {$: 'Favorite'};\nvar author$project$Pages$Post$Submit = {$: 'Submit'};\nvar author$project$Pages$Post$Upvote = {$: 'Upvote'};\nvar author$project$Pages$Post$Veto = {$: 'Veto'};\nvar author$project$Pages$Post$DeleteComment = function (a) {\n\treturn {$: 'DeleteComment', a: a};\n};\nvar author$project$Pages$Post$DeleteCommentCancel = {$: 'DeleteCommentCancel'};\nvar author$project$Pages$Post$DeleteCommentConfirm = {$: 'DeleteCommentConfirm'};\nvar author$project$Pages$Post$Edit = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Edit', a: a, b: b};\n\t});\nvar author$project$Pages$Post$EditCancel = {$: 'EditCancel'};\nvar author$project$Pages$Post$EditComment = function (a) {\n\treturn {$: 'EditComment', a: a};\n};\nvar author$project$Pages$Post$EditConfirm = {$: 'EditConfirm'};\nvar author$project$TimeFormat$minuteToString = function (min) {\n\treturn (min < 10) ? ('0' + elm$core$String$fromInt(min)) : elm$core$String$fromInt(min);\n};\nvar elm$time$Time$toHour = F2(\n\tfunction (zone, time) {\n\t\treturn A2(\n\t\t\telm$core$Basics$modBy,\n\t\t\t24,\n\t\t\tA2(\n\t\t\t\telm$time$Time$flooredDiv,\n\t\t\t\tA2(elm$time$Time$toAdjustedMinutes, zone, time),\n\t\t\t\t60));\n\t});\nvar elm$time$Time$toMinute = F2(\n\tfunction (zone, time) {\n\t\treturn A2(\n\t\t\telm$core$Basics$modBy,\n\t\t\t60,\n\t\t\tA2(elm$time$Time$toAdjustedMinutes, zone, time));\n\t});\nvar author$project$TimeFormat$formatTime = function (time) {\n\tvar zone = justinmimbs$timezone_data$TimeZone$europe__bratislava(_Utils_Tuple0);\n\treturn author$project$TimeFormat$formatDate(time) + (', ' + (elm$core$String$fromInt(\n\t\tA2(elm$time$Time$toHour, zone, time)) + (':' + author$project$TimeFormat$minuteToString(\n\t\tA2(elm$time$Time$toMinute, zone, time)))));\n};\nvar elm$html$Html$textarea = _VirtualDom_node('textarea');\nvar elm$html$Html$Attributes$id = elm$html$Html$Attributes$stringProperty('id');\nvar elm_explorations$markdown$Markdown$defaultOptions = {\n\tdefaultHighlighting: elm$core$Maybe$Nothing,\n\tgithubFlavored: elm$core$Maybe$Just(\n\t\t{breaks: false, tables: false}),\n\tsanitize: true,\n\tsmartypants: false\n};\nvar elm_explorations$markdown$Markdown$toHtmlWith = _Markdown_toHtml;\nvar elm_explorations$markdown$Markdown$toHtml = elm_explorations$markdown$Markdown$toHtmlWith(elm_explorations$markdown$Markdown$defaultOptions);\nvar author$project$Pages$Post$viewComment = F2(\n\tfunction (model, comment) {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$Attributes$class('media'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-left')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + comment.username)\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(comment.url),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('avatar'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(80),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(80),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-body well'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'left')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-heading')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + comment.username)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(comment.username)\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t' on ' + author$project$TimeFormat$formatTime(comment.date)),\n\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\tvar _n0 = comment.edited;\n\t\t\t\t\t\t\t\t\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\t\t\tvar date = _n0.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t' • Edited on ' + author$project$TimeFormat$formatTime(date));\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\tvar _n1 = model.user;\n\t\t\t\t\t\t\t\t\t\t\tif (_n1.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\t\t\tvar user = _n1.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn _Utils_eq(user.username, comment.username) ? A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'red'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right social'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '20px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '20px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Delete'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Post$DeleteComment(comment.id)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-trash')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', '#3b5998'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right social'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '20px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '20px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Post$Edit, comment.id, comment.content)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Edit'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-pencil')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])) : elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t_Utils_eq(\n\t\t\t\t\t\t\t\t\tmodel.editing,\n\t\t\t\t\t\t\t\t\telm$core$Maybe$Just(comment.id)) ? A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$textarea,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('edit'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder(comment.content),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'min-height', '100px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'resize', 'vertical'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Post$EditComment),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.edit)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-success btn-sm'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$EditConfirm),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Confirm')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-default btn-sm'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$EditCancel),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Cancel')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t])) : A2(\n\t\t\t\t\t\t\t\t\telm_explorations$markdown$Markdown$toHtml,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('content')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\tcomment.content),\n\t\t\t\t\t\t\t\t\t_Utils_eq(\n\t\t\t\t\t\t\t\t\tmodel.deleting,\n\t\t\t\t\t\t\t\t\telm$core$Maybe$Just(comment.id)) ? A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-danger btn-sm'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$DeleteCommentConfirm),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Confirm')\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-default btn-sm'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$DeleteCommentCancel),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Cancel')\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t])) : elm$html$Html$text('')\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t]))\n\t\t\t\t]));\n\t});\nvar elm$html$Html$i = _VirtualDom_node('i');\nvar elm$html$Html$Attributes$cols = function (n) {\n\treturn A2(\n\t\t_VirtualDom_attribute,\n\t\t'cols',\n\t\telm$core$String$fromInt(n));\n};\nvar elm$json$Json$Encode$bool = _Json_wrap;\nvar elm$html$Html$Attributes$boolProperty = F2(\n\tfunction (key, bool) {\n\t\treturn A2(\n\t\t\t_VirtualDom_property,\n\t\t\tkey,\n\t\t\telm$json$Json$Encode$bool(bool));\n\t});\nvar elm$html$Html$Attributes$disabled = elm$html$Html$Attributes$boolProperty('disabled');\nvar elm$html$Html$Attributes$rows = function (n) {\n\treturn A2(\n\t\t_VirtualDom_attribute,\n\t\t'rows',\n\t\telm$core$String$fromInt(n));\n};\nvar feathericons$elm_feather$FeatherIcons$arrowDownCircle = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'arrow-down-circle',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('10')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$polyline,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$points('8 12 12 16 16 12')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$line,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$y1('8'),\n\t\t\t\t\telm$svg$Svg$Attributes$x2('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$y2('16')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar feathericons$elm_feather$FeatherIcons$arrowUpCircle = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'arrow-up-circle',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('10')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$polyline,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$points('16 12 12 8 8 12')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$line,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$y1('16'),\n\t\t\t\t\telm$svg$Svg$Attributes$x2('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$y2('8')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Pages$Post$view = function (model) {\n\tvar _n0 = model.status;\n\tswitch (_n0.$) {\n\t\tcase 'Loading':\n\t\t\treturn A2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Loading...')\n\t\t\t\t\t]));\n\t\tcase 'Failure':\n\t\t\treturn A2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Image failed to load...')\n\t\t\t\t\t]));\n\t\tdefault:\n\t\t\tvar image = _n0.a;\n\t\t\treturn A2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-40px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('jumbotron')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h1,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'max-width', '1000px'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(image.title)\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('float-right')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Uploaded by '),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + image.author)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(image.author)\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t' on ' + author$project$TimeFormat$formatTime(image.uploaded))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(image.url),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'max-width', '90%')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Stats')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('well'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '60px'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\tvar _n1 = model.stats;\n\t\t\t\t\t\t\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\t\t\t\t\t\t\tcase 'LoadingStats':\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('Loading...');\n\t\t\t\t\t\t\t\t\t\t\tcase 'FailureStats':\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('Failed to load stats');\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tvar stats = _n1.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn author$project$Image$Stats$view(stats);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\tvar _n2 = model.vote;\n\t\t\t\t\t\t\t\t\t\tswitch (_n2.$) {\n\t\t\t\t\t\t\t\t\t\t\tcase 'LoadingInfo':\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('Loading vote');\n\t\t\t\t\t\t\t\t\t\t\tcase 'FailureInfo':\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('Failed to load vote');\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tvar info = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'darkgrey'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('social'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n3 = info.vote;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (_n3) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'upvote':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'lime');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'invalid':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Attributes$disabled(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Events$onClick(author$project$Pages$Post$Upvote);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'downvote':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Events$onClick(author$project$Pages$Post$Veto);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 30, feathericons$elm_feather$FeatherIcons$arrowUpCircle)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'darkgrey'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('social'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n4 = info.vote;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (_n4) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'downvote':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'red');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'invalid':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Attributes$disabled(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Events$onClick(author$project$Pages$Post$Downvote);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'upvote':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Events$onClick(author$project$Pages$Post$Veto);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 30, feathericons$elm_feather$FeatherIcons$arrowDownCircle)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'darkgrey'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('social'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n5 = model.user;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n5.$ === 'Nothing') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Attributes$disabled(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Attributes$class('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n6 = info.favorite;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n6) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'red');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$Favorite)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 30, feathericons$elm_feather$FeatherIcons$heart)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Description')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n7 = image.description;\n\t\t\t\t\t\t\t\tif (_n7 === '') {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-style', 'italic')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('No description')\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'max-width', '50%')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-body well')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$i,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '14px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(image.description)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n8 = elm$core$List$isEmpty(image.tags);\n\t\t\t\t\t\t\t\tif (_n8) {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Tags')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-style', 'italic')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('No tags')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Tags')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'max-width', '600px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Tag$view, image.tags))\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n9 = model.user;\n\t\t\t\t\t\tif (_n9.$ === 'Just') {\n\t\t\t\t\t\t\tvar user = _n9.a;\n\t\t\t\t\t\t\treturn _Utils_eq(user.username, image.author) ? A2(\n\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-danger'),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Post$DeletePost, image.id, user.token))\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Remove post')\n\t\t\t\t\t\t\t\t\t])) : elm$html$Html$text('');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}(),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n10 = model.comments;\n\t\t\t\t\t\tswitch (_n10.$) {\n\t\t\t\t\t\t\tcase 'LoadingComments':\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Comments')\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA3(perzanko$elm_loading$Loading$render, perzanko$elm_loading$Loading$Circle, perzanko$elm_loading$Loading$defaultConfig, perzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tcase 'FailureComments':\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Comments')\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Comment section failed to load')\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tvar comments = _n10.a;\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Comments (' + (elm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$length(comments)) + ')'))\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\tvar _n11 = elm$core$List$isEmpty(comments);\n\t\t\t\t\t\t\t\t\t\t\tif (_n11) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-style', 'italic')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('No comments')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Post$viewComment(model),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomments));\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}(),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Leave a comment on this post')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n12 = model.user;\n\t\t\t\t\t\tif (_n12.$ === 'Just') {\n\t\t\t\t\t\t\tvar user = _n12.a;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$textarea,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$cols(100),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$rows(7),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'resize', 'vertical'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Enter your comment'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Post$Comment),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.comment)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$Submit)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Comment')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('You must be '),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_in')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('signed in')\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text(' to comment')\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}(),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('row'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '100px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t]));\n\t}\n};\nvar author$project$Image$showTab = function (post) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('media'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '70%'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('media-left')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + post.id)\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(post.url),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('avatar'),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(100),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(100)\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('media-body well'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'left')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-heading')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\tauthor$project$TimeFormat$formatTime(post.uploaded))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + post.id),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text(post.title)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Profile$LoadMore = {$: 'LoadMore'};\nvar author$project$Pages$Profile$Select = {$: 'Select'};\nvar author$project$Pages$Profile$SwitchFavorites = {$: 'SwitchFavorites'};\nvar author$project$Pages$Profile$SwitchHistory = {$: 'SwitchHistory'};\nvar author$project$Pages$Profile$SwitchInformation = {$: 'SwitchInformation'};\nvar author$project$Pages$Profile$SwitchSecurity = {$: 'SwitchSecurity'};\nvar author$project$Pages$Profile$SwitchSettings = {$: 'SwitchSettings'};\nvar author$project$Pages$Profile$Favorites$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('container'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'min-height', '500px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('My Favorites')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Here is the list of posts you favorited')\n\t\t\t\t\t])),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.status;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA3(perzanko$elm_loading$Loading$render, perzanko$elm_loading$Loading$Circle, perzanko$elm_loading$Loading$defaultConfig, perzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Connection error')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar images = _n0.a;\n\t\t\t\t\t\treturn (!elm$core$List$length(images)) ? A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('You have no favorites')\n\t\t\t\t\t\t\t\t])) : A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Image$showTab, images));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$Profile$History$toPoint = function (act) {\n\treturn {x: act.day, y: act.count};\n};\nvar terezka$line_charts$Internal$Axis$Ticks$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Ticks$custom = terezka$line_charts$Internal$Axis$Ticks$Config;\nvar terezka$line_charts$Internal$Axis$Values$Around = function (a) {\n\treturn {$: 'Around', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Values$around = terezka$line_charts$Internal$Axis$Values$Around;\nvar terezka$line_charts$Internal$Axis$Values$ceilingTo = F2(\n\tfunction (prec, number) {\n\t\treturn prec * elm$core$Basics$ceiling(number / prec);\n\t});\nvar terezka$line_charts$Internal$Axis$Values$getBeginning = F2(\n\tfunction (min, interval) {\n\t\tvar multiple = min / interval;\n\t\treturn _Utils_eq(\n\t\t\tmultiple,\n\t\t\telm$core$Basics$round(multiple)) ? min : A2(terezka$line_charts$Internal$Axis$Values$ceilingTo, interval, min);\n\t});\nvar elm$core$Basics$abs = function (n) {\n\treturn (n < 0) ? (-n) : n;\n};\nvar elm$core$Basics$isInfinite = _Basics_isInfinite;\nvar elm$core$Basics$isNaN = _Basics_isNaN;\nvar elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;\nvar elm$core$String$repeatHelp = F3(\n\tfunction (n, chunk, result) {\n\t\treturn (n <= 0) ? result : A3(\n\t\t\telm$core$String$repeatHelp,\n\t\t\tn >> 1,\n\t\t\t_Utils_ap(chunk, chunk),\n\t\t\t(!(n & 1)) ? result : _Utils_ap(result, chunk));\n\t});\nvar elm$core$String$repeat = F2(\n\tfunction (n, chunk) {\n\t\treturn A3(elm$core$String$repeatHelp, n, chunk, '');\n\t});\nvar elm$core$String$padRight = F3(\n\tfunction (n, _char, string) {\n\t\treturn _Utils_ap(\n\t\t\tstring,\n\t\t\tA2(\n\t\t\t\telm$core$String$repeat,\n\t\t\t\tn - elm$core$String$length(string),\n\t\t\t\telm$core$String$fromChar(_char)));\n\t});\nvar elm$core$String$reverse = _String_reverse;\nvar myrho$elm_round$Round$addSign = F2(\n\tfunction (signed, str) {\n\t\tvar isNotZero = A2(\n\t\t\telm$core$List$any,\n\t\t\tfunction (c) {\n\t\t\t\treturn (!_Utils_eq(\n\t\t\t\t\tc,\n\t\t\t\t\t_Utils_chr('0'))) && (!_Utils_eq(\n\t\t\t\t\tc,\n\t\t\t\t\t_Utils_chr('.')));\n\t\t\t},\n\t\t\telm$core$String$toList(str));\n\t\treturn _Utils_ap(\n\t\t\t(signed && isNotZero) ? '-' : '',\n\t\t\tstr);\n\t});\nvar myrho$elm_round$Round$increaseNum = function (_n0) {\n\tvar head = _n0.a;\n\tvar tail = _n0.b;\n\tif (_Utils_eq(\n\t\thead,\n\t\t_Utils_chr('9'))) {\n\t\tvar _n1 = elm$core$String$uncons(tail);\n\t\tif (_n1.$ === 'Nothing') {\n\t\t\treturn '01';\n\t\t} else {\n\t\t\tvar headtail = _n1.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$String$cons,\n\t\t\t\t_Utils_chr('0'),\n\t\t\t\tmyrho$elm_round$Round$increaseNum(headtail));\n\t\t}\n\t} else {\n\t\tvar c = elm$core$Char$toCode(head);\n\t\treturn ((c >= 48) && (c < 57)) ? A2(\n\t\t\telm$core$String$cons,\n\t\t\telm$core$Char$fromCode(c + 1),\n\t\t\ttail) : '0';\n\t}\n};\nvar myrho$elm_round$Round$splitComma = function (str) {\n\tvar _n0 = A2(elm$core$String$split, '.', str);\n\tif (_n0.b) {\n\t\tif (_n0.b.b) {\n\t\t\tvar before = _n0.a;\n\t\t\tvar _n1 = _n0.b;\n\t\t\tvar after = _n1.a;\n\t\t\treturn _Utils_Tuple2(before, after);\n\t\t} else {\n\t\t\tvar before = _n0.a;\n\t\t\treturn _Utils_Tuple2(before, '0');\n\t\t}\n\t} else {\n\t\treturn _Utils_Tuple2('0', '0');\n\t}\n};\nvar elm$core$Tuple$mapFirst = F2(\n\tfunction (func, _n0) {\n\t\tvar x = _n0.a;\n\t\tvar y = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\tfunc(x),\n\t\t\ty);\n\t});\nvar myrho$elm_round$Round$toDecimal = function (fl) {\n\tvar _n0 = A2(\n\t\telm$core$String$split,\n\t\t'e',\n\t\telm$core$String$fromFloat(\n\t\t\telm$core$Basics$abs(fl)));\n\tif (_n0.b) {\n\t\tif (_n0.b.b) {\n\t\t\tvar num = _n0.a;\n\t\t\tvar _n1 = _n0.b;\n\t\t\tvar exp = _n1.a;\n\t\t\tvar e = A2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t0,\n\t\t\t\telm$core$String$toInt(\n\t\t\t\t\tA2(elm$core$String$startsWith, '+', exp) ? A2(elm$core$String$dropLeft, 1, exp) : exp));\n\t\t\tvar _n2 = myrho$elm_round$Round$splitComma(num);\n\t\t\tvar before = _n2.a;\n\t\t\tvar after = _n2.b;\n\t\t\tvar total = _Utils_ap(before, after);\n\t\t\tvar zeroed = (e < 0) ? A2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t'0',\n\t\t\t\tA2(\n\t\t\t\t\telm$core$Maybe$map,\n\t\t\t\t\tfunction (_n3) {\n\t\t\t\t\t\tvar a = _n3.a;\n\t\t\t\t\t\tvar b = _n3.b;\n\t\t\t\t\t\treturn a + ('.' + b);\n\t\t\t\t\t},\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Maybe$map,\n\t\t\t\t\t\telm$core$Tuple$mapFirst(elm$core$String$fromChar),\n\t\t\t\t\t\telm$core$String$uncons(\n\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$core$String$repeat,\n\t\t\t\t\t\t\t\t\telm$core$Basics$abs(e),\n\t\t\t\t\t\t\t\t\t'0'),\n\t\t\t\t\t\t\t\ttotal))))) : A3(\n\t\t\t\telm$core$String$padRight,\n\t\t\t\te + 1,\n\t\t\t\t_Utils_chr('0'),\n\t\t\t\ttotal);\n\t\t\treturn _Utils_ap(\n\t\t\t\t(fl < 0) ? '-' : '',\n\t\t\t\tzeroed);\n\t\t} else {\n\t\t\tvar num = _n0.a;\n\t\t\treturn _Utils_ap(\n\t\t\t\t(fl < 0) ? '-' : '',\n\t\t\t\tnum);\n\t\t}\n\t} else {\n\t\treturn '';\n\t}\n};\nvar myrho$elm_round$Round$roundFun = F3(\n\tfunction (functor, s, fl) {\n\t\tif (elm$core$Basics$isInfinite(fl) || elm$core$Basics$isNaN(fl)) {\n\t\t\treturn elm$core$String$fromFloat(fl);\n\t\t} else {\n\t\t\tvar signed = fl < 0;\n\t\t\tvar _n0 = myrho$elm_round$Round$splitComma(\n\t\t\t\tmyrho$elm_round$Round$toDecimal(\n\t\t\t\t\telm$core$Basics$abs(fl)));\n\t\t\tvar before = _n0.a;\n\t\t\tvar after = _n0.b;\n\t\t\tvar r = elm$core$String$length(before) + s;\n\t\t\tvar normalized = _Utils_ap(\n\t\t\t\tA2(elm$core$String$repeat, (-r) + 1, '0'),\n\t\t\t\tA3(\n\t\t\t\t\telm$core$String$padRight,\n\t\t\t\t\tr,\n\t\t\t\t\t_Utils_chr('0'),\n\t\t\t\t\t_Utils_ap(before, after)));\n\t\t\tvar totalLen = elm$core$String$length(normalized);\n\t\t\tvar roundDigitIndex = A2(elm$core$Basics$max, 1, r);\n\t\t\tvar increase = A2(\n\t\t\t\tfunctor,\n\t\t\t\tsigned,\n\t\t\t\tA3(elm$core$String$slice, roundDigitIndex, totalLen, normalized));\n\t\t\tvar remains = A3(elm$core$String$slice, 0, roundDigitIndex, normalized);\n\t\t\tvar num = increase ? elm$core$String$reverse(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t\t'1',\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Maybe$map,\n\t\t\t\t\t\tmyrho$elm_round$Round$increaseNum,\n\t\t\t\t\t\telm$core$String$uncons(\n\t\t\t\t\t\t\telm$core$String$reverse(remains))))) : remains;\n\t\t\tvar numLen = elm$core$String$length(num);\n\t\t\tvar numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(\n\t\t\t\tnum,\n\t\t\t\tA2(\n\t\t\t\t\telm$core$String$repeat,\n\t\t\t\t\telm$core$Basics$abs(s),\n\t\t\t\t\t'0')) : ((_Utils_cmp(\n\t\t\t\ts,\n\t\t\t\telm$core$String$length(after)) < 0) ? (A3(elm$core$String$slice, 0, numLen - s, num) + ('.' + A3(elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(\n\t\t\t\tbefore + '.',\n\t\t\t\tA3(\n\t\t\t\t\telm$core$String$padRight,\n\t\t\t\t\ts,\n\t\t\t\t\t_Utils_chr('0'),\n\t\t\t\t\tafter))));\n\t\t\treturn A2(myrho$elm_round$Round$addSign, signed, numZeroed);\n\t\t}\n\t});\nvar myrho$elm_round$Round$round = myrho$elm_round$Round$roundFun(\n\tF2(\n\t\tfunction (signed, str) {\n\t\t\tvar _n0 = elm$core$String$uncons(str);\n\t\t\tif (_n0.$ === 'Nothing') {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tif ('5' === _n0.a.a.valueOf()) {\n\t\t\t\t\tif (_n0.a.b === '') {\n\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\treturn !signed;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _n2 = _n0.a;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar _n3 = _n0.a;\n\t\t\t\t\tvar _int = _n3.a;\n\t\t\t\t\treturn function (i) {\n\t\t\t\t\t\treturn ((i > 53) && signed) || ((i >= 53) && (!signed));\n\t\t\t\t\t}(\n\t\t\t\t\t\telm$core$Char$toCode(_int));\n\t\t\t\t}\n\t\t\t}\n\t\t}));\nvar terezka$line_charts$Internal$Axis$Values$correctFloat = function (prec) {\n\treturn A2(\n\t\telm$core$Basics$composeR,\n\t\tmyrho$elm_round$Round$round(prec),\n\t\tA2(\n\t\t\telm$core$Basics$composeR,\n\t\t\telm$core$String$toFloat,\n\t\t\telm$core$Maybe$withDefault(0)));\n};\nvar terezka$line_charts$Internal$Axis$Values$getMultiples = F3(\n\tfunction (magnitude, allowDecimals, hasTickAmount) {\n\t\tvar defaults = hasTickAmount ? _List_fromArray(\n\t\t\t[1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10]) : _List_fromArray(\n\t\t\t[1, 2, 2.5, 5, 10]);\n\t\treturn allowDecimals ? defaults : ((magnitude === 1) ? A2(\n\t\t\telm$core$List$filter,\n\t\t\tfunction (n) {\n\t\t\t\treturn _Utils_eq(\n\t\t\t\t\telm$core$Basics$round(n),\n\t\t\t\t\tn);\n\t\t\t},\n\t\t\tdefaults) : ((magnitude <= 0.1) ? _List_fromArray(\n\t\t\t[1 / magnitude]) : defaults));\n\t});\nvar terezka$line_charts$Internal$Axis$Values$getPrecision = function (number) {\n\tvar _n0 = A2(\n\t\telm$core$String$split,\n\t\t'e',\n\t\telm$core$String$fromFloat(number));\n\tif ((_n0.b && _n0.b.b) && (!_n0.b.b.b)) {\n\t\tvar before = _n0.a;\n\t\tvar _n1 = _n0.b;\n\t\tvar after = _n1.a;\n\t\treturn elm$core$Basics$abs(\n\t\t\tA2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t0,\n\t\t\t\telm$core$String$toInt(after)));\n\t} else {\n\t\tvar _n2 = A2(\n\t\t\telm$core$String$split,\n\t\t\t'.',\n\t\t\telm$core$String$fromFloat(number));\n\t\tif ((_n2.b && _n2.b.b) && (!_n2.b.b.b)) {\n\t\t\tvar before = _n2.a;\n\t\t\tvar _n3 = _n2.b;\n\t\t\tvar after = _n3.a;\n\t\t\treturn elm$core$String$length(after);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n};\nvar elm$core$Basics$e = _Basics_e;\nvar terezka$line_charts$Internal$Utils$magnitude = function (num) {\n\treturn A2(\n\t\telm$core$Basics$pow,\n\t\t10,\n\t\telm$core$Basics$floor(\n\t\t\tA2(elm$core$Basics$logBase, elm$core$Basics$e, num) / A2(elm$core$Basics$logBase, elm$core$Basics$e, 10)));\n};\nvar terezka$line_charts$Internal$Axis$Values$getInterval = F3(\n\tfunction (intervalRaw, allowDecimals, hasTickAmount) {\n\t\tvar magnitude = terezka$line_charts$Internal$Utils$magnitude(intervalRaw);\n\t\tvar multiples = A3(terezka$line_charts$Internal$Axis$Values$getMultiples, magnitude, allowDecimals, hasTickAmount);\n\t\tvar normalized = intervalRaw / magnitude;\n\t\tvar findMultipleExact = function (multiples_) {\n\t\t\tfindMultipleExact:\n\t\t\twhile (true) {\n\t\t\t\tif (multiples_.b) {\n\t\t\t\t\tvar m1 = multiples_.a;\n\t\t\t\t\tvar rest = multiples_.b;\n\t\t\t\t\tif (_Utils_cmp(m1 * magnitude, intervalRaw) > -1) {\n\t\t\t\t\t\treturn m1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar $temp$multiples_ = rest;\n\t\t\t\t\t\tmultiples_ = $temp$multiples_;\n\t\t\t\t\t\tcontinue findMultipleExact;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tvar findMultiple = function (multiples_) {\n\t\t\tfindMultiple:\n\t\t\twhile (true) {\n\t\t\t\tif (multiples_.b) {\n\t\t\t\t\tif (multiples_.b.b) {\n\t\t\t\t\t\tvar m1 = multiples_.a;\n\t\t\t\t\t\tvar _n2 = multiples_.b;\n\t\t\t\t\t\tvar m2 = _n2.a;\n\t\t\t\t\t\tvar rest = _n2.b;\n\t\t\t\t\t\tif (_Utils_cmp(normalized, (m1 + m2) / 2) < 1) {\n\t\t\t\t\t\t\treturn m1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar $temp$multiples_ = A2(elm$core$List$cons, m2, rest);\n\t\t\t\t\t\t\tmultiples_ = $temp$multiples_;\n\t\t\t\t\t\t\tcontinue findMultiple;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar m1 = multiples_.a;\n\t\t\t\t\t\tvar rest = multiples_.b;\n\t\t\t\t\t\tif (_Utils_cmp(normalized, m1) < 1) {\n\t\t\t\t\t\t\treturn m1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar $temp$multiples_ = rest;\n\t\t\t\t\t\t\tmultiples_ = $temp$multiples_;\n\t\t\t\t\t\t\tcontinue findMultiple;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tvar multiple = hasTickAmount ? findMultipleExact(multiples) : findMultiple(multiples);\n\t\tvar precision = terezka$line_charts$Internal$Axis$Values$getPrecision(magnitude) + terezka$line_charts$Internal$Axis$Values$getPrecision(multiple);\n\t\treturn A2(terezka$line_charts$Internal$Axis$Values$correctFloat, precision, multiple * magnitude);\n\t});\nvar terezka$line_charts$Internal$Axis$Values$positions = F5(\n\tfunction (range, beginning, interval, m, acc) {\n\t\tpositions:\n\t\twhile (true) {\n\t\t\tvar next = A2(\n\t\t\t\tterezka$line_charts$Internal$Axis$Values$correctFloat,\n\t\t\t\tterezka$line_charts$Internal$Axis$Values$getPrecision(interval),\n\t\t\t\tbeginning + (m * interval));\n\t\t\tif (_Utils_cmp(next, range.max) > 0) {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar $temp$range = range,\n\t\t\t\t\t$temp$beginning = beginning,\n\t\t\t\t\t$temp$interval = interval,\n\t\t\t\t\t$temp$m = m + 1,\n\t\t\t\t\t$temp$acc = _Utils_ap(\n\t\t\t\t\tacc,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[next]));\n\t\t\t\trange = $temp$range;\n\t\t\t\tbeginning = $temp$beginning;\n\t\t\t\tinterval = $temp$interval;\n\t\t\t\tm = $temp$m;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tcontinue positions;\n\t\t\t}\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Axis$Values$values = F4(\n\tfunction (allowDecimals, exact, amountRough, range) {\n\t\tvar intervalRough = (range.max - range.min) / amountRough;\n\t\tvar interval = A3(terezka$line_charts$Internal$Axis$Values$getInterval, intervalRough, allowDecimals, exact);\n\t\tvar intervalSafe = (!interval) ? 1 : interval;\n\t\tvar beginning = A2(terezka$line_charts$Internal$Axis$Values$getBeginning, range.min, intervalSafe);\n\t\tvar amountRoughSafe = (!amountRough) ? 1 : amountRough;\n\t\treturn A5(terezka$line_charts$Internal$Axis$Values$positions, range, beginning, intervalSafe, 0, _List_Nil);\n\t});\nvar terezka$line_charts$Internal$Axis$Values$int = function (amount) {\n\tif (amount.$ === 'Exactly') {\n\t\tvar amount_ = amount.a;\n\t\treturn A2(\n\t\t\telm$core$Basics$composeL,\n\t\t\telm$core$List$map(elm$core$Basics$round),\n\t\t\tA3(terezka$line_charts$Internal$Axis$Values$values, false, true, amount_));\n\t} else {\n\t\tvar amount_ = amount.a;\n\t\treturn A2(\n\t\t\telm$core$Basics$composeL,\n\t\t\telm$core$List$map(elm$core$Basics$round),\n\t\t\tA3(terezka$line_charts$Internal$Axis$Values$values, false, false, amount_));\n\t}\n};\nvar elm$core$Basics$min = F2(\n\tfunction (x, y) {\n\t\treturn (_Utils_cmp(x, y) < 0) ? x : y;\n\t});\nvar terezka$line_charts$Internal$Coordinate$smallestRange = F2(\n\tfunction (data, range_) {\n\t\treturn {\n\t\t\tmax: A2(elm$core$Basics$min, data.max, range_.max),\n\t\t\tmin: A2(elm$core$Basics$max, data.min, range_.min)\n\t\t};\n\t});\nvar terezka$line_charts$Internal$Axis$Ticks$intCustom = F2(\n\tfunction (amount, tick) {\n\t\treturn terezka$line_charts$Internal$Axis$Ticks$custom(\n\t\t\tF2(\n\t\t\t\tfunction (data, range) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\ttick,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Axis$Values$int,\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Axis$Values$around(amount),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Coordinate$smallestRange, data, range)));\n\t\t\t\t}));\n\t});\nvar terezka$line_charts$Internal$Axis$Tick$Negative = {$: 'Negative'};\nvar terezka$line_charts$Internal$Axis$Tick$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Tick$custom = terezka$line_charts$Internal$Axis$Tick$Config;\nvar elm$svg$Svg$text = elm$virtual_dom$VirtualDom$text;\nvar elm$svg$Svg$text_ = elm$svg$Svg$trustedNode('text');\nvar elm$svg$Svg$tspan = elm$svg$Svg$trustedNode('tspan');\nvar elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');\nvar terezka$line_charts$Internal$Svg$label = F2(\n\tfunction (color, string) {\n\t\treturn A2(\n\t\t\telm$svg$Svg$text_,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$fill(color),\n\t\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$svg$Svg$tspan,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$svg$Svg$text(string)\n\t\t\t\t\t\t]))\n\t\t\t\t]));\n\t});\nvar avh4$elm_color$Color$RgbaSpace = F4(\n\tfunction (a, b, c, d) {\n\t\treturn {$: 'RgbaSpace', a: a, b: b, c: c, d: d};\n\t});\nvar avh4$elm_color$Color$scaleFrom255 = function (c) {\n\treturn c / 255;\n};\nvar avh4$elm_color$Color$rgb255 = F3(\n\tfunction (r, g, b) {\n\t\treturn A4(\n\t\t\tavh4$elm_color$Color$RgbaSpace,\n\t\t\tavh4$elm_color$Color$scaleFrom255(r),\n\t\t\tavh4$elm_color$Color$scaleFrom255(g),\n\t\t\tavh4$elm_color$Color$scaleFrom255(b),\n\t\t\t1.0);\n\t});\nvar terezka$line_charts$LineChart$Colors$gray = A3(avh4$elm_color$Color$rgb255, 163, 163, 163);\nvar terezka$line_charts$Internal$Axis$Tick$int = function (n) {\n\treturn terezka$line_charts$Internal$Axis$Tick$custom(\n\t\t{\n\t\t\tcolor: terezka$line_charts$LineChart$Colors$gray,\n\t\t\tdirection: terezka$line_charts$Internal$Axis$Tick$Negative,\n\t\t\tgrid: true,\n\t\t\tlabel: elm$core$Maybe$Just(\n\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Svg$label,\n\t\t\t\t\t'inherit',\n\t\t\t\t\telm$core$String$fromInt(n))),\n\t\t\tlength: 5,\n\t\t\tposition: n,\n\t\t\twidth: 1\n\t\t});\n};\nvar terezka$line_charts$LineChart$Axis$Tick$int = terezka$line_charts$Internal$Axis$Tick$int;\nvar terezka$line_charts$Internal$Axis$Ticks$int = function (amount) {\n\treturn A2(terezka$line_charts$Internal$Axis$Ticks$intCustom, amount, terezka$line_charts$LineChart$Axis$Tick$int);\n};\nvar terezka$line_charts$LineChart$Axis$Ticks$int = terezka$line_charts$Internal$Axis$Ticks$int;\nvar author$project$Pages$Profile$History$ticksConfig = function (ticks) {\n\treturn terezka$line_charts$LineChart$Axis$Ticks$int(ticks);\n};\nvar terezka$line_charts$Internal$Axis$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$custom = terezka$line_charts$Internal$Axis$Config;\nvar terezka$line_charts$LineChart$Axis$custom = terezka$line_charts$Internal$Axis$custom;\nvar terezka$line_charts$Internal$Axis$Line$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Line$custom = terezka$line_charts$Internal$Axis$Line$Config;\nvar terezka$line_charts$Internal$Axis$Line$rangeFrame = function (color) {\n\treturn terezka$line_charts$Internal$Axis$Line$custom(\n\t\tF2(\n\t\t\tfunction (data, range) {\n\t\t\t\tvar smallest = A2(terezka$line_charts$Internal$Coordinate$smallestRange, data, range);\n\t\t\t\treturn {color: color, end: smallest.max, events: _List_Nil, start: smallest.min, width: 1};\n\t\t\t}));\n};\nvar terezka$line_charts$LineChart$Axis$Line$rangeFrame = terezka$line_charts$Internal$Axis$Line$rangeFrame;\nvar terezka$line_charts$Internal$Axis$Range$Padded = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Padded', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Axis$Range$padded = terezka$line_charts$Internal$Axis$Range$Padded;\nvar terezka$line_charts$Internal$Axis$Range$default = A2(terezka$line_charts$Internal$Axis$Range$padded, 0, 0);\nvar terezka$line_charts$LineChart$Axis$Range$default = terezka$line_charts$Internal$Axis$Range$default;\nvar terezka$line_charts$Internal$Axis$Title$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Title$custom = F4(\n\tfunction (position, x, y, title) {\n\t\treturn terezka$line_charts$Internal$Axis$Title$Config(\n\t\t\t{\n\t\t\t\toffset: _Utils_Tuple2(x, y),\n\t\t\t\tposition: position,\n\t\t\t\tview: title\n\t\t\t});\n\t});\nvar terezka$line_charts$Internal$Axis$Title$atPosition = F3(\n\tfunction (position, x, y) {\n\t\treturn A2(\n\t\t\telm$core$Basics$composeL,\n\t\t\tA3(terezka$line_charts$Internal$Axis$Title$custom, position, x, y),\n\t\t\tterezka$line_charts$Internal$Svg$label('inherit'));\n\t});\nvar terezka$line_charts$Internal$Axis$Title$atAxisMax = function () {\n\tvar position = F2(\n\t\tfunction (data, range) {\n\t\t\treturn range.max;\n\t\t});\n\treturn terezka$line_charts$Internal$Axis$Title$atPosition(position);\n}();\nvar terezka$line_charts$Internal$Axis$Title$default = A2(terezka$line_charts$Internal$Axis$Title$atAxisMax, 0, 0);\nvar terezka$line_charts$LineChart$Axis$Title$default = terezka$line_charts$Internal$Axis$Title$default;\nvar author$project$Pages$Profile$History$xConfig = function (tickCount) {\n\treturn terezka$line_charts$LineChart$Axis$custom(\n\t\t{\n\t\t\taxisLine: terezka$line_charts$LineChart$Axis$Line$rangeFrame(terezka$line_charts$LineChart$Colors$gray),\n\t\t\tpixels: 1000,\n\t\t\trange: terezka$line_charts$LineChart$Axis$Range$default,\n\t\t\tticks: author$project$Pages$Profile$History$ticksConfig(tickCount),\n\t\t\ttitle: terezka$line_charts$LineChart$Axis$Title$default('Day'),\n\t\t\tvariable: A2(\n\t\t\t\telm$core$Basics$composeL,\n\t\t\t\telm$core$Maybe$Just,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.x;\n\t\t\t\t})\n\t\t});\n};\nvar terezka$line_charts$Internal$Line$Series = function (a) {\n\treturn {$: 'Series', a: a};\n};\nvar terezka$line_charts$Internal$Line$SeriesConfig = F5(\n\tfunction (color, shape, dashing, label, data) {\n\t\treturn {color: color, dashing: dashing, data: data, label: label, shape: shape};\n\t});\nvar terezka$line_charts$Internal$Line$line = F4(\n\tfunction (color_, shape_, label_, data_) {\n\t\treturn terezka$line_charts$Internal$Line$Series(\n\t\t\tA5(terezka$line_charts$Internal$Line$SeriesConfig, color_, shape_, _List_Nil, label_, data_));\n\t});\nvar terezka$line_charts$LineChart$line = terezka$line_charts$Internal$Line$line;\nvar elm$svg$Svg$defs = elm$svg$Svg$trustedNode('defs');\nvar elm$svg$Svg$g = elm$svg$Svg$trustedNode('g');\nvar terezka$line_charts$Internal$Axis$variable = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.variable;\n};\nvar elm$core$String$concat = function (strings) {\n\treturn A2(elm$core$String$join, '', strings);\n};\nvar avh4$elm_color$Color$toCssString = function (_n0) {\n\tvar r = _n0.a;\n\tvar g = _n0.b;\n\tvar b = _n0.c;\n\tvar a = _n0.d;\n\tvar roundTo = function (x) {\n\t\treturn elm$core$Basics$round(x * 1000) / 1000;\n\t};\n\tvar pct = function (x) {\n\t\treturn elm$core$Basics$round(x * 10000) / 100;\n\t};\n\treturn elm$core$String$concat(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t'rgba(',\n\t\t\t\telm$core$String$fromFloat(\n\t\t\t\tpct(r)),\n\t\t\t\t'%,',\n\t\t\t\telm$core$String$fromFloat(\n\t\t\t\tpct(g)),\n\t\t\t\t'%,',\n\t\t\t\telm$core$String$fromFloat(\n\t\t\t\tpct(b)),\n\t\t\t\t'%,',\n\t\t\t\telm$core$String$fromFloat(\n\t\t\t\troundTo(a)),\n\t\t\t\t')'\n\t\t\t]));\n};\nvar elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');\nvar terezka$line_charts$Internal$Utils$toChartAreaId = function (id) {\n\treturn 'chart__chart-area--' + id;\n};\nvar terezka$line_charts$Internal$Svg$withinChartArea = function (_n0) {\n\tvar id = _n0.id;\n\treturn elm$svg$Svg$Attributes$clipPath(\n\t\t'url(#' + (terezka$line_charts$Internal$Utils$toChartAreaId(id) + ')'));\n};\nvar terezka$line_charts$Internal$Axis$attributesLine = F2(\n\tfunction (system, _n0) {\n\t\tvar events = _n0.events;\n\t\tvar width = _n0.width;\n\t\tvar color = _n0.color;\n\t\treturn _Utils_ap(\n\t\t\tevents,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\t\telm$core$String$fromFloat(width)),\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(color)),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$withinChartArea(system)\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Path$Line = function (a) {\n\treturn {$: 'Line', a: a};\n};\nvar terezka$line_charts$Internal$Path$Move = function (a) {\n\treturn {$: 'Move', a: a};\n};\nvar terezka$line_charts$Internal$Path$join = function (commands) {\n\treturn A2(elm$core$String$join, ' ', commands);\n};\nvar terezka$line_charts$Internal$Path$bool = function (bool_) {\n\treturn bool_ ? '1' : '0';\n};\nvar terezka$line_charts$Internal$Path$point = function (point_) {\n\treturn elm$core$String$fromFloat(point_.x) + (' ' + elm$core$String$fromFloat(point_.y));\n};\nvar terezka$line_charts$Internal$Path$points = function (points_) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t',',\n\t\tA2(elm$core$List$map, terezka$line_charts$Internal$Path$point, points_));\n};\nvar terezka$line_charts$Internal$Path$toString = function (command) {\n\tswitch (command.$) {\n\t\tcase 'Close':\n\t\t\treturn 'Z';\n\t\tcase 'Move':\n\t\t\tvar p = command.a;\n\t\t\treturn 'M' + terezka$line_charts$Internal$Path$point(p);\n\t\tcase 'Line':\n\t\t\tvar p = command.a;\n\t\t\treturn 'L' + terezka$line_charts$Internal$Path$point(p);\n\t\tcase 'Horizontal':\n\t\t\tvar x = command.a;\n\t\t\treturn 'H' + elm$core$String$fromFloat(x);\n\t\tcase 'Vertical':\n\t\t\tvar y = command.a;\n\t\t\treturn 'V' + elm$core$String$fromFloat(y);\n\t\tcase 'CubicBeziers':\n\t\t\tvar c1 = command.a;\n\t\t\tvar c2 = command.b;\n\t\t\tvar p = command.c;\n\t\t\treturn 'C' + terezka$line_charts$Internal$Path$points(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[c1, c2, p]));\n\t\tcase 'CubicBeziersShort':\n\t\t\tvar c1 = command.a;\n\t\t\tvar p = command.b;\n\t\t\treturn 'Q' + terezka$line_charts$Internal$Path$points(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[c1, p]));\n\t\tcase 'QuadraticBeziers':\n\t\t\tvar c1 = command.a;\n\t\t\tvar p = command.b;\n\t\t\treturn 'Q' + terezka$line_charts$Internal$Path$points(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[c1, p]));\n\t\tcase 'QuadraticBeziersShort':\n\t\t\tvar p = command.a;\n\t\t\treturn 'T' + terezka$line_charts$Internal$Path$point(p);\n\t\tdefault:\n\t\t\tvar rx = command.a;\n\t\t\tvar ry = command.b;\n\t\t\tvar xAxisRotation = command.c;\n\t\t\tvar largeArcFlag = command.d;\n\t\t\tvar sweepFlag = command.e;\n\t\t\tvar p = command.f;\n\t\t\treturn 'A' + terezka$line_charts$Internal$Path$join(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$core$String$fromFloat(rx),\n\t\t\t\t\t\telm$core$String$fromFloat(ry),\n\t\t\t\t\t\telm$core$String$fromInt(xAxisRotation),\n\t\t\t\t\t\tterezka$line_charts$Internal$Path$bool(largeArcFlag),\n\t\t\t\t\t\tterezka$line_charts$Internal$Path$bool(sweepFlag),\n\t\t\t\t\t\tterezka$line_charts$Internal$Path$point(p)\n\t\t\t\t\t]));\n\t}\n};\nvar terezka$line_charts$Internal$Path$Arc = F6(\n\tfunction (a, b, c, d, e, f) {\n\t\treturn {$: 'Arc', a: a, b: b, c: c, d: d, e: e, f: f};\n\t});\nvar terezka$line_charts$Internal$Path$Close = {$: 'Close'};\nvar terezka$line_charts$Internal$Path$CubicBeziers = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'CubicBeziers', a: a, b: b, c: c};\n\t});\nvar terezka$line_charts$Internal$Path$CubicBeziersShort = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'CubicBeziersShort', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Path$Horizontal = function (a) {\n\treturn {$: 'Horizontal', a: a};\n};\nvar terezka$line_charts$Internal$Path$QuadraticBeziers = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'QuadraticBeziers', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Path$QuadraticBeziersShort = function (a) {\n\treturn {$: 'QuadraticBeziersShort', a: a};\n};\nvar terezka$line_charts$Internal$Path$Vertical = function (a) {\n\treturn {$: 'Vertical', a: a};\n};\nvar terezka$line_charts$Internal$Coordinate$lengthX = function (system) {\n\treturn A2(elm$core$Basics$max, 1, (system.frame.size.width - system.frame.margin.left) - system.frame.margin.right);\n};\nvar terezka$line_charts$Internal$Coordinate$reachX = function (system) {\n\tvar diff = system.x.max - system.x.min;\n\treturn (diff > 0) ? diff : 1;\n};\nvar terezka$line_charts$LineChart$Coordinate$scaleSvgX = F2(\n\tfunction (system, value) {\n\t\treturn (value * terezka$line_charts$Internal$Coordinate$lengthX(system)) / terezka$line_charts$Internal$Coordinate$reachX(system);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toSvgX = F2(\n\tfunction (system, value) {\n\t\treturn A2(terezka$line_charts$LineChart$Coordinate$scaleSvgX, system, value - system.x.min) + system.frame.margin.left;\n\t});\nvar terezka$line_charts$Internal$Coordinate$lengthY = function (system) {\n\treturn A2(elm$core$Basics$max, 1, (system.frame.size.height - system.frame.margin.bottom) - system.frame.margin.top);\n};\nvar terezka$line_charts$Internal$Coordinate$reachY = function (system) {\n\tvar diff = system.y.max - system.y.min;\n\treturn (diff > 0) ? diff : 1;\n};\nvar terezka$line_charts$LineChart$Coordinate$scaleSvgY = F2(\n\tfunction (system, value) {\n\t\treturn (value * terezka$line_charts$Internal$Coordinate$lengthY(system)) / terezka$line_charts$Internal$Coordinate$reachY(system);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toSvgY = F2(\n\tfunction (system, value) {\n\t\treturn A2(terezka$line_charts$LineChart$Coordinate$scaleSvgY, system, system.y.max - value) + system.frame.margin.top;\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toSvg = F2(\n\tfunction (system, point) {\n\t\treturn {\n\t\t\tx: A2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, point.x),\n\t\t\ty: A2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, point.y)\n\t\t};\n\t});\nvar terezka$line_charts$Internal$Path$translate = F2(\n\tfunction (system, command) {\n\t\tswitch (command.$) {\n\t\t\tcase 'Move':\n\t\t\t\tvar p = command.a;\n\t\t\t\treturn terezka$line_charts$Internal$Path$Move(\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'Line':\n\t\t\t\tvar p = command.a;\n\t\t\t\treturn terezka$line_charts$Internal$Path$Line(\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'Horizontal':\n\t\t\t\tvar x = command.a;\n\t\t\t\treturn terezka$line_charts$Internal$Path$Horizontal(\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x));\n\t\t\tcase 'Vertical':\n\t\t\t\tvar y = command.a;\n\t\t\t\treturn terezka$line_charts$Internal$Path$Vertical(\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y));\n\t\t\tcase 'CubicBeziers':\n\t\t\t\tvar c1 = command.a;\n\t\t\t\tvar c2 = command.b;\n\t\t\t\tvar p = command.c;\n\t\t\t\treturn A3(\n\t\t\t\t\tterezka$line_charts$Internal$Path$CubicBeziers,\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c1),\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c2),\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'CubicBeziersShort':\n\t\t\t\tvar c1 = command.a;\n\t\t\t\tvar p = command.b;\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$Internal$Path$CubicBeziersShort,\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c1),\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'QuadraticBeziers':\n\t\t\t\tvar c1 = command.a;\n\t\t\t\tvar p = command.b;\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$Internal$Path$QuadraticBeziers,\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c1),\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'QuadraticBeziersShort':\n\t\t\t\tvar p = command.a;\n\t\t\t\treturn terezka$line_charts$Internal$Path$QuadraticBeziersShort(\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'Arc':\n\t\t\t\tvar rx = command.a;\n\t\t\t\tvar ry = command.b;\n\t\t\t\tvar xAxisRotation = command.c;\n\t\t\t\tvar largeArcFlag = command.d;\n\t\t\t\tvar sweepFlag = command.e;\n\t\t\t\tvar p = command.f;\n\t\t\t\treturn A6(\n\t\t\t\t\tterezka$line_charts$Internal$Path$Arc,\n\t\t\t\t\trx,\n\t\t\t\t\try,\n\t\t\t\t\txAxisRotation,\n\t\t\t\t\tlargeArcFlag,\n\t\t\t\t\tsweepFlag,\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tdefault:\n\t\t\t\treturn terezka$line_charts$Internal$Path$Close;\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Path$description = F2(\n\tfunction (system, commands) {\n\t\treturn terezka$line_charts$Internal$Path$join(\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tA2(\n\t\t\t\t\telm$core$Basics$composeR,\n\t\t\t\t\tterezka$line_charts$Internal$Path$translate(system),\n\t\t\t\t\tterezka$line_charts$Internal$Path$toString),\n\t\t\t\tcommands));\n\t});\nvar terezka$line_charts$Internal$Path$viewPath = function (attributes) {\n\treturn A2(elm$svg$Svg$path, attributes, _List_Nil);\n};\nvar terezka$line_charts$Internal$Path$view = F3(\n\tfunction (system, attributes, commands) {\n\t\treturn terezka$line_charts$Internal$Path$viewPath(\n\t\t\t_Utils_ap(\n\t\t\t\tattributes,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$d(\n\t\t\t\t\t\tA2(terezka$line_charts$Internal$Path$description, system, commands))\n\t\t\t\t\t])));\n\t});\nvar terezka$line_charts$Internal$Utils$concat = F3(\n\tfunction (first, second, third) {\n\t\treturn _Utils_ap(\n\t\t\tfirst,\n\t\t\t_Utils_ap(second, third));\n\t});\nvar terezka$line_charts$Internal$Svg$horizontal = F5(\n\tfunction (system, userAttributes, y, x1, x2) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),\n\t\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;')\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_Nil);\n\t\treturn A3(\n\t\t\tterezka$line_charts$Internal$Path$view,\n\t\t\tsystem,\n\t\t\tattributes,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tterezka$line_charts$Internal$Path$Move(\n\t\t\t\t\t{x: x1, y: y}),\n\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t{x: x1, y: y}),\n\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t{x: x2, y: y})\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Axis$viewHorizontalAxisLine = F3(\n\tfunction (system, axisPosition, config) {\n\t\treturn A5(\n\t\t\tterezka$line_charts$Internal$Svg$horizontal,\n\t\t\tsystem,\n\t\t\tA2(terezka$line_charts$Internal$Axis$attributesLine, system, config),\n\t\t\taxisPosition,\n\t\t\tconfig.start,\n\t\t\tconfig.end);\n\t});\nvar terezka$line_charts$Internal$Axis$attributesTick = function (_n0) {\n\tvar width = _n0.width;\n\tvar color = _n0.color;\n\treturn _List_fromArray(\n\t\t[\n\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\telm$core$String$fromFloat(width)),\n\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t]);\n};\nvar terezka$line_charts$Internal$Axis$Tick$isPositive = function (direction) {\n\tif (direction.$ === 'Positive') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\nvar terezka$line_charts$Internal$Axis$lengthOfTick = function (_n0) {\n\tvar length = _n0.length;\n\tvar direction = _n0.direction;\n\treturn terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? (-length) : length;\n};\nvar terezka$line_charts$Internal$Svg$Middle = {$: 'Middle'};\nvar terezka$line_charts$Internal$Svg$anchorStyle = function (anchor) {\n\tvar anchorString = function () {\n\t\tswitch (anchor.$) {\n\t\t\tcase 'Start':\n\t\t\t\treturn 'start';\n\t\t\tcase 'Middle':\n\t\t\t\treturn 'middle';\n\t\t\tdefault:\n\t\t\t\treturn 'end';\n\t\t}\n\t}();\n\treturn elm$svg$Svg$Attributes$style('text-anchor: ' + (anchorString + ';'));\n};\nvar terezka$line_charts$Internal$Svg$Transfrom = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Transfrom', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Svg$move = F3(\n\tfunction (system, x, y) {\n\t\treturn A2(\n\t\t\tterezka$line_charts$Internal$Svg$Transfrom,\n\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x),\n\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y));\n\t});\nvar terezka$line_charts$Internal$Svg$offset = F2(\n\tfunction (x, y) {\n\t\treturn A2(terezka$line_charts$Internal$Svg$Transfrom, x, y);\n\t});\nvar elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');\nvar terezka$line_charts$Internal$Svg$addPosition = F2(\n\tfunction (_n0, _n1) {\n\t\tvar x = _n0.a;\n\t\tvar y = _n0.b;\n\t\tvar xf = _n1.a;\n\t\tvar yf = _n1.b;\n\t\treturn A2(terezka$line_charts$Internal$Svg$Transfrom, xf + x, yf + y);\n\t});\nvar terezka$line_charts$Internal$Svg$toPosition = A2(\n\telm$core$List$foldr,\n\tterezka$line_charts$Internal$Svg$addPosition,\n\tA2(terezka$line_charts$Internal$Svg$Transfrom, 0, 0));\nvar terezka$line_charts$Internal$Svg$transform = function (translations) {\n\tvar _n0 = terezka$line_charts$Internal$Svg$toPosition(translations);\n\tvar x = _n0.a;\n\tvar y = _n0.b;\n\treturn elm$svg$Svg$Attributes$transform(\n\t\t'translate(' + (elm$core$String$fromFloat(x) + (', ' + (elm$core$String$fromFloat(y) + ')'))));\n};\nvar terezka$line_charts$Internal$Axis$viewHorizontalLabel = F4(\n\tfunction (system, _n0, position, view) {\n\t\tvar direction = _n0.direction;\n\t\tvar length = _n0.length;\n\t\tvar yOffset = terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? ((-5) - length) : (15 + length);\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, 0, yOffset)\n\t\t\t\t\t\t])),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$anchorStyle(terezka$line_charts$Internal$Svg$Middle)\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[view]));\n\t});\nvar terezka$line_charts$Internal$Svg$xTick = F5(\n\tfunction (system, height, userAttributes, y, x) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray))\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x))),\n\t\t\t\t\telm$svg$Svg$Attributes$x2(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x))),\n\t\t\t\t\telm$svg$Svg$Attributes$y1(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y))),\n\t\t\t\t\telm$svg$Svg$Attributes$y2(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y) + height))\n\t\t\t\t]));\n\t\treturn A2(elm$svg$Svg$line, attributes, _List_Nil);\n\t});\nvar terezka$line_charts$Internal$Utils$viewMaybe = F2(\n\tfunction (a, view) {\n\t\treturn A2(\n\t\t\telm$core$Maybe$withDefault,\n\t\t\telm$svg$Svg$text(''),\n\t\t\tA2(elm$core$Maybe$map, view, a));\n\t});\nvar terezka$line_charts$Internal$Axis$viewHorizontalTick = F3(\n\tfunction (system, point, tick) {\n\t\tvar x = point.x;\n\t\tvar y = point.y;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__tick')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA5(\n\t\t\t\t\tterezka$line_charts$Internal$Svg$xTick,\n\t\t\t\t\tsystem,\n\t\t\t\t\tterezka$line_charts$Internal$Axis$lengthOfTick(tick),\n\t\t\t\t\tterezka$line_charts$Internal$Axis$attributesTick(tick),\n\t\t\t\t\ty,\n\t\t\t\t\tx),\n\t\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Utils$viewMaybe,\n\t\t\t\t\ttick.label,\n\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewHorizontalLabel, system, tick, point))\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Svg$Start = {$: 'Start'};\nvar terezka$line_charts$Internal$Axis$viewHorizontalTitle = F3(\n\tfunction (system, at, _n0) {\n\t\tvar title = _n0.title;\n\t\tvar position = at(\n\t\t\tA2(title.position, system.xData, system.x));\n\t\tvar _n1 = title.offset;\n\t\tvar xOffset = _n1.a;\n\t\tvar yOffset = _n1.b;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__title'),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, xOffset + 15, yOffset + 5)\n\t\t\t\t\t\t])),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$anchorStyle(terezka$line_charts$Internal$Svg$Start)\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[title.view]));\n\t});\nvar terezka$line_charts$Internal$Axis$Intersection$getY = function (_n0) {\n\tvar func = _n0.a;\n\treturn A2(\n\t\telm$core$Basics$composeL,\n\t\tfunction ($) {\n\t\t\treturn $.y;\n\t\t},\n\t\tfunc);\n};\nvar terezka$line_charts$Internal$Axis$Line$config = function (_n0) {\n\tvar config_ = _n0.a;\n\treturn config_;\n};\nvar terezka$line_charts$Internal$Axis$Tick$properties = function (_n0) {\n\tvar properties_ = _n0.a;\n\treturn properties_;\n};\nvar terezka$line_charts$Internal$Axis$Ticks$ticks = F3(\n\tfunction (dataRange, range, _n0) {\n\t\tvar values = _n0.a;\n\t\treturn A2(\n\t\t\telm$core$List$map,\n\t\t\tterezka$line_charts$Internal$Axis$Tick$properties,\n\t\t\tA2(values, dataRange, range));\n\t});\nvar terezka$line_charts$Internal$Axis$Title$config = function (_n0) {\n\tvar title = _n0.a;\n\treturn title;\n};\nvar terezka$line_charts$Internal$Axis$viewHorizontal = F3(\n\tfunction (system, intersection, _n0) {\n\t\tvar config = _n0.a;\n\t\tvar viewConfig = {\n\t\t\tintersection: A2(terezka$line_charts$Internal$Axis$Intersection$getY, intersection, system),\n\t\t\tline: A3(terezka$line_charts$Internal$Axis$Line$config, config.axisLine, system.xData, system.x),\n\t\t\tticks: A3(terezka$line_charts$Internal$Axis$Ticks$ticks, system.xData, system.x, config.ticks),\n\t\t\ttitle: terezka$line_charts$Internal$Axis$Title$config(config.title)\n\t\t};\n\t\tvar viewAxisLine = A2(terezka$line_charts$Internal$Axis$viewHorizontalAxisLine, system, viewConfig.intersection);\n\t\tvar at = function (x) {\n\t\t\treturn {x: x, y: viewConfig.intersection};\n\t\t};\n\t\tvar viewTick = function (tick) {\n\t\t\treturn A3(\n\t\t\t\tterezka$line_charts$Internal$Axis$viewHorizontalTick,\n\t\t\t\tsystem,\n\t\t\t\tat(tick.position),\n\t\t\t\ttick);\n\t\t};\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__axis--horizontal')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewHorizontalTitle, system, at, viewConfig),\n\t\t\t\t\tviewAxisLine(viewConfig.line),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$svg$Svg$g,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__ticks')\n\t\t\t\t\t\t]),\n\t\t\t\t\tA2(elm$core$List$map, viewTick, viewConfig.ticks))\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Svg$vertical = F5(\n\tfunction (system, userAttributes, x, y1, y2) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),\n\t\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;')\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_Nil);\n\t\treturn A3(\n\t\t\tterezka$line_charts$Internal$Path$view,\n\t\t\tsystem,\n\t\t\tattributes,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tterezka$line_charts$Internal$Path$Move(\n\t\t\t\t\t{x: x, y: y1}),\n\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t{x: x, y: y1}),\n\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t{x: x, y: y2})\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Axis$viewVerticalAxisLine = F3(\n\tfunction (system, axisPosition, config) {\n\t\treturn A5(\n\t\t\tterezka$line_charts$Internal$Svg$vertical,\n\t\t\tsystem,\n\t\t\tA2(terezka$line_charts$Internal$Axis$attributesLine, system, config),\n\t\t\taxisPosition,\n\t\t\tconfig.start,\n\t\t\tconfig.end);\n\t});\nvar terezka$line_charts$Internal$Svg$End = {$: 'End'};\nvar terezka$line_charts$Internal$Axis$viewVerticalLabel = F4(\n\tfunction (system, _n0, position, view) {\n\t\tvar direction = _n0.direction;\n\t\tvar length = _n0.length;\n\t\tvar xOffset = terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? (5 + length) : ((-5) - length);\n\t\tvar anchor = terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? terezka$line_charts$Internal$Svg$Start : terezka$line_charts$Internal$Svg$End;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, xOffset, 5)\n\t\t\t\t\t\t])),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$anchorStyle(anchor)\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[view]));\n\t});\nvar terezka$line_charts$Internal$Svg$yTick = F5(\n\tfunction (system, width, userAttributes, x, y) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__tick'),\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray))\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x))),\n\t\t\t\t\telm$svg$Svg$Attributes$x2(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x) - width)),\n\t\t\t\t\telm$svg$Svg$Attributes$y1(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y))),\n\t\t\t\t\telm$svg$Svg$Attributes$y2(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y)))\n\t\t\t\t]));\n\t\treturn A2(elm$svg$Svg$line, attributes, _List_Nil);\n\t});\nvar terezka$line_charts$Internal$Axis$viewVerticalTick = F3(\n\tfunction (system, point, tick) {\n\t\tvar x = point.x;\n\t\tvar y = point.y;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__tick')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA5(\n\t\t\t\t\tterezka$line_charts$Internal$Svg$yTick,\n\t\t\t\t\tsystem,\n\t\t\t\t\tterezka$line_charts$Internal$Axis$lengthOfTick(tick),\n\t\t\t\t\tterezka$line_charts$Internal$Axis$attributesTick(tick),\n\t\t\t\t\tx,\n\t\t\t\t\ty),\n\t\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Utils$viewMaybe,\n\t\t\t\t\ttick.label,\n\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewVerticalLabel, system, tick, point))\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Axis$viewVerticalTitle = F3(\n\tfunction (system, at, _n0) {\n\t\tvar title = _n0.title;\n\t\tvar position = at(\n\t\t\tA2(title.position, system.yData, system.y));\n\t\tvar _n1 = title.offset;\n\t\tvar xOffset = _n1.a;\n\t\tvar yOffset = _n1.b;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__title'),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, xOffset + 2, yOffset - 10)\n\t\t\t\t\t\t])),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$anchorStyle(terezka$line_charts$Internal$Svg$End)\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[title.view]));\n\t});\nvar terezka$line_charts$Internal$Axis$Intersection$getX = function (_n0) {\n\tvar func = _n0.a;\n\treturn A2(\n\t\telm$core$Basics$composeL,\n\t\tfunction ($) {\n\t\t\treturn $.x;\n\t\t},\n\t\tfunc);\n};\nvar terezka$line_charts$Internal$Axis$viewVertical = F3(\n\tfunction (system, intersection, _n0) {\n\t\tvar config = _n0.a;\n\t\tvar viewConfig = {\n\t\t\tintersection: A2(terezka$line_charts$Internal$Axis$Intersection$getX, intersection, system),\n\t\t\tline: A3(terezka$line_charts$Internal$Axis$Line$config, config.axisLine, system.yData, system.y),\n\t\t\tticks: A3(terezka$line_charts$Internal$Axis$Ticks$ticks, system.yData, system.y, config.ticks),\n\t\t\ttitle: terezka$line_charts$Internal$Axis$Title$config(config.title)\n\t\t};\n\t\tvar viewAxisLine = A2(terezka$line_charts$Internal$Axis$viewVerticalAxisLine, system, viewConfig.intersection);\n\t\tvar at = function (y) {\n\t\t\treturn {x: viewConfig.intersection, y: y};\n\t\t};\n\t\tvar viewTick = function (tick) {\n\t\t\treturn A3(\n\t\t\t\tterezka$line_charts$Internal$Axis$viewVerticalTick,\n\t\t\t\tsystem,\n\t\t\t\tat(tick.position),\n\t\t\t\ttick);\n\t\t};\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__axis--vertical')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewVerticalTitle, system, at, viewConfig),\n\t\t\t\t\tviewAxisLine(viewConfig.line),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$svg$Svg$g,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__ticks')\n\t\t\t\t\t\t]),\n\t\t\t\t\tA2(elm$core$List$map, viewTick, viewConfig.ticks))\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Container$properties = F2(\n\tfunction (f, _n0) {\n\t\tvar properties_ = _n0.a;\n\t\treturn f(properties_);\n\t});\nvar terezka$line_charts$Internal$Events$toContainerAttributes = F3(\n\tfunction (data, system, _n0) {\n\t\tvar events = _n0.a;\n\t\tvar order = function (_n1) {\n\t\t\tvar outside = _n1.a;\n\t\t\tvar event = _n1.b;\n\t\t\treturn outside ? elm$core$Maybe$Just(\n\t\t\t\tA2(event, data, system)) : elm$core$Maybe$Nothing;\n\t\t};\n\t\treturn A2(elm$core$List$filterMap, order, events);\n\t});\nvar terezka$line_charts$Internal$Axis$ticks = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.ticks;\n};\nvar terezka$line_charts$Internal$Svg$gridDot = F3(\n\tfunction (radius, color, point) {\n\t\treturn A2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx(\n\t\t\t\t\telm$core$String$fromFloat(point.x)),\n\t\t\t\t\telm$svg$Svg$Attributes$cy(\n\t\t\t\t\telm$core$String$fromFloat(point.y)),\n\t\t\t\t\telm$svg$Svg$Attributes$r(\n\t\t\t\t\telm$core$String$fromFloat(radius)),\n\t\t\t\t\telm$svg$Svg$Attributes$fill(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t\t\t]),\n\t\t\t_List_Nil);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$Point = F2(\n\tfunction (x, y) {\n\t\treturn {x: x, y: y};\n\t});\nvar terezka$line_charts$Internal$Grid$viewDots = F5(\n\tfunction (system, verticals, horizontals, radius, color) {\n\t\tvar dot = F2(\n\t\t\tfunction (x, y) {\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$LineChart$Coordinate$toSvg,\n\t\t\t\t\tsystem,\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$Point, x, y));\n\t\t\t});\n\t\tvar dots_ = function (g) {\n\t\t\treturn A2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tdot(g),\n\t\t\t\thorizontals);\n\t\t};\n\t\tvar alldots = A2(elm$core$List$concatMap, dots_, verticals);\n\t\treturn A2(\n\t\t\telm$core$List$map,\n\t\t\tA2(terezka$line_charts$Internal$Svg$gridDot, radius, color),\n\t\t\talldots);\n\t});\nvar terezka$line_charts$Internal$Svg$horizontalGrid = F3(\n\tfunction (system, userAttributes, y) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),\n\t\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;')\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_Nil);\n\t\treturn A5(terezka$line_charts$Internal$Svg$horizontal, system, attributes, y, system.x.min, system.x.max);\n\t});\nvar terezka$line_charts$Internal$Svg$verticalGrid = F3(\n\tfunction (system, userAttributes, x) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),\n\t\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;')\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_Nil);\n\t\treturn A5(terezka$line_charts$Internal$Svg$vertical, system, attributes, x, system.y.min, system.y.max);\n\t});\nvar terezka$line_charts$Internal$Grid$viewLines = F5(\n\tfunction (system, verticals, horizontals, width, color) {\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\telm$core$String$fromFloat(width)),\n\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t\t]);\n\t\treturn _Utils_ap(\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tA2(terezka$line_charts$Internal$Svg$horizontalGrid, system, attributes),\n\t\t\t\thorizontals),\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tA2(terezka$line_charts$Internal$Svg$verticalGrid, system, attributes),\n\t\t\t\tverticals));\n\t});\nvar terezka$line_charts$Internal$Grid$view = F4(\n\tfunction (system, xAxis, yAxis, grid) {\n\t\tvar hasGrid = function (tick) {\n\t\t\treturn tick.grid ? elm$core$Maybe$Just(tick.position) : elm$core$Maybe$Nothing;\n\t\t};\n\t\tvar horizontals = A2(\n\t\t\telm$core$List$filterMap,\n\t\t\thasGrid,\n\t\t\tA3(\n\t\t\t\tterezka$line_charts$Internal$Axis$Ticks$ticks,\n\t\t\t\tsystem.yData,\n\t\t\t\tsystem.y,\n\t\t\t\tterezka$line_charts$Internal$Axis$ticks(yAxis)));\n\t\tvar verticals = A2(\n\t\t\telm$core$List$filterMap,\n\t\t\thasGrid,\n\t\t\tA3(\n\t\t\t\tterezka$line_charts$Internal$Axis$Ticks$ticks,\n\t\t\t\tsystem.xData,\n\t\t\t\tsystem.x,\n\t\t\t\tterezka$line_charts$Internal$Axis$ticks(xAxis)));\n\t\tif (grid.$ === 'Dots') {\n\t\t\tvar radius = grid.a;\n\t\t\tvar color = grid.b;\n\t\t\treturn A5(terezka$line_charts$Internal$Grid$viewDots, system, verticals, horizontals, radius, color);\n\t\t} else {\n\t\t\tvar width = grid.a;\n\t\t\tvar color = grid.b;\n\t\t\treturn A5(terezka$line_charts$Internal$Grid$viewLines, system, verticals, horizontals, width, color);\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Junk$addBelow = F2(\n\tfunction (below, layers) {\n\t\treturn _Utils_update(\n\t\t\tlayers,\n\t\t\t{\n\t\t\t\tbelow: _Utils_ap(below, layers.below)\n\t\t\t});\n\t});\nvar terezka$line_charts$Internal$Junk$getLayers = F5(\n\tfunction (series, toX, toY, system, _n0) {\n\t\tvar toLayers = _n0.a;\n\t\treturn A4(toLayers, series, toX, toY, system);\n\t});\nvar terezka$line_charts$Internal$Line$label = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.label;\n};\nvar terezka$line_charts$Internal$Legends$viewFree = F5(\n\tfunction (system, placement, viewLabel, line, data) {\n\t\tvar _n0 = function () {\n\t\t\tif (placement.$ === 'Beginning') {\n\t\t\t\treturn _Utils_Tuple3(data, terezka$line_charts$Internal$Svg$End, -10);\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\telm$core$List$reverse(data),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$Start,\n\t\t\t\t\t10);\n\t\t\t}\n\t\t}();\n\t\tvar orderedPoints = _n0.a;\n\t\tvar anchor = _n0.b;\n\t\tvar xOffset = _n0.c;\n\t\tvar transform = function (_n3) {\n\t\t\tvar x = _n3.x;\n\t\t\tvar y = _n3.y;\n\t\t\treturn terezka$line_charts$Internal$Svg$transform(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA3(terezka$line_charts$Internal$Svg$move, system, x, y),\n\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, xOffset, 3)\n\t\t\t\t\t]));\n\t\t};\n\t\tvar viewLegend = function (_n2) {\n\t\t\tvar point = _n2.point;\n\t\t\treturn A2(\n\t\t\t\telm$svg$Svg$g,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\ttransform(point),\n\t\t\t\t\t\tterezka$line_charts$Internal$Svg$anchorStyle(anchor)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tviewLabel(\n\t\t\t\t\t\tterezka$line_charts$Internal$Line$label(line))\n\t\t\t\t\t]));\n\t\t};\n\t\treturn A2(\n\t\t\tterezka$line_charts$Internal$Utils$viewMaybe,\n\t\t\telm$core$List$head(orderedPoints),\n\t\t\tviewLegend);\n\t});\nvar terezka$line_charts$Internal$Legends$viewFrees = F3(\n\tfunction (_n0, placement, view_) {\n\t\tvar system = _n0.system;\n\t\tvar lines = _n0.lines;\n\t\tvar data = _n0.data;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__legends')\n\t\t\t\t]),\n\t\t\tA3(\n\t\t\t\telm$core$List$map2,\n\t\t\t\tA3(terezka$line_charts$Internal$Legends$viewFree, system, placement, view_),\n\t\t\t\tlines,\n\t\t\t\tdata));\n\t});\nvar terezka$line_charts$Internal$Data$Point = F2(\n\tfunction (x, y) {\n\t\treturn {x: x, y: y};\n\t});\nvar elm$core$Basics$pi = _Basics_pi;\nvar elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');\nvar terezka$line_charts$Internal$Dots$varietyAttributes = F2(\n\tfunction (color, variety) {\n\t\tswitch (variety.$) {\n\t\t\tcase 'Empty':\n\t\t\t\tvar width = variety.a;\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\t\tavh4$elm_color$Color$toCssString(color)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\t\t\telm$core$String$fromInt(width)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$fill('white')\n\t\t\t\t\t]);\n\t\t\tcase 'Aura':\n\t\t\t\tvar width = variety.a;\n\t\t\t\tvar opacity = variety.b;\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\t\tavh4$elm_color$Color$toCssString(color)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\t\t\telm$core$String$fromInt(width)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$strokeOpacity(\n\t\t\t\t\t\telm$core$String$fromFloat(opacity)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$fill(\n\t\t\t\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t\t\t\t]);\n\t\t\tcase 'Disconnected':\n\t\t\t\tvar width = variety.a;\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$stroke('white'),\n\t\t\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\t\t\telm$core$String$fromInt(width)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$fill(\n\t\t\t\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t\t\t\t]);\n\t\t\tdefault:\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$fill(\n\t\t\t\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t\t\t\t]);\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Dots$viewCircle = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar radius = elm$core$Basics$sqrt(area / elm$core$Basics$pi);\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$cx(\n\t\t\t\telm$core$String$fromFloat(point.x)),\n\t\t\t\telm$svg$Svg$Attributes$cy(\n\t\t\t\telm$core$String$fromFloat(point.y)),\n\t\t\t\telm$svg$Svg$Attributes$r(\n\t\t\t\telm$core$String$fromFloat(radius))\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar terezka$line_charts$Internal$Dots$pathPlus = F2(\n\tfunction (area, point) {\n\t\tvar side = elm$core$Basics$sqrt(area / 5);\n\t\tvar r6 = side / 2;\n\t\tvar r3 = side;\n\t\tvar commands = _List_fromArray(\n\t\t\t[\n\t\t\t\t'M' + (elm$core$String$fromFloat(point.x - r6) + (' ' + elm$core$String$fromFloat((point.y - r3) - r6))),\n\t\t\t\t'v' + elm$core$String$fromFloat(r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(r3)\n\t\t\t]);\n\t\treturn A2(elm$core$String$join, ' ', commands);\n\t});\nvar terezka$line_charts$Internal$Dots$viewCross = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar rotation = 'rotate(45 ' + (elm$core$String$fromFloat(point.x) + (' ' + (elm$core$String$fromFloat(point.y) + ')')));\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$d(\n\t\t\t\tA2(terezka$line_charts$Internal$Dots$pathPlus, area, point)),\n\t\t\t\telm$svg$Svg$Attributes$transform(rotation)\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar elm$svg$Svg$rect = elm$svg$Svg$trustedNode('rect');\nvar elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');\nvar elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');\nvar terezka$line_charts$Internal$Dots$viewDiamond = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar side = elm$core$Basics$sqrt(area);\n\t\tvar rotation = 'rotate(45 ' + (elm$core$String$fromFloat(point.x) + (' ' + (elm$core$String$fromFloat(point.y) + ')')));\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$x(\n\t\t\t\telm$core$String$fromFloat(point.x - (side / 2))),\n\t\t\t\telm$svg$Svg$Attributes$y(\n\t\t\t\telm$core$String$fromFloat(point.y - (side / 2))),\n\t\t\t\telm$svg$Svg$Attributes$width(\n\t\t\t\telm$core$String$fromFloat(side)),\n\t\t\t\telm$svg$Svg$Attributes$height(\n\t\t\t\telm$core$String$fromFloat(side)),\n\t\t\t\telm$svg$Svg$Attributes$transform(rotation)\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$rect,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar terezka$line_charts$Internal$Dots$viewPlus = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$d(\n\t\t\t\tA2(terezka$line_charts$Internal$Dots$pathPlus, area, point))\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar terezka$line_charts$Internal$Dots$viewSquare = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar side = elm$core$Basics$sqrt(area);\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$x(\n\t\t\t\telm$core$String$fromFloat(point.x - (side / 2))),\n\t\t\t\telm$svg$Svg$Attributes$y(\n\t\t\t\telm$core$String$fromFloat(point.y - (side / 2))),\n\t\t\t\telm$svg$Svg$Attributes$width(\n\t\t\t\telm$core$String$fromFloat(side)),\n\t\t\t\telm$svg$Svg$Attributes$height(\n\t\t\t\telm$core$String$fromFloat(side))\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$rect,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar elm$core$Basics$degrees = function (angleInDegrees) {\n\treturn (angleInDegrees * elm$core$Basics$pi) / 180;\n};\nvar elm$core$Basics$tan = _Basics_tan;\nvar terezka$line_charts$Internal$Dots$pathTriangle = F2(\n\tfunction (area, point) {\n\t\tvar side = elm$core$Basics$sqrt(\n\t\t\t(area * 4) / elm$core$Basics$sqrt(3));\n\t\tvar height = (elm$core$Basics$sqrt(3) * side) / 2;\n\t\tvar fromMiddle = height - ((elm$core$Basics$tan(\n\t\t\telm$core$Basics$degrees(30)) * side) / 2);\n\t\tvar commands = _List_fromArray(\n\t\t\t[\n\t\t\t\t'M' + (elm$core$String$fromFloat(point.x) + (' ' + elm$core$String$fromFloat(point.y - fromMiddle))),\n\t\t\t\t'l' + (elm$core$String$fromFloat((-side) / 2) + (' ' + elm$core$String$fromFloat(height))),\n\t\t\t\t'h' + elm$core$String$fromFloat(side),\n\t\t\t\t'z'\n\t\t\t]);\n\t\treturn A2(elm$core$String$join, ' ', commands);\n\t});\nvar terezka$line_charts$Internal$Dots$viewTriangle = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$d(\n\t\t\t\tA2(terezka$line_charts$Internal$Dots$pathTriangle, area, point))\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar terezka$line_charts$Internal$Dots$viewShape = F5(\n\tfunction (system, _n0, shape, color, point) {\n\t\tvar radius = _n0.radius;\n\t\tvar variety = _n0.variety;\n\t\tvar view_ = function () {\n\t\t\tswitch (shape.$) {\n\t\t\t\tcase 'Circle':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewCircle;\n\t\t\t\tcase 'Triangle':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewTriangle;\n\t\t\t\tcase 'Square':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewSquare;\n\t\t\t\tcase 'Diamond':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewDiamond;\n\t\t\t\tcase 'Cross':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewCross;\n\t\t\t\tcase 'Plus':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewPlus;\n\t\t\t\tdefault:\n\t\t\t\t\treturn F5(\n\t\t\t\t\t\tfunction (_n2, _n3, _n4, _n5, _n6) {\n\t\t\t\t\t\t\treturn elm$svg$Svg$text('');\n\t\t\t\t\t\t});\n\t\t\t}\n\t\t}();\n\t\tvar size = (2 * elm$core$Basics$pi) * radius;\n\t\tvar pointSvg = A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, point);\n\t\treturn A5(view_, _List_Nil, variety, color, size, pointSvg);\n\t});\nvar terezka$line_charts$Internal$Dots$viewSample = F5(\n\tfunction (_n0, shape, color, system, data) {\n\t\tvar config = _n0.a;\n\t\tvar _n1 = config.legend(\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.user;\n\t\t\t\t},\n\t\t\t\tdata));\n\t\tvar style_ = _n1.a;\n\t\treturn A4(terezka$line_charts$Internal$Dots$viewShape, system, style_, shape, color);\n\t});\nvar terezka$line_charts$Internal$Line$color = F3(\n\tfunction (_n0, _n1, data_) {\n\t\tvar config = _n0.a;\n\t\tvar line_ = _n1.a;\n\t\tvar _n2 = config(\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.user;\n\t\t\t\t},\n\t\t\t\tdata_));\n\t\tvar style_ = _n2.a;\n\t\treturn style_.color(line_.color);\n\t});\nvar terezka$line_charts$Internal$Line$shape = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.shape;\n};\nvar elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');\nvar terezka$line_charts$Internal$Area$hasArea = function (config) {\n\tswitch (config.$) {\n\t\tcase 'None':\n\t\t\treturn false;\n\t\tcase 'Normal':\n\t\t\treturn true;\n\t\tcase 'Stacked':\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn true;\n\t}\n};\nvar terezka$line_charts$Internal$Area$opacity = function (config) {\n\tswitch (config.$) {\n\t\tcase 'None':\n\t\t\treturn 0;\n\t\tcase 'Normal':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t\tcase 'Stacked':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t\tdefault:\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t}\n};\nvar terezka$line_charts$Internal$Line$toAreaAttributes = F3(\n\tfunction (_n0, _n1, area) {\n\t\tvar serie = _n0.a;\n\t\tvar style_ = _n1.a;\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$class('chart__interpolation__area__fragment'),\n\t\t\t\telm$svg$Svg$Attributes$fill(\n\t\t\t\tavh4$elm_color$Color$toCssString(\n\t\t\t\t\tstyle_.color(serie.color)))\n\t\t\t]);\n\t});\nvar elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');\nvar terezka$line_charts$Internal$Line$toSeriesAttributes = F2(\n\tfunction (_n0, _n1) {\n\t\tvar serie = _n0.a;\n\t\tvar style_ = _n1.a;\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;'),\n\t\t\t\telm$svg$Svg$Attributes$class('chart__interpolation__line__fragment'),\n\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\tavh4$elm_color$Color$toCssString(\n\t\t\t\t\tstyle_.color(serie.color))),\n\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\telm$core$String$fromFloat(style_.width)),\n\t\t\t\telm$svg$Svg$Attributes$strokeDasharray(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t' ',\n\t\t\t\t\tA2(elm$core$List$map, elm$core$String$fromFloat, serie.dashing))),\n\t\t\t\telm$svg$Svg$Attributes$fill('transparent')\n\t\t\t]);\n\t});\nvar terezka$line_charts$Internal$Utils$viewIf = F2(\n\tfunction (condition, view) {\n\t\treturn condition ? view(_Utils_Tuple0) : elm$svg$Svg$text('');\n\t});\nvar terezka$line_charts$Internal$Line$viewSample = F5(\n\tfunction (_n0, line_, area, data_, sampleWidth) {\n\t\tvar look = _n0.a;\n\t\tvar style_ = look(\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.user;\n\t\t\t\t},\n\t\t\t\tdata_));\n\t\tvar sizeAttributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$x1('0'),\n\t\t\t\telm$svg$Svg$Attributes$y1('0'),\n\t\t\t\telm$svg$Svg$Attributes$x2(\n\t\t\t\telm$core$String$fromFloat(sampleWidth)),\n\t\t\t\telm$svg$Svg$Attributes$y2('0')\n\t\t\t]);\n\t\tvar rectangleAttributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$x('0'),\n\t\t\t\telm$svg$Svg$Attributes$y('0'),\n\t\t\t\telm$svg$Svg$Attributes$height('9'),\n\t\t\t\telm$svg$Svg$Attributes$width(\n\t\t\t\telm$core$String$fromFloat(sampleWidth))\n\t\t\t]);\n\t\tvar lineAttributes = A2(terezka$line_charts$Internal$Line$toSeriesAttributes, line_, style_);\n\t\tvar areaAttributes = A2(\n\t\t\telm$core$List$cons,\n\t\t\telm$svg$Svg$Attributes$fillOpacity(\n\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\tterezka$line_charts$Internal$Area$opacity(area))),\n\t\t\tA3(terezka$line_charts$Internal$Line$toAreaAttributes, line_, style_, area));\n\t\tvar viewRectangle = function (_n1) {\n\t\t\treturn A2(\n\t\t\t\telm$svg$Svg$rect,\n\t\t\t\t_Utils_ap(areaAttributes, rectangleAttributes),\n\t\t\t\t_List_Nil);\n\t\t};\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_Nil,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$svg$Svg$line,\n\t\t\t\t\t_Utils_ap(lineAttributes, sizeAttributes),\n\t\t\t\t\t_List_Nil),\n\t\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Utils$viewIf,\n\t\t\t\t\tterezka$line_charts$Internal$Area$hasArea(area),\n\t\t\t\t\tviewRectangle)\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$LineChart$Coordinate$scaleDataX = F2(\n\tfunction (system, value) {\n\t\treturn (value * terezka$line_charts$Internal$Coordinate$reachX(system)) / terezka$line_charts$Internal$Coordinate$lengthX(system);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toDataX = F2(\n\tfunction (system, value) {\n\t\treturn system.x.min + A2(terezka$line_charts$LineChart$Coordinate$scaleDataX, system, value - system.frame.margin.left);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$scaleDataY = F2(\n\tfunction (system, value) {\n\t\treturn (value * terezka$line_charts$Internal$Coordinate$reachY(system)) / terezka$line_charts$Internal$Coordinate$lengthY(system);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toDataY = F2(\n\tfunction (system, value) {\n\t\treturn system.y.max - A2(terezka$line_charts$LineChart$Coordinate$scaleDataY, system, value - system.frame.margin.top);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toData = F2(\n\tfunction (system, point) {\n\t\treturn {\n\t\t\tx: A2(terezka$line_charts$LineChart$Coordinate$toDataX, system, point.x),\n\t\t\ty: A2(terezka$line_charts$LineChart$Coordinate$toDataY, system, point.y)\n\t\t};\n\t});\nvar terezka$line_charts$Internal$Legends$viewSample = F4(\n\tfunction (_n0, sampleWidth, line, data) {\n\t\tvar system = _n0.system;\n\t\tvar lineConfig = _n0.lineConfig;\n\t\tvar dotsConfig = _n0.dotsConfig;\n\t\tvar area = _n0.area;\n\t\tvar shape = terezka$line_charts$Internal$Line$shape(line);\n\t\tvar dotPosition = A2(\n\t\t\tterezka$line_charts$LineChart$Coordinate$toData,\n\t\t\tsystem,\n\t\t\tA2(terezka$line_charts$Internal$Data$Point, sampleWidth / 2, 0));\n\t\tvar color = A3(terezka$line_charts$Internal$Line$color, lineConfig, line, data);\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__sample')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA5(terezka$line_charts$Internal$Line$viewSample, lineConfig, line, area, data, sampleWidth),\n\t\t\t\t\tA6(terezka$line_charts$Internal$Dots$viewSample, dotsConfig, shape, color, system, data, dotPosition)\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Legends$viewGrouped = F3(\n\tfunction (_arguments, sampleWidth, container) {\n\t\tvar toLegend = F2(\n\t\t\tfunction (line, data) {\n\t\t\t\treturn {\n\t\t\t\t\tlabel: terezka$line_charts$Internal$Line$label(line),\n\t\t\t\t\tsample: A4(terezka$line_charts$Internal$Legends$viewSample, _arguments, sampleWidth, line, data)\n\t\t\t\t};\n\t\t\t});\n\t\tvar legends = A3(elm$core$List$map2, toLegend, _arguments.lines, _arguments.data);\n\t\treturn A2(container, _arguments.system, legends);\n\t});\nvar terezka$line_charts$Internal$Legends$view = function (_arguments) {\n\tvar _n0 = _arguments.legends;\n\tswitch (_n0.$) {\n\t\tcase 'Free':\n\t\t\tvar placement = _n0.a;\n\t\t\tvar view_ = _n0.b;\n\t\t\treturn A3(terezka$line_charts$Internal$Legends$viewFrees, _arguments, placement, view_);\n\t\tcase 'Grouped':\n\t\t\tvar sampleWidth = _n0.a;\n\t\t\tvar container = _n0.b;\n\t\t\treturn A3(\n\t\t\t\tterezka$line_charts$Internal$Legends$viewGrouped,\n\t\t\t\t_arguments,\n\t\t\t\tsampleWidth,\n\t\t\t\tcontainer(_arguments));\n\t\tdefault:\n\t\t\treturn elm$svg$Svg$text('');\n\t}\n};\nvar terezka$line_charts$Internal$Line$data = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.data;\n};\nvar terezka$line_charts$Internal$Area$opacityContainer = function (config) {\n\tswitch (config.$) {\n\t\tcase 'None':\n\t\t\treturn 1;\n\t\tcase 'Normal':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn 1;\n\t\tcase 'Stacked':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t\tdefault:\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t}\n};\nvar elm$core$List$map3 = _List_map3;\nvar terezka$line_charts$Internal$Line$viewNormal = function (_n0) {\n\tvar areas = _n0.a;\n\tvar lines = _n0.b;\n\tvar dots = _n0.c;\n\tvar view_ = F3(\n\t\tfunction (area_, line_, dots_) {\n\t\t\treturn A2(\n\t\t\t\telm$svg$Svg$g,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__line')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[area_, line_, dots_]));\n\t\t});\n\treturn A4(elm$core$List$map3, view_, areas, lines, dots);\n};\nvar terezka$line_charts$Internal$Data$isWithinRange = F2(\n\tfunction (system, point) {\n\t\treturn _Utils_eq(\n\t\t\tA3(elm$core$Basics$clamp, system.x.min, system.x.max, point.x),\n\t\t\tpoint.x) && _Utils_eq(\n\t\t\tA3(elm$core$Basics$clamp, system.y.min, system.y.max, point.y),\n\t\t\tpoint.y);\n\t});\nvar elm$core$Tuple$mapSecond = F2(\n\tfunction (func, _n0) {\n\t\tvar x = _n0.a;\n\t\tvar y = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\tx,\n\t\t\tfunc(y));\n\t});\nvar terezka$line_charts$Internal$Interpolation$linear = elm$core$List$map(\n\telm$core$List$map(terezka$line_charts$Internal$Path$Line));\nvar terezka$line_charts$Internal$Interpolation$First = {$: 'First'};\nvar terezka$line_charts$Internal$Interpolation$Previous = function (a) {\n\treturn {$: 'Previous', a: a};\n};\nvar terezka$line_charts$Internal$Interpolation$monotoneCurve = F4(\n\tfunction (point0, point1, tangent0, tangent1) {\n\t\tvar dx = (point1.x - point0.x) / 3;\n\t\treturn A3(\n\t\t\tterezka$line_charts$Internal$Path$CubicBeziers,\n\t\t\t{x: point0.x + dx, y: point0.y + (dx * tangent0)},\n\t\t\t{x: point1.x - dx, y: point1.y - (dx * tangent1)},\n\t\t\tpoint1);\n\t});\nvar terezka$line_charts$Internal$Interpolation$slope2 = F3(\n\tfunction (point0, point1, t) {\n\t\tvar h = point1.x - point0.x;\n\t\treturn h ? ((((3 * (point1.y - point0.y)) / h) - t) / 2) : t;\n\t});\nvar terezka$line_charts$Internal$Interpolation$sign = function (x) {\n\treturn (x < 0) ? (-1) : 1;\n};\nvar terezka$line_charts$Internal$Interpolation$toH = F2(\n\tfunction (h0, h1) {\n\t\treturn (!h0) ? ((h1 < 0) ? (0 * (-1)) : h1) : h0;\n\t});\nvar terezka$line_charts$Internal$Interpolation$slope3 = F3(\n\tfunction (point0, point1, point2) {\n\t\tvar h1 = point2.x - point1.x;\n\t\tvar h0 = point1.x - point0.x;\n\t\tvar s0h = A2(terezka$line_charts$Internal$Interpolation$toH, h0, h1);\n\t\tvar s0 = (point1.y - point0.y) / s0h;\n\t\tvar s1h = A2(terezka$line_charts$Internal$Interpolation$toH, h1, h0);\n\t\tvar s1 = (point2.y - point1.y) / s1h;\n\t\tvar p = ((s0 * h1) + (s1 * h0)) / (h0 + h1);\n\t\tvar slope = (terezka$line_charts$Internal$Interpolation$sign(s0) + terezka$line_charts$Internal$Interpolation$sign(s1)) * A2(\n\t\t\telm$core$Basics$min,\n\t\t\tA2(\n\t\t\t\telm$core$Basics$min,\n\t\t\t\telm$core$Basics$abs(s0),\n\t\t\t\telm$core$Basics$abs(s1)),\n\t\t\t0.5 * elm$core$Basics$abs(p));\n\t\treturn elm$core$Basics$isNaN(slope) ? 0 : slope;\n\t});\nvar terezka$line_charts$Internal$Interpolation$monotonePart = F2(\n\tfunction (points, _n0) {\n\t\tvar tangent = _n0.a;\n\t\tvar commands = _n0.b;\n\t\tvar _n1 = _Utils_Tuple2(tangent, points);\n\t\t_n1$4:\n\t\twhile (true) {\n\t\t\tif (_n1.a.$ === 'First') {\n\t\t\t\tif (_n1.b.b && _n1.b.b.b) {\n\t\t\t\t\tif (_n1.b.b.b.b) {\n\t\t\t\t\t\tvar _n2 = _n1.a;\n\t\t\t\t\t\tvar _n3 = _n1.b;\n\t\t\t\t\t\tvar p0 = _n3.a;\n\t\t\t\t\t\tvar _n4 = _n3.b;\n\t\t\t\t\t\tvar p1 = _n4.a;\n\t\t\t\t\t\tvar _n5 = _n4.b;\n\t\t\t\t\t\tvar p2 = _n5.a;\n\t\t\t\t\t\tvar rest = _n5.b;\n\t\t\t\t\t\tvar t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p2);\n\t\t\t\t\t\tvar t0 = A3(terezka$line_charts$Internal$Interpolation$slope2, p0, p1, t1);\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$monotonePart,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\tp1,\n\t\t\t\t\t\t\t\tA2(elm$core$List$cons, p2, rest)),\n\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$Previous(t1),\n\t\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\t\tcommands,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)\n\t\t\t\t\t\t\t\t\t\t]))));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _n9 = _n1.a;\n\t\t\t\t\t\tvar _n10 = _n1.b;\n\t\t\t\t\t\tvar p0 = _n10.a;\n\t\t\t\t\t\tvar _n11 = _n10.b;\n\t\t\t\t\t\tvar p1 = _n11.a;\n\t\t\t\t\t\tvar t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p1);\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$Previous(t1),\n\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\tcommands,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t1, t1),\n\t\t\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Line(p1)\n\t\t\t\t\t\t\t\t\t])));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak _n1$4;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (_n1.b.b && _n1.b.b.b) {\n\t\t\t\t\tif (_n1.b.b.b.b) {\n\t\t\t\t\t\tvar t0 = _n1.a.a;\n\t\t\t\t\t\tvar _n6 = _n1.b;\n\t\t\t\t\t\tvar p0 = _n6.a;\n\t\t\t\t\t\tvar _n7 = _n6.b;\n\t\t\t\t\t\tvar p1 = _n7.a;\n\t\t\t\t\t\tvar _n8 = _n7.b;\n\t\t\t\t\t\tvar p2 = _n8.a;\n\t\t\t\t\t\tvar rest = _n8.b;\n\t\t\t\t\t\tvar t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p2);\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$monotonePart,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\tp1,\n\t\t\t\t\t\t\t\tA2(elm$core$List$cons, p2, rest)),\n\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$Previous(t1),\n\t\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\t\tcommands,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)\n\t\t\t\t\t\t\t\t\t\t]))));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar t0 = _n1.a.a;\n\t\t\t\t\t\tvar _n12 = _n1.b;\n\t\t\t\t\t\tvar p0 = _n12.a;\n\t\t\t\t\t\tvar _n13 = _n12.b;\n\t\t\t\t\t\tvar p1 = _n13.a;\n\t\t\t\t\t\tvar t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p1);\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$Previous(t1),\n\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\tcommands,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1),\n\t\t\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Line(p1)\n\t\t\t\t\t\t\t\t\t])));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak _n1$4;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn _Utils_Tuple2(tangent, commands);\n\t});\nvar terezka$line_charts$Internal$Interpolation$monotoneSection = F2(\n\tfunction (points, _n0) {\n\t\tvar tangent = _n0.a;\n\t\tvar acc = _n0.b;\n\t\tvar _n1 = function () {\n\t\t\tif (points.b) {\n\t\t\t\tvar p0 = points.a;\n\t\t\t\tvar rest = points.b;\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$Internal$Interpolation$monotonePart,\n\t\t\t\t\tA2(elm$core$List$cons, p0, rest),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\ttangent,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Line(p0)\n\t\t\t\t\t\t\t])));\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(tangent, _List_Nil);\n\t\t\t}\n\t\t}();\n\t\tvar t0 = _n1.a;\n\t\tvar commands = _n1.b;\n\t\treturn _Utils_Tuple2(\n\t\t\tt0,\n\t\t\tA2(elm$core$List$cons, commands, acc));\n\t});\nvar terezka$line_charts$Internal$Interpolation$monotone = function (sections) {\n\treturn A3(\n\t\telm$core$List$foldr,\n\t\tterezka$line_charts$Internal$Interpolation$monotoneSection,\n\t\t_Utils_Tuple2(terezka$line_charts$Internal$Interpolation$First, _List_Nil),\n\t\tsections).b;\n};\nvar terezka$line_charts$Internal$Interpolation$after = F2(\n\tfunction (a, b) {\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\ta,\n\t\t\t\tA2(terezka$line_charts$Internal$Data$Point, b.x, a.y),\n\t\t\t\tb\n\t\t\t]);\n\t});\nvar terezka$line_charts$Internal$Interpolation$stepped = function (sections) {\n\tvar expand = F2(\n\t\tfunction (result, section) {\n\t\t\texpand:\n\t\t\twhile (true) {\n\t\t\t\tif (section.a.b) {\n\t\t\t\t\tif (section.a.b.b) {\n\t\t\t\t\t\tvar _n1 = section.a;\n\t\t\t\t\t\tvar a = _n1.a;\n\t\t\t\t\t\tvar _n2 = _n1.b;\n\t\t\t\t\t\tvar b = _n2.a;\n\t\t\t\t\t\tvar rest = _n2.b;\n\t\t\t\t\t\tvar broken = section.b;\n\t\t\t\t\t\tvar $temp$result = _Utils_ap(\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Interpolation$after, a, b)),\n\t\t\t\t\t\t\t$temp$section = _Utils_Tuple2(\n\t\t\t\t\t\t\tA2(elm$core$List$cons, b, rest),\n\t\t\t\t\t\t\tbroken);\n\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\tsection = $temp$section;\n\t\t\t\t\t\tcontinue expand;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (section.b.$ === 'Just') {\n\t\t\t\t\t\t\tvar _n3 = section.a;\n\t\t\t\t\t\t\tvar last = _n3.a;\n\t\t\t\t\t\t\tvar broken = section.b.a;\n\t\t\t\t\t\t\treturn _Utils_ap(\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Data$Point, broken.x, last.y)\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n4 = section.a;\n\t\t\t\t\t\t\tvar last = _n4.a;\n\t\t\t\t\t\t\tvar _n5 = section.b;\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\treturn A2(\n\t\telm$core$List$map,\n\t\tA2(\n\t\t\telm$core$Basics$composeR,\n\t\t\texpand(_List_Nil),\n\t\t\telm$core$List$map(terezka$line_charts$Internal$Path$Line)),\n\t\tsections);\n};\nvar terezka$line_charts$Internal$Interpolation$toCommands = F2(\n\tfunction (interpolation, data) {\n\t\tvar pointsSections = elm$core$List$map(\n\t\t\tA2(\n\t\t\t\telm$core$Basics$composeR,\n\t\t\t\telm$core$Tuple$mapFirst(\n\t\t\t\t\telm$core$List$map(\n\t\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\t\treturn $.point;\n\t\t\t\t\t\t})),\n\t\t\t\telm$core$Tuple$mapSecond(\n\t\t\t\t\telm$core$Maybe$map(\n\t\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\t\treturn $.point;\n\t\t\t\t\t\t}))));\n\t\tvar points = elm$core$List$map(\n\t\t\tA2(\n\t\t\t\telm$core$Basics$composeR,\n\t\t\t\telm$core$Tuple$first,\n\t\t\t\telm$core$List$map(\n\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\treturn $.point;\n\t\t\t\t\t})));\n\t\tswitch (interpolation.$) {\n\t\t\tcase 'Linear':\n\t\t\t\treturn terezka$line_charts$Internal$Interpolation$linear(\n\t\t\t\t\tpoints(data));\n\t\t\tcase 'Monotone':\n\t\t\t\treturn terezka$line_charts$Internal$Interpolation$monotone(\n\t\t\t\t\tpoints(data));\n\t\t\tdefault:\n\t\t\t\treturn terezka$line_charts$Internal$Interpolation$stepped(\n\t\t\t\t\tpointsSections(data));\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Area$opacitySingle = function (config) {\n\tswitch (config.$) {\n\t\tcase 'None':\n\t\t\treturn 0;\n\t\tcase 'Normal':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t\tcase 'Stacked':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn 1;\n\t\tdefault:\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn 1;\n\t}\n};\nvar terezka$line_charts$Internal$Path$toPoint = function (command) {\n\tswitch (command.$) {\n\t\tcase 'Close':\n\t\t\treturn A2(terezka$line_charts$LineChart$Coordinate$Point, 0, 0);\n\t\tcase 'Move':\n\t\t\tvar p = command.a;\n\t\t\treturn p;\n\t\tcase 'Line':\n\t\t\tvar p = command.a;\n\t\t\treturn p;\n\t\tcase 'Horizontal':\n\t\t\tvar x = command.a;\n\t\t\treturn A2(terezka$line_charts$LineChart$Coordinate$Point, x, 0);\n\t\tcase 'Vertical':\n\t\t\tvar y = command.a;\n\t\t\treturn A2(terezka$line_charts$LineChart$Coordinate$Point, 0, y);\n\t\tcase 'CubicBeziers':\n\t\t\tvar c1 = command.a;\n\t\t\tvar c2 = command.b;\n\t\t\tvar p = command.c;\n\t\t\treturn p;\n\t\tcase 'CubicBeziersShort':\n\t\t\tvar c1 = command.a;\n\t\t\tvar p = command.b;\n\t\t\treturn p;\n\t\tcase 'QuadraticBeziers':\n\t\t\tvar c1 = command.a;\n\t\t\tvar p = command.b;\n\t\t\treturn p;\n\t\tcase 'QuadraticBeziersShort':\n\t\t\tvar p = command.a;\n\t\t\treturn p;\n\t\tdefault:\n\t\t\tvar rx = command.a;\n\t\t\tvar ry = command.b;\n\t\t\tvar xAxisRotation = command.c;\n\t\t\tvar largeArcFlag = command.d;\n\t\t\tvar sweepFlag = command.e;\n\t\t\tvar p = command.f;\n\t\t\treturn p;\n\t}\n};\nvar terezka$line_charts$Internal$Utils$towardsZero = function (_n0) {\n\tvar max = _n0.max;\n\tvar min = _n0.min;\n\treturn A3(elm$core$Basics$clamp, min, max, 0);\n};\nvar terezka$line_charts$Internal$Utils$last = function (list) {\n\treturn elm$core$List$head(\n\t\tA2(\n\t\t\telm$core$List$drop,\n\t\t\telm$core$List$length(list) - 1,\n\t\t\tlist));\n};\nvar terezka$line_charts$Internal$Utils$lastSafe = F2(\n\tfunction (first, rest) {\n\t\treturn A2(\n\t\t\telm$core$Maybe$withDefault,\n\t\t\tfirst,\n\t\t\tterezka$line_charts$Internal$Utils$last(rest));\n\t});\nvar terezka$line_charts$Internal$Utils$viewWithEdges = F2(\n\tfunction (stuff, view) {\n\t\tif (stuff.b) {\n\t\t\tvar first = stuff.a;\n\t\t\tvar rest = stuff.b;\n\t\t\treturn A3(\n\t\t\t\tview,\n\t\t\t\tfirst,\n\t\t\t\trest,\n\t\t\t\tA2(terezka$line_charts$Internal$Utils$lastSafe, first, rest));\n\t\t} else {\n\t\t\treturn elm$svg$Svg$text('');\n\t\t}\n\t});\nvar terezka$line_charts$LineChart$Junk$withinChartArea = terezka$line_charts$Internal$Svg$withinChartArea;\nvar terezka$line_charts$Internal$Line$viewArea = F5(\n\tfunction (_n0, line_, style_, interpolation, data_) {\n\t\tvar system = _n0.system;\n\t\tvar lineConfig = _n0.lineConfig;\n\t\tvar area = _n0.area;\n\t\tvar ground = function (point) {\n\t\t\treturn A2(\n\t\t\t\tterezka$line_charts$Internal$Data$Point,\n\t\t\t\tpoint.x,\n\t\t\t\tterezka$line_charts$Internal$Utils$towardsZero(system.y));\n\t\t};\n\t\tvar commands = F3(\n\t\t\tfunction (first, middle, last) {\n\t\t\t\treturn A3(\n\t\t\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Move(\n\t\t\t\t\t\t\tground(\n\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$toPoint(first))),\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$toPoint(first))\n\t\t\t\t\t\t]),\n\t\t\t\t\tinterpolation,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t\t\tground(\n\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$toPoint(last)))\n\t\t\t\t\t\t]));\n\t\t\t});\n\t\tvar attributes = A2(\n\t\t\telm$core$List$cons,\n\t\t\tterezka$line_charts$LineChart$Junk$withinChartArea(system),\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\telm$svg$Svg$Attributes$fillOpacity(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tterezka$line_charts$Internal$Area$opacitySingle(area))),\n\t\t\t\tA3(terezka$line_charts$Internal$Line$toAreaAttributes, line_, style_, area)));\n\t\treturn A2(\n\t\t\tterezka$line_charts$Internal$Utils$viewWithEdges,\n\t\t\tinterpolation,\n\t\t\tF3(\n\t\t\t\tfunction (first, middle, last) {\n\t\t\t\t\treturn A3(\n\t\t\t\t\t\tterezka$line_charts$Internal$Path$view,\n\t\t\t\t\t\tsystem,\n\t\t\t\t\t\tattributes,\n\t\t\t\t\t\tA3(commands, first, middle, last));\n\t\t\t\t}));\n\t});\nvar terezka$line_charts$Internal$Dots$view = F2(\n\tfunction (_n0, data) {\n\t\tvar system = _n0.system;\n\t\tvar dotsConfig = _n0.dotsConfig;\n\t\tvar shape = _n0.shape;\n\t\tvar color = _n0.color;\n\t\tvar _n1 = dotsConfig;\n\t\tvar config = _n1.a;\n\t\tvar _n2 = config.individual(data.user);\n\t\tvar style_ = _n2.a;\n\t\treturn A5(terezka$line_charts$Internal$Dots$viewShape, system, style_, shape, color, data.point);\n\t});\nvar terezka$line_charts$Internal$Line$viewDot = F3(\n\tfunction (_arguments, _n0, _n1) {\n\t\tvar lineConfig = _n0.a;\n\t\tvar style_ = _n1.a;\n\t\treturn terezka$line_charts$Internal$Dots$view(\n\t\t\t{\n\t\t\t\tcolor: style_.color(lineConfig.color),\n\t\t\t\tdotsConfig: _arguments.dotsConfig,\n\t\t\t\tshape: lineConfig.shape,\n\t\t\t\tsystem: _arguments.system\n\t\t\t});\n\t});\nvar terezka$line_charts$Internal$Utils$viewWithFirst = F2(\n\tfunction (stuff, view) {\n\t\tif (stuff.b) {\n\t\t\tvar first = stuff.a;\n\t\t\tvar rest = stuff.b;\n\t\t\treturn A2(view, first, rest);\n\t\t} else {\n\t\t\treturn elm$svg$Svg$text('');\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Line$viewSeries = F5(\n\tfunction (_n0, line_, style_, interpolation, data_) {\n\t\tvar system = _n0.system;\n\t\tvar lineConfig = _n0.lineConfig;\n\t\tvar attributes = A2(\n\t\t\telm$core$List$cons,\n\t\t\tterezka$line_charts$LineChart$Junk$withinChartArea(system),\n\t\t\tA2(terezka$line_charts$Internal$Line$toSeriesAttributes, line_, style_));\n\t\treturn A2(\n\t\t\tterezka$line_charts$Internal$Utils$viewWithFirst,\n\t\t\tdata_,\n\t\t\tF2(\n\t\t\t\tfunction (first, _n1) {\n\t\t\t\t\treturn A3(\n\t\t\t\t\t\tterezka$line_charts$Internal$Path$view,\n\t\t\t\t\t\tsystem,\n\t\t\t\t\t\tattributes,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Move(first.point),\n\t\t\t\t\t\t\tinterpolation));\n\t\t\t\t}));\n\t});\nvar terezka$line_charts$Internal$Utils$part = F4(\n\tfunction (isReal, points, current, parts) {\n\t\tpart:\n\t\twhile (true) {\n\t\t\tif (points.b) {\n\t\t\t\tvar first = points.a;\n\t\t\t\tvar rest = points.b;\n\t\t\t\tif (isReal(first)) {\n\t\t\t\t\tvar $temp$isReal = isReal,\n\t\t\t\t\t\t$temp$points = rest,\n\t\t\t\t\t\t$temp$current = _Utils_ap(\n\t\t\t\t\t\tcurrent,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[first])),\n\t\t\t\t\t\t$temp$parts = parts;\n\t\t\t\t\tisReal = $temp$isReal;\n\t\t\t\t\tpoints = $temp$points;\n\t\t\t\t\tcurrent = $temp$current;\n\t\t\t\t\tparts = $temp$parts;\n\t\t\t\t\tcontinue part;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$isReal = isReal,\n\t\t\t\t\t\t$temp$points = rest,\n\t\t\t\t\t\t$temp$current = _List_Nil,\n\t\t\t\t\t\t$temp$parts = A2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\tcurrent,\n\t\t\t\t\t\t\telm$core$Maybe$Just(first)),\n\t\t\t\t\t\tparts);\n\t\t\t\t\tisReal = $temp$isReal;\n\t\t\t\t\tpoints = $temp$points;\n\t\t\t\t\tcurrent = $temp$current;\n\t\t\t\t\tparts = $temp$parts;\n\t\t\t\t\tcontinue part;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t_Utils_Tuple2(current, elm$core$Maybe$Nothing),\n\t\t\t\t\tparts);\n\t\t\t}\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Line$viewSingle = F3(\n\tfunction (_arguments, line_, data_) {\n\t\tvar style_ = function (_n1) {\n\t\t\tvar look = _n1.a;\n\t\t\treturn look(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\treturn $.user;\n\t\t\t\t\t},\n\t\t\t\t\tdata_));\n\t\t}(_arguments.lineConfig);\n\t\tvar sections = A4(\n\t\t\tterezka$line_charts$Internal$Utils$part,\n\t\t\tfunction ($) {\n\t\t\t\treturn $.isReal;\n\t\t\t},\n\t\t\tdata_,\n\t\t\t_List_Nil,\n\t\t\t_List_Nil);\n\t\tvar parts = A2(elm$core$List$map, elm$core$Tuple$first, sections);\n\t\tvar viewDots = A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__dots')\n\t\t\t\t]),\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tA3(terezka$line_charts$Internal$Line$viewDot, _arguments, line_, style_),\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$filter,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Basics$composeL,\n\t\t\t\t\t\tterezka$line_charts$Internal$Data$isWithinRange(_arguments.system),\n\t\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\t\treturn $.point;\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$List$concat(parts))));\n\t\tvar commands = A2(terezka$line_charts$Internal$Interpolation$toCommands, _arguments.interpolation, sections);\n\t\tvar viewAreas = function (_n0) {\n\t\t\treturn A2(\n\t\t\t\telm$svg$Svg$g,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__interpolation__area')\n\t\t\t\t\t]),\n\t\t\t\tA3(\n\t\t\t\t\telm$core$List$map2,\n\t\t\t\t\tA3(terezka$line_charts$Internal$Line$viewArea, _arguments, line_, style_),\n\t\t\t\t\tcommands,\n\t\t\t\t\tparts));\n\t\t};\n\t\tvar viewSeriess = A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__interpolation__line')\n\t\t\t\t]),\n\t\t\tA3(\n\t\t\t\telm$core$List$map2,\n\t\t\t\tA3(terezka$line_charts$Internal$Line$viewSeries, _arguments, line_, style_),\n\t\t\t\tcommands,\n\t\t\t\tparts));\n\t\treturn _Utils_Tuple3(\n\t\t\tA2(\n\t\t\t\tterezka$line_charts$Internal$Utils$viewIf,\n\t\t\t\tterezka$line_charts$Internal$Area$hasArea(_arguments.area),\n\t\t\t\tviewAreas),\n\t\t\tviewSeriess,\n\t\t\tviewDots);\n\t});\nvar terezka$line_charts$Internal$Line$viewStacked = F2(\n\tfunction (area, _n0) {\n\t\tvar areas = _n0.a;\n\t\tvar lines = _n0.b;\n\t\tvar dots = _n0.c;\n\t\tvar toList = F2(\n\t\t\tfunction (l, d) {\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[l, d]);\n\t\t\t});\n\t\tvar opacity = 'opacity: ' + elm$core$String$fromFloat(\n\t\t\tterezka$line_charts$Internal$Area$opacityContainer(area));\n\t\tvar bottoms = elm$core$List$concat(\n\t\t\tA3(elm$core$List$map2, toList, lines, dots));\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$svg$Svg$g,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__bottoms'),\n\t\t\t\t\t\telm$svg$Svg$Attributes$style(opacity)\n\t\t\t\t\t]),\n\t\t\t\tareas),\n\t\t\t\tA2(\n\t\t\t\telm$svg$Svg$g,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__tops')\n\t\t\t\t\t]),\n\t\t\t\tbottoms)\n\t\t\t]);\n\t});\nvar terezka$line_charts$Internal$Utils$unzip3 = function (pairs) {\n\tvar step = F2(\n\t\tfunction (_n0, _n1) {\n\t\t\tvar a = _n0.a;\n\t\t\tvar b = _n0.b;\n\t\t\tvar c = _n0.c;\n\t\t\tvar aas = _n1.a;\n\t\t\tvar bs = _n1.b;\n\t\t\tvar cs = _n1.c;\n\t\t\treturn _Utils_Tuple3(\n\t\t\t\tA2(elm$core$List$cons, a, aas),\n\t\t\t\tA2(elm$core$List$cons, b, bs),\n\t\t\t\tA2(elm$core$List$cons, c, cs));\n\t\t});\n\treturn A3(\n\t\telm$core$List$foldr,\n\t\tstep,\n\t\t_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil),\n\t\tpairs);\n};\nvar terezka$line_charts$Internal$Line$view = F3(\n\tfunction (_arguments, lines, datas) {\n\t\tvar container = elm$svg$Svg$g(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__lines')\n\t\t\t\t]));\n\t\tvar buildSeriesViews = (terezka$line_charts$Internal$Area$opacityContainer(_arguments.area) < 1) ? terezka$line_charts$Internal$Line$viewStacked(_arguments.area) : terezka$line_charts$Internal$Line$viewNormal;\n\t\treturn container(\n\t\t\tbuildSeriesViews(\n\t\t\t\tterezka$line_charts$Internal$Utils$unzip3(\n\t\t\t\t\tA3(\n\t\t\t\t\t\telm$core$List$map2,\n\t\t\t\t\t\tterezka$line_charts$Internal$Line$viewSingle(_arguments),\n\t\t\t\t\t\tlines,\n\t\t\t\t\t\tdatas))));\n\t});\nvar terezka$line_charts$Internal$Events$toChartAttributes = F3(\n\tfunction (data, system, _n0) {\n\t\tvar events = _n0.a;\n\t\tvar order = function (_n1) {\n\t\t\tvar outside = _n1.a;\n\t\t\tvar event = _n1.b;\n\t\t\treturn outside ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(\n\t\t\t\tA2(event, data, system));\n\t\t};\n\t\treturn A2(elm$core$List$filterMap, order, events);\n\t});\nvar terezka$line_charts$LineChart$chartAreaAttributes = function (system) {\n\treturn _List_fromArray(\n\t\t[\n\t\t\telm$svg$Svg$Attributes$x(\n\t\t\telm$core$String$fromFloat(system.frame.margin.left)),\n\t\t\telm$svg$Svg$Attributes$y(\n\t\t\telm$core$String$fromFloat(system.frame.margin.top)),\n\t\t\telm$svg$Svg$Attributes$width(\n\t\t\telm$core$String$fromFloat(\n\t\t\t\tterezka$line_charts$Internal$Coordinate$lengthX(system))),\n\t\t\telm$svg$Svg$Attributes$height(\n\t\t\telm$core$String$fromFloat(\n\t\t\t\tterezka$line_charts$Internal$Coordinate$lengthY(system)))\n\t\t]);\n};\nvar terezka$line_charts$LineChart$chartAreaPlatform = F3(\n\tfunction (config, data, system) {\n\t\tvar attributes = elm$core$List$concat(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$fill('transparent')\n\t\t\t\t\t]),\n\t\t\t\t\tterezka$line_charts$LineChart$chartAreaAttributes(system),\n\t\t\t\t\tA3(terezka$line_charts$Internal$Events$toChartAttributes, data, system, config.events)\n\t\t\t\t]));\n\t\treturn A2(elm$svg$Svg$rect, attributes, _List_Nil);\n\t});\nvar elm$svg$Svg$clipPath = elm$svg$Svg$trustedNode('clipPath');\nvar elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');\nvar terezka$line_charts$LineChart$clipPath = function (system) {\n\treturn A2(\n\t\telm$svg$Svg$clipPath,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$id(\n\t\t\t\tterezka$line_charts$Internal$Utils$toChartAreaId(system.id))\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$svg$Svg$rect,\n\t\t\t\tterezka$line_charts$LineChart$chartAreaAttributes(system),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar terezka$line_charts$Internal$Container$sizeStyles = F3(\n\tfunction (_n0, width, height) {\n\t\tvar properties_ = _n0.a;\n\t\tvar _n1 = properties_.size;\n\t\tif (_n1.$ === 'Static') {\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$Attributes$style,\n\t\t\t\t\t'height',\n\t\t\t\t\telm$core$String$fromFloat(height) + 'px'),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$Attributes$style,\n\t\t\t\t\t'width',\n\t\t\t\t\telm$core$String$fromFloat(width) + 'px')\n\t\t\t\t]);\n\t\t} else {\n\t\t\treturn _List_Nil;\n\t\t}\n\t});\nvar terezka$line_charts$LineChart$container = F4(\n\tfunction (config, _n0, junkHtml, plot) {\n\t\tvar frame = _n0.frame;\n\t\tvar userAttributes = A2(\n\t\t\tterezka$line_charts$Internal$Container$properties,\n\t\t\tfunction ($) {\n\t\t\t\treturn $.attributesHtml;\n\t\t\t},\n\t\t\tconfig.container);\n\t\tvar sizeStyles = A3(terezka$line_charts$Internal$Container$sizeStyles, config.container, frame.size.width, frame.size.height);\n\t\tvar styles = A2(\n\t\t\telm$core$List$cons,\n\t\t\tA2(elm$html$Html$Attributes$style, 'position', 'relative'),\n\t\t\tsizeStyles);\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_Utils_ap(styles, userAttributes),\n\t\t\tA2(elm$core$List$cons, plot, junkHtml));\n\t});\nvar terezka$line_charts$Internal$Data$Data = F3(\n\tfunction (user, point, isReal) {\n\t\treturn {isReal: isReal, point: point, user: user};\n\t});\nvar terezka$line_charts$LineChart$setY = F2(\n\tfunction (datum, y) {\n\t\treturn A3(\n\t\t\tterezka$line_charts$Internal$Data$Data,\n\t\t\tdatum.user,\n\t\t\tA2(terezka$line_charts$Internal$Data$Point, datum.point.x, y),\n\t\t\tdatum.isReal);\n\t});\nvar terezka$line_charts$LineChart$normalize = function (datasets) {\n\tif (datasets.b) {\n\t\tvar highest = datasets.a;\n\t\tvar belows = datasets.b;\n\t\tvar toPercentage = F2(\n\t\t\tfunction (highest_, datum) {\n\t\t\t\treturn A2(terezka$line_charts$LineChart$setY, datum, (100 * datum.point.y) / highest_.point.y);\n\t\t\t});\n\t\treturn A2(\n\t\t\telm$core$List$map,\n\t\t\tA2(elm$core$List$map2, toPercentage, highest),\n\t\t\tA2(elm$core$List$cons, highest, belows));\n\t} else {\n\t\treturn datasets;\n\t}\n};\nvar terezka$line_charts$Internal$Utils$withFirst = F2(\n\tfunction (stuff, process) {\n\t\tif (stuff.b) {\n\t\t\tvar first = stuff.a;\n\t\t\tvar rest = stuff.b;\n\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\tA2(process, first, rest));\n\t\t} else {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t}\n\t});\nvar terezka$line_charts$LineChart$addBelows = F2(\n\tfunction (alldata, dataBelowAll) {\n\t\tvar add = F2(\n\t\t\tfunction (below, datum) {\n\t\t\t\treturn A2(terezka$line_charts$LineChart$setY, below, below.point.y + datum.point.y);\n\t\t\t});\n\t\tvar iterate = F4(\n\t\t\tfunction (datum0, dataTop, dataBelowTop, result) {\n\t\t\t\titerate:\n\t\t\t\twhile (true) {\n\t\t\t\t\tvar _n0 = _Utils_Tuple2(dataTop, dataBelowTop);\n\t\t\t\t\tif (_n0.a.b) {\n\t\t\t\t\t\tif (_n0.b.b) {\n\t\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\t\tvar datum1 = _n1.a;\n\t\t\t\t\t\t\tvar data = _n1.b;\n\t\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\t\tvar datumBelow = _n2.a;\n\t\t\t\t\t\t\tvar dataBelow = _n2.b;\n\t\t\t\t\t\t\tif (_Utils_cmp(datum1.point.x, datumBelow.point.x) > 0) {\n\t\t\t\t\t\t\t\tif (datumBelow.isReal) {\n\t\t\t\t\t\t\t\t\tvar $temp$datum0 = datum0,\n\t\t\t\t\t\t\t\t\t\t$temp$dataTop = A2(elm$core$List$cons, datum1, data),\n\t\t\t\t\t\t\t\t\t\t$temp$dataBelowTop = dataBelow,\n\t\t\t\t\t\t\t\t\t\t$temp$result = A2(\n\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\tA2(add, datumBelow, datum0),\n\t\t\t\t\t\t\t\t\t\tresult);\n\t\t\t\t\t\t\t\t\tdatum0 = $temp$datum0;\n\t\t\t\t\t\t\t\t\tdataTop = $temp$dataTop;\n\t\t\t\t\t\t\t\t\tdataBelowTop = $temp$dataBelowTop;\n\t\t\t\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\t\t\t\tcontinue iterate;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar breakdata = _Utils_update(\n\t\t\t\t\t\t\t\t\t\tdatum0,\n\t\t\t\t\t\t\t\t\t\t{isReal: false});\n\t\t\t\t\t\t\t\t\tvar $temp$datum0 = datum0,\n\t\t\t\t\t\t\t\t\t\t$temp$dataTop = A2(elm$core$List$cons, datum1, data),\n\t\t\t\t\t\t\t\t\t\t$temp$dataBelowTop = dataBelow,\n\t\t\t\t\t\t\t\t\t\t$temp$result = A2(\n\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\tA2(add, datumBelow, datum0),\n\t\t\t\t\t\t\t\t\t\tresult);\n\t\t\t\t\t\t\t\t\tdatum0 = $temp$datum0;\n\t\t\t\t\t\t\t\t\tdataTop = $temp$dataTop;\n\t\t\t\t\t\t\t\t\tdataBelowTop = $temp$dataBelowTop;\n\t\t\t\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\t\t\t\tcontinue iterate;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar $temp$datum0 = datum1,\n\t\t\t\t\t\t\t\t\t$temp$dataTop = data,\n\t\t\t\t\t\t\t\t\t$temp$dataBelowTop = A2(elm$core$List$cons, datumBelow, dataBelow),\n\t\t\t\t\t\t\t\t\t$temp$result = result;\n\t\t\t\t\t\t\t\tdatum0 = $temp$datum0;\n\t\t\t\t\t\t\t\tdataTop = $temp$dataTop;\n\t\t\t\t\t\t\t\tdataBelowTop = $temp$dataBelowTop;\n\t\t\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\t\t\tcontinue iterate;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n4 = _n0.a;\n\t\t\t\t\t\t\tvar datum1 = _n4.a;\n\t\t\t\t\t\t\tvar data = _n4.b;\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_n0.b.b) {\n\t\t\t\t\t\t\tvar _n3 = _n0.b;\n\t\t\t\t\t\t\tvar datumBelow = _n3.a;\n\t\t\t\t\t\t\tvar dataBelow = _n3.b;\n\t\t\t\t\t\t\tif (_Utils_cmp(datum0.point.x, datumBelow.point.x) < 1) {\n\t\t\t\t\t\t\t\tvar $temp$datum0 = datum0,\n\t\t\t\t\t\t\t\t\t$temp$dataTop = _List_Nil,\n\t\t\t\t\t\t\t\t\t$temp$dataBelowTop = dataBelow,\n\t\t\t\t\t\t\t\t\t$temp$result = A2(\n\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\tA2(add, datumBelow, datum0),\n\t\t\t\t\t\t\t\t\tresult);\n\t\t\t\t\t\t\t\tdatum0 = $temp$datum0;\n\t\t\t\t\t\t\t\tdataTop = $temp$dataTop;\n\t\t\t\t\t\t\t\tdataBelowTop = $temp$dataBelowTop;\n\t\t\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\t\t\tcontinue iterate;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar $temp$datum0 = datum0,\n\t\t\t\t\t\t\t\t\t$temp$dataTop = _List_Nil,\n\t\t\t\t\t\t\t\t\t$temp$dataBelowTop = dataBelow,\n\t\t\t\t\t\t\t\t\t$temp$result = A2(elm$core$List$cons, datumBelow, result);\n\t\t\t\t\t\t\t\tdatum0 = $temp$datum0;\n\t\t\t\t\t\t\t\tdataTop = $temp$dataTop;\n\t\t\t\t\t\t\t\tdataBelowTop = $temp$dataBelowTop;\n\t\t\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\t\t\tcontinue iterate;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\treturn elm$core$List$reverse(\n\t\t\tA2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t_List_Nil,\n\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Utils$withFirst,\n\t\t\t\t\talldata,\n\t\t\t\t\tF2(\n\t\t\t\t\t\tfunction (first, rest) {\n\t\t\t\t\t\t\treturn A4(iterate, first, rest, dataBelowAll, _List_Nil);\n\t\t\t\t\t\t}))));\n\t});\nvar terezka$line_charts$LineChart$stack = function (dataset) {\n\tvar stackBelows = F2(\n\t\tfunction (dataset_, result) {\n\t\t\tif (dataset_.b) {\n\t\t\t\tvar data = dataset_.a;\n\t\t\t\tvar belows = dataset_.b;\n\t\t\t\treturn A2(\n\t\t\t\t\tstackBelows,\n\t\t\t\t\tbelows,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\tA3(elm$core$List$foldl, terezka$line_charts$LineChart$addBelows, data, belows),\n\t\t\t\t\t\tresult));\n\t\t\t} else {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t});\n\treturn elm$core$List$reverse(\n\t\tA2(stackBelows, dataset, _List_Nil));\n};\nvar terezka$line_charts$LineChart$toDataPoints = F2(\n\tfunction (config, lines) {\n\t\tvar y = terezka$line_charts$Internal$Axis$variable(config.y);\n\t\tvar x = terezka$line_charts$Internal$Axis$variable(config.x);\n\t\tvar addPoint = function (datum) {\n\t\t\tvar _n1 = _Utils_Tuple2(\n\t\t\t\tx(datum),\n\t\t\t\ty(datum));\n\t\t\tif (_n1.a.$ === 'Just') {\n\t\t\t\tif (_n1.b.$ === 'Just') {\n\t\t\t\t\tvar x_ = _n1.a.a;\n\t\t\t\t\tvar y_ = _n1.b.a;\n\t\t\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Data$Data,\n\t\t\t\t\t\t\tdatum,\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Data$Point, x_, y_),\n\t\t\t\t\t\t\ttrue));\n\t\t\t\t} else {\n\t\t\t\t\tvar x_ = _n1.a.a;\n\t\t\t\t\tvar _n2 = _n1.b;\n\t\t\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Data$Data,\n\t\t\t\t\t\t\tdatum,\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Data$Point, x_, 0),\n\t\t\t\t\t\t\tfalse));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (_n1.b.$ === 'Just') {\n\t\t\t\t\tvar _n3 = _n1.a;\n\t\t\t\t\tvar y_ = _n1.b.a;\n\t\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t\t} else {\n\t\t\t\t\tvar _n4 = _n1.a;\n\t\t\t\t\tvar _n5 = _n1.b;\n\t\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tvar data = A2(\n\t\t\telm$core$List$map,\n\t\t\tA2(\n\t\t\t\telm$core$Basics$composeR,\n\t\t\t\tterezka$line_charts$Internal$Line$data,\n\t\t\t\telm$core$List$filterMap(addPoint)),\n\t\t\tlines);\n\t\tvar _n0 = config.area;\n\t\tswitch (_n0.$) {\n\t\t\tcase 'None':\n\t\t\t\treturn data;\n\t\t\tcase 'Normal':\n\t\t\t\treturn data;\n\t\t\tcase 'Stacked':\n\t\t\t\treturn terezka$line_charts$LineChart$stack(data);\n\t\t\tdefault:\n\t\t\t\treturn terezka$line_charts$LineChart$normalize(\n\t\t\t\t\tterezka$line_charts$LineChart$stack(data));\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Axis$pixels = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.pixels;\n};\nvar terezka$line_charts$Internal$Axis$range = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.range;\n};\nvar terezka$line_charts$LineChart$Coordinate$Range = F2(\n\tfunction (min, max) {\n\t\treturn {max: max, min: min};\n\t});\nvar terezka$line_charts$Internal$Axis$Range$applyX = F2(\n\tfunction (range, system) {\n\t\tswitch (range.$) {\n\t\t\tcase 'Padded':\n\t\t\t\tvar padMin = range.a;\n\t\t\t\tvar padMax = range.b;\n\t\t\t\tvar _n1 = system;\n\t\t\t\tvar frame = _n1.frame;\n\t\t\t\tvar _n2 = frame;\n\t\t\t\tvar size = _n2.size;\n\t\t\t\tvar system_ = _Utils_update(\n\t\t\t\t\tsystem,\n\t\t\t\t\t{\n\t\t\t\t\t\tframe: _Utils_update(\n\t\t\t\t\t\t\tframe,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsize: _Utils_update(\n\t\t\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\twidth: A2(elm$core$Basics$max, 1, (size.width - padMin) - padMax)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\tvar scale = terezka$line_charts$LineChart$Coordinate$scaleDataX(system_);\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$LineChart$Coordinate$Range,\n\t\t\t\t\tsystem.x.min - scale(padMin),\n\t\t\t\t\tsystem.x.max + scale(padMax));\n\t\t\tcase 'Window':\n\t\t\t\tvar min = range.a;\n\t\t\t\tvar max = range.b;\n\t\t\t\treturn A2(terezka$line_charts$LineChart$Coordinate$Range, min, max);\n\t\t\tdefault:\n\t\t\t\tvar toRange = range.a;\n\t\t\t\treturn toRange(system.x);\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Axis$Range$applyY = F2(\n\tfunction (range, system) {\n\t\tswitch (range.$) {\n\t\t\tcase 'Padded':\n\t\t\t\tvar padMin = range.a;\n\t\t\t\tvar padMax = range.b;\n\t\t\t\tvar _n1 = system;\n\t\t\t\tvar frame = _n1.frame;\n\t\t\t\tvar _n2 = frame;\n\t\t\t\tvar size = _n2.size;\n\t\t\t\tvar system_ = _Utils_update(\n\t\t\t\t\tsystem,\n\t\t\t\t\t{\n\t\t\t\t\t\tframe: _Utils_update(\n\t\t\t\t\t\t\tframe,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsize: _Utils_update(\n\t\t\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\theight: A2(elm$core$Basics$max, 1, (size.height - padMin) - padMax)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\tvar scale = terezka$line_charts$LineChart$Coordinate$scaleDataY(system_);\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$LineChart$Coordinate$Range,\n\t\t\t\t\tsystem.y.min - scale(padMin),\n\t\t\t\t\tsystem.y.max + scale(padMax));\n\t\t\tcase 'Window':\n\t\t\t\tvar min = range.a;\n\t\t\t\tvar max = range.b;\n\t\t\t\treturn A2(terezka$line_charts$LineChart$Coordinate$Range, min, max);\n\t\t\tdefault:\n\t\t\t\tvar toRange = range.a;\n\t\t\t\treturn toRange(system.y);\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Coordinate$Frame = F2(\n\tfunction (margin, size) {\n\t\treturn {margin: margin, size: size};\n\t});\nvar terezka$line_charts$Internal$Coordinate$Size = F2(\n\tfunction (width, height) {\n\t\treturn {height: height, width: width};\n\t});\nvar terezka$line_charts$Internal$Coordinate$ground = function (range_) {\n\treturn _Utils_update(\n\t\trange_,\n\t\t{\n\t\t\tmin: A2(elm$core$Basics$min, range_.min, 0)\n\t\t});\n};\nvar elm$core$List$maximum = function (list) {\n\tif (list.b) {\n\t\tvar x = list.a;\n\t\tvar xs = list.b;\n\t\treturn elm$core$Maybe$Just(\n\t\t\tA3(elm$core$List$foldl, elm$core$Basics$max, x, xs));\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar terezka$line_charts$Internal$Coordinate$maximum = function (toValue) {\n\treturn A2(\n\t\telm$core$Basics$composeR,\n\t\telm$core$List$map(toValue),\n\t\tA2(\n\t\t\telm$core$Basics$composeR,\n\t\t\telm$core$List$maximum,\n\t\t\telm$core$Maybe$withDefault(1)));\n};\nvar elm$core$List$minimum = function (list) {\n\tif (list.b) {\n\t\tvar x = list.a;\n\t\tvar xs = list.b;\n\t\treturn elm$core$Maybe$Just(\n\t\t\tA3(elm$core$List$foldl, elm$core$Basics$min, x, xs));\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar terezka$line_charts$Internal$Coordinate$minimum = function (toValue) {\n\treturn A2(\n\t\telm$core$Basics$composeR,\n\t\telm$core$List$map(toValue),\n\t\tA2(\n\t\t\telm$core$Basics$composeR,\n\t\t\telm$core$List$minimum,\n\t\t\telm$core$Maybe$withDefault(0)));\n};\nvar terezka$line_charts$Internal$Coordinate$range = F2(\n\tfunction (toValue, data) {\n\t\tvar range_ = {\n\t\t\tmax: A2(terezka$line_charts$Internal$Coordinate$maximum, toValue, data),\n\t\t\tmin: A2(terezka$line_charts$Internal$Coordinate$minimum, toValue, data)\n\t\t};\n\t\treturn _Utils_eq(range_.min, range_.max) ? _Utils_update(\n\t\t\trange_,\n\t\t\t{max: range_.max + 1}) : range_;\n\t});\nvar terezka$line_charts$LineChart$toSystem = F2(\n\tfunction (config, data) {\n\t\tvar yRange = A2(\n\t\t\tterezka$line_charts$Internal$Coordinate$range,\n\t\t\tA2(\n\t\t\t\telm$core$Basics$composeR,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.point;\n\t\t\t\t},\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.y;\n\t\t\t\t}),\n\t\t\tdata);\n\t\tvar xRange = A2(\n\t\t\tterezka$line_charts$Internal$Coordinate$range,\n\t\t\tA2(\n\t\t\t\telm$core$Basics$composeR,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.point;\n\t\t\t\t},\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.x;\n\t\t\t\t}),\n\t\t\tdata);\n\t\tvar size = A2(\n\t\t\tterezka$line_charts$Internal$Coordinate$Size,\n\t\t\tterezka$line_charts$Internal$Axis$pixels(config.x),\n\t\t\tterezka$line_charts$Internal$Axis$pixels(config.y));\n\t\tvar hasArea = terezka$line_charts$Internal$Area$hasArea(config.area);\n\t\tvar container_ = A2(terezka$line_charts$Internal$Container$properties, elm$core$Basics$identity, config.container);\n\t\tvar frame = A2(terezka$line_charts$Internal$Coordinate$Frame, container_.margin, size);\n\t\tvar adjustDomainRange = function (domain) {\n\t\t\treturn hasArea ? terezka$line_charts$Internal$Coordinate$ground(domain) : domain;\n\t\t};\n\t\tvar system = {\n\t\t\tframe: frame,\n\t\t\tid: container_.id,\n\t\t\tx: xRange,\n\t\t\txData: xRange,\n\t\t\ty: adjustDomainRange(yRange),\n\t\t\tyData: yRange\n\t\t};\n\t\treturn _Utils_update(\n\t\t\tsystem,\n\t\t\t{\n\t\t\t\tx: A2(\n\t\t\t\t\tterezka$line_charts$Internal$Axis$Range$applyX,\n\t\t\t\t\tterezka$line_charts$Internal$Axis$range(config.x),\n\t\t\t\t\tsystem),\n\t\t\t\ty: A2(\n\t\t\t\t\tterezka$line_charts$Internal$Axis$Range$applyY,\n\t\t\t\t\tterezka$line_charts$Internal$Axis$range(config.y),\n\t\t\t\t\tsystem)\n\t\t\t});\n\t});\nvar terezka$line_charts$LineChart$viewBoxAttribute = function (_n0) {\n\tvar frame = _n0.frame;\n\treturn elm$svg$Svg$Attributes$viewBox(\n\t\t'0 0 ' + (elm$core$String$fromFloat(frame.size.width) + (' ' + elm$core$String$fromFloat(frame.size.height))));\n};\nvar terezka$line_charts$LineChart$viewCustom = F2(\n\tfunction (config, lines) {\n\t\tvar junkLineInfo = function (line_) {\n\t\t\treturn _Utils_Tuple3(\n\t\t\t\tA3(terezka$line_charts$Internal$Line$color, config.line, line_, _List_Nil),\n\t\t\t\tterezka$line_charts$Internal$Line$label(line_),\n\t\t\t\tterezka$line_charts$Internal$Line$data(line_));\n\t\t};\n\t\tvar getJunk = A3(\n\t\t\tterezka$line_charts$Internal$Junk$getLayers,\n\t\t\tA2(elm$core$List$map, junkLineInfo, lines),\n\t\t\tterezka$line_charts$Internal$Axis$variable(config.x),\n\t\t\tterezka$line_charts$Internal$Axis$variable(config.y));\n\t\tvar data = A2(terezka$line_charts$LineChart$toDataPoints, config, lines);\n\t\tvar dataAll = elm$core$List$concat(data);\n\t\tvar dataSafe = A2(\n\t\t\telm$core$List$map,\n\t\t\telm$core$List$filter(\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.isReal;\n\t\t\t\t}),\n\t\t\tdata);\n\t\tvar dataAllSafe = elm$core$List$concat(dataSafe);\n\t\tvar system = A2(terezka$line_charts$LineChart$toSystem, config, dataAllSafe);\n\t\tvar viewLines = terezka$line_charts$Internal$Line$view(\n\t\t\t{area: config.area, dotsConfig: config.dots, interpolation: config.interpolation, lineConfig: config.line, system: system});\n\t\tvar viewLegends = terezka$line_charts$Internal$Legends$view(\n\t\t\t{\n\t\t\t\tarea: config.area,\n\t\t\t\tdata: dataSafe,\n\t\t\t\tdotsConfig: config.dots,\n\t\t\t\tlegends: config.legends,\n\t\t\t\tlineConfig: config.line,\n\t\t\t\tlines: lines,\n\t\t\t\tsystem: system,\n\t\t\t\tx: terezka$line_charts$Internal$Axis$variable(config.x),\n\t\t\t\ty: terezka$line_charts$Internal$Axis$variable(config.y)\n\t\t\t});\n\t\tvar attributes = elm$core$List$concat(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Container$properties,\n\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\treturn $.attributesSvg;\n\t\t\t\t\t},\n\t\t\t\t\tconfig.container),\n\t\t\t\t\tA3(terezka$line_charts$Internal$Events$toContainerAttributes, dataAll, system, config.events),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tterezka$line_charts$LineChart$viewBoxAttribute(system)\n\t\t\t\t\t])\n\t\t\t\t]));\n\t\tvar addGrid = terezka$line_charts$Internal$Junk$addBelow(\n\t\t\tA4(terezka$line_charts$Internal$Grid$view, system, config.x, config.y, config.grid));\n\t\tvar junk = addGrid(\n\t\t\tA2(getJunk, system, config.junk));\n\t\treturn A4(\n\t\t\tterezka$line_charts$LineChart$container,\n\t\t\tconfig,\n\t\t\tsystem,\n\t\t\tjunk.html,\n\t\t\tA2(\n\t\t\t\telm$svg$Svg$svg,\n\t\t\t\tattributes,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$svg$Svg$defs,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$clipPath(system)\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$svg$Svg$g,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__junk--below')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\tjunk.below),\n\t\t\t\t\t\tA2(viewLines, lines, data),\n\t\t\t\t\t\tA3(terezka$line_charts$LineChart$chartAreaPlatform, config, dataAll, system),\n\t\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewHorizontal, system, config.intersection, config.x),\n\t\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewVertical, system, config.intersection, config.y),\n\t\t\t\t\t\tviewLegends,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$svg$Svg$g,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__junk--above')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\tjunk.above)\n\t\t\t\t\t])));\n\t});\nvar terezka$line_charts$Internal$Area$None = {$: 'None'};\nvar terezka$line_charts$Internal$Area$none = terezka$line_charts$Internal$Area$None;\nvar terezka$line_charts$LineChart$Area$default = terezka$line_charts$Internal$Area$none;\nvar terezka$line_charts$Internal$Axis$Title$atDataMax = function () {\n\tvar position = F2(\n\t\tfunction (data, range) {\n\t\t\treturn A2(elm$core$Basics$min, data.max, range.max);\n\t\t});\n\treturn terezka$line_charts$Internal$Axis$Title$atPosition(position);\n}();\nvar terezka$line_charts$Internal$Axis$Values$float = function (amount) {\n\tif (amount.$ === 'Exactly') {\n\t\tvar amount_ = amount.a;\n\t\treturn A3(terezka$line_charts$Internal$Axis$Values$values, true, true, amount_);\n\t} else {\n\t\tvar amount_ = amount.a;\n\t\treturn A3(terezka$line_charts$Internal$Axis$Values$values, true, false, amount_);\n\t}\n};\nvar terezka$line_charts$Internal$Axis$Tick$float = function (n) {\n\treturn terezka$line_charts$Internal$Axis$Tick$custom(\n\t\t{\n\t\t\tcolor: terezka$line_charts$LineChart$Colors$gray,\n\t\t\tdirection: terezka$line_charts$Internal$Axis$Tick$Negative,\n\t\t\tgrid: true,\n\t\t\tlabel: elm$core$Maybe$Just(\n\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Svg$label,\n\t\t\t\t\t'inherit',\n\t\t\t\t\telm$core$String$fromFloat(n))),\n\t\t\tlength: 5,\n\t\t\tposition: n,\n\t\t\twidth: 1\n\t\t});\n};\nvar terezka$line_charts$LineChart$Axis$Tick$float = terezka$line_charts$Internal$Axis$Tick$float;\nvar terezka$line_charts$Internal$Axis$default = F3(\n\tfunction (pixels_, title_, variable_) {\n\t\treturn terezka$line_charts$Internal$Axis$custom(\n\t\t\t{\n\t\t\t\taxisLine: terezka$line_charts$Internal$Axis$Line$rangeFrame(terezka$line_charts$LineChart$Colors$gray),\n\t\t\t\tpixels: pixels_,\n\t\t\t\trange: A2(terezka$line_charts$Internal$Axis$Range$padded, 20, 20),\n\t\t\t\tticks: terezka$line_charts$Internal$Axis$Ticks$custom(\n\t\t\t\t\tF2(\n\t\t\t\t\t\tfunction (data, range_) {\n\t\t\t\t\t\t\tvar smallest = A2(terezka$line_charts$Internal$Coordinate$smallestRange, data, range_);\n\t\t\t\t\t\t\tvar rangeSmall = smallest.max - smallest.min;\n\t\t\t\t\t\t\tvar rangeLong = range_.max - range_.min;\n\t\t\t\t\t\t\tvar diff = 1 - ((rangeLong - rangeSmall) / rangeLong);\n\t\t\t\t\t\t\tvar amount = elm$core$Basics$round((diff * pixels_) / 90);\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$Axis$Tick$float,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Axis$Values$float,\n\t\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Axis$Values$around(amount),\n\t\t\t\t\t\t\t\t\tsmallest));\n\t\t\t\t\t\t})),\n\t\t\t\ttitle: A3(terezka$line_charts$Internal$Axis$Title$atDataMax, 0, 0, title_),\n\t\t\t\tvariable: A2(elm$core$Basics$composeL, elm$core$Maybe$Just, variable_)\n\t\t\t});\n\t});\nvar terezka$line_charts$LineChart$Axis$default = terezka$line_charts$Internal$Axis$default;\nvar terezka$line_charts$Internal$Axis$Intersection$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Intersection$custom = F2(\n\tfunction (toX, toY) {\n\t\treturn terezka$line_charts$Internal$Axis$Intersection$Config(\n\t\t\tfunction (_n0) {\n\t\t\t\tvar x = _n0.x;\n\t\t\t\tvar y = _n0.y;\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$Internal$Data$Point,\n\t\t\t\t\ttoX(x),\n\t\t\t\t\ttoY(y));\n\t\t\t});\n\t});\nvar terezka$line_charts$Internal$Axis$Intersection$default = A2(\n\tterezka$line_charts$Internal$Axis$Intersection$custom,\n\tfunction ($) {\n\t\treturn $.min;\n\t},\n\tfunction ($) {\n\t\treturn $.min;\n\t});\nvar terezka$line_charts$LineChart$Axis$Intersection$default = terezka$line_charts$Internal$Axis$Intersection$default;\nvar terezka$line_charts$LineChart$Colors$blue = A3(avh4$elm_color$Color$rgb255, 3, 169, 244);\nvar terezka$line_charts$Internal$Container$Margin = F4(\n\tfunction (top, right, bottom, left) {\n\t\treturn {bottom: bottom, left: left, right: right, top: top};\n\t});\nvar terezka$line_charts$Internal$Container$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Container$custom = terezka$line_charts$Internal$Container$Config;\nvar terezka$line_charts$Internal$Container$Relative = {$: 'Relative'};\nvar terezka$line_charts$Internal$Container$relative = terezka$line_charts$Internal$Container$Relative;\nvar terezka$line_charts$Internal$Container$responsive = function (id) {\n\treturn terezka$line_charts$Internal$Container$custom(\n\t\t{\n\t\t\tattributesHtml: _List_Nil,\n\t\t\tattributesSvg: _List_Nil,\n\t\t\tid: id,\n\t\t\tmargin: A4(terezka$line_charts$Internal$Container$Margin, 60, 140, 60, 80),\n\t\t\tsize: terezka$line_charts$Internal$Container$relative\n\t\t});\n};\nvar terezka$line_charts$LineChart$Container$responsive = terezka$line_charts$Internal$Container$responsive;\nvar terezka$line_charts$Internal$Dots$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Dots$Disconnected = function (a) {\n\treturn {$: 'Disconnected', a: a};\n};\nvar terezka$line_charts$Internal$Dots$Style = function (a) {\n\treturn {$: 'Style', a: a};\n};\nvar terezka$line_charts$Internal$Dots$style = F2(\n\tfunction (radius, variety) {\n\t\treturn terezka$line_charts$Internal$Dots$Style(\n\t\t\t{radius: radius, variety: variety});\n\t});\nvar terezka$line_charts$Internal$Dots$disconnected = F2(\n\tfunction (radius, border) {\n\t\treturn A2(\n\t\t\tterezka$line_charts$Internal$Dots$style,\n\t\t\tradius,\n\t\t\tterezka$line_charts$Internal$Dots$Disconnected(border));\n\t});\nvar terezka$line_charts$Internal$Dots$default = terezka$line_charts$Internal$Dots$Config(\n\t{\n\t\tindividual: function (_n0) {\n\t\t\treturn A2(terezka$line_charts$Internal$Dots$disconnected, 10, 2);\n\t\t},\n\t\tlegend: function (_n1) {\n\t\t\treturn A2(terezka$line_charts$Internal$Dots$disconnected, 10, 2);\n\t\t}\n\t});\nvar terezka$line_charts$LineChart$Dots$default = terezka$line_charts$Internal$Dots$default;\nvar terezka$line_charts$Internal$Dots$Square = {$: 'Square'};\nvar terezka$line_charts$LineChart$Dots$square = terezka$line_charts$Internal$Dots$Square;\nvar terezka$line_charts$Internal$Events$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Events$custom = terezka$line_charts$Internal$Events$Config;\nvar terezka$line_charts$Internal$Events$default = terezka$line_charts$Internal$Events$custom(_List_Nil);\nvar terezka$line_charts$LineChart$Events$default = terezka$line_charts$Internal$Events$default;\nvar terezka$line_charts$Internal$Grid$Dots = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Dots', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Grid$dots = terezka$line_charts$Internal$Grid$Dots;\nvar terezka$line_charts$LineChart$Grid$dots = terezka$line_charts$Internal$Grid$dots;\nvar terezka$line_charts$Internal$Interpolation$Linear = {$: 'Linear'};\nvar terezka$line_charts$LineChart$Interpolation$linear = terezka$line_charts$Internal$Interpolation$Linear;\nvar terezka$line_charts$LineChart$Interpolation$default = terezka$line_charts$LineChart$Interpolation$linear;\nvar terezka$line_charts$Internal$Junk$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Junk$Layers = F3(\n\tfunction (below, above, html) {\n\t\treturn {above: above, below: below, html: html};\n\t});\nvar terezka$line_charts$Internal$Junk$none = terezka$line_charts$Internal$Junk$Config(\n\tF4(\n\t\tfunction (_n0, _n1, _n2, _n3) {\n\t\t\treturn A3(terezka$line_charts$Internal$Junk$Layers, _List_Nil, _List_Nil, _List_Nil);\n\t\t}));\nvar terezka$line_charts$LineChart$Junk$default = terezka$line_charts$Internal$Junk$none;\nvar terezka$line_charts$Internal$Legends$Grouped = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Grouped', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Legends$defaultLegend = F2(\n\tfunction (index, _n0) {\n\t\tvar sample = _n0.sample;\n\t\tvar label = _n0.label;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__legend'),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, 20, index * 20)\n\t\t\t\t\t\t]))\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tsample,\n\t\t\t\t\tA2(\n\t\t\t\t\telm$svg$Svg$g,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, 40, 4)\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$label, 'inherit', label)\n\t\t\t\t\t\t]))\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Legends$defaultLegends = F8(\n\tfunction (toX, toY, offsetX, offsetY, hovered, _arguments, system, legends) {\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__legends'),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Svg$move,\n\t\t\t\t\t\t\tsystem,\n\t\t\t\t\t\t\ttoX(system.x),\n\t\t\t\t\t\t\ttoY(system.y)),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, offsetX, offsetY)\n\t\t\t\t\t\t]))\n\t\t\t\t]),\n\t\t\tA2(elm$core$List$indexedMap, terezka$line_charts$Internal$Legends$defaultLegend, legends));\n\t});\nvar terezka$line_charts$Internal$Legends$hover = function (data) {\n\treturn A2(\n\t\tterezka$line_charts$Internal$Legends$Grouped,\n\t\t30,\n\t\tA5(\n\t\t\tterezka$line_charts$Internal$Legends$defaultLegends,\n\t\t\tfunction ($) {\n\t\t\t\treturn $.max;\n\t\t\t},\n\t\t\tfunction ($) {\n\t\t\t\treturn $.max;\n\t\t\t},\n\t\t\t0,\n\t\t\t10,\n\t\t\tdata));\n};\nvar terezka$line_charts$Internal$Legends$default = terezka$line_charts$Internal$Legends$hover(_List_Nil);\nvar terezka$line_charts$LineChart$Legends$default = terezka$line_charts$Internal$Legends$default;\nvar terezka$line_charts$Internal$Line$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Line$Style = function (a) {\n\treturn {$: 'Style', a: a};\n};\nvar terezka$line_charts$Internal$Line$style = F2(\n\tfunction (width, color_) {\n\t\treturn terezka$line_charts$Internal$Line$Style(\n\t\t\t{color: color_, width: width});\n\t});\nvar terezka$line_charts$Internal$Line$default = terezka$line_charts$Internal$Line$Config(\n\tfunction (_n0) {\n\t\treturn A2(terezka$line_charts$Internal$Line$style, 1, elm$core$Basics$identity);\n\t});\nvar terezka$line_charts$LineChart$Line$default = terezka$line_charts$Internal$Line$default;\nvar author$project$Pages$Profile$History$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('container'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'min-height', '500px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Activity in the last month')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('This graph represents your image upload activity in the last month')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.status;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Failed to load activity data')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar activity = _n0.a;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5%')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$viewCustom,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tarea: terezka$line_charts$LineChart$Area$default,\n\t\t\t\t\t\t\t\t\t\tcontainer: terezka$line_charts$LineChart$Container$responsive('line-chart-1'),\n\t\t\t\t\t\t\t\t\t\tdots: terezka$line_charts$LineChart$Dots$default,\n\t\t\t\t\t\t\t\t\t\tevents: terezka$line_charts$LineChart$Events$default,\n\t\t\t\t\t\t\t\t\t\tgrid: A2(terezka$line_charts$LineChart$Grid$dots, 0.5, terezka$line_charts$LineChart$Colors$blue),\n\t\t\t\t\t\t\t\t\t\tinterpolation: terezka$line_charts$LineChart$Interpolation$default,\n\t\t\t\t\t\t\t\t\t\tintersection: terezka$line_charts$LineChart$Axis$Intersection$default,\n\t\t\t\t\t\t\t\t\t\tjunk: terezka$line_charts$LineChart$Junk$default,\n\t\t\t\t\t\t\t\t\t\tlegends: terezka$line_charts$LineChart$Legends$default,\n\t\t\t\t\t\t\t\t\t\tline: terezka$line_charts$LineChart$Line$default,\n\t\t\t\t\t\t\t\t\t\tx: author$project$Pages$Profile$History$xConfig(\n\t\t\t\t\t\t\t\t\t\t\telm$core$List$length(activity)),\n\t\t\t\t\t\t\t\t\t\ty: A3(\n\t\t\t\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$Axis$default,\n\t\t\t\t\t\t\t\t\t\t\t400,\n\t\t\t\t\t\t\t\t\t\t\t'Uploads',\n\t\t\t\t\t\t\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn $.y;\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$line,\n\t\t\t\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$Colors$blue,\n\t\t\t\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$Dots$square,\n\t\t\t\t\t\t\t\t\t\t\t'Activity',\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Pages$Profile$History$toPoint, activity))\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('My activity')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('This sections contains logs of your activity')\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Profile$Security$ChangePassword = {$: 'ChangePassword'};\nvar author$project$Pages$Profile$Security$ConfirmDelete = {$: 'ConfirmDelete'};\nvar author$project$Pages$Profile$Security$Delete = {$: 'Delete'};\nvar author$project$Pages$Profile$Security$NewPassword = function (a) {\n\treturn {$: 'NewPassword', a: a};\n};\nvar author$project$Pages$Profile$Security$Password = function (a) {\n\treturn {$: 'Password', a: a};\n};\nvar author$project$Pages$Profile$Security$Code = function (a) {\n\treturn {$: 'Code', a: a};\n};\nvar author$project$Pages$Profile$Security$Request = {$: 'Request'};\nvar author$project$Pages$Profile$Security$Verify = {$: 'Verify'};\nvar elm$html$Html$label = _VirtualDom_node('label');\nvar elm$html$Html$Attributes$for = elm$html$Html$Attributes$stringProperty('htmlFor');\nvar author$project$Pages$Profile$Security$viewVerify = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('form-horizontal fade in alert alert-info'),\n\t\t\t\telm$html$Html$Attributes$id('form'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '75%')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h2,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('text-center')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Verify your e-mail address')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Your account is not verified. We will send a verification mail to ' + model.user.email)\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px'),\n\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Security$Request)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Send me the code')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.mailStatus;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Connection error')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Success':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Mail successfully sent')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('verify')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Enter the received code:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('verify'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('code'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.code),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Security$Code)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Security$Verify)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Verify')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\tvar _n1 = model.codeStatus;\n\t\t\t\t\t\t\t\t\t\tif (_n1.$ === 'Failure') {\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Invalid code')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Profile$Security$view = function (model) {\n\tvar user = model.user;\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Verify your account')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Verification is required for the completion of certain tasks')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = user.verif;\n\t\t\t\tif (!_n0) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Security$viewVerify(model),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil)\n\t\t\t\t\t\t\t]));\n\t\t\t\t} else {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '20%'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Your account is verified')\n\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Want to change your password?')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Change your password by filling out the following form.')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-inline')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('old')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Old Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('old'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Security$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('new')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('New Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('new'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.newPassword),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Security$NewPassword)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px'),\n\t\t\t\t\t\t(!model.user.verif) ? elm$html$Html$Attributes$disabled(true) : A2(elm$html$Html$Attributes$style, '', ''),\n\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Security$ChangePassword)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Change Password')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n1 = model.passStatus;\n\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Password change failed')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Success':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Password successfully changed')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Delete my account')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Press the following button if you wish to permanently delete your account. This will also delete your posts and comments!')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n2 = model.delStatus;\n\t\t\t\tswitch (_n2.$) {\n\t\t\t\t\tcase 'None':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-danger'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '15px'),\n\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Security$Delete)\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Delete account')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-danger form-group row'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('del')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Enter your password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('del'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Security$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-danger'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Security$ConfirmDelete)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Confirm')\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Deleting account failed')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$Profile$Settings$Bio = function (a) {\n\treturn {$: 'Bio', a: a};\n};\nvar author$project$Pages$Profile$Settings$Facebook = function (a) {\n\treturn {$: 'Facebook', a: a};\n};\nvar author$project$Pages$Profile$Settings$Github = function (a) {\n\treturn {$: 'Github', a: a};\n};\nvar author$project$Pages$Profile$Settings$Twitter = function (a) {\n\treturn {$: 'Twitter', a: a};\n};\nvar author$project$Pages$Profile$Settings$UpdateSettings = {$: 'UpdateSettings'};\nvar author$project$Pages$Profile$Settings$view = function (model) {\n\tvar user = model.user;\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Update your bio')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Update the description others see on your profile')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$textarea,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$cols(100),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$rows(10),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('bio'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'resize', 'vertical'),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.bio),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Settings$Bio)\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Link your social accounts')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Share your social accounts with our users!')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('fb')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Link your Facebook:')\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('fb'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.facebook),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Settings$Facebook)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('tw')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Link your Twitter:')\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('tw'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.twitter),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Settings$Twitter)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('git')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Link your Github:')\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('git'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.github),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Settings$Github)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Update')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Save all changes to your basic information')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px'),\n\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Settings$UpdateSettings)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Update Settings')\n\t\t\t\t\t])),\n\t\t\t\t(elm$core$List$length(model.warning) > 0) ? A2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '40px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(elm$core$List$map, elm$html$Html$text, model.warning))\n\t\t\t\t\t])) : elm$html$Html$text('')\n\t\t\t]));\n};\nvar feathericons$elm_feather$FeatherIcons$facebook = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'facebook',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$d('M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Social$viewFacebook = function (url) {\n\treturn A2(\n\t\telm$html$Html$a,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$href(url)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary social'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', '#3b5998'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '0px solid'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'box-shadow', '0px 12px 15px rgba(0, 0, 0, 0.4)'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 25, feathericons$elm_feather$FeatherIcons$facebook))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar feathericons$elm_feather$FeatherIcons$github = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'github',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$d('M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Social$viewGithub = function (url) {\n\treturn A2(\n\t\telm$html$Html$a,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$href(url)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary social'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', '#211F1F'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '0px solid'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'box-shadow', '0px 12px 15px rgba(0, 0, 0, 0.4)'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 25, feathericons$elm_feather$FeatherIcons$github))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar feathericons$elm_feather$FeatherIcons$twitter = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'twitter',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$d('M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Social$viewTwitter = function (url) {\n\treturn A2(\n\t\telm$html$Html$a,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$href(url)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary social'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', '#00acee'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '0px solid'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'box-shadow', '0px 12px 15px rgba(0, 0, 0, 0.4)'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 25, feathericons$elm_feather$FeatherIcons$twitter))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar elm$html$Html$br = _VirtualDom_node('br');\nvar author$project$Pages$Profile$view = function (model) {\n\tvar user = model.user;\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.status;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '400px'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '25%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Fetching data from the server')\n\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '400px'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '25%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Profile failed to load')\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('jumbotron')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('avatar'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '10px solid white'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(user.avatar),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(300),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(300),\n\t\t\t\t\t\t\t\t\t\t\t\t\t(user.token !== 'Hidden') ? elm$html$Html$Events$onClick(author$project$Pages$Profile$Select) : A2(elm$html$Html$Attributes$style, '', '')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$br, _List_Nil, _List_Nil),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(user.username),\n\t\t\t\t\t\t\t\t\t\t\t\t\tuser.verif ? A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok-circle'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'green'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Verified')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil) : A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove-circle'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'red'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Not verified')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$ul,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n1 = user.facebook;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n1.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar url = _n1.a;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn author$project$Social$viewFacebook(url);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n2 = user.twitter;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n2.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar url = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn author$project$Social$viewTwitter(url);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n3 = user.github;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n3.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar url = _n3.a;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn author$project$Social$viewGithub(url);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$i,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(user.bio)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t(user.token !== 'Hidden') ? A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$ul,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav nav-pills'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-30px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'black'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$SwitchInformation),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Information')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n4 = model.tab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n4.$ === 'Information') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '90%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '1.5px solid #00acee')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'black'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$SwitchFavorites),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Favorites')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n5 = model.tab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n5.$ === 'Favorites') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '90%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '1.5px solid #00acee')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'black'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$SwitchSettings),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Settings')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n6 = model.tab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n6.$ === 'Settings') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '90%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '1.5px solid #00acee')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'black'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$SwitchSecurity),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Security')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n7 = model.tab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n7.$ === 'Security') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '90%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '1.5px solid #00acee')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'black'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$SwitchHistory),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('History')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n8 = model.tab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n8.$ === 'History') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '90%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '1.5px solid #00acee')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t])) : elm$html$Html$text(''),\n\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\tvar _n9 = model.tab;\n\t\t\t\t\t\t\t\t\tswitch (_n9.$) {\n\t\t\t\t\t\t\t\t\t\tcase 'Information':\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('list-group')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Account information')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Here are some information about ' + (user.username + '\\'s account'))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Registered at ' + author$project$TimeFormat$formatDate(user.registered)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Post history')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Preview of ' + (user.username + '\\'s posts'))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n10 = model.postsStatus;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (_n10.$) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'LoadingPosts':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA3(perzanko$elm_loading$Loading$render, perzanko$elm_loading$Loading$Circle, perzanko$elm_loading$Loading$defaultConfig, perzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'FailurePosts':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Connection error')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar posts = _n10.a;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$core$List$isEmpty(posts) ? A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-style', 'italic')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('This user has no posts')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])) : A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Image$showTab, posts)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_eq(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$length(posts),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$postCount) ? A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$LoadMore)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Load more')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])) : elm$html$Html$text('')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\tcase 'Settings':\n\t\t\t\t\t\t\t\t\t\t\tvar tab = _n9.a;\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$SettingsMsg,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Settings$view(tab));\n\t\t\t\t\t\t\t\t\t\tcase 'Security':\n\t\t\t\t\t\t\t\t\t\t\tvar tab = _n9.a;\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$SecurityMsg,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Security$view(tab));\n\t\t\t\t\t\t\t\t\t\tcase 'History':\n\t\t\t\t\t\t\t\t\t\t\tvar tab = _n9.a;\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$HistoryMsg,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$History$view(tab));\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\tvar tab = _n9.a;\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$FavoritesMsg,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Favorites$view(tab));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$Results$viewFailure = function (error) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '40%'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$text(error)\n\t\t\t]));\n};\nvar author$project$Pages$Results$viewHeading = F2(\n\tfunction (name, count) {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_Nil,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$h1,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\tname + (' (' + (elm$core$String$fromInt(count) + ')')))\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_Nil)\n\t\t\t\t]));\n\t});\nvar author$project$User$showPreview = function (user) {\n\treturn A2(\n\t\telm$html$Html$a,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$href('profile/' + user.username),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'display', 'inline-block'),\n\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '250px'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '200px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$img,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$src(user.avatar),\n\t\t\t\t\t\telm$html$Html$Attributes$class('previewAvatar'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\telm$html$Html$Attributes$height(200),\n\t\t\t\t\t\telm$html$Html$Attributes$width(200),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '5px solid white'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'user-drag', 'none'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'user-select', 'none')\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text(user.username),\n\t\t\t\t\t\tuser.verif ? A2(\n\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok-circle'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'green'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_Nil) : A2(\n\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove-circle'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'red'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Results$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-info'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Showing results for: \\\"' + (model.query + '\\\"'))\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.imageStatus;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'LoadingImage':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Results$viewHeading, 'Images', 0),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'FailureImage':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Results$viewHeading, 'Images', 0),\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Results$viewFailure('Connection error')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar container = _n0.a;\n\t\t\t\t\t\tvar images = container.images;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Results$viewHeading,\n\t\t\t\t\t\t\t\t\t'Images',\n\t\t\t\t\t\t\t\t\telm$core$List$length(images)),\n\t\t\t\t\t\t\t\t\telm$core$List$isEmpty(images) ? author$project$Pages$Results$viewFailure('No results matching query \\\"' + (model.query + '\\\"')) : A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Image$showPreview, images))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n1 = model.userStatus;\n\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\tcase 'LoadingUser':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Results$viewHeading, 'Users', 0),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'FailureUser':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Results$viewHeading, 'Users', 0),\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Results$viewFailure('Connection error')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar container = _n1.a;\n\t\t\t\t\t\tvar users = container.users;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Results$viewHeading,\n\t\t\t\t\t\t\t\t\t'Users',\n\t\t\t\t\t\t\t\t\telm$core$List$length(users)),\n\t\t\t\t\t\t\t\t\telm$core$List$isEmpty(users) ? author$project$Pages$Results$viewFailure('No results matching query \\\"' + (model.query + '\\\"')) : A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$User$showPreview, users))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tA2(author$project$Pages$Results$viewHeading, 'Tags', 0),\n\t\t\t\telm$html$Html$text('If you wanted to search for tags, click '),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$a,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$href('/tags?q=' + model.query),\n\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('here')\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$SignIn$Name = function (a) {\n\treturn {$: 'Name', a: a};\n};\nvar author$project$Pages$SignIn$Password = function (a) {\n\treturn {$: 'Password', a: a};\n};\nvar author$project$Pages$SignIn$Submit = {$: 'Submit'};\nvar author$project$Pages$SignIn$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('form-horizontal'),\n\t\t\t\telm$html$Html$Attributes$id('form'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '75%')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h2,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('text-center')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Log In with an existing account')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '10px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Don\\'t have an account?'),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_up'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Sign Up')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n0 = model.warning;\n\t\t\t\t\t\t\t\tif (_n0 === 'Enter your username') {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('username')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Username:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('username'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignIn$Name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('username')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Username:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('username'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignIn$Name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n1 = model.warning;\n\t\t\t\t\t\t\t\tif (_n1 === 'Enter your password') {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('password')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignIn$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('password')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignIn$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$SignIn$Submit)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Sign in')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n2 = model.warning;\n\t\t\t\tswitch (_n2) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\tvar _n3 = model.status;\n\t\t\t\t\t\tswitch (_n3.$) {\n\t\t\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-info'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA3(perzanko$elm_loading$Loading$render, perzanko$elm_loading$Loading$Circle, perzanko$elm_loading$Loading$defaultConfig, perzanko$elm_loading$Loading$On),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(model.warning)\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\t\t\tvar err = _n3.a;\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Error')\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Incorrect username or password')\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\tcase '':\n\t\t\t\t\t\treturn A2(elm$html$Html$div, _List_Nil, _List_Nil);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text(model.warning)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$SignUp$Email = function (a) {\n\treturn {$: 'Email', a: a};\n};\nvar author$project$Pages$SignUp$Name = function (a) {\n\treturn {$: 'Name', a: a};\n};\nvar author$project$Pages$SignUp$Password = function (a) {\n\treturn {$: 'Password', a: a};\n};\nvar author$project$Pages$SignUp$PasswordAgain = function (a) {\n\treturn {$: 'PasswordAgain', a: a};\n};\nvar author$project$Pages$SignUp$Submit = {$: 'Submit'};\nvar author$project$Pages$SignUp$toString = function (err) {\n\tswitch (err.$) {\n\t\tcase 'Timeout':\n\t\t\treturn 'Timeout exceeded';\n\t\tcase 'NetworkError':\n\t\t\treturn 'Network error';\n\t\tcase 'BadUrl':\n\t\t\tvar url = err.a;\n\t\t\treturn 'Bad url';\n\t\tcase 'BadStatus':\n\t\t\tvar s = err.a;\n\t\t\treturn 'Bad status';\n\t\tdefault:\n\t\t\tvar s = err.a;\n\t\t\treturn 'Bad body : ' + s;\n\t}\n};\nvar author$project$Pages$SignUp$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('form-horizontal'),\n\t\t\t\telm$html$Html$Attributes$id('form'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '75%')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h2,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('text-center')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Create an Account')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '10px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Already have an account?'),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_in'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Sign In')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n0 = model.errorUsername;\n\t\t\t\t\t\t\t\tif (_n0) {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('username')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Username:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('username'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar _n1 = author$project$Pages$SignUp$validateUsername(model.name);\n\t\t\t\t\t\t\t\t\tif (_n1) {\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-success has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('username')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Username:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('username'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('username')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Username:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('username'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n2 = model.errorEmail;\n\t\t\t\t\t\t\t\tif (_n2) {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('email')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('E-mail:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.email),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Email)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar _n3 = author$project$Pages$SignUp$validateEmail(model.email);\n\t\t\t\t\t\t\t\t\tif (_n3.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-success has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('email')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('E-mail:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.email),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Email)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('email')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('E-mail:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.email),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Email)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n4 = author$project$Pages$SignUp$len(model.password);\n\t\t\t\t\t\t\t\tif (!_n4) {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('password')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-success has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('password')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n5 = A2(author$project$Pages$SignUp$validatePassword, model.password, model.passwordAgain);\n\t\t\t\t\t\t\t\tif (!_n5) {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('passwordAgain')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password again:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('passwordAgain'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.passwordAgain),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$PasswordAgain)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-success has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('passwordAgain')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password again:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('passwordAgain'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.passwordAgain),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$PasswordAgain)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$SignUp$Submit)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Sign Up'),\n\t\t\t\t\t\tA2(elm$html$Html$div, _List_Nil, _List_Nil)\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n6 = model.warning;\n\t\t\t\tswitch (_n6) {\n\t\t\t\t\tcase '':\n\t\t\t\t\t\treturn A2(elm$html$Html$div, _List_Nil, _List_Nil);\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\tvar _n7 = model.status;\n\t\t\t\t\t\tswitch (_n7.$) {\n\t\t\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-info'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA3(perzanko$elm_loading$Loading$render, perzanko$elm_loading$Loading$Circle, perzanko$elm_loading$Loading$defaultConfig, perzanko$elm_loading$Loading$On),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(model.warning)\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\t\t\tvar err = _n7.a;\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$SignUp$toString(err))\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text(model.warning)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$Tags$Query = function (a) {\n\treturn {$: 'Query', a: a};\n};\nvar author$project$Pages$Tags$pageSize = 9;\nvar author$project$Pages$Tags$Jump = function (a) {\n\treturn {$: 'Jump', a: a};\n};\nvar author$project$Pages$Tags$viewButton = F2(\n\tfunction (model, num) {\n\t\treturn A2(\n\t\t\telm$html$Html$button,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$Attributes$class('btn btn-default'),\n\t\t\t\t\t_Utils_eq(model.page, num) ? A2(elm$html$Html$Attributes$style, 'opacity', '0.3') : A2(elm$html$Html$Attributes$style, '', ''),\n\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\tauthor$project$Pages$Tags$Jump(num))\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\telm$core$String$fromInt(num))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Tags$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h1,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Search images based on tags')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('The search is not case sensitive')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '70%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Search tags'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.query),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Tags$Query)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'grey'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-search form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$hr,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.status;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\tcase 'Success':\n\t\t\t\t\t\tvar container = _n0.a;\n\t\t\t\t\t\tvar images = container.images;\n\t\t\t\t\t\tvar _n1 = elm$core$List$length(images);\n\t\t\t\t\t\tif (!_n1) {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('No results for tag '),\n\t\t\t\t\t\t\t\t\t\tauthor$project$Tag$view(model.query)\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t'Query returned ' + (elm$core$String$fromInt(container.total) + ' results'))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel panel-default'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Image$showPreview, images)),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Tags$viewButton(model),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$range,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Tags$pageSize)))),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(model.page) + ('/' + elm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Tags$pageSize))))\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar error = _n0.a;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text(error)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$Upload$Description = function (a) {\n\treturn {$: 'Description', a: a};\n};\nvar author$project$Pages$Upload$KeyHandler = function (a) {\n\treturn {$: 'KeyHandler', a: a};\n};\nvar author$project$Pages$Upload$Pick = {$: 'Pick'};\nvar author$project$Pages$Upload$RemoveImg = {$: 'RemoveImg'};\nvar author$project$Pages$Upload$Tag = function (a) {\n\treturn {$: 'Tag', a: a};\n};\nvar author$project$Pages$Upload$Title = function (a) {\n\treturn {$: 'Title', a: a};\n};\nvar author$project$Pages$Upload$Upload = {$: 'Upload'};\nvar author$project$Pages$Upload$cancelButton = F2(\n\tfunction (msg, offset) {\n\t\treturn A2(\n\t\t\telm$html$Html$button,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'position', 'absolute'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'top', offset + '%'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'right', '21%'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'red'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.8'),\n\t\t\t\t\telm$html$Html$Events$onClick(msg)\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_Nil)\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Upload$getSizeInKb = function (b) {\n\treturn elm$core$String$fromFloat(b / 1024.0);\n};\nvar author$project$Pages$Upload$keyPress = function (tagger) {\n\treturn A2(\n\t\telm$html$Html$Events$on,\n\t\t'keydown',\n\t\tA2(elm$json$Json$Decode$map, tagger, elm$html$Html$Events$keyCode));\n};\nvar author$project$Pages$Upload$viewPreview = F2(\n\tfunction (mime, url) {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_Nil,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$src(url),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'display', 'block'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_Nil)\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Upload$view = function (model) {\n\tvar _n0 = model.user;\n\tif (_n0.$ === 'Just') {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$h1,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text('Upload your image')\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text('Fill out the following form to upload your image')\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel panel-default'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', '20px auto')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-heading')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('title'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Enter title here...'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '20px'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.title),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Upload$Title)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t(!model.fileSize) ? A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-body'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding', '60px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Upload$Pick)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Select image')\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t])) : A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-body')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Upload$cancelButton, author$project$Pages$Upload$RemoveImg, '35'),\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Upload$viewPreview, model.mime, model.preview)\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-footer'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '100px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$textarea,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('bio'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Enter image description here (optional)'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '100%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'resize', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.description),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Upload$Description)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-footer')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('tags'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Press Enter to add tags (optional)'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.tag),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Upload$Tag),\n\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Upload$keyPress(author$project$Pages$Upload$KeyHandler)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\tvar _n1 = elm$core$List$isEmpty(model.tags);\n\t\t\t\t\t\t\tif (_n1) {\n\t\t\t\t\t\t\t\treturn A2(elm$html$Html$div, _List_Nil, _List_Nil);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-footer'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'left')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\tauthor$project$Tag$view,\n\t\t\t\t\t\t\t\t\t\telm$core$List$reverse(model.tags)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}()\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t'Loaded file size: ' + (author$project$Pages$Upload$getSizeInKb(model.fileSize) + ' kB'))\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-success'),\n\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Upload$Upload),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text('Upload')\n\t\t\t\t\t\t])),\n\t\t\t\t\tfunction () {\n\t\t\t\t\tvar _n2 = model.warning;\n\t\t\t\t\tswitch (_n2) {\n\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('progress'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('progress-bar progress-bar-info'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$style,\n\t\t\t\t\t\t\t\t\t\t\t\t'width',\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$round(100 * model.fraction)) + '%'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'aria-valuemax', '100'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'aria-valuemin', '0'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$attribute,\n\t\t\t\t\t\t\t\t\t\t\t\t'aria-valuenow',\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$round(100 * model.fraction))),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'role', 'progressbar'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text(model.warning)\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t}\n\t\t\t\t}()\n\t\t\t\t]));\n\t} else {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_Nil,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_in')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text('Sign In')\n\t\t\t\t\t\t])),\n\t\t\t\t\telm$html$Html$text(' to upload images'),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text('Don\\'t have an account yet? '),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_up')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Sign Up')\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t]))\n\t\t\t\t]));\n\t}\n};\nvar author$project$Pages$Users$Query = function (a) {\n\treturn {$: 'Query', a: a};\n};\nvar author$project$Pages$Users$pageSize = 20;\nvar author$project$Pages$Users$Jump = function (a) {\n\treturn {$: 'Jump', a: a};\n};\nvar author$project$Pages$Users$viewButton = F2(\n\tfunction (model, num) {\n\t\treturn A2(\n\t\t\telm$html$Html$button,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$Attributes$class('btn btn-default'),\n\t\t\t\t\t_Utils_eq(model.page, num) ? A2(elm$html$Html$Attributes$style, 'opacity', '0.3') : A2(elm$html$Html$Attributes$style, '', ''),\n\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\tauthor$project$Pages$Users$Jump(num))\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\telm$core$String$fromInt(num))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Users$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('container')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h1,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Check out all the registered users')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '70%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('tw'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Search users'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.query),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Users$Query)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'grey'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-search form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$hr,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.status;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Sending the query...')\n\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Success':\n\t\t\t\t\t\tvar container = _n0.a;\n\t\t\t\t\t\tvar users = container.users;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t'Query returned ' + (elm$core$String$fromInt(container.total) + ' results'))\n\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel panel-default'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$User$showPreview, users)),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Users$viewButton(model),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$range,\n\t\t\t\t\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Users$pageSize)))),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(model.page) + ('/' + elm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Users$pageSize))))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar error = _n0.a;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text(error)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Main$view = function (model) {\n\tvar _n0 = model.page;\n\tswitch (_n0.$) {\n\t\tcase 'NotFound':\n\t\t\tvar string = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(author$project$Main$viewBody, model, string),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Not Found'\n\t\t\t};\n\t\tcase 'Loading':\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tauthor$project$Main$viewLoading(model),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Fetching data'\n\t\t\t};\n\t\tcase 'Home':\n\t\t\tvar home = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\tauthor$project$Main$HomeMsg,\n\t\t\t\t\t\tauthor$project$Pages$Home$view(home)),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Home'\n\t\t\t};\n\t\tcase 'Gallery':\n\t\t\tvar gallery = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$GalleryMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Gallery$view(gallery))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Gallery'\n\t\t\t};\n\t\tcase 'SignUp':\n\t\t\tvar signup = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$SignUpMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$SignUp$view(signup))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Sign up'\n\t\t\t};\n\t\tcase 'SignIn':\n\t\t\tvar signin = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$SignInMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$SignIn$view(signin))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Sign in'\n\t\t\t};\n\t\tcase 'Upload':\n\t\t\tvar upload = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$UploadMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Upload$view(upload))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Upload an image'\n\t\t\t};\n\t\tcase 'Profile':\n\t\t\tvar profile = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-top', '50px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$ProfileMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$view(profile))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: profile.user.username\n\t\t\t};\n\t\tcase 'Users':\n\t\t\tvar users = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$UsersMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Users$view(users))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Users'\n\t\t\t};\n\t\tcase 'Post':\n\t\t\tvar post = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$PostMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Post$view(post))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: post.title\n\t\t\t};\n\t\tcase 'Results':\n\t\t\tvar results = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$ResultsMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Results$view(results))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Search results'\n\t\t\t};\n\t\tdefault:\n\t\t\tvar tags = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$TagsMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Tags$view(tags))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Tags'\n\t\t\t};\n\t}\n};\nvar elm$browser$Browser$application = _Browser_application;\nvar author$project$Main$main = elm$browser$Browser$application(\n\t{init: author$project$Main$init, onUrlChange: author$project$Main$UrlChange, onUrlRequest: author$project$Main$UrlRequest, subscriptions: author$project$Main$subscriptions, update: author$project$Main$update, view: author$project$Main$view});\n_Platform_export({'Main':{'init':author$project$Main$main(\n\telm$json$Json$Decode$oneOf(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$json$Json$Decode$null(elm$core$Maybe$Nothing),\n\t\t\t\tA2(elm$json$Json$Decode$map, elm$core$Maybe$Just, elm$json$Json$Decode$string)\n\t\t\t])))(0)}});}(this));"
          },
          "redirectURL": "",
          "headersSize": 221,
          "bodySize": 0,
          "_transferSize": 221,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:16.670Z",
        "time": 4.772000000230037,
        "timings": {
          "blocked": 3.6530000003281167,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.03400000000000003,
          "wait": 0.7049999999518332,
          "receive": 0.37999999995008693,
          "_blocked_queueing": 2.9320000003281166
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2471,
                "columnNumber": 6
              },
              {
                "functionName": "_Scheduler_step",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1809,
                "columnNumber": 21
              },
              {
                "functionName": "_Scheduler_enqueue",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1783,
                "columnNumber": 2
              },
              {
                "functionName": "_Scheduler_rawSend",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1729,
                "columnNumber": 1
              },
              {
                "functionName": "_Platform_dispatchEffects",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2056,
                "columnNumber": 2
              },
              {
                "functionName": "_Platform_initialize",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1888,
                "columnNumber": 1
              },
              {
                "functionName": "",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4223,
                "columnNumber": 8
              },
              {
                "functionName": "",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 19,
                "columnNumber": 32
              },
              {
                "functionName": "",
                "scriptId": "16",
                "url": "http://localhost:8000/",
                "lineNumber": 75,
                "columnNumber": 27
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "22170",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/tags/trending",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Origin",
              "value": "http://localhost:8000"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 412,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "9"
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:16 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 9,
            "mimeType": "application/json",
            "compression": 0,
            "text": "[\"xxxxx\"]"
          },
          "redirectURL": "",
          "headersSize": 192,
          "bodySize": 9,
          "_transferSize": 201,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:16.726Z",
        "time": 4.512000000103289,
        "timings": {
          "blocked": 0.9250000003852183,
          "dns": 0.0050000000000000044,
          "ssl": -1,
          "connect": 0.39699999999999996,
          "send": 0.20900000000000007,
          "wait": 1.7240000001505833,
          "receive": 1.251999999567488,
          "_blocked_queueing": 0.7480000003852183
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2471,
                "columnNumber": 6
              },
              {
                "functionName": "_Scheduler_step",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1809,
                "columnNumber": 21
              },
              {
                "functionName": "_Scheduler_enqueue",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1783,
                "columnNumber": 2
              },
              {
                "functionName": "_Scheduler_rawSend",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1729,
                "columnNumber": 1
              },
              {
                "functionName": "_Platform_dispatchEffects",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2056,
                "columnNumber": 2
              },
              {
                "functionName": "_Platform_initialize",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1888,
                "columnNumber": 1
              },
              {
                "functionName": "",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4223,
                "columnNumber": 8
              },
              {
                "functionName": "",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 19,
                "columnNumber": 32
              },
              {
                "functionName": "",
                "scriptId": "16",
                "url": "http://localhost:8000/",
                "lineNumber": 75,
                "columnNumber": 27
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "22177",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/posts/latest",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Origin",
              "value": "http://localhost:8000"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 411,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "197"
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:16 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 197,
            "mimeType": "application/json",
            "compression": 0,
            "text": "[{\"id\":\"03d8d5ec0b7c98329749\",\"file\":\"http://localhost:3000/img/03d8d5ec0b7c98329749.png\",\"author\":\"ramang\",\"points\":0,\"views\":7,\"favorites\":0,\"uploaded\":\"2020-11-19T18:19:49.068Z\",\"title\":\"aaaa\"}]"
          },
          "redirectURL": "",
          "headersSize": 194,
          "bodySize": 197,
          "_transferSize": 391,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:16.726Z",
        "time": 4.450999999916239,
        "timings": {
          "blocked": 1.0290000000014552,
          "dns": 0.0050000000000000044,
          "ssl": -1,
          "connect": 0.07999999999999999,
          "send": 0.11200000000000002,
          "wait": 2.570000000090571,
          "receive": 0.6549999998242129,
          "_blocked_queueing": 0.9000000000014552
        }
      },
      {
        "_fromCache": "memory",
        "_initiator": {
          "type": "parser",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
        },
        "_priority": "VeryHigh",
        "_resourceType": "font",
        "cache": {},
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/fonts/glyphicons-halflings-regular.woff2",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "Origin",
              "value": "http://localhost:8000"
            },
            {
              "name": "Referer",
              "value": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Sun, 22 Nov 2020 09:14:01 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "last-modified",
              "value": "Wed, 12 Dec 2018 18:36:18 GMT"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "etag",
              "value": "\"1544639778\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "content-type",
              "value": "font/woff2"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "content-length",
              "value": "18056"
            }
          ],
          "cookies": [],
          "content": {
            "size": 18028,
            "mimeType": "font/woff2"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "209.197.3.15",
        "startedDateTime": "2020-11-22T09:40:16.728Z",
        "time": 0.0669999999445281,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.05400000009103678,
          "receive": 0.012999999853491317,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/"
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "22145",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/assets/carousel/1.jpg",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"25f07-175e1570922\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"; grafana_session=864898f71c8f620156ca76259f147953"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "grafana_session",
              "value": "864898f71c8f620156ca76259f147953",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 836,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"25f07-175e1570922\""
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:16 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 155399,
            "mimeType": "text/plain",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 221,
          "bodySize": 0,
          "_transferSize": 221,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:16.728Z",
        "time": 3.867999999783933,
        "timings": {
          "blocked": 2.378000000133179,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.08099999999999996,
          "wait": 1.0119999998572748,
          "receive": 0.3969999997934792,
          "_blocked_queueing": 1.1180000001331791
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "_VirtualDom_applyFacts",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3101,
                "columnNumber": 86
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3068,
                "columnNumber": 1
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_applyPatchRedraw",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4048,
                "columnNumber": 15
              },
              {
                "functionName": "_VirtualDom_applyPatch",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3975,
                "columnNumber": 10
              },
              {
                "functionName": "_VirtualDom_applyPatchesHelp",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3961,
                "columnNumber": 16
              },
              {
                "functionName": "_VirtualDom_applyPatches",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3952,
                "columnNumber": 8
              },
              {
                "functionName": "",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4241,
                "columnNumber": 15
              },
              {
                "functionName": "updateIfNeeded",
                "scriptId": "15",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4276,
                "columnNumber": 55
              }
            ],
            "parent": {
              "description": "requestAnimationFrame",
              "callFrames": [
                {
                  "functionName": "updateIfNeeded",
                  "scriptId": "15",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 4276,
                  "columnNumber": 7
                }
              ],
              "parent": {
                "description": "requestAnimationFrame",
                "callFrames": [
                  {
                    "functionName": "",
                    "scriptId": "15",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 4287,
                    "columnNumber": 22
                  },
                  {
                    "functionName": "sendToApp",
                    "scriptId": "15",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 1884,
                    "columnNumber": 2
                  },
                  {
                    "functionName": "",
                    "scriptId": "15",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 1993,
                    "columnNumber": 9
                  },
                  {
                    "functionName": "_Scheduler_step",
                    "scriptId": "15",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 1809,
                    "columnNumber": 21
                  },
                  {
                    "functionName": "_Scheduler_enqueue",
                    "scriptId": "15",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 1783,
                    "columnNumber": 2
                  },
                  {
                    "functionName": "",
                    "scriptId": "15",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 1811,
                    "columnNumber": 4
                  },
                  {
                    "functionName": "done",
                    "scriptId": "15",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 2453,
                    "columnNumber": 3
                  },
                  {
                    "functionName": "",
                    "scriptId": "15",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 2459,
                    "columnNumber": 44
                  }
                ],
                "parent": {
                  "description": "load",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "15",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2459,
                      "columnNumber": 6
                    },
                    {
                      "functionName": "_Scheduler_step",
                      "scriptId": "15",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1809,
                      "columnNumber": 21
                    },
                    {
                      "functionName": "_Scheduler_enqueue",
                      "scriptId": "15",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1783,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "_Scheduler_rawSend",
                      "scriptId": "15",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1729,
                      "columnNumber": 1
                    },
                    {
                      "functionName": "_Platform_dispatchEffects",
                      "scriptId": "15",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2056,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "_Platform_initialize",
                      "scriptId": "15",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1888,
                      "columnNumber": 1
                    },
                    {
                      "functionName": "",
                      "scriptId": "15",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 4223,
                      "columnNumber": 8
                    },
                    {
                      "functionName": "",
                      "scriptId": "15",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 19,
                      "columnNumber": 32
                    },
                    {
                      "functionName": "",
                      "scriptId": "16",
                      "url": "http://localhost:8000/",
                      "lineNumber": 75,
                      "columnNumber": 27
                    }
                  ]
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "22191",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/img/03d8d5ec0b7c98329749.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 18:19:49 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"7d554-175e1bbe5d6\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"; grafana_session=864898f71c8f620156ca76259f147953"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "grafana_session",
              "value": "864898f71c8f620156ca76259f147953",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 841,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=0"
            },
            {
              "name": "last-modified",
              "value": "Thu, 19 Nov 2020 18:19:49 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"7d554-175e1bbe5d6\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "0"
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:16 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 513364,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 311,
          "bodySize": 0,
          "_transferSize": 311,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:16.750Z",
        "time": 7.562000000022323,
        "timings": {
          "blocked": 5.655000000316824,
          "dns": 0.006000000000000005,
          "ssl": -1,
          "connect": 0.184,
          "send": 0.10999999999999999,
          "wait": 1.094000000204891,
          "receive": 0.5129999995006074,
          "_blocked_queueing": 5.323000000316824
        }
      },
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "High",
        "_resourceType": "other",
        "cache": {},
        "connection": "22145",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/assets/favicon/favicon-32x32.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"; grafana_session=864898f71c8f620156ca76259f147953"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "grafana_session",
              "value": "864898f71c8f620156ca76259f147953",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 802,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"68f-175e157092a\""
            },
            {
              "name": "Content-Type",
              "value": "image/png"
            },
            {
              "name": "Content-Length",
              "value": "1679"
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:16 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1679,
            "mimeType": "image/png",
            "compression": 0,
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 256,
          "bodySize": 1679,
          "_transferSize": 1935,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:16.800Z",
        "time": 3.4319999999752326,
        "timings": {
          "blocked": 1.4389999997438572,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.10599999999999998,
          "wait": 1.165000000007887,
          "receive": 0.7220000002234883,
          "_blocked_queueing": 0.9569999997438572
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "14",
                "url": "http://localhost:8000/reload/reload.js",
                "lineNumber": 411,
                "columnNumber": 22
              }
            ],
            "parent": {
              "description": "setTimeout",
              "callFrames": [
                {
                  "functionName": "websocketWaiter",
                  "scriptId": "14",
                  "url": "http://localhost:8000/reload/reload.js",
                  "lineNumber": 410,
                  "columnNumber": 4
                },
                {
                  "functionName": "",
                  "scriptId": "14",
                  "url": "http://localhost:8000/reload/reload.js",
                  "lineNumber": 430,
                  "columnNumber": 4
                }
              ],
              "parent": {
                "description": "load",
                "callFrames": [
                  {
                    "functionName": "refresh",
                    "scriptId": "14",
                    "url": "http://localhost:8000/reload/reload.js",
                    "lineNumber": 426,
                    "columnNumber": 9
                  },
                  {
                    "functionName": "",
                    "scriptId": "14",
                    "url": "http://localhost:8000/reload/reload.js",
                    "lineNumber": 432,
                    "columnNumber": 2
                  }
                ]
              }
            }
          }
        },
        "_priority": null,
        "_resourceType": "websocket",
        "_webSocketMessages": [
          {
            "type": "receive",
            "time": 1606038017.250496,
            "opcode": 1,
            "data": "{\"action\":\"watching\"}"
          }
        ],
        "cache": {},
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "ws://localhost:8000/",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Origin",
              "value": "http://localhost:8000"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Sec-WebSocket-Key",
              "value": "TeQlPj//W8naTqnjWnBLUA=="
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            },
            {
              "name": "Sec-WebSocket-Extensions",
              "value": "permessage-deflate; client_max_window_bits"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"; grafana_session=864898f71c8f620156ca76259f147953"
            },
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Version",
              "value": "13"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "grafana_session",
              "value": "864898f71c8f620156ca76259f147953",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 811,
          "bodySize": 0
        },
        "response": {
          "status": 101,
          "statusText": "Switching Protocols",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Accept",
              "value": "ncUCRjux2ax4FVCIc3UxE/t1Pvk="
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": 129
          },
          "redirectURL": "",
          "headersSize": 129,
          "bodySize": -129,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2020-11-22T09:40:17.249Z",
        "time": 1.4250000003812602,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.4250000003812602,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/"
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "22145",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/assets/carousel/2.jpg",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"22663-175e1570922\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"; grafana_session=864898f71c8f620156ca76259f147953"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "grafana_session",
              "value": "864898f71c8f620156ca76259f147953",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 836,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"22663-175e1570922\""
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:21 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 140899,
            "mimeType": "text/plain",
            "text": "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xooooooooorauivkl5CFst0IXlMfs7LLLLEXvZe1+VkjyintZilYu5X4tZZZZZZZZZZZfsqKKKKKKKKK+DfkXte99THsheQhC6VsvKY/KvrssssssTLLL6r8nUfZJPsJkMndSF3/ABOyyyyyyyyyy/ZUUUUUUUUUVvXyz3QhdSEL2b8y+myyyyxbWX7DNDnj/iouxCQpSSxZiMr/AA+yyyyyyyyyyyy/Pooooooooooor5tjEIQtq6EIXWvOY+iyy/NXkX1IbFsttXjqcHQmRkt45WlDNajK0nf4VZZZZZZZZZZZZZfm0UUUUUUUUUV8i/OeyEIW7Hstl1rzWMYxj6bLLLLL3Xk35CJK1DZbZoc8crU7IZDkKRZGXFvJJGDN90ZKS/BL3sssssssssssssvzKKKKKKKKKKK+TY+h+WhCFux7IXkLzWMYxj6rLLL6r89CPRxFv9QxcZSu7ojkPEIZiOYhk7fxemzuBiyLJH8BsssssssssssssssssvzKKKKKK2r5d+ShdaEIWzHsvJQvMe7GMY+qyy9r6rLL610ImiIhbZILJDNjcMj2b2UiGVmPOOJoJ0/mbL2ssssssssssssssvayyyyy/JSEiihIraivwRdSEIiLZ+8YxjH0vdexXT/SdNC3+oYuUGf2+hMx55UmYJ88XzFlllllllllll7WWWWWWX0WWX00JCQkUUJfhK6kIREXvGMYxj6Hs9q9xNGP0W/qtdg8Kb2YtkIwZOEtBl5R+Ussssssssssssvpveyyyyyy+lCQkJFCQl+JIQhC96x7vroraiitq81bIW6+1i3z41lx6jG4TRL12W0PXR3j1PyVlllllllll7X035Flll9FFCQkJCRRW1fhKF1oQtl71jGMfVRRRRRXl11romiEtlv9Q06yQ9HL12QyHqpMxO4fGXtZZZZZZZZZZftULZISEhISKK/DF5CFuhe7YxjH1UUUV1VtRRXTXl+krF0fUNLxlL1RQvWZExpyWitY/ib3ssssssssv3K2SEhISKEL8NXkIQtkLoe69q9mPeiiumitqK2or2UvRMQt5x5R12Dw5443J0N95CMEqNHLt8PZZZZZZZZZfua2ooSEhIS2WyF+GIXkIXQuh9C9kxj8utqKK6aK3rz5dnCRFi31uFZYL7Hke0hGHu8CcEu6+Cvayyyyyyxv29eRRQlshCFs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lRCAIfsn4tHIVe4E+FTRXB6jcacsYLwyG/QA4TI1fwparsr3Fp5vKpqrDE7cRnSnUZjWj9IkA7dcua2eQp3klRi0wu1sKcE43UqMljvVFr5cZF4D2UKd14UqaXy9FpbCkKcEaY5WuVCndRqU3vtbZUZc7osP0Sd439of76ZT/wB/8/8ArLR/f9p/f6P/ALET/8QAKhABAQEAAgICAgICAwEBAQEBAQARECEgMTBBQFFQYWBxgZGhscHR4fH/2gAIAQAAAT8h8l8GfAs8BkFkPCEeYZmZORmZ9+REEcbbbbEGG222GGG3k2222222223hsnQwHpemaT/5djofU/pnALLILIIILLLLP4Ijwfydt422222222222W2YxjGMYxrFlt+HOMssjgOAhyDgzhllnDLLLLLLLLLLLLLLOMsssssskkkkknh4eNttl4Z5ZmW2OBZZJyQhBCI8AeDMzMITNlllngRbbbLbbbEOQRRNt5N4bbbbbbbwNoF9OeupVL/5+yB/T/2/1I9unhkEEEEEFln4jPzkfC/HttttttttttttttttttsvBjGMYxjGMZstvw5BZZZZyEPEBwZZZZZZZZZZZZZZZZZZZZZZZZxnGeKTCSSfJvDbeGxy8BHAwQWSWcBCEIILIOB4mZsmeA4yzjLJthibbbb1wvKcBDxA22223htttsMcEckYPe2vRjPv1ZJn/ZfYOP2/U4492BpBBBBB+Q/MfG/DtttttttttttttttttttvIxjGMYxjFll+LILLLOBCEOA8ACzhlllllllllllllllllnGcZ8bMkkkknDMW8bw8EcPBiEIWWWcZwHAiOSI4eWZmZISTw2yzMNtvDbbZfAkIoeTbbbbbYbbbbYiIiyfrsn2uoUn1LuawI56N6t6/+uBkEfkPznz747bbbbbbbbbbbbbLLbyPAxjGMYxjNtt+HILOQ4CEIeIMsssgssssssssssssssssss/BZJJJJmfHbeCOHxEwsmJNngCIjg4EWWSTM8MkkkODbLMYQerbbbbbZbbYjlvG2228Nt53hhLY4EuT24RfaE17J9jOb2h+z0wkmj273kX7SPb0weiP8QeT8O22222222222222y22y+IMY8DGMY8G222+OWWWcCFIQhwHIyyyyyyCyyyyyyyyyyyyyyz8dJmSEzystsRHieB4mCSHAhBCCOCI4EcszPLPkBSyw9w+QGbDwIi3gbZeG2ww2xHgGcCyB/pD6bGc9/wDdm9wfe+7FMsZp/wD8nRPX2QJ9nqEYu8It43+CPgeF8Nt4222222222222223hsvI8DGMYxjHkbbbbbycBBwKQhDxATLLLLLLLLLLLLLLLLLLLLLPxHySSSEJJ4UvBERwzMO+J4hJCEHIEFlnByGOFmZ8GfEBCZ5XkOLeAi2JttttsttvGwxEQvThWnAiwhh6zpMmM9Cxff+4H3l6Y9fqRFXf/AJf82EYr/Ga8NvG22222222222222w2zwPIYxjHgeBjwPBttttvJEEEQh4BkTLLIILLLLLLLLLLLLOMs4z89mEklssz74PIZjw4khCzgRHkpQ28s+DPBJIcBCHLMvApBiDbwNvgF4OTgRHDsHwBfeR6mB17yPbHXALOfcD7u7vsekfuwO9/+YlcD+/4xtlttttttttttt5N8QeB4GPAx5GzGPgG2228FkHIEOAQOTLLLLLLLLLLLLLLLLLLOM/hEmSTweCPE+bGElkckeO9wwxxvDPgzMwh4hmXgtsoYYbYbbefrje4jgOBERJs7lyEcOn24Hq+mL1ZRkei+36f/ABv2Cn8Tssy2222222y2222+QDgYxjwbMeBjGM2WWeRtsQR4ACHACCCyCyyyyyyyyyyyyyyyyyyz+HZJJnkiPA+AeMZmPfBEMeJENssttts8vBSlyMzwThnAILILLIIPHIiIIIiIi+8ls6uRwgh6NqY+whjHccvbmr1r9hH9z6f6/P23xONtttllltllltllngeBj4ARjwbbbbwWXg8DGMZtsMQ8ADkAQQQQQQWWWWWWWWWWWWWWWWcZ/Eszw8kRF9+BDwD4eHwI8WIbbZtnyZ5Fl4MzM2RwBEIQOGc5xlkEEEEHA5CTS/4Numk4iVF39MWGZd+A93o47jKYF69v9x+ZvhtvBxttttssssssstvkBjXmDw2223gtttvCyzGMZsQRDxABCBECCCCCCCyyyyyyzwyyz+OZtl5OI8jwBKOGfAYfBtthh8HyZ8gMzwkQ5ZCZZZZZZZZZZECCCCDkWw2h1N6b1KOEPWWK8Ee5ve97sYHZ0dDfb3X4K87bbxvG8bbbbbbFtttsttssssxZjGMYxjGvBtsNtvC228bxsyzMtvAhB5AAQgQQQQQQQQWWWWcZZxllln8i8LDwcDk5zkOS4eG22IYtttliPHPFnxFTw2WRwEIFlllkTPAZZBZwCCyDgYbbY9SUFJdwxezu6K/a997dXtGexf29RPtb98H4L4bxttttttttttsW2222y28FlmMYxjGMZtttvBxvgz4bM2SSSQRg8QAghBBBBBBBBBZZZxnGWcZZ/KPBwcDk5PAHJ9eB5HkRHm8MyynzwmWQWRwZHBnJllkEEFkEEEtvAw8EdnfdjZxETQSjpfVln1wdi9S9Jn02r+2Z8++W22222222222w222yy2zGMYxjGMYtttvhvBFvLM+AWWWTE8wACEEIQQQQQQQQQcZxlln82eJtvhvIcErfC8HmIiI8mZSlLLslkFllllkQI5AWWWcGZZwCCyzjZY5GGG+o3j7t3wKf3EPN9dsOj9W3oTM+7qh2sKR4PxbbbbxvG222222222222222228N4MYxjHgLLbbxv4GcMgsskks8ACEIQghBBBBBBBBBZB/gByNssMW8HKRENvheDzER47My+AU85ZZBZZBEOALLILLLOGWQQWeDMeO8D7kPZziJNMZlHphkd3vel1R/uF/w2RvhttttttttttttttttttttttttttvAeRjGMYxjFln5TyCyzkyyyyyyyzgEIQhBBBBBBBEckfz2yhtljjeBxts5w8jDHJ4I8iI8mZZZcGznLIILOBAgssssggsss4ZZZ4Mz4jDwG0R06XREcFukJOkHW7KEXrK6w4/R6tX/AN8bzttttttttstttttttttviG+AOB4GMa8bwbb4vnvBxkFllllllllllkzLILIIQgggggggiCCLP8CIbZh8A2229znDbDDKJlMRHkR5bMsssszzkHA5BAs4SyyyyCyyyyyyzlmfMiPVhB6k2fVvD2ZfvFfd6LM/3OZvVp+gW86tfq2222222222222222223gvxAA8QMY8jbbbbfB8M8AgiHBllnGWWWWSWWcgQQQQhCCCCIIIIj/Atjl9ckeVQ22xKGWXgiLPEjw2WWWUstvCWWRCEJnALOcgsgiEyyyyfFmeNt5OBw37h1xH3IefXC593Tv8A1NjYiYd5gD1bPg9tttltttttttltttt4bwYx8AY14zwFjHwDbbbbfHIOGWWRCBBBZZZZB45ZJHIIQOAQgggiII5P8CIYjhmOWeAYbbZcB4yyCyDyPDbZjGKXgizgQmQW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Ii3kpy4lKdk5y5GHwBapCHIW23g8CzhlkllnJxttviD4Ce3gWWWWWZ5zwfA43wIYi2GGIbbbbbYth42223x23kjjbbeNttmeNttltt+Uthh49uH1d7JXS2zZrajGaXpZZPBkHB0eUMkF65deK23hni8WT1ySjaR7h+4ogXZK77Fnw+Xps7dsGLviP7rbkBmZllllttthhtththtj4NiIbfFfBylrOfFzJw6I43T3yPRHFIcZSvAMckRHDwzztsvwAnwXsWXhfjfHeC2OdtjghjneN8dtttttt4222G22222223nfDbbbeN4ON+Lbbed9T7lzJCNTOHXgfAMg4Zw99n45LEscsyJbbeNtmeHvkfRPgLIsuvjcWCP72n3G+AHN/wB7Xhd3RHdh92vNLhmZtmW222LeDg4HkjyG234GO9r3lzllkeuIRnwxOAcZDgIhhthhiG2XjbbbbZjGta+APgpeLZZ+B+Q8RjgjzONttt4222223gbYttttttnjfB4223w223jeDy23wbseLTkNvPEfCGBC+rvdt12L4ErEtQ7tC2W23hZlng71va3iN4srJ4Xpx633xb8P0852z1tbpnMK3ZxvTxO2Zll4Z5GGIhiIY4Ih523wODwHpxN7+Sh3w9Y+EmHg35gYY5CcBBhhhjkMYvI8V4jGMee8DunmNtnhn4H5hiIht43hvBbbxttttvOw8bHG28bbbbM+exbHjsWwx5+krM8kvvxd55oxLJLIn1MdWflC3XosC0ONtltllmUp8HwK4x38LuG2eDo5V1anpPE5i9bJujmhllmZl8Nhhthhi2Hq22G223wIjgniPH2cBxHIIcyRtWHLlK04JSkO8U8Ttax4WPFYx5bwPAdzBlb8j4nyENtttvGww2228bbbxsNvGwxycbHO874vG2+JHBDbbbPPWMXXwaS7HDuj1GvCQk4eTwnJQx5YlYl67FyZlttl4HKffBylxV63pOfd14F5gibS1wbDOwtTw82ZZnlm22GGGGGG22GLfLYYbbb0vbyEZCF68lyGNk6ikGQ5FPgEoeIWNa15735V8Ja8wUhB+Rn4j5N4ONtlttttt43jfAjnfwNtt8zw23hYTm1u/wAKO48RJwGEl98nHahwt+FRw8DK1HdtnducNmZ4UpS0vbwxS8Q8RmffGxwbd56eCecw0Oa2ZZ422eN4GIiG2G3g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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 221,
          "bodySize": 0,
          "_transferSize": 221,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:21.733Z",
        "time": 2.725999999711348,
        "timings": {
          "blocked": 1.3279999997890846,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.05999999999999994,
          "wait": 0.794999999815278,
          "receive": 0.5430000001069857,
          "_blocked_queueing": 0.8039999997890845
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/"
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "22267",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/assets/carousel/3.jpg",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"; grafana_session=864898f71c8f620156ca76259f147953"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"443d8-175e1570922\""
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "grafana_session",
              "value": "864898f71c8f620156ca76259f147953",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 836,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:27 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"443d8-175e1570922\""
            },
            {
              "name": "Content-Type",
              "value": "image/jpeg"
            },
            {
              "name": "Content-Length",
              "value": "279512"
            }
          ],
          "cookies": [],
          "content": {
            "size": 279512,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 237,
          "bodySize": 0,
          "_transferSize": 221,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:27.737Z",
        "time": 3.779999999803986,
        "timings": {
          "blocked": 1.5890000000418514,
          "dns": 0.010000000000000009,
          "ssl": -1,
          "connect": 0.14300000000000002,
          "send": 0.135,
          "wait": 0.7180000001391745,
          "receive": 1.1849999996229599,
          "_blocked_queueing": 0.8840000000418513
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/"
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "22295",
        "pageref": "page_5",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/assets/carousel/4.jpg",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"; grafana_session=864898f71c8f620156ca76259f147953"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"35c11-175e1570926\""
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "grafana_session",
              "value": "864898f71c8f620156ca76259f147953",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 836,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "Date",
              "value": "Sun, 22 Nov 2020 09:40:33 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"35c11-175e1570926\""
            },
            {
              "name": "Content-Type",
              "value": "image/jpeg"
            },
            {
              "name": "Content-Length",
              "value": "220177"
            }
          ],
          "cookies": [],
          "content": {
            "size": 220177,
            "mimeType": "image/jpeg",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 237,
          "bodySize": 0,
          "_transferSize": 221,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-22T09:40:33.740Z",
        "time": 3.1779999997322737,
        "timings": {
          "blocked": 1.4370000000216532,
          "dns": 0.010000000000000009,
          "ssl": -1,
          "connect": 0.1519999999999999,
          "send": 0.14200000000000002,
          "wait": 0.6740000001590816,
          "receive": 0.7629999995515391,
          "_blocked_queueing": 0.8920000000216532
        }
      }
    ]
  }
}