{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2020-11-19T18:05:03.195Z",
        "id": "page_12",
        "title": "http://localhost:8000/",
        "pageTimings": {
          "onContentLoad": 59.0249999995649,
          "onLoad": 69.05599999936385
        }
      }
    ],
    "entries": [
      {
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "54815",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=0"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "none"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-User",
              "value": "?1"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 802,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Type",
              "value": "text/html"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "2742"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2742,
            "mimeType": "text/html",
            "compression": 0,
            "text": "\n<!DOCTYPE html>\n<html>\n  \n<head>\n\n<!-- Inserted by Reload -->\n<script src=\"/reload/reload.js\"></script>\n<!-- End Reload -->\n\n\n    <meta charset=\"UTF-8\">\n    <link rel=\"stylesheet\"href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"assets/favicon/favicon-32x32.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"assets/favicon/favicon-96x96.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"assets/favicon/favicon-16x16.png\">\n    <script type=\"text/javascript\" src=\"/elm.js\"></script>\n    <style>\n      .preview:hover{\n        text-decoration: none;\n        opacity: 0.7\n      }\n      .previewAvatar{\n        object-fit: cover;\n      }\n      .image{\n        box-shadow: inset 0 7px 9px -7px rgba(0,0,0,0.7);\n        box-shadow: inset 0 -7px 9px -7px rgba(0,0,0,0.7);\n      }\n      .social:hover{\n        opacity: 0.7;\n        transform: translateY(-5px);\n      }\n      .avatar{\n        object-fit: cover;\n      }\n      .avatar:hover{\n        cursor: pointer;\n        opacity: 0.7;\n      }\n      .body{\n        min-height: 1000px;\n        padding-top: 100px;\n        text-align: center;\n        color: black;\n      }\n      .carousel{\n        position: relative;\n        top: 30%;\n      }\n      .footer {\n        border-top: 1px solid lightgrey\n      }\n      .nav{\n        display:inline-block;\n        font-size:15px;\n        cursor: pointer;\n        padding:5px 5px;\n        text-decoration:none;\n      }\n      .dot {\n        height: 15px;\n        width: 15px;\n        border: 0.5px solid lightgrey;\n        border-color: #bbb;\n        border-radius: 50%;\n        display: inline-block;\n      }\n    </style>\n  </head>\n  <body>\n      <script>\n        //the following part is focused on local storage manipulation through ports\n        var key = \"user\"\n        var flags = localStorage.getItem(key)\n        var app = Elm.Main.init({flags : flags});\n\n        app.ports.storeToken.subscribe(function(value){\n          if(value === null){\n            localStorage.removeItem(key)\n            sessionStorage.removeItem(\"queryState\")\n          }\n          else{\n            localStorage.setItem(key, value)\n          }\n        })\n\n        //trying saving query state using session storage...\n        app.ports.saveState.subscribe(value => {\n          if(value.query.length === 0){\n            sessionStorage.removeItem(\"queryState\")\n          }\n          else{\n            sessionStorage.setItem(\"queryState\", JSON.stringify(value))\n          }\n        })\n\n        app.ports.request.subscribe(() => {\n          app.ports.restoreState.send(JSON.parse(sessionStorage.getItem(\"queryState\")))   \n        })\n      </script>\n  </body>\n</html>\n\n"
          },
          "redirectURL": "",
          "headersSize": 127,
          "bodySize": 2742,
          "_transferSize": 2869,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.188Z",
        "time": 9.522000000288244,
        "timings": {
          "blocked": 6.650000000798202,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 1.74,
          "wait": 0.43000000012555395,
          "receive": 0.7019999993644888,
          "_blocked_queueing": 6.168000000798202
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/",
          "lineNumber": 7
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "54815",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/reload/reload.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 647,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Content-Type",
              "value": "text/javascript"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "13985"
            }
          ],
          "cookies": [],
          "content": {
            "size": 13985,
            "mimeType": "text/javascript",
            "compression": 0,
            "text": "\n// The following 20 lines are from https://github.com/klazuka/elm-hot/blob/master/test/client.js#L40\nvar myDisposeCallback = null\n\n// simulate the HMR api exposed by webpack\nvar module = {\n  hot: {\n    accept: function () {},\n\n    dispose: function (callback) {\n      myDisposeCallback = callback\n    },\n\n    data: null,\n\n    apply: function () {\n      var newData = {}\n      myDisposeCallback(newData)\n      module.hot.data = newData\n    }\n\n  }\n};\n\n(function refresh () {\n  const verboseLogging = false // This is dynamically update before it is sent to the browser\n  const reload = true // This is dynamically update by before it is sent to the browser\n\n  const socketUrl = window.location.origin.replace(/(^http(s?):\\/\\/)(.*)/, 'ws$2://$3')\n\n  if (verboseLogging) {\n    console.log('Reload Script Loaded')\n  }\n\n  if (!('WebSocket' in window)) {\n    throw new Error('Reload only works with browsers that support WebSockets')\n  }\n\n  /*\n  |-------------------------------------------------------------------------------\n  | Helpers\n  |-------------------------------------------------------------------------------\n  */\n\n  const pipe = (...fns) => x => fns.reduce((y, f) => f(y), x)\n\n  function colorConverter (color) {\n    return {\n      black: '#000000',\n      red: '#F77F00',\n      green: '#33ff00',\n      yellow: '#ffff00',\n      blue: '#99B1BC',\n      magenta: '#cc00ff',\n      cyan: '#00ffff',\n      white: '#d0d0d0',\n      BLACK: '#808080',\n      RED: '#ff0000',\n      GREEN: '#33ff00',\n      YELLOW: '#ffff00',\n      BLUE: '#0066ff',\n      MAGENTA: '#cc00ff',\n      CYAN: '#00ffff',\n      WHITE: '#ffffff',\n    }[color]\n  }\n\n\n  const addNewLine = str => str + '\\n'\n  const styleColor = (str = 'WHITE') => `color: ${colorConverter(str)};`\n  const styleUnderline = `text-decoration: underline;`\n  const styleBold = `text-decoration: bold;`\n  const parseStyle = ({ underline, color, bold }) => `${underline ? styleUnderline : ''}${color ? styleColor(color) : ''}${bold ? styleBold : ''}`\n\n  function capitalizeFirstLetter (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  function consoleSanitize (str) {\n    return str.replace(/<(http[^>]*)>/, '$1')\n  }\n\n  function htmlSanitize(str, type) {\n    var temp = document.createElement('div')\n    temp.textContent = str\n    return temp.innerHTML.replace(/&lt;(http[^>]*)&gt;/, \"&lt;<a style='color: inherit' target='_blank' href='$1'>$1</a>&gt;\")\n  }\n\n  const parseHeader = (title, path) => `-- ${title.replace('-', ' ')} --------------- ${path}`\n\n  /*\n  |-------------------------------------------------------------------------------\n  | Console Logging\n  |-------------------------------------------------------------------------------\n  */\n\n  const wrapConsole = str => `%c${str}`\n  const consoleHeader = pipe(parseHeader, wrapConsole, addNewLine, addNewLine)\n\n  const parseMsg = pipe(consoleSanitize, wrapConsole)\n  const consoleMsg = ({ error, style }, msg) => ({\n    error: error.concat(parseMsg(typeof msg === 'string' ? msg : msg.string)),\n    style: style.concat(parseStyle(typeof msg === 'string' ? { color: 'black' } : msg))\n  })\n\n  const joinMessage = ({ error, style }) => [error.join('')].concat(style)\n\n  const parseConsoleErrors = path =>\n    ({ title, message }) =>\n      joinMessage(message\n        .reduce(consoleMsg, {\n          error: [consoleHeader(title, path)],\n          style: [styleColor('blue')]\n        }))\n\n  const restoreColorConsole = ({ errors }) =>\n    errors.reduce((acc, { problems, path }) =>\n      acc.concat(problems.map(parseConsoleErrors(path))), [])\n\n  /*\n  |-------------------------------------------------------------------------------\n  | Html Logging\n  |-------------------------------------------------------------------------------\n  */\n\n  const htmlHeader = (title, path) => `<span style=\"${parseStyle({ color: 'blue' })}\">${parseHeader(title, path)}</span>\\n\\n`\n\n  const htmlMsg = (acc, msg) => `${acc}<span style=\"${parseStyle(typeof msg === 'string' ? { color: 'WHITE' } : msg)}\">${htmlSanitize(typeof msg === 'string' ? msg : msg.string)}</span>`\n\n  const parseHtmlErrors = (path) =>\n  ({ title, message }) =>\n    message.reduce(htmlMsg, htmlHeader(title, path))\n\n  const restoreColorHtml = ({ errors }) =>\n  errors.reduce((acc, { problems, path }) =>\n    acc.concat(problems.map(parseHtmlErrors(path))), [])\n\n  /*\n  |-------------------------------------------------------------------------------\n  | TODO: Refactor Below\n  |-------------------------------------------------------------------------------\n  */\n\n  var speed = 400\n  var delay = 20\n\n  function showError (error) {\n    restoreColorConsole(error).forEach((error) => {\n      console.log.apply(this, error)\n    })\n    hideCompiling('fast')\n    setTimeout(function () {\n      showError_(restoreColorHtml(error))\n    }, delay)\n  }\n\n  function showError_ (error) {\n    var nodeContainer = document.getElementById('elm-live:elmErrorContainer')\n\n    if (!nodeContainer) {\n      nodeContainer = document.createElement('div')\n      nodeContainer.id = 'elm-live:elmErrorContainer'\n      document.body.appendChild(nodeContainer)\n    }\n\n    nodeContainer.innerHTML = `\n<div\n  id=\"elm-live:elmErrorBackground\"\n  style=\"\n    z-index: 100;\n    perspective: 500px;\n    transition: opacity 400ms;\n    position: fixed;\n    top: 0;\n    left: 0;\n    background-color: rgba(13,31,45,0.2);\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content:center;\n    align-items: center;\n  \"\n>\n  <div\n    onclick=\"elmLive.hideError()\"\n    style=\"\n      background-color: rgba(0,0,0,0);\n      position: fixed;\n      top:0;\n      left:0;\n      bottom:0;\n      right:0\n    \"\n  ></div>\n  <pre\n    id=\"elm-live:elmError\"\n    style=\"\n      transform: rotateX(0deg);\n      transition: transform 400ms;\n      transform-style: preserve-3d;\n      font-size: 16px;\n      overflow: scroll;\n      background-color: rgba(13, 31, 45, 0.9);\n      color: #ddd;\n      width: calc(100% - 150px);\n      height: calc(100% - 150px);\n      margin: 0;\n      padding: 30px;\n      font-family: 'Fira Mono', Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;\n    \"\n  >${error}</pre>\n</div>\n`\n\n    setTimeout(function () {\n      document.getElementById('elm-live:elmErrorBackground').style.opacity = 1\n      document.getElementById('elm-live:elmError').style.transform = 'rotateX(0deg)'\n    }, delay)\n  }\n\n  function hideError (velocity) {\n    var node = document.getElementById('elm-live:elmErrorContainer')\n    if (node) {\n      if (velocity === 'fast') {\n        document.getElementById('elm-live:elmErrorContainer').remove()\n      } else {\n        document.getElementById('elm-live:elmErrorBackground').style.opacity = 0\n        document.getElementById('elm-live:elmError').style.transform = 'rotateX(90deg)'\n        setTimeout(function () {\n          document.getElementById('elm-live:elmErrorContainer').remove()\n        }, speed)\n      }\n    }\n  }\n\n  function showCompiling (message) {\n    hideError('fast')\n    setTimeout(function () {\n      showCompiling_(message)\n    }, delay)\n  }\n\n  function showCompiling_ (message) {\n    var nodeContainer = document.getElementById('elm-live:elmCompilingContainer')\n\n    if (!nodeContainer) {\n      nodeContainer = document.createElement('div')\n      nodeContainer.id = 'elm-live:elmCompilingContainer'\n      document.body.appendChild(nodeContainer)\n    }\n\n    nodeContainer.innerHTML = `\n    <style>\n    #loading {\n      display: inline-block;\n      width: 70px;\n      height: 105px;\n      animation: spin 1s ease-out infinite;\n      transform-origin: center;\n    }\n\n    @keyframes spin {\n      0% { transform: rotate(0deg) }\n      30% { transform: rotate(360deg); }\n      100% { transform: rotate(360deg); }\n    }\n  </style>\n  <div\n    id=\"elm-live:elmCompilingBackground\"\n    style=\"\n      z-index: 100;\n      transition: opacity ${speed}ms;\n      opacity: 0;\n      position: fixed;\n      top: 0;\n      left: 0;\n      background-color: rgba(255,255,255,0.9);\n      width: 100%;\n      height: 100%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    \"\n  >\n    <div\n      onclick=\"elmLive.hideCompiling()\"\n      style=\"\n        background-color: rgba(0,0,0,0);\n        position: fixed;\n        top:0;\n        left:0;\n        bottom:0;\n        right:0;\n      \"\n    ></div>\n    <div id=\"loading\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 313.81 460\">\n        <path fill=\"#f77f00\" d=\"M290.55,192.55a5.29,5.29,0,0,1-.46,4L150.24,457.13a5.27,5.27,0,0,1-2.09,2.17l-.55-1.19V292a5.43,5.43,0,0,0-6.83-5.26L88.85,300.68l-29.8,8a4.32,4.32,0,0,1-1.68.16l.05-.59L198.74,43.63l1.14-.22a4.42,4.42,0,0,1,.11,1V209.63a5.43,5.43,0,0,0,6.83,5.23l82.27-22Z\"/>\n        <path fill=\"#ffa01c\" d=\"M290.55,192.55l-1.46.27-82.27,22a5.43,5.43,0,0,1-6.83-5.23V167.06l31.73-8.49a5.36,5.36,0,0,1,4.12.54L288,189.24A5.36,5.36,0,0,1,290.55,192.55Z\"/>\n        <path fill=\"#ef6300\" d=\"M199.88,43.41l-1.14.22L57.42,308.25l-.05.59a5.26,5.26,0,0,1-2.44-.7L2.7,278a5.42,5.42,0,0,1-2.06-7.24l138-258.38a5.42,5.42,0,0,1,7.51-2.14l51.14,29.52A5.42,5.42,0,0,1,199.88,43.41Z\"/>\n        <path fill=\"#ef6300\" d=\"M147.6,458.11l.55,1.19a5.45,5.45,0,0,1-5.4,0L91.61,429.75a5.44,5.44,0,0,1-2.71-4.69V300.84l-.05-.16,51.92-13.91A5.43,5.43,0,0,1,147.6,292Z\"/>\n        <path fill=\"#0d1f2d\" d=\"M309.05,180.3l-52.21-30.14a9.39,9.39,0,0,0-7.2-.95L223,156.34V39a9.53,9.53,0,0,0-4.74-8.22L167.15,1.28A9.49,9.49,0,0,0,154,5L16,263.4a9.46,9.46,0,0,0,3.63,12.69l52.22,30.15a9.37,9.37,0,0,0,7.19.95l24.74-6.63V419.62a9.52,9.52,0,0,0,4.75,8.22l51.15,29.53a9.48,9.48,0,0,0,13.1-3.73L312.67,193A9.44,9.44,0,0,0,309.05,180.3Zm-57.3-23.23a1.37,1.37,0,0,1,1,.13L301,185.06l-76.29,20.45a1.34,1.34,0,0,1-1.18-.24,1.31,1.31,0,0,1-.53-1.07V164.76Zm-228,112a1.35,1.35,0,0,1-.52-1.82l138-258.37a1.35,1.35,0,0,1,1.87-.54l50.44,29.13L74.25,298.21ZM112.62,420.8a1.36,1.36,0,0,1-.68-1.18V298.38l48.87-13.09a1.31,1.31,0,0,1,1.18.23,1.35,1.35,0,0,1,.53,1.08v163Zm58,19.67V286.6a9.49,9.49,0,0,0-12-9.17l-51.92,13.91-22.92,6.14,131-245.34V204.2a9.5,9.5,0,0,0,9.46,9.49,9.55,9.55,0,0,0,2.48-.33l76.7-20.55Z\"/>\n      </svg>\n    </div>\n    <div\n      style=\"\n        text-align: center;\n        color: #0D1F2D;\n        padding: 30px;\n        font-size: 24px;\n        font-weight: bold;\n        font-family: 'Fira Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n      \"\n    >${message}</div>\n  </div>\n`\n    setTimeout(function () {\n      document.getElementById('elm-live:elmCompilingBackground').style.opacity = 1\n    }, delay)\n  }\n\n  function hideCompiling (velocity) {\n    const node = document.getElementById('elm-live:elmCompilingContainer')\n    if (node) {\n      if (velocity === 'fast') {\n        node.remove()\n      } else {\n        document.getElementById('elm-live:elmCompilingBackground').style.opacity = 0\n        setTimeout(function () {\n          node.remove()\n        }, speed)\n      }\n    }\n  }\n\n  // Check to see if the server sent us reload (meaning a manually reload event was fired) and then reloads the page\n  var socketOnMessage = function (msg) {\n    var parsedData\n    try {\n      parsedData = JSON.parse(msg.data)\n    } catch (e) {\n      parsedData = ''\n      if (verboseLogging) {\n        console.log('Error parsing', msg.data)\n      }\n    }\n\n    if (parsedData.action === 'failure') {\n      // Displaying the Elm compiler error in the console\n      // and in the browsers\n      hideCompiling()\n      showError(parsedData.data)\n    } else if (reload && parsedData.action === 'hotReload') {\n      hideCompiling()\n      if (verboseLogging) {\n        console.log('Hot Reload', parsedData.url)\n      }\n      // The following 13 lines are from https://github.com/klazuka/elm-hot/blob/master/test/client.js#L22\n      var myRequest = new Request(parsedData.url)\n      myRequest.cache = 'no-cache'\n      fetch(myRequest).then(function (response) {\n        if (response.ok) {\n          response.text().then(function (value) {\n            module.hot.apply()\n            delete Elm;\n            eval(value)\n          })\n        } else {\n          console.error('HMR fetch failed:', response.status, response.statusText)\n        }\n      })\n    } else if (reload && parsedData.action === 'coldReload') {\n      hideCompiling()\n      window.location.reload()\n    } else if (reload && parsedData.action === 'compiling') {\n      showCompiling(parsedData.message)\n    } else {\n      hideCompiling()\n      hideError()\n    }\n  }\n\n  var socketOnOpen = function (msg) {\n    if (verboseLogging) {\n      console.log('Socket Opened')\n    }\n  }\n\n  // Socket on close event that sets flags and calls the webSocketWaiter function\n  var socketOnClose = function () {\n    if (verboseLogging) {\n      console.log('Socket Closed - Calling webSocketWaiter')\n    }\n\n    // Call the webSocketWaiter function so that we can open a new socket and set the event handlers\n    websocketWaiter()\n  }\n\n  var socketOnError = function (msg) {\n    if (verboseLogging) {\n      console.log(msg)\n    }\n  }\n\n  // Function that opens a new socket and sets the event handlers for the socket\n  function websocketWaiter () {\n    if (verboseLogging) {\n      console.log('Waiting for socket')\n    }\n    setTimeout(function () {\n       const socket = new WebSocket(socketUrl);\n\n      socket.onopen = socketOnOpen\n      socket.onclose = socketOnClose\n      socket.onmessage = socketOnMessage\n      socket.onerror = socketOnError\n    }, 500)\n\n    window.elmLive = {\n      hideError: hideError,\n      hideCompiling: hideCompiling\n    }\n  }\n\n  // Wait until the page loads for the first time and then call the webSocketWaiter function so that we can connect the socket for the first time\n  window.addEventListener('load', function () {\n    if (verboseLogging === true) {\n      console.log('Page Loaded - Calling webSocketWaiter')\n    }\n    websocketWaiter()\n  })\n})()\n"
          },
          "redirectURL": "",
          "headersSize": 134,
          "bodySize": 13985,
          "_transferSize": 14119,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.213Z",
        "time": 5.051999999523105,
        "timings": {
          "blocked": 2.9529999992205993,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.08299999999999996,
          "wait": 1.3760000000993604,
          "receive": 0.6400000002031447,
          "_blocked_queueing": 2.3349999992205994
        }
      },
      {
        "_fromCache": "memory",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/",
          "lineNumber": 12
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Thu, 19 Nov 2020 16:54:16 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "last-modified",
              "value": "Wed, 12 Dec 2018 18:34:07 GMT"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "etag",
              "value": "\"1544639647\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "content-type",
              "value": "text/css; charset=utf-8"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "content-length",
              "value": "19740"
            }
          ],
          "cookies": [],
          "content": {
            "size": 121200,
            "mimeType": "text/css",
            "text": "/*!\n * Bootstrap v3.3.7 (http://getbootstrap.com)\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{margin:.67em 0;font-size:2em}mark{color:#000;background:#ff0}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{height:0;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{margin:0;font:inherit;color:inherit}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}input{line-height:normal}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{padding:.35em .625em .75em;margin:0 2px;border:1px solid silver}legend{padding:0;border:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-spacing:0;border-collapse:collapse}td,th{padding:0}/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */@media print{*,:after,:before{color:#000!important;text-shadow:none!important;background:0 0!important;-webkit-box-shadow:none!important;box-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:\" (\" attr(href) \")\"}abbr[title]:after{content:\" (\" attr(title) \")\"}a[href^=\"javascript:\"]:after,a[href^=\"#\"]:after{content:\"\"}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}.navbar{display:none}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}.label{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}}@font-face{font-family:'Glyphicons Halflings';src:url(../fonts/glyphicons-halflings-regular.eot);src:url(../fonts/glyphicons-halflings-regular.eot?#iefix) format('embedded-opentype'),url(../fonts/glyphicons-halflings-regular.woff2) format('woff2'),url(../fonts/glyphicons-halflings-regular.woff) format('woff'),url(../fonts/glyphicons-halflings-regular.ttf) format('truetype'),url(../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular) format('svg')}.glyphicon{position:relative;top:1px;display:inline-block;font-family:'Glyphicons Halflings';font-style:normal;font-weight:400;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.glyphicon-asterisk:before{content:\"\\002a\"}.glyphicon-plus:before{content:\"\\002b\"}.glyphicon-eur:before,.glyphicon-euro:before{content:\"\\20ac\"}.glyphicon-minus:before{content:\"\\2212\"}.glyphicon-cloud:before{content:\"\\2601\"}.glyphicon-envelope:before{content:\"\\2709\"}.glyphicon-pencil:before{content:\"\\270f\"}.glyphicon-glass:before{content:\"\\e001\"}.glyphicon-music:before{content:\"\\e002\"}.glyphicon-search:before{content:\"\\e003\"}.glyphicon-heart:before{content:\"\\e005\"}.glyphicon-star:before{content:\"\\e006\"}.glyphicon-star-empty:before{content:\"\\e007\"}.glyphicon-user:before{content:\"\\e008\"}.glyphicon-film:before{content:\"\\e009\"}.glyphicon-th-large:before{content:\"\\e010\"}.glyphicon-th:before{content:\"\\e011\"}.glyphicon-th-list:before{content:\"\\e012\"}.glyphicon-ok:before{content:\"\\e013\"}.glyphicon-remove:before{content:\"\\e014\"}.glyphicon-zoom-in:before{content:\"\\e015\"}.glyphicon-zoom-out:before{content:\"\\e016\"}.glyphicon-off:before{content:\"\\e017\"}.glyphicon-signal:before{content:\"\\e018\"}.glyphicon-cog:before{content:\"\\e019\"}.glyphicon-trash:before{content:\"\\e020\"}.glyphicon-home:before{content:\"\\e021\"}.glyphicon-file:before{content:\"\\e022\"}.glyphicon-time:before{content:\"\\e023\"}.glyphicon-road:before{content:\"\\e024\"}.glyphicon-download-alt:before{content:\"\\e025\"}.glyphicon-download:before{content:\"\\e026\"}.glyphicon-upload:before{content:\"\\e027\"}.glyphicon-inbox:before{content:\"\\e028\"}.glyphicon-play-circle:before{content:\"\\e029\"}.glyphicon-repeat:before{content:\"\\e030\"}.glyphicon-refresh:before{content:\"\\e031\"}.glyphicon-list-alt:before{content:\"\\e032\"}.glyphicon-lock:before{content:\"\\e033\"}.glyphicon-flag:before{content:\"\\e034\"}.glyphicon-headphones:before{content:\"\\e035\"}.glyphicon-volume-off:before{content:\"\\e036\"}.glyphicon-volume-down:before{content:\"\\e037\"}.glyphicon-volume-up:before{content:\"\\e038\"}.glyphicon-qrcode:before{content:\"\\e039\"}.glyphicon-barcode:before{content:\"\\e040\"}.glyphicon-tag:before{content:\"\\e041\"}.glyphicon-tags:before{content:\"\\e042\"}.glyphicon-book:before{content:\"\\e043\"}.glyphicon-bookmark:before{content:\"\\e044\"}.glyphicon-print:before{content:\"\\e045\"}.glyphicon-camera:before{content:\"\\e046\"}.glyphicon-font:before{content:\"\\e047\"}.glyphicon-bold:before{content:\"\\e048\"}.glyphicon-italic:before{content:\"\\e049\"}.glyphicon-text-height:before{content:\"\\e050\"}.glyphicon-text-width:before{content:\"\\e051\"}.glyphicon-align-left:before{content:\"\\e052\"}.glyphicon-align-center:before{content:\"\\e053\"}.glyphicon-align-right:before{content:\"\\e054\"}.glyphicon-align-justify:before{content:\"\\e055\"}.glyphicon-list:before{content:\"\\e056\"}.glyphicon-indent-left:before{content:\"\\e057\"}.glyphicon-indent-right:before{content:\"\\e058\"}.glyphicon-facetime-video:before{content:\"\\e059\"}.glyphicon-picture:before{content:\"\\e060\"}.glyphicon-map-marker:before{content:\"\\e062\"}.glyphicon-adjust:before{content:\"\\e063\"}.glyphicon-tint:before{content:\"\\e064\"}.glyphicon-edit:before{content:\"\\e065\"}.glyphicon-share:before{content:\"\\e066\"}.glyphicon-check:before{content:\"\\e067\"}.glyphicon-move:before{content:\"\\e068\"}.glyphicon-step-backward:before{content:\"\\e069\"}.glyphicon-fast-backward:before{content:\"\\e070\"}.glyphicon-backward:before{content:\"\\e071\"}.glyphicon-play:before{content:\"\\e072\"}.glyphicon-pause:before{content:\"\\e073\"}.glyphicon-stop:before{content:\"\\e074\"}.glyphicon-forward:before{content:\"\\e075\"}.glyphicon-fast-forward:before{content:\"\\e076\"}.glyphicon-step-forward:before{content:\"\\e077\"}.glyphicon-eject:before{content:\"\\e078\"}.glyphicon-chevron-left:before{content:\"\\e079\"}.glyphicon-chevron-right:before{content:\"\\e080\"}.glyphicon-plus-sign:before{content:\"\\e081\"}.glyphicon-minus-sign:before{content:\"\\e082\"}.glyphicon-remove-sign:before{content:\"\\e083\"}.glyphicon-ok-sign:before{content:\"\\e084\"}.glyphicon-question-sign:before{content:\"\\e085\"}.glyphicon-info-sign:before{content:\"\\e086\"}.glyphicon-screenshot:before{content:\"\\e087\"}.glyphicon-remove-circle:before{content:\"\\e088\"}.glyphicon-ok-circle:before{content:\"\\e089\"}.glyphicon-ban-circle:before{content:\"\\e090\"}.glyphicon-arrow-left:before{content:\"\\e091\"}.glyphicon-arrow-right:before{content:\"\\e092\"}.glyphicon-arrow-up:before{content:\"\\e093\"}.glyphicon-arrow-down:before{content:\"\\e094\"}.glyphicon-share-alt:before{content:\"\\e095\"}.glyphicon-resize-full:before{content:\"\\e096\"}.glyphicon-resize-small:before{content:\"\\e097\"}.glyphicon-exclamation-sign:before{content:\"\\e101\"}.glyphicon-gift:before{content:\"\\e102\"}.glyphicon-leaf:before{content:\"\\e103\"}.glyphicon-fire:before{content:\"\\e104\"}.glyphicon-eye-open:before{content:\"\\e105\"}.glyphicon-eye-close:before{content:\"\\e106\"}.glyphicon-warning-sign:before{content:\"\\e107\"}.glyphicon-plane:before{content:\"\\e108\"}.glyphicon-calendar:before{content:\"\\e109\"}.glyphicon-random:before{content:\"\\e110\"}.glyphicon-comment:before{content:\"\\e111\"}.glyphicon-magnet:before{content:\"\\e112\"}.glyphicon-chevron-up:before{content:\"\\e113\"}.glyphicon-chevron-down:before{content:\"\\e114\"}.glyphicon-retweet:before{content:\"\\e115\"}.glyphicon-shopping-cart:before{content:\"\\e116\"}.glyphicon-folder-close:before{content:\"\\e117\"}.glyphicon-folder-open:before{content:\"\\e118\"}.glyphicon-resize-vertical:before{content:\"\\e119\"}.glyphicon-resize-horizontal:before{content:\"\\e120\"}.glyphicon-hdd:before{content:\"\\e121\"}.glyphicon-bullhorn:before{content:\"\\e122\"}.glyphicon-bell:before{content:\"\\e123\"}.glyphicon-certificate:before{content:\"\\e124\"}.glyphicon-thumbs-up:before{content:\"\\e125\"}.glyphicon-thumbs-down:before{content:\"\\e126\"}.glyphicon-hand-right:before{content:\"\\e127\"}.glyphicon-hand-left:before{content:\"\\e128\"}.glyphicon-hand-up:before{content:\"\\e129\"}.glyphicon-hand-down:before{content:\"\\e130\"}.glyphicon-circle-arrow-right:before{content:\"\\e131\"}.glyphicon-circle-arrow-left:before{content:\"\\e132\"}.glyphicon-circle-arrow-up:before{content:\"\\e133\"}.glyphicon-circle-arrow-down:before{content:\"\\e134\"}.glyphicon-globe:before{content:\"\\e135\"}.glyphicon-wrench:before{content:\"\\e136\"}.glyphicon-tasks:before{content:\"\\e137\"}.glyphicon-filter:before{content:\"\\e138\"}.glyphicon-briefcase:before{content:\"\\e139\"}.glyphicon-fullscreen:before{content:\"\\e140\"}.glyphicon-dashboard:before{content:\"\\e141\"}.glyphicon-paperclip:before{content:\"\\e142\"}.glyphicon-heart-empty:before{content:\"\\e143\"}.glyphicon-link:before{content:\"\\e144\"}.glyphicon-phone:before{content:\"\\e145\"}.glyphicon-pushpin:before{content:\"\\e146\"}.glyphicon-usd:before{content:\"\\e148\"}.glyphicon-gbp:before{content:\"\\e149\"}.glyphicon-sort:before{content:\"\\e150\"}.glyphicon-sort-by-alphabet:before{content:\"\\e151\"}.glyphicon-sort-by-alphabet-alt:before{content:\"\\e152\"}.glyphicon-sort-by-order:before{content:\"\\e153\"}.glyphicon-sort-by-order-alt:before{content:\"\\e154\"}.glyphicon-sort-by-attributes:before{content:\"\\e155\"}.glyphicon-sort-by-attributes-alt:before{content:\"\\e156\"}.glyphicon-unchecked:before{content:\"\\e157\"}.glyphicon-expand:before{content:\"\\e158\"}.glyphicon-collapse-down:before{content:\"\\e159\"}.glyphicon-collapse-up:before{content:\"\\e160\"}.glyphicon-log-in:before{content:\"\\e161\"}.glyphicon-flash:before{content:\"\\e162\"}.glyphicon-log-out:before{content:\"\\e163\"}.glyphicon-new-window:before{content:\"\\e164\"}.glyphicon-record:before{content:\"\\e165\"}.glyphicon-save:before{content:\"\\e166\"}.glyphicon-open:before{content:\"\\e167\"}.glyphicon-saved:before{content:\"\\e168\"}.glyphicon-import:before{content:\"\\e169\"}.glyphicon-export:before{content:\"\\e170\"}.glyphicon-send:before{content:\"\\e171\"}.glyphicon-floppy-disk:before{content:\"\\e172\"}.glyphicon-floppy-saved:before{content:\"\\e173\"}.glyphicon-floppy-remove:before{content:\"\\e174\"}.glyphicon-floppy-save:before{content:\"\\e175\"}.glyphicon-floppy-open:before{content:\"\\e176\"}.glyphicon-credit-card:before{content:\"\\e177\"}.glyphicon-transfer:before{content:\"\\e178\"}.glyphicon-cutlery:before{content:\"\\e179\"}.glyphicon-header:before{content:\"\\e180\"}.glyphicon-compressed:before{content:\"\\e181\"}.glyphicon-earphone:before{content:\"\\e182\"}.glyphicon-phone-alt:before{content:\"\\e183\"}.glyphicon-tower:before{content:\"\\e184\"}.glyphicon-stats:before{content:\"\\e185\"}.glyphicon-sd-video:before{content:\"\\e186\"}.glyphicon-hd-video:before{content:\"\\e187\"}.glyphicon-subtitles:before{content:\"\\e188\"}.glyphicon-sound-stereo:before{content:\"\\e189\"}.glyphicon-sound-dolby:before{content:\"\\e190\"}.glyphicon-sound-5-1:before{content:\"\\e191\"}.glyphicon-sound-6-1:before{content:\"\\e192\"}.glyphicon-sound-7-1:before{content:\"\\e193\"}.glyphicon-copyright-mark:before{content:\"\\e194\"}.glyphicon-registration-mark:before{content:\"\\e195\"}.glyphicon-cloud-download:before{content:\"\\e197\"}.glyphicon-cloud-upload:before{content:\"\\e198\"}.glyphicon-tree-conifer:before{content:\"\\e199\"}.glyphicon-tree-deciduous:before{content:\"\\e200\"}.glyphicon-cd:before{content:\"\\e201\"}.glyphicon-save-file:before{content:\"\\e202\"}.glyphicon-open-file:before{content:\"\\e203\"}.glyphicon-level-up:before{content:\"\\e204\"}.glyphicon-copy:before{content:\"\\e205\"}.glyphicon-paste:before{content:\"\\e206\"}.glyphicon-alert:before{content:\"\\e209\"}.glyphicon-equalizer:before{content:\"\\e210\"}.glyphicon-king:before{content:\"\\e211\"}.glyphicon-queen:before{content:\"\\e212\"}.glyphicon-pawn:before{content:\"\\e213\"}.glyphicon-bishop:before{content:\"\\e214\"}.glyphicon-knight:before{content:\"\\e215\"}.glyphicon-baby-formula:before{content:\"\\e216\"}.glyphicon-tent:before{content:\"\\26fa\"}.glyphicon-blackboard:before{content:\"\\e218\"}.glyphicon-bed:before{content:\"\\e219\"}.glyphicon-apple:before{content:\"\\f8ff\"}.glyphicon-erase:before{content:\"\\e221\"}.glyphicon-hourglass:before{content:\"\\231b\"}.glyphicon-lamp:before{content:\"\\e223\"}.glyphicon-duplicate:before{content:\"\\e224\"}.glyphicon-piggy-bank:before{content:\"\\e225\"}.glyphicon-scissors:before{content:\"\\e226\"}.glyphicon-bitcoin:before{content:\"\\e227\"}.glyphicon-btc:before{content:\"\\e227\"}.glyphicon-xbt:before{content:\"\\e227\"}.glyphicon-yen:before{content:\"\\00a5\"}.glyphicon-jpy:before{content:\"\\00a5\"}.glyphicon-ruble:before{content:\"\\20bd\"}.glyphicon-rub:before{content:\"\\20bd\"}.glyphicon-scale:before{content:\"\\e230\"}.glyphicon-ice-lolly:before{content:\"\\e231\"}.glyphicon-ice-lolly-tasted:before{content:\"\\e232\"}.glyphicon-education:before{content:\"\\e233\"}.glyphicon-option-horizontal:before{content:\"\\e234\"}.glyphicon-option-vertical:before{content:\"\\e235\"}.glyphicon-menu-hamburger:before{content:\"\\e236\"}.glyphicon-modal-window:before{content:\"\\e237\"}.glyphicon-oil:before{content:\"\\e238\"}.glyphicon-grain:before{content:\"\\e239\"}.glyphicon-sunglasses:before{content:\"\\e240\"}.glyphicon-text-size:before{content:\"\\e241\"}.glyphicon-text-color:before{content:\"\\e242\"}.glyphicon-text-background:before{content:\"\\e243\"}.glyphicon-object-align-top:before{content:\"\\e244\"}.glyphicon-object-align-bottom:before{content:\"\\e245\"}.glyphicon-object-align-horizontal:before{content:\"\\e246\"}.glyphicon-object-align-left:before{content:\"\\e247\"}.glyphicon-object-align-vertical:before{content:\"\\e248\"}.glyphicon-object-align-right:before{content:\"\\e249\"}.glyphicon-triangle-right:before{content:\"\\e250\"}.glyphicon-triangle-left:before{content:\"\\e251\"}.glyphicon-triangle-bottom:before{content:\"\\e252\"}.glyphicon-triangle-top:before{content:\"\\e253\"}.glyphicon-console:before{content:\"\\e254\"}.glyphicon-superscript:before{content:\"\\e255\"}.glyphicon-subscript:before{content:\"\\e256\"}.glyphicon-menu-left:before{content:\"\\e257\"}.glyphicon-menu-right:before{content:\"\\e258\"}.glyphicon-menu-down:before{content:\"\\e259\"}.glyphicon-menu-up:before{content:\"\\e260\"}*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}:after,:before{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:rgba(0,0,0,0)}body{font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333;background-color:#fff}button,input,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#337ab7;text-decoration:none}a:focus,a:hover{color:#23527c;text-decoration:underline}a:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}figure{margin:0}img{vertical-align:middle}.carousel-inner>.item>a>img,.carousel-inner>.item>img,.img-responsive,.thumbnail a>img,.thumbnail>img{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{display:inline-block;max-width:100%;height:auto;padding:4px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.img-circle{border-radius:50%}hr{margin-top:20px;margin-bottom:20px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}[role=button]{cursor:pointer}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-weight:400;line-height:1;color:#777}.h1,.h2,.h3,h1,h2,h3{margin-top:20px;margin-bottom:10px}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small{font-size:65%}.h4,.h5,.h6,h4,h5,h6{margin-top:10px;margin-bottom:10px}.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-size:75%}.h1,h1{font-size:36px}.h2,h2{font-size:30px}.h3,h3{font-size:24px}.h4,h4{font-size:18px}.h5,h5{font-size:14px}.h6,h6{font-size:12px}p{margin:0 0 10px}.lead{margin-bottom:20px;font-size:16px;font-weight:300;line-height:1.4}@media (min-width:768px){.lead{font-size:21px}}.small,small{font-size:85%}.mark,mark{padding:.2em;background-color:#fcf8e3}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.text-justify{text-align:justify}.text-nowrap{white-space:nowrap}.text-lowercase{text-transform:lowercase}.text-uppercase{text-transform:uppercase}.text-capitalize{text-transform:capitalize}.text-muted{color:#777}.text-primary{color:#337ab7}a.text-primary:focus,a.text-primary:hover{color:#286090}.text-success{color:#3c763d}a.text-success:focus,a.text-success:hover{color:#2b542c}.text-info{color:#31708f}a.text-info:focus,a.text-info:hover{color:#245269}.text-warning{color:#8a6d3b}a.text-warning:focus,a.text-warning:hover{color:#66512c}.text-danger{color:#a94442}a.text-danger:focus,a.text-danger:hover{color:#843534}.bg-primary{color:#fff;background-color:#337ab7}a.bg-primary:focus,a.bg-primary:hover{background-color:#286090}.bg-success{background-color:#dff0d8}a.bg-success:focus,a.bg-success:hover{background-color:#c1e2b3}.bg-info{background-color:#d9edf7}a.bg-info:focus,a.bg-info:hover{background-color:#afd9ee}.bg-warning{background-color:#fcf8e3}a.bg-warning:focus,a.bg-warning:hover{background-color:#f7ecb5}.bg-danger{background-color:#f2dede}a.bg-danger:focus,a.bg-danger:hover{background-color:#e4b9b9}.page-header{padding-bottom:9px;margin:40px 0 20px;border-bottom:1px solid #eee}ol,ul{margin-top:0;margin-bottom:10px}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;margin-left:-5px;list-style:none}.list-inline>li{display:inline-block;padding-right:5px;padding-left:5px}dl{margin-top:0;margin-bottom:20px}dd,dt{line-height:1.42857143}dt{font-weight:700}dd{margin-left:0}@media (min-width:768px){.dl-horizontal dt{float:left;width:160px;overflow:hidden;clear:left;text-align:right;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}}abbr[data-original-title],abbr[title]{cursor:help;border-bottom:1px dotted #777}.initialism{font-size:90%;text-transform:uppercase}blockquote{padding:10px 20px;margin:0 0 20px;font-size:17.5px;border-left:5px solid #eee}blockquote ol:last-child,blockquote p:last-child,blockquote ul:last-child{margin-bottom:0}blockquote .small,blockquote footer,blockquote small{display:block;font-size:80%;line-height:1.42857143;color:#777}blockquote .small:before,blockquote footer:before,blockquote small:before{content:'\\2014 \\00A0'}.blockquote-reverse,blockquote.pull-right{padding-right:15px;padding-left:0;text-align:right;border-right:5px solid #eee;border-left:0}.blockquote-reverse .small:before,.blockquote-reverse footer:before,.blockquote-reverse small:before,blockquote.pull-right .small:before,blockquote.pull-right footer:before,blockquote.pull-right small:before{content:''}.blockquote-reverse .small:after,.blockquote-reverse footer:after,.blockquote-reverse small:after,blockquote.pull-right .small:after,blockquote.pull-right footer:after,blockquote.pull-right small:after{content:'\\00A0 \\2014'}address{margin-bottom:20px;font-style:normal;line-height:1.42857143}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,\"Courier New\",monospace}code{padding:2px 4px;font-size:90%;color:#c7254e;background-color:#f9f2f4;border-radius:4px}kbd{padding:2px 4px;font-size:90%;color:#fff;background-color:#333;border-radius:3px;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.25);box-shadow:inset 0 -1px 0 rgba(0,0,0,.25)}kbd kbd{padding:0;font-size:100%;font-weight:700;-webkit-box-shadow:none;box-shadow:none}pre{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:1.42857143;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:768px){.container{width:750px}}@media (min-width:992px){.container{width:970px}}@media (min-width:1200px){.container{width:1170px}}.container-fluid{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{margin-right:-15px;margin-left:-15px}.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{position:relative;min-height:1px;padding-right:15px;padding-left:15px}.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{float:left}.col-xs-12{width:100%}.col-xs-11{width:91.66666667%}.col-xs-10{width:83.33333333%}.col-xs-9{width:75%}.col-xs-8{width:66.66666667%}.col-xs-7{width:58.33333333%}.col-xs-6{width:50%}.col-xs-5{width:41.66666667%}.col-xs-4{width:33.33333333%}.col-xs-3{width:25%}.col-xs-2{width:16.66666667%}.col-xs-1{width:8.33333333%}.col-xs-pull-12{right:100%}.col-xs-pull-11{right:91.66666667%}.col-xs-pull-10{right:83.33333333%}.col-xs-pull-9{right:75%}.col-xs-pull-8{right:66.66666667%}.col-xs-pull-7{right:58.33333333%}.col-xs-pull-6{right:50%}.col-xs-pull-5{right:41.66666667%}.col-xs-pull-4{right:33.33333333%}.col-xs-pull-3{right:25%}.col-xs-pull-2{right:16.66666667%}.col-xs-pull-1{right:8.33333333%}.col-xs-pull-0{right:auto}.col-xs-push-12{left:100%}.col-xs-push-11{left:91.66666667%}.col-xs-push-10{left:83.33333333%}.col-xs-push-9{left:75%}.col-xs-push-8{left:66.66666667%}.col-xs-push-7{left:58.33333333%}.col-xs-push-6{left:50%}.col-xs-push-5{left:41.66666667%}.col-xs-push-4{left:33.33333333%}.col-xs-push-3{left:25%}.col-xs-push-2{left:16.66666667%}.col-xs-push-1{left:8.33333333%}.col-xs-push-0{left:auto}.col-xs-offset-12{margin-left:100%}.col-xs-offset-11{margin-left:91.66666667%}.col-xs-offset-10{margin-left:83.33333333%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-8{margin-left:66.66666667%}.col-xs-offset-7{margin-left:58.33333333%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-5{margin-left:41.66666667%}.col-xs-offset-4{margin-left:33.33333333%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-2{margin-left:16.66666667%}.col-xs-offset-1{margin-left:8.33333333%}.col-xs-offset-0{margin-left:0}@media (min-width:768px){.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9{float:left}.col-sm-12{width:100%}.col-sm-11{width:91.66666667%}.col-sm-10{width:83.33333333%}.col-sm-9{width:75%}.col-sm-8{width:66.66666667%}.col-sm-7{width:58.33333333%}.col-sm-6{width:50%}.col-sm-5{width:41.66666667%}.col-sm-4{width:33.33333333%}.col-sm-3{width:25%}.col-sm-2{width:16.66666667%}.col-sm-1{width:8.33333333%}.col-sm-pull-12{right:100%}.col-sm-pull-11{right:91.66666667%}.col-sm-pull-10{right:83.33333333%}.col-sm-pull-9{right:75%}.col-sm-pull-8{right:66.66666667%}.col-sm-pull-7{right:58.33333333%}.col-sm-pull-6{right:50%}.col-sm-pull-5{right:41.66666667%}.col-sm-pull-4{right:33.33333333%}.col-sm-pull-3{right:25%}.col-sm-pull-2{right:16.66666667%}.col-sm-pull-1{right:8.33333333%}.col-sm-pull-0{right:auto}.col-sm-push-12{left:100%}.col-sm-push-11{left:91.66666667%}.col-sm-push-10{left:83.33333333%}.col-sm-push-9{left:75%}.col-sm-push-8{left:66.66666667%}.col-sm-push-7{left:58.33333333%}.col-sm-push-6{left:50%}.col-sm-push-5{left:41.66666667%}.col-sm-push-4{left:33.33333333%}.col-sm-push-3{left:25%}.col-sm-push-2{left:16.66666667%}.col-sm-push-1{left:8.33333333%}.col-sm-push-0{left:auto}.col-sm-offset-12{margin-left:100%}.col-sm-offset-11{margin-left:91.66666667%}.col-sm-offset-10{margin-left:83.33333333%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-8{margin-left:66.66666667%}.col-sm-offset-7{margin-left:58.33333333%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-5{margin-left:41.66666667%}.col-sm-offset-4{margin-left:33.33333333%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-2{margin-left:16.66666667%}.col-sm-offset-1{margin-left:8.33333333%}.col-sm-offset-0{margin-left:0}}@media (min-width:992px){.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9{float:left}.col-md-12{width:100%}.col-md-11{width:91.66666667%}.col-md-10{width:83.33333333%}.col-md-9{width:75%}.col-md-8{width:66.66666667%}.col-md-7{width:58.33333333%}.col-md-6{width:50%}.col-md-5{width:41.66666667%}.col-md-4{width:33.33333333%}.col-md-3{width:25%}.col-md-2{width:16.66666667%}.col-md-1{width:8.33333333%}.col-md-pull-12{right:100%}.col-md-pull-11{right:91.66666667%}.col-md-pull-10{right:83.33333333%}.col-md-pull-9{right:75%}.col-md-pull-8{right:66.66666667%}.col-md-pull-7{right:58.33333333%}.col-md-pull-6{right:50%}.col-md-pull-5{right:41.66666667%}.col-md-pull-4{right:33.33333333%}.col-md-pull-3{right:25%}.col-md-pull-2{right:16.66666667%}.col-md-pull-1{right:8.33333333%}.col-md-pull-0{right:auto}.col-md-push-12{left:100%}.col-md-push-11{left:91.66666667%}.col-md-push-10{left:83.33333333%}.col-md-push-9{left:75%}.col-md-push-8{left:66.66666667%}.col-md-push-7{left:58.33333333%}.col-md-push-6{left:50%}.col-md-push-5{left:41.66666667%}.col-md-push-4{left:33.33333333%}.col-md-push-3{left:25%}.col-md-push-2{left:16.66666667%}.col-md-push-1{left:8.33333333%}.col-md-push-0{left:auto}.col-md-offset-12{margin-left:100%}.col-md-offset-11{margin-left:91.66666667%}.col-md-offset-10{margin-left:83.33333333%}.col-md-offset-9{margin-left:75%}.col-md-offset-8{margin-left:66.66666667%}.col-md-offset-7{margin-left:58.33333333%}.col-md-offset-6{margin-left:50%}.col-md-offset-5{margin-left:41.66666667%}.col-md-offset-4{margin-left:33.33333333%}.col-md-offset-3{margin-left:25%}.col-md-offset-2{margin-left:16.66666667%}.col-md-offset-1{margin-left:8.33333333%}.col-md-offset-0{margin-left:0}}@media (min-width:1200px){.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9{float:left}.col-lg-12{width:100%}.col-lg-11{width:91.66666667%}.col-lg-10{width:83.33333333%}.col-lg-9{width:75%}.col-lg-8{width:66.66666667%}.col-lg-7{width:58.33333333%}.col-lg-6{width:50%}.col-lg-5{width:41.66666667%}.col-lg-4{width:33.33333333%}.col-lg-3{width:25%}.col-lg-2{width:16.66666667%}.col-lg-1{width:8.33333333%}.col-lg-pull-12{right:100%}.col-lg-pull-11{right:91.66666667%}.col-lg-pull-10{right:83.33333333%}.col-lg-pull-9{right:75%}.col-lg-pull-8{right:66.66666667%}.col-lg-pull-7{right:58.33333333%}.col-lg-pull-6{right:50%}.col-lg-pull-5{right:41.66666667%}.col-lg-pull-4{right:33.33333333%}.col-lg-pull-3{right:25%}.col-lg-pull-2{right:16.66666667%}.col-lg-pull-1{right:8.33333333%}.col-lg-pull-0{right:auto}.col-lg-push-12{left:100%}.col-lg-push-11{left:91.66666667%}.col-lg-push-10{left:83.33333333%}.col-lg-push-9{left:75%}.col-lg-push-8{left:66.66666667%}.col-lg-push-7{left:58.33333333%}.col-lg-push-6{left:50%}.col-lg-push-5{left:41.66666667%}.col-lg-push-4{left:33.33333333%}.col-lg-push-3{left:25%}.col-lg-push-2{left:16.66666667%}.col-lg-push-1{left:8.33333333%}.col-lg-push-0{left:auto}.col-lg-offset-12{margin-left:100%}.col-lg-offset-11{margin-left:91.66666667%}.col-lg-offset-10{margin-left:83.33333333%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-8{margin-left:66.66666667%}.col-lg-offset-7{margin-left:58.33333333%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-5{margin-left:41.66666667%}.col-lg-offset-4{margin-left:33.33333333%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-2{margin-left:16.66666667%}.col-lg-offset-1{margin-left:8.33333333%}.col-lg-offset-0{margin-left:0}}table{background-color:transparent}caption{padding-top:8px;padding-bottom:8px;color:#777;text-align:left}th{text-align:left}.table{width:100%;max-width:100%;margin-bottom:20px}.table>tbody>tr>td,.table>tbody>tr>th,.table>tfoot>tr>td,.table>tfoot>tr>th,.table>thead>tr>td,.table>thead>tr>th{padding:8px;line-height:1.42857143;vertical-align:top;border-top:1px solid #ddd}.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}.table>caption+thead>tr:first-child>td,.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>td,.table>thead:first-child>tr:first-child>th{border-top:0}.table>tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#fff}.table-condensed>tbody>tr>td,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>td,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>thead>tr>th{padding:5px}.table-bordered{border:1px solid #ddd}.table-bordered>tbody>tr>td,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>td,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border:1px solid #ddd}.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border-bottom-width:2px}.table-striped>tbody>tr:nth-of-type(odd){background-color:#f9f9f9}.table-hover>tbody>tr:hover{background-color:#f5f5f5}table col[class*=col-]{position:static;display:table-column;float:none}table td[class*=col-],table th[class*=col-]{position:static;display:table-cell;float:none}.table>tbody>tr.active>td,.table>tbody>tr.active>th,.table>tbody>tr>td.active,.table>tbody>tr>th.active,.table>tfoot>tr.active>td,.table>tfoot>tr.active>th,.table>tfoot>tr>td.active,.table>tfoot>tr>th.active,.table>thead>tr.active>td,.table>thead>tr.active>th,.table>thead>tr>td.active,.table>thead>tr>th.active{background-color:#f5f5f5}.table-hover>tbody>tr.active:hover>td,.table-hover>tbody>tr.active:hover>th,.table-hover>tbody>tr:hover>.active,.table-hover>tbody>tr>td.active:hover,.table-hover>tbody>tr>th.active:hover{background-color:#e8e8e8}.table>tbody>tr.success>td,.table>tbody>tr.success>th,.table>tbody>tr>td.success,.table>tbody>tr>th.success,.table>tfoot>tr.success>td,.table>tfoot>tr.success>th,.table>tfoot>tr>td.success,.table>tfoot>tr>th.success,.table>thead>tr.success>td,.table>thead>tr.success>th,.table>thead>tr>td.success,.table>thead>tr>th.success{background-color:#dff0d8}.table-hover>tbody>tr.success:hover>td,.table-hover>tbody>tr.success:hover>th,.table-hover>tbody>tr:hover>.success,.table-hover>tbody>tr>td.success:hover,.table-hover>tbody>tr>th.success:hover{background-color:#d0e9c6}.table>tbody>tr.info>td,.table>tbody>tr.info>th,.table>tbody>tr>td.info,.table>tbody>tr>th.info,.table>tfoot>tr.info>td,.table>tfoot>tr.info>th,.table>tfoot>tr>td.info,.table>tfoot>tr>th.info,.table>thead>tr.info>td,.table>thead>tr.info>th,.table>thead>tr>td.info,.table>thead>tr>th.info{background-color:#d9edf7}.table-hover>tbody>tr.info:hover>td,.table-hover>tbody>tr.info:hover>th,.table-hover>tbody>tr:hover>.info,.table-hover>tbody>tr>td.info:hover,.table-hover>tbody>tr>th.info:hover{background-color:#c4e3f3}.table>tbody>tr.warning>td,.table>tbody>tr.warning>th,.table>tbody>tr>td.warning,.table>tbody>tr>th.warning,.table>tfoot>tr.warning>td,.table>tfoot>tr.warning>th,.table>tfoot>tr>td.warning,.table>tfoot>tr>th.warning,.table>thead>tr.warning>td,.table>thead>tr.warning>th,.table>thead>tr>td.warning,.table>thead>tr>th.warning{background-color:#fcf8e3}.table-hover>tbody>tr.warning:hover>td,.table-hover>tbody>tr.warning:hover>th,.table-hover>tbody>tr:hover>.warning,.table-hover>tbody>tr>td.warning:hover,.table-hover>tbody>tr>th.warning:hover{background-color:#faf2cc}.table>tbody>tr.danger>td,.table>tbody>tr.danger>th,.table>tbody>tr>td.danger,.table>tbody>tr>th.danger,.table>tfoot>tr.danger>td,.table>tfoot>tr.danger>th,.table>tfoot>tr>td.danger,.table>tfoot>tr>th.danger,.table>thead>tr.danger>td,.table>thead>tr.danger>th,.table>thead>tr>td.danger,.table>thead>tr>th.danger{background-color:#f2dede}.table-hover>tbody>tr.danger:hover>td,.table-hover>tbody>tr.danger:hover>th,.table-hover>tbody>tr:hover>.danger,.table-hover>tbody>tr>td.danger:hover,.table-hover>tbody>tr>th.danger:hover{background-color:#ebcccc}.table-responsive{min-height:.01%;overflow-x:auto}@media screen and (max-width:767px){.table-responsive{width:100%;margin-bottom:15px;overflow-y:hidden;-ms-overflow-style:-ms-autohiding-scrollbar;border:1px solid #ddd}.table-responsive>.table{margin-bottom:0}.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>td,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>thead>tr>th{white-space:nowrap}.table-responsive>.table-bordered{border:0}.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;padding:0;margin-bottom:20px;font-size:21px;line-height:inherit;color:#333;border:0;border-bottom:1px solid #e5e5e5}label{display:inline-block;max-width:100%;margin-bottom:5px;font-weight:700}input[type=search]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}input[type=checkbox],input[type=radio]{margin:4px 0 0;margin-top:1px\\9;line-height:normal}input[type=file]{display:block}input[type=range]{display:block;width:100%}select[multiple],select[size]{height:auto}input[type=file]:focus,input[type=checkbox]:focus,input[type=radio]:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}output{display:block;padding-top:7px;font-size:14px;line-height:1.42857143;color:#555}.form-control{display:block;width:100%;height:34px;padding:6px 12px;font-size:14px;line-height:1.42857143;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;-o-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s}.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)}.form-control::-moz-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999}.form-control::-webkit-input-placeholder{color:#999}.form-control::-ms-expand{background-color:transparent;border:0}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{background-color:#eee;opacity:1}.form-control[disabled],fieldset[disabled] .form-control{cursor:not-allowed}textarea.form-control{height:auto}input[type=search]{-webkit-appearance:none}@media screen and (-webkit-min-device-pixel-ratio:0){input[type=date].form-control,input[type=time].form-control,input[type=datetime-local].form-control,input[type=month].form-control{line-height:34px}.input-group-sm input[type=date],.input-group-sm input[type=time],.input-group-sm input[type=datetime-local],.input-group-sm input[type=month],input[type=date].input-sm,input[type=time].input-sm,input[type=datetime-local].input-sm,input[type=month].input-sm{line-height:30px}.input-group-lg input[type=date],.input-group-lg input[type=time],.input-group-lg input[type=datetime-local],.input-group-lg input[type=month],input[type=date].input-lg,input[type=time].input-lg,input[type=datetime-local].input-lg,input[type=month].input-lg{line-height:46px}}.form-group{margin-bottom:15px}.checkbox,.radio{position:relative;display:block;margin-top:10px;margin-bottom:10px}.checkbox label,.radio label{min-height:20px;padding-left:20px;margin-bottom:0;font-weight:400;cursor:pointer}.checkbox input[type=checkbox],.checkbox-inline input[type=checkbox],.radio input[type=radio],.radio-inline input[type=radio]{position:absolute;margin-top:4px\\9;margin-left:-20px}.checkbox+.checkbox,.radio+.radio{margin-top:-5px}.checkbox-inline,.radio-inline{position:relative;display:inline-block;padding-left:20px;margin-bottom:0;font-weight:400;vertical-align:middle;cursor:pointer}.checkbox-inline+.checkbox-inline,.radio-inline+.radio-inline{margin-top:0;margin-left:10px}fieldset[disabled] input[type=checkbox],fieldset[disabled] input[type=radio],input[type=checkbox].disabled,input[type=checkbox][disabled],input[type=radio].disabled,input[type=radio][disabled]{cursor:not-allowed}.checkbox-inline.disabled,.radio-inline.disabled,fieldset[disabled] .checkbox-inline,fieldset[disabled] .radio-inline{cursor:not-allowed}.checkbox.disabled label,.radio.disabled label,fieldset[disabled] .checkbox label,fieldset[disabled] .radio label{cursor:not-allowed}.form-control-static{min-height:34px;padding-top:7px;padding-bottom:7px;margin-bottom:0}.form-control-static.input-lg,.form-control-static.input-sm{padding-right:0;padding-left:0}.input-sm{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-sm{height:30px;line-height:30px}select[multiple].input-sm,textarea.input-sm{height:auto}.form-group-sm .form-control{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.form-group-sm select.form-control{height:30px;line-height:30px}.form-group-sm select[multiple].form-control,.form-group-sm textarea.form-control{height:auto}.form-group-sm .form-control-static{height:30px;min-height:32px;padding:6px 10px;font-size:12px;line-height:1.5}.input-lg{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}select.input-lg{height:46px;line-height:46px}select[multiple].input-lg,textarea.input-lg{height:auto}.form-group-lg .form-control{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.form-group-lg select.form-control{height:46px;line-height:46px}.form-group-lg select[multiple].form-control,.form-group-lg textarea.form-control{height:auto}.form-group-lg .form-control-static{height:46px;min-height:38px;padding:11px 16px;font-size:18px;line-height:1.3333333}.has-feedback{position:relative}.has-feedback .form-control{padding-right:42.5px}.form-control-feedback{position:absolute;top:0;right:0;z-index:2;display:block;width:34px;height:34px;line-height:34px;text-align:center;pointer-events:none}.form-group-lg .form-control+.form-control-feedback,.input-group-lg+.form-control-feedback,.input-lg+.form-control-feedback{width:46px;height:46px;line-height:46px}.form-group-sm .form-control+.form-control-feedback,.input-group-sm+.form-control-feedback,.input-sm+.form-control-feedback{width:30px;height:30px;line-height:30px}.has-success .checkbox,.has-success .checkbox-inline,.has-success .control-label,.has-success .help-block,.has-success .radio,.has-success .radio-inline,.has-success.checkbox label,.has-success.checkbox-inline label,.has-success.radio label,.has-success.radio-inline label{color:#3c763d}.has-success .form-control{border-color:#3c763d;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-success .form-control:focus{border-color:#2b542c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168}.has-success .input-group-addon{color:#3c763d;background-color:#dff0d8;border-color:#3c763d}.has-success .form-control-feedback{color:#3c763d}.has-warning .checkbox,.has-warning .checkbox-inline,.has-warning .control-label,.has-warning .help-block,.has-warning .radio,.has-warning .radio-inline,.has-warning.checkbox label,.has-warning.checkbox-inline label,.has-warning.radio label,.has-warning.radio-inline label{color:#8a6d3b}.has-warning .form-control{border-color:#8a6d3b;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-warning .form-control:focus{border-color:#66512c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b}.has-warning .input-group-addon{color:#8a6d3b;background-color:#fcf8e3;border-color:#8a6d3b}.has-warning .form-control-feedback{color:#8a6d3b}.has-error .checkbox,.has-error .checkbox-inline,.has-error .control-label,.has-error .help-block,.has-error .radio,.has-error .radio-inline,.has-error.checkbox label,.has-error.checkbox-inline label,.has-error.radio label,.has-error.radio-inline label{color:#a94442}.has-error .form-control{border-color:#a94442;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-error .form-control:focus{border-color:#843534;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483}.has-error .input-group-addon{color:#a94442;background-color:#f2dede;border-color:#a94442}.has-error .form-control-feedback{color:#a94442}.has-feedback label~.form-control-feedback{top:25px}.has-feedback label.sr-only~.form-control-feedback{top:0}.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#737373}@media (min-width:768px){.form-inline .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-static{display:inline-block}.form-inline .input-group{display:inline-table;vertical-align:middle}.form-inline .input-group .form-control,.form-inline .input-group .input-group-addon,.form-inline .input-group .input-group-btn{width:auto}.form-inline .input-group>.form-control{width:100%}.form-inline .control-label{margin-bottom:0;vertical-align:middle}.form-inline .checkbox,.form-inline .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.form-inline .checkbox label,.form-inline .radio label{padding-left:0}.form-inline .checkbox input[type=checkbox],.form-inline .radio input[type=radio]{position:relative;margin-left:0}.form-inline .has-feedback .form-control-feedback{top:0}}.form-horizontal .checkbox,.form-horizontal .checkbox-inline,.form-horizontal .radio,.form-horizontal .radio-inline{padding-top:7px;margin-top:0;margin-bottom:0}.form-horizontal .checkbox,.form-horizontal .radio{min-height:27px}.form-horizontal .form-group{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.form-horizontal .control-label{padding-top:7px;margin-bottom:0;text-align:right}}.form-horizontal .has-feedback .form-control-feedback{right:15px}@media (min-width:768px){.form-horizontal .form-group-lg .control-label{padding-top:11px;font-size:18px}}@media (min-width:768px){.form-horizontal .form-group-sm .control-label{padding-top:6px;font-size:12px}}.btn{display:inline-block;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:400;line-height:1.42857143;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-image:none;border:1px solid transparent;border-radius:4px}.btn.active.focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn:active:focus,.btn:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn.focus,.btn:focus,.btn:hover{color:#333;text-decoration:none}.btn.active,.btn:active{background-image:none;outline:0;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none;opacity:.65}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-default{color:#333;background-color:#fff;border-color:#ccc}.btn-default.focus,.btn-default:focus{color:#333;background-color:#e6e6e6;border-color:#8c8c8c}.btn-default:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default.active,.btn-default:active,.open>.dropdown-toggle.btn-default{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default.active.focus,.btn-default.active:focus,.btn-default.active:hover,.btn-default:active.focus,.btn-default:active:focus,.btn-default:active:hover,.open>.dropdown-toggle.btn-default.focus,.open>.dropdown-toggle.btn-default:focus,.open>.dropdown-toggle.btn-default:hover{color:#333;background-color:#d4d4d4;border-color:#8c8c8c}.btn-default.active,.btn-default:active,.open>.dropdown-toggle.btn-default{background-image:none}.btn-default.disabled.focus,.btn-default.disabled:focus,.btn-default.disabled:hover,.btn-default[disabled].focus,.btn-default[disabled]:focus,.btn-default[disabled]:hover,fieldset[disabled] .btn-default.focus,fieldset[disabled] .btn-default:focus,fieldset[disabled] .btn-default:hover{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#333}.btn-primary{color:#fff;background-color:#337ab7;border-color:#2e6da4}.btn-primary.focus,.btn-primary:focus{color:#fff;background-color:#286090;border-color:#122b40}.btn-primary:hover{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary.active,.btn-primary:active,.open>.dropdown-toggle.btn-primary{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary.active.focus,.btn-primary.active:focus,.btn-primary.active:hover,.btn-primary:active.focus,.btn-primary:active:focus,.btn-primary:active:hover,.open>.dropdown-toggle.btn-primary.focus,.open>.dropdown-toggle.btn-primary:focus,.open>.dropdown-toggle.btn-primary:hover{color:#fff;background-color:#204d74;border-color:#122b40}.btn-primary.active,.btn-primary:active,.open>.dropdown-toggle.btn-primary{background-image:none}.btn-primary.disabled.focus,.btn-primary.disabled:focus,.btn-primary.disabled:hover,.btn-primary[disabled].focus,.btn-primary[disabled]:focus,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary.focus,fieldset[disabled] .btn-primary:focus,fieldset[disabled] .btn-primary:hover{background-color:#337ab7;border-color:#2e6da4}.btn-primary .badge{color:#337ab7;background-color:#fff}.btn-success{color:#fff;background-color:#5cb85c;border-color:#4cae4c}.btn-success.focus,.btn-success:focus{color:#fff;background-color:#449d44;border-color:#255625}.btn-success:hover{color:#fff;background-color:#449d44;border-color:#398439}.btn-success.active,.btn-success:active,.open>.dropdown-toggle.btn-success{color:#fff;background-color:#449d44;border-color:#398439}.btn-success.active.focus,.btn-success.active:focus,.btn-success.active:hover,.btn-success:active.focus,.btn-success:active:focus,.btn-success:active:hover,.open>.dropdown-toggle.btn-success.focus,.open>.dropdown-toggle.btn-success:focus,.open>.dropdown-toggle.btn-success:hover{color:#fff;background-color:#398439;border-color:#255625}.btn-success.active,.btn-success:active,.open>.dropdown-toggle.btn-success{background-image:none}.btn-success.disabled.focus,.btn-success.disabled:focus,.btn-success.disabled:hover,.btn-success[disabled].focus,.btn-success[disabled]:focus,.btn-success[disabled]:hover,fieldset[disabled] .btn-success.focus,fieldset[disabled] .btn-success:focus,fieldset[disabled] .btn-success:hover{background-color:#5cb85c;border-color:#4cae4c}.btn-success .badge{color:#5cb85c;background-color:#fff}.btn-info{color:#fff;background-color:#5bc0de;border-color:#46b8da}.btn-info.focus,.btn-info:focus{color:#fff;background-color:#31b0d5;border-color:#1b6d85}.btn-info:hover{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info.active,.btn-info:active,.open>.dropdown-toggle.btn-info{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info.active.focus,.btn-info.active:focus,.btn-info.active:hover,.btn-info:active.focus,.btn-info:active:focus,.btn-info:active:hover,.open>.dropdown-toggle.btn-info.focus,.open>.dropdown-toggle.btn-info:focus,.open>.dropdown-toggle.btn-info:hover{color:#fff;background-color:#269abc;border-color:#1b6d85}.btn-info.active,.btn-info:active,.open>.dropdown-toggle.btn-info{background-image:none}.btn-info.disabled.focus,.btn-info.disabled:focus,.btn-info.disabled:hover,.btn-info[disabled].focus,.btn-info[disabled]:focus,.btn-info[disabled]:hover,fieldset[disabled] .btn-info.focus,fieldset[disabled] .btn-info:focus,fieldset[disabled] .btn-info:hover{background-color:#5bc0de;border-color:#46b8da}.btn-info .badge{color:#5bc0de;background-color:#fff}.btn-warning{color:#fff;background-color:#f0ad4e;border-color:#eea236}.btn-warning.focus,.btn-warning:focus{color:#fff;background-color:#ec971f;border-color:#985f0d}.btn-warning:hover{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning.active,.btn-warning:active,.open>.dropdown-toggle.btn-warning{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning.active.focus,.btn-warning.active:focus,.btn-warning.active:hover,.btn-warning:active.focus,.btn-warning:active:focus,.btn-warning:active:hover,.open>.dropdown-toggle.btn-warning.focus,.open>.dropdown-toggle.btn-warning:focus,.open>.dropdown-toggle.btn-warning:hover{color:#fff;background-color:#d58512;border-color:#985f0d}.btn-warning.active,.btn-warning:active,.open>.dropdown-toggle.btn-warning{background-image:none}.btn-warning.disabled.focus,.btn-warning.disabled:focus,.btn-warning.disabled:hover,.btn-warning[disabled].focus,.btn-warning[disabled]:focus,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning.focus,fieldset[disabled] .btn-warning:focus,fieldset[disabled] .btn-warning:hover{background-color:#f0ad4e;border-color:#eea236}.btn-warning .badge{color:#f0ad4e;background-color:#fff}.btn-danger{color:#fff;background-color:#d9534f;border-color:#d43f3a}.btn-danger.focus,.btn-danger:focus{color:#fff;background-color:#c9302c;border-color:#761c19}.btn-danger:hover{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger.active,.btn-danger:active,.open>.dropdown-toggle.btn-danger{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger.active.focus,.btn-danger.active:focus,.btn-danger.active:hover,.btn-danger:active.focus,.btn-danger:active:focus,.btn-danger:active:hover,.open>.dropdown-toggle.btn-danger.focus,.open>.dropdown-toggle.btn-danger:focus,.open>.dropdown-toggle.btn-danger:hover{color:#fff;background-color:#ac2925;border-color:#761c19}.btn-danger.active,.btn-danger:active,.open>.dropdown-toggle.btn-danger{background-image:none}.btn-danger.disabled.focus,.btn-danger.disabled:focus,.btn-danger.disabled:hover,.btn-danger[disabled].focus,.btn-danger[disabled]:focus,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger.focus,fieldset[disabled] .btn-danger:focus,fieldset[disabled] .btn-danger:hover{background-color:#d9534f;border-color:#d43f3a}.btn-danger .badge{color:#d9534f;background-color:#fff}.btn-link{font-weight:400;color:#337ab7;border-radius:0}.btn-link,.btn-link.active,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:active,.btn-link:focus,.btn-link:hover{border-color:transparent}.btn-link:focus,.btn-link:hover{color:#23527c;text-decoration:underline;background-color:transparent}.btn-link[disabled]:focus,.btn-link[disabled]:hover,fieldset[disabled] .btn-link:focus,fieldset[disabled] .btn-link:hover{color:#777;text-decoration:none}.btn-group-lg>.btn,.btn-lg{padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.btn-group-sm>.btn,.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-xs>.btn,.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:5px}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;-o-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}tr.collapse.in{display:table-row}tbody.collapse.in{display:table-row-group}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition-timing-function:ease;-o-transition-timing-function:ease;transition-timing-function:ease;-webkit-transition-duration:.35s;-o-transition-duration:.35s;transition-duration:.35s;-webkit-transition-property:height,visibility;-o-transition-property:height,visibility;transition-property:height,visibility}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px dashed;border-top:4px solid\\9;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown,.dropup{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;font-size:14px;text-align:left;list-style:none;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,.175);box-shadow:0 6px 12px rgba(0,0,0,.175)}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;color:#333;white-space:nowrap}.dropdown-menu>li>a:focus,.dropdown-menu>li>a:hover{color:#262626;text-decoration:none;background-color:#f5f5f5}.dropdown-menu>.active>a,.dropdown-menu>.active>a:focus,.dropdown-menu>.active>a:hover{color:#fff;text-decoration:none;background-color:#337ab7;outline:0}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{color:#777}.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{text-decoration:none;cursor:not-allowed;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-menu-right{right:0;left:auto}.dropdown-menu-left{right:auto;left:0}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.42857143;color:#777;white-space:nowrap}.dropdown-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{content:\"\";border-top:0;border-bottom:4px dashed;border-bottom:4px solid\\9}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:2px}@media (min-width:768px){.navbar-right .dropdown-menu{right:0;left:auto}.navbar-right .dropdown-menu-left{right:auto;left:0}}.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;float:left}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:2}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{margin-left:-5px}.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group{float:left}.btn-toolbar>.btn,.btn-toolbar>.btn-group,.btn-toolbar>.input-group{margin-left:5px}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-bottom-left-radius:0}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group>.btn+.dropdown-toggle{padding-right:8px;padding-left:8px}.btn-group>.btn-lg+.dropdown-toggle{padding-right:12px;padding-left:12px}.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}.btn .caret{margin-left:0}.btn-lg .caret{border-width:5px 5px 0;border-bottom-width:0}.dropup .btn-lg .caret{border-width:0 5px 5px}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}.btn-group-vertical>.btn-group>.btn{float:none}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-top-left-radius:0;border-top-right-radius:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group-vertical>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-top-right-radius:0}.btn-group-justified{display:table;width:100%;table-layout:fixed;border-collapse:separate}.btn-group-justified>.btn,.btn-group-justified>.btn-group{display:table-cell;float:none;width:1%}.btn-group-justified>.btn-group .btn{width:100%}.btn-group-justified>.btn-group .dropdown-menu{left:auto}[data-toggle=buttons]>.btn input[type=checkbox],[data-toggle=buttons]>.btn input[type=radio],[data-toggle=buttons]>.btn-group>.btn input[type=checkbox],[data-toggle=buttons]>.btn-group>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*=col-]{float:none;padding-right:0;padding-left:0}.input-group .form-control{position:relative;z-index:2;float:left;width:100%;margin-bottom:0}.input-group .form-control:focus{z-index:3}.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}select.input-group-lg>.form-control,select.input-group-lg>.input-group-addon,select.input-group-lg>.input-group-btn>.btn{height:46px;line-height:46px}select[multiple].input-group-lg>.form-control,select[multiple].input-group-lg>.input-group-addon,select[multiple].input-group-lg>.input-group-btn>.btn,textarea.input-group-lg>.form-control,textarea.input-group-lg>.input-group-addon,textarea.input-group-lg>.input-group-btn>.btn{height:auto}.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-group-sm>.form-control,select.input-group-sm>.input-group-addon,select.input-group-sm>.input-group-btn>.btn{height:30px;line-height:30px}select[multiple].input-group-sm>.form-control,select[multiple].input-group-sm>.input-group-addon,select[multiple].input-group-sm>.input-group-btn>.btn,textarea.input-group-sm>.form-control,textarea.input-group-sm>.input-group-addon,textarea.input-group-sm>.input-group-btn>.btn{height:auto}.input-group .form-control,.input-group-addon,.input-group-btn{display:table-cell}.input-group .form-control:not(:first-child):not(:last-child),.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:6px 12px;font-size:14px;font-weight:400;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccc;border-radius:4px}.input-group-addon.input-sm{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg{padding:10px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type=checkbox],.input-group-addon input[type=radio]{margin-top:0}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn-group:not(:last-child)>.btn,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:first-child>.btn-group:not(:first-child)>.btn,.input-group-btn:first-child>.btn:not(:first-child),.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group>.btn,.input-group-btn:last-child>.dropdown-toggle{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{position:relative;font-size:0;white-space:nowrap}.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-1px}.input-group-btn>.btn:active,.input-group-btn>.btn:focus,.input-group-btn>.btn:hover{z-index:2}.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group{margin-right:-1px}.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group{z-index:2;margin-left:-1px}.nav{padding-left:0;margin-bottom:0;list-style:none}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.nav>li>a:focus,.nav>li>a:hover{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#777}.nav>li.disabled>a:focus,.nav>li.disabled>a:hover{color:#777;text-decoration:none;cursor:not-allowed;background-color:transparent}.nav .open>a,.nav .open>a:focus,.nav .open>a:hover{background-color:#eee;border-color:#337ab7}.nav .nav-divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.42857143;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>li.active>a,.nav-tabs>li.active>a:focus,.nav-tabs>li.active>a:hover{color:#555;cursor:default;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent}.nav-tabs.nav-justified{width:100%;border-bottom:0}.nav-tabs.nav-justified>li{float:none}.nav-tabs.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-tabs.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-tabs.nav-justified>li>a{margin-bottom:0}}.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border:1px solid #ddd}@media (min-width:768px){.nav-tabs.nav-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border-bottom-color:#fff}}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:focus,.nav-pills>li.active>a:hover{color:#fff;background-color:#337ab7}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified{width:100%}.nav-justified>li{float:none}.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a{margin-bottom:0}}.nav-tabs-justified{border-bottom:0}.nav-tabs-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover{border:1px solid #ddd}@media (min-width:768px){.nav-tabs-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover{border-bottom-color:#fff}}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:20px;border:1px solid transparent}@media (min-width:768px){.navbar{border-radius:4px}}@media (min-width:768px){.navbar-header{float:left}}.navbar-collapse{padding-right:15px;padding-left:15px;overflow-x:visible;-webkit-overflow-scrolling:touch;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1)}.navbar-collapse.in{overflow-y:auto}@media (min-width:768px){.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse{padding-right:0;padding-left:0}}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:340px}@media (max-device-width:480px) and (orientation:landscape){.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:200px}}.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:0;margin-left:0}}.navbar-static-top{z-index:1000;border-width:0 0 1px}@media (min-width:768px){.navbar-static-top{border-radius:0}}.navbar-fixed-bottom,.navbar-fixed-top{position:fixed;right:0;left:0;z-index:1030}@media (min-width:768px){.navbar-fixed-bottom,.navbar-fixed-top{border-radius:0}}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;height:50px;padding:15px 15px;font-size:18px;line-height:20px}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-brand>img{display:block}@media (min-width:768px){.navbar>.container .navbar-brand,.navbar>.container-fluid .navbar-brand{margin-left:-15px}}.navbar-toggle{position:relative;float:right;padding:9px 10px;margin-top:8px;margin-right:15px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle:focus{outline:0}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}@media (min-width:768px){.navbar-toggle{display:none}}.navbar-nav{margin:7.5px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:20px}@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-nav .open .dropdown-menu .dropdown-header,.navbar-nav .open .dropdown-menu>li>a{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:20px}.navbar-nav .open .dropdown-menu>li>a:focus,.navbar-nav .open .dropdown-menu>li>a:hover{background-image:none}}@media (min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:15px;padding-bottom:15px}}.navbar-form{padding:10px 15px;margin-top:8px;margin-right:-15px;margin-bottom:8px;margin-left:-15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1)}@media (min-width:768px){.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block;width:auto;vertical-align:middle}.navbar-form .form-control-static{display:inline-block}.navbar-form .input-group{display:inline-table;vertical-align:middle}.navbar-form .input-group .form-control,.navbar-form .input-group .input-group-addon,.navbar-form .input-group .input-group-btn{width:auto}.navbar-form .input-group>.form-control{width:100%}.navbar-form .control-label{margin-bottom:0;vertical-align:middle}.navbar-form .checkbox,.navbar-form .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.navbar-form .checkbox label,.navbar-form .radio label{padding-left:0}.navbar-form .checkbox input[type=checkbox],.navbar-form .radio input[type=radio]{position:relative;margin-left:0}.navbar-form .has-feedback .form-control-feedback{top:0}}@media (max-width:767px){.navbar-form .form-group{margin-bottom:5px}.navbar-form .form-group:last-child{margin-bottom:0}}@media (min-width:768px){.navbar-form{width:auto;padding-top:0;padding-bottom:0;margin-right:0;margin-left:0;border:0;-webkit-box-shadow:none;box-shadow:none}}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-left-radius:0;border-top-right-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{margin-bottom:0;border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.navbar-btn{margin-top:8px;margin-bottom:8px}.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.navbar-btn.btn-xs{margin-top:14px;margin-bottom:14px}.navbar-text{margin-top:15px;margin-bottom:15px}@media (min-width:768px){.navbar-text{float:left;margin-right:15px;margin-left:15px}}@media (min-width:768px){.navbar-left{float:left!important}.navbar-right{float:right!important;margin-right:-15px}.navbar-right~.navbar-right{margin-right:0}}.navbar-default{background-color:#f8f8f8;border-color:#e7e7e7}.navbar-default .navbar-brand{color:#777}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#5e5e5e;background-color:transparent}.navbar-default .navbar-text{color:#777}.navbar-default .navbar-nav>li>a{color:#777}.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:focus,.navbar-default .navbar-nav>.disabled>a:hover{color:#ccc;background-color:transparent}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#888}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#e7e7e7}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{color:#555;background-color:#e7e7e7}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#ccc;background-color:transparent}}.navbar-default .navbar-link{color:#777}.navbar-default .navbar-link:hover{color:#333}.navbar-default .btn-link{color:#777}.navbar-default .btn-link:focus,.navbar-default .btn-link:hover{color:#333}.navbar-default .btn-link[disabled]:focus,.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:focus,fieldset[disabled] .navbar-default .btn-link:hover{color:#ccc}.navbar-inverse{background-color:#222;border-color:#080808}.navbar-inverse .navbar-brand{color:#9d9d9d}.navbar-inverse .navbar-brand:focus,.navbar-inverse .navbar-brand:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-text{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a:focus,.navbar-inverse .navbar-nav>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:focus,.navbar-inverse .navbar-nav>.active>a:hover{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:focus,.navbar-inverse .navbar-nav>.disabled>a:hover{color:#444;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#333}.navbar-inverse .navbar-toggle:focus,.navbar-inverse .navbar-toggle:hover{background-color:#333}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:focus,.navbar-inverse .navbar-nav>.open>a:hover{color:#fff;background-color:#080808}@media (max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#444;background-color:transparent}}.navbar-inverse .navbar-link{color:#9d9d9d}.navbar-inverse .navbar-link:hover{color:#fff}.navbar-inverse .btn-link{color:#9d9d9d}.navbar-inverse .btn-link:focus,.navbar-inverse .btn-link:hover{color:#fff}.navbar-inverse .btn-link[disabled]:focus,.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:focus,fieldset[disabled] .navbar-inverse .btn-link:hover{color:#444}.breadcrumb{padding:8px 15px;margin-bottom:20px;list-style:none;background-color:#f5f5f5;border-radius:4px}.breadcrumb>li{display:inline-block}.breadcrumb>li+li:before{padding:0 5px;color:#ccc;content:\"/\\00a0\"}.breadcrumb>.active{color:#777}.pagination{display:inline-block;padding-left:0;margin:20px 0;border-radius:4px}.pagination>li{display:inline}.pagination>li>a,.pagination>li>span{position:relative;float:left;padding:6px 12px;margin-left:-1px;line-height:1.42857143;color:#337ab7;text-decoration:none;background-color:#fff;border:1px solid #ddd}.pagination>li:first-child>a,.pagination>li:first-child>span{margin-left:0;border-top-left-radius:4px;border-bottom-left-radius:4px}.pagination>li:last-child>a,.pagination>li:last-child>span{border-top-right-radius:4px;border-bottom-right-radius:4px}.pagination>li>a:focus,.pagination>li>a:hover,.pagination>li>span:focus,.pagination>li>span:hover{z-index:2;color:#23527c;background-color:#eee;border-color:#ddd}.pagination>.active>a,.pagination>.active>a:focus,.pagination>.active>a:hover,.pagination>.active>span,.pagination>.active>span:focus,.pagination>.active>span:hover{z-index:3;color:#fff;cursor:default;background-color:#337ab7;border-color:#337ab7}.pagination>.disabled>a,.pagination>.disabled>a:focus,.pagination>.disabled>a:hover,.pagination>.disabled>span,.pagination>.disabled>span:focus,.pagination>.disabled>span:hover{color:#777;cursor:not-allowed;background-color:#fff;border-color:#ddd}.pagination-lg>li>a,.pagination-lg>li>span{padding:10px 16px;font-size:18px;line-height:1.3333333}.pagination-lg>li:first-child>a,.pagination-lg>li:first-child>span{border-top-left-radius:6px;border-bottom-left-radius:6px}.pagination-lg>li:last-child>a,.pagination-lg>li:last-child>span{border-top-right-radius:6px;border-bottom-right-radius:6px}.pagination-sm>li>a,.pagination-sm>li>span{padding:5px 10px;font-size:12px;line-height:1.5}.pagination-sm>li:first-child>a,.pagination-sm>li:first-child>span{border-top-left-radius:3px;border-bottom-left-radius:3px}.pagination-sm>li:last-child>a,.pagination-sm>li:last-child>span{border-top-right-radius:3px;border-bottom-right-radius:3px}.pager{padding-left:0;margin:20px 0;text-align:center;list-style:none}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:focus,.pager li>a:hover{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:focus,.pager .disabled>a:hover,.pager .disabled>span{color:#777;cursor:not-allowed;background-color:#fff}.label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}a.label:focus,a.label:hover{color:#fff;text-decoration:none;cursor:pointer}.label:empty{display:none}.btn .label{position:relative;top:-1px}.label-default{background-color:#777}.label-default[href]:focus,.label-default[href]:hover{background-color:#5e5e5e}.label-primary{background-color:#337ab7}.label-primary[href]:focus,.label-primary[href]:hover{background-color:#286090}.label-success{background-color:#5cb85c}.label-success[href]:focus,.label-success[href]:hover{background-color:#449d44}.label-info{background-color:#5bc0de}.label-info[href]:focus,.label-info[href]:hover{background-color:#31b0d5}.label-warning{background-color:#f0ad4e}.label-warning[href]:focus,.label-warning[href]:hover{background-color:#ec971f}.label-danger{background-color:#d9534f}.label-danger[href]:focus,.label-danger[href]:hover{background-color:#c9302c}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:middle;background-color:#777;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.btn-group-xs>.btn .badge,.btn-xs .badge{top:0;padding:1px 5px}a.badge:focus,a.badge:hover{color:#fff;text-decoration:none;cursor:pointer}.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#337ab7;background-color:#fff}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}.nav-pills>li>a>.badge{margin-left:3px}.jumbotron{padding-top:30px;padding-bottom:30px;margin-bottom:30px;color:inherit;background-color:#eee}.jumbotron .h1,.jumbotron h1{color:inherit}.jumbotron p{margin-bottom:15px;font-size:21px;font-weight:200}.jumbotron>hr{border-top-color:#d5d5d5}.container .jumbotron,.container-fluid .jumbotron{padding-right:15px;padding-left:15px;border-radius:6px}.jumbotron .container{max-width:100%}@media screen and (min-width:768px){.jumbotron{padding-top:48px;padding-bottom:48px}.container .jumbotron,.container-fluid .jumbotron{padding-right:60px;padding-left:60px}.jumbotron .h1,.jumbotron h1{font-size:63px}}.thumbnail{display:block;padding:4px;margin-bottom:20px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:border .2s ease-in-out;-o-transition:border .2s ease-in-out;transition:border .2s ease-in-out}.thumbnail a>img,.thumbnail>img{margin-right:auto;margin-left:auto}a.thumbnail.active,a.thumbnail:focus,a.thumbnail:hover{border-color:#337ab7}.thumbnail .caption{padding:9px;color:#333}.alert{padding:15px;margin-bottom:20px;border:1px solid transparent;border-radius:4px}.alert h4{margin-top:0;color:inherit}.alert .alert-link{font-weight:700}.alert>p,.alert>ul{margin-bottom:0}.alert>p+p{margin-top:5px}.alert-dismissable,.alert-dismissible{padding-right:35px}.alert-dismissable .close,.alert-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.alert-success{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.alert-success hr{border-top-color:#c9e2b3}.alert-success .alert-link{color:#2b542c}.alert-info{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.alert-info hr{border-top-color:#a6e1ec}.alert-info .alert-link{color:#245269}.alert-warning{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.alert-warning hr{border-top-color:#f7e1b5}.alert-warning .alert-link{color:#66512c}.alert-danger{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.alert-danger hr{border-top-color:#e4b9c0}.alert-danger .alert-link{color:#843534}@-webkit-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@-o-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}.progress{height:20px;margin-bottom:20px;overflow:hidden;background-color:#f5f5f5;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,.1);box-shadow:inset 0 1px 2px rgba(0,0,0,.1)}.progress-bar{float:left;width:0;height:100%;font-size:12px;line-height:20px;color:#fff;text-align:center;background-color:#337ab7;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);-webkit-transition:width .6s ease;-o-transition:width .6s ease;transition:width .6s ease}.progress-bar-striped,.progress-striped .progress-bar{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:40px 40px;background-size:40px 40px}.progress-bar.active,.progress.active .progress-bar{-webkit-animation:progress-bar-stripes 2s linear infinite;-o-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-bar-success{background-color:#5cb85c}.progress-striped .progress-bar-success{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-info{background-color:#5bc0de}.progress-striped .progress-bar-info{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-warning{background-color:#f0ad4e}.progress-striped .progress-bar-warning{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-danger{background-color:#d9534f}.progress-striped .progress-bar-danger{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.media{margin-top:15px}.media:first-child{margin-top:0}.media,.media-body{overflow:hidden;zoom:1}.media-body{width:10000px}.media-object{display:block}.media-object.img-thumbnail{max-width:none}.media-right,.media>.pull-right{padding-left:10px}.media-left,.media>.pull-left{padding-right:10px}.media-body,.media-left,.media-right{display:table-cell;vertical-align:top}.media-middle{vertical-align:middle}.media-bottom{vertical-align:bottom}.media-heading{margin-top:0;margin-bottom:5px}.media-list{padding-left:0;list-style:none}.list-group{padding-left:0;margin-bottom:20px}.list-group-item{position:relative;display:block;padding:10px 15px;margin-bottom:-1px;background-color:#fff;border:1px solid #ddd}.list-group-item:first-child{border-top-left-radius:4px;border-top-right-radius:4px}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}a.list-group-item,button.list-group-item{color:#555}a.list-group-item .list-group-item-heading,button.list-group-item .list-group-item-heading{color:#333}a.list-group-item:focus,a.list-group-item:hover,button.list-group-item:focus,button.list-group-item:hover{color:#555;text-decoration:none;background-color:#f5f5f5}button.list-group-item{width:100%;text-align:left}.list-group-item.disabled,.list-group-item.disabled:focus,.list-group-item.disabled:hover{color:#777;cursor:not-allowed;background-color:#eee}.list-group-item.disabled .list-group-item-heading,.list-group-item.disabled:focus .list-group-item-heading,.list-group-item.disabled:hover .list-group-item-heading{color:inherit}.list-group-item.disabled .list-group-item-text,.list-group-item.disabled:focus .list-group-item-text,.list-group-item.disabled:hover .list-group-item-text{color:#777}.list-group-item.active,.list-group-item.active:focus,.list-group-item.active:hover{z-index:2;color:#fff;background-color:#337ab7;border-color:#337ab7}.list-group-item.active .list-group-item-heading,.list-group-item.active .list-group-item-heading>.small,.list-group-item.active .list-group-item-heading>small,.list-group-item.active:focus .list-group-item-heading,.list-group-item.active:focus .list-group-item-heading>.small,.list-group-item.active:focus .list-group-item-heading>small,.list-group-item.active:hover .list-group-item-heading,.list-group-item.active:hover .list-group-item-heading>.small,.list-group-item.active:hover .list-group-item-heading>small{color:inherit}.list-group-item.active .list-group-item-text,.list-group-item.active:focus .list-group-item-text,.list-group-item.active:hover .list-group-item-text{color:#c7ddef}.list-group-item-success{color:#3c763d;background-color:#dff0d8}a.list-group-item-success,button.list-group-item-success{color:#3c763d}a.list-group-item-success .list-group-item-heading,button.list-group-item-success .list-group-item-heading{color:inherit}a.list-group-item-success:focus,a.list-group-item-success:hover,button.list-group-item-success:focus,button.list-group-item-success:hover{color:#3c763d;background-color:#d0e9c6}a.list-group-item-success.active,a.list-group-item-success.active:focus,a.list-group-item-success.active:hover,button.list-group-item-success.active,button.list-group-item-success.active:focus,button.list-group-item-success.active:hover{color:#fff;background-color:#3c763d;border-color:#3c763d}.list-group-item-info{color:#31708f;background-color:#d9edf7}a.list-group-item-info,button.list-group-item-info{color:#31708f}a.list-group-item-info .list-group-item-heading,button.list-group-item-info .list-group-item-heading{color:inherit}a.list-group-item-info:focus,a.list-group-item-info:hover,button.list-group-item-info:focus,button.list-group-item-info:hover{color:#31708f;background-color:#c4e3f3}a.list-group-item-info.active,a.list-group-item-info.active:focus,a.list-group-item-info.active:hover,button.list-group-item-info.active,button.list-group-item-info.active:focus,button.list-group-item-info.active:hover{color:#fff;background-color:#31708f;border-color:#31708f}.list-group-item-warning{color:#8a6d3b;background-color:#fcf8e3}a.list-group-item-warning,button.list-group-item-warning{color:#8a6d3b}a.list-group-item-warning .list-group-item-heading,button.list-group-item-warning .list-group-item-heading{color:inherit}a.list-group-item-warning:focus,a.list-group-item-warning:hover,button.list-group-item-warning:focus,button.list-group-item-warning:hover{color:#8a6d3b;background-color:#faf2cc}a.list-group-item-warning.active,a.list-group-item-warning.active:focus,a.list-group-item-warning.active:hover,button.list-group-item-warning.active,button.list-group-item-warning.active:focus,button.list-group-item-warning.active:hover{color:#fff;background-color:#8a6d3b;border-color:#8a6d3b}.list-group-item-danger{color:#a94442;background-color:#f2dede}a.list-group-item-danger,button.list-group-item-danger{color:#a94442}a.list-group-item-danger .list-group-item-heading,button.list-group-item-danger .list-group-item-heading{color:inherit}a.list-group-item-danger:focus,a.list-group-item-danger:hover,button.list-group-item-danger:focus,button.list-group-item-danger:hover{color:#a94442;background-color:#ebcccc}a.list-group-item-danger.active,a.list-group-item-danger.active:focus,a.list-group-item-danger.active:hover,button.list-group-item-danger.active,button.list-group-item-danger.active:focus,button.list-group-item-danger.active:hover{color:#fff;background-color:#a94442;border-color:#a94442}.list-group-item-heading{margin-top:0;margin-bottom:5px}.list-group-item-text{margin-bottom:0;line-height:1.3}.panel{margin-bottom:20px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}.panel-body{padding:15px}.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-left-radius:3px;border-top-right-radius:3px}.panel-heading>.dropdown .dropdown-toggle{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px;color:inherit}.panel-title>.small,.panel-title>.small>a,.panel-title>a,.panel-title>small,.panel-title>small>a{color:inherit}.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #ddd;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.list-group,.panel>.panel-collapse>.list-group{margin-bottom:0}.panel>.list-group .list-group-item,.panel>.panel-collapse>.list-group .list-group-item{border-width:1px 0;border-radius:0}.panel>.list-group:first-child .list-group-item:first-child,.panel>.panel-collapse>.list-group:first-child .list-group-item:first-child{border-top:0;border-top-left-radius:3px;border-top-right-radius:3px}.panel>.list-group:last-child .list-group-item:last-child,.panel>.panel-collapse>.list-group:last-child .list-group-item:last-child{border-bottom:0;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.panel-heading+.panel-collapse>.list-group .list-group-item:first-child{border-top-left-radius:0;border-top-right-radius:0}.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}.list-group+.panel-footer{border-top-width:0}.panel>.panel-collapse>.table,.panel>.table,.panel>.table-responsive>.table{margin-bottom:0}.panel>.panel-collapse>.table caption,.panel>.table caption,.panel>.table-responsive>.table caption{padding-right:15px;padding-left:15px}.panel>.table-responsive:first-child>.table:first-child,.panel>.table:first-child{border-top-left-radius:3px;border-top-right-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child,.panel>.table:first-child>thead:first-child>tr:first-child{border-top-left-radius:3px;border-top-right-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table:first-child>thead:first-child>tr:first-child th:first-child{border-top-left-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table:first-child>thead:first-child>tr:first-child th:last-child{border-top-right-radius:3px}.panel>.table-responsive:last-child>.table:last-child,.panel>.table:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:first-child{border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:last-child{border-bottom-right-radius:3px}.panel>.panel-body+.table,.panel>.panel-body+.table-responsive,.panel>.table+.panel-body,.panel>.table-responsive+.panel-body{border-top:1px solid #ddd}.panel>.table>tbody:first-child>tr:first-child td,.panel>.table>tbody:first-child>tr:first-child th{border-top:0}.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.panel>.table-bordered>tbody>tr:first-child>td,.panel>.table-bordered>tbody>tr:first-child>th,.panel>.table-bordered>thead>tr:first-child>td,.panel>.table-bordered>thead>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>th,.panel>.table-responsive>.table-bordered>thead>tr:first-child>td,.panel>.table-responsive>.table-bordered>thead>tr:first-child>th{border-bottom:0}.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}.panel>.table-responsive{margin-bottom:0;border:0}.panel-group{margin-bottom:20px}.panel-group .panel{margin-bottom:0;border-radius:4px}.panel-group .panel+.panel{margin-top:5px}.panel-group .panel-heading{border-bottom:0}.panel-group .panel-heading+.panel-collapse>.list-group,.panel-group .panel-heading+.panel-collapse>.panel-body{border-top:1px solid #ddd}.panel-group .panel-footer{border-top:0}.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #ddd}.panel-default{border-color:#ddd}.panel-default>.panel-heading{color:#333;background-color:#f5f5f5;border-color:#ddd}.panel-default>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ddd}.panel-default>.panel-heading .badge{color:#f5f5f5;background-color:#333}.panel-default>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ddd}.panel-primary{border-color:#337ab7}.panel-primary>.panel-heading{color:#fff;background-color:#337ab7;border-color:#337ab7}.panel-primary>.panel-heading+.panel-collapse>.panel-body{border-top-color:#337ab7}.panel-primary>.panel-heading .badge{color:#337ab7;background-color:#fff}.panel-primary>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#337ab7}.panel-success{border-color:#d6e9c6}.panel-success>.panel-heading{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.panel-success>.panel-heading+.panel-collapse>.panel-body{border-top-color:#d6e9c6}.panel-success>.panel-heading .badge{color:#dff0d8;background-color:#3c763d}.panel-success>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#d6e9c6}.panel-info{border-color:#bce8f1}.panel-info>.panel-heading{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.panel-info>.panel-heading+.panel-collapse>.panel-body{border-top-color:#bce8f1}.panel-info>.panel-heading .badge{color:#d9edf7;background-color:#31708f}.panel-info>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#bce8f1}.panel-warning{border-color:#faebcc}.panel-warning>.panel-heading{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.panel-warning>.panel-heading+.panel-collapse>.panel-body{border-top-color:#faebcc}.panel-warning>.panel-heading .badge{color:#fcf8e3;background-color:#8a6d3b}.panel-warning>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#faebcc}.panel-danger{border-color:#ebccd1}.panel-danger>.panel-heading{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.panel-danger>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ebccd1}.panel-danger>.panel-heading .badge{color:#f2dede;background-color:#a94442}.panel-danger>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ebccd1}.embed-responsive{position:relative;display:block;height:0;padding:0;overflow:hidden}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-16by9{padding-bottom:56.25%}.embed-responsive-4by3{padding-bottom:75%}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.05);box-shadow:inset 0 1px 1px rgba(0,0,0,.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:21px;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;filter:alpha(opacity=20);opacity:.2}.close:focus,.close:hover{color:#000;text-decoration:none;cursor:pointer;filter:alpha(opacity=50);opacity:.5}button.close{-webkit-appearance:none;padding:0;cursor:pointer;background:0 0;border:0}.modal-open{overflow:hidden}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;display:none;overflow:hidden;-webkit-overflow-scrolling:touch;outline:0}.modal.fade .modal-dialog{-webkit-transition:-webkit-transform .3s ease-out;-o-transition:-o-transform .3s ease-out;transition:transform .3s ease-out;-webkit-transform:translate(0,-25%);-ms-transform:translate(0,-25%);-o-transform:translate(0,-25%);transform:translate(0,-25%)}.modal.in .modal-dialog{-webkit-transform:translate(0,0);-ms-transform:translate(0,0);-o-transform:translate(0,0);transform:translate(0,0)}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:10px}.modal-content{position:relative;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #999;border:1px solid rgba(0,0,0,.2);border-radius:6px;outline:0;-webkit-box-shadow:0 3px 9px rgba(0,0,0,.5);box-shadow:0 3px 9px rgba(0,0,0,.5)}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{filter:alpha(opacity=0);opacity:0}.modal-backdrop.in{filter:alpha(opacity=50);opacity:.5}.modal-header{padding:15px;border-bottom:1px solid #e5e5e5}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.42857143}.modal-body{position:relative;padding:15px}.modal-footer{padding:15px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer .btn+.btn{margin-bottom:0;margin-left:5px}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:768px){.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,.5);box-shadow:0 5px 15px rgba(0,0,0,.5)}.modal-sm{width:300px}}@media (min-width:992px){.modal-lg{width:900px}}.tooltip{position:absolute;z-index:1070;display:block;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:12px;font-style:normal;font-weight:400;line-height:1.42857143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;word-wrap:normal;white-space:normal;filter:alpha(opacity=0);opacity:0;line-break:auto}.tooltip.in{filter:alpha(opacity=90);opacity:.9}.tooltip.top{padding:5px 0;margin-top:-3px}.tooltip.right{padding:0 5px;margin-left:3px}.tooltip.bottom{padding:5px 0;margin-top:3px}.tooltip.left{padding:0 5px;margin-left:-3px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-left .tooltip-arrow{right:5px;bottom:0;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-right .tooltip-arrow{bottom:0;left:5px;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-left .tooltip-arrow{top:0;right:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-right .tooltip-arrow{top:0;left:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.popover{position:absolute;top:0;left:0;z-index:1060;display:none;max-width:276px;padding:1px;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;font-weight:400;line-height:1.42857143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;word-wrap:normal;white-space:normal;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.2);border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,.2);box-shadow:0 5px 10px rgba(0,0,0,.2);line-break:auto}.popover.top{margin-top:-10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-left:-10px}.popover-title{padding:8px 14px;margin:0;font-size:14px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.popover-content{padding:9px 14px}.popover>.arrow,.popover>.arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover>.arrow{border-width:11px}.popover>.arrow:after{content:\"\";border-width:10px}.popover.top>.arrow{bottom:-11px;left:50%;margin-left:-11px;border-top-color:#999;border-top-color:rgba(0,0,0,.25);border-bottom-width:0}.popover.top>.arrow:after{bottom:1px;margin-left:-10px;content:\" \";border-top-color:#fff;border-bottom-width:0}.popover.right>.arrow{top:50%;left:-11px;margin-top:-11px;border-right-color:#999;border-right-color:rgba(0,0,0,.25);border-left-width:0}.popover.right>.arrow:after{bottom:-10px;left:1px;content:\" \";border-right-color:#fff;border-left-width:0}.popover.bottom>.arrow{top:-11px;left:50%;margin-left:-11px;border-top-width:0;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,.25)}.popover.bottom>.arrow:after{top:1px;margin-left:-10px;content:\" \";border-top-width:0;border-bottom-color:#fff}.popover.left>.arrow{top:50%;right:-11px;margin-top:-11px;border-right-width:0;border-left-color:#999;border-left-color:rgba(0,0,0,.25)}.popover.left>.arrow:after{right:1px;bottom:-10px;content:\" \";border-right-width:0;border-left-color:#fff}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner>.item{position:relative;display:none;-webkit-transition:.6s ease-in-out left;-o-transition:.6s ease-in-out left;transition:.6s ease-in-out left}.carousel-inner>.item>a>img,.carousel-inner>.item>img{line-height:1}@media all and (transform-3d),(-webkit-transform-3d){.carousel-inner>.item{-webkit-transition:-webkit-transform .6s ease-in-out;-o-transition:-o-transform .6s ease-in-out;transition:transform .6s ease-in-out;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.carousel-inner>.item.active.right,.carousel-inner>.item.next{left:0;-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}.carousel-inner>.item.active.left,.carousel-inner>.item.prev{left:0;-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}.carousel-inner>.item.active,.carousel-inner>.item.next.left,.carousel-inner>.item.prev.right{left:0;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}.carousel-inner>.active{left:0}.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}.carousel-inner>.next{left:100%}.carousel-inner>.prev{left:-100%}.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}.carousel-inner>.active.left{left:-100%}.carousel-inner>.active.right{left:100%}.carousel-control{position:absolute;top:0;bottom:0;left:0;width:15%;font-size:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6);background-color:rgba(0,0,0,0);filter:alpha(opacity=50);opacity:.5}.carousel-control.left{background-image:-webkit-linear-gradient(left,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);background-image:-o-linear-gradient(left,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,.0001)));background-image:linear-gradient(to right,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);background-repeat:repeat-x}.carousel-control.right{right:0;left:auto;background-image:-webkit-linear-gradient(left,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);background-image:-o-linear-gradient(left,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.0001)),to(rgba(0,0,0,.5)));background-image:linear-gradient(to right,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);background-repeat:repeat-x}.carousel-control:focus,.carousel-control:hover{color:#fff;text-decoration:none;filter:alpha(opacity=90);outline:0;opacity:.9}.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{position:absolute;top:50%;z-index:5;display:inline-block;margin-top:-10px}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{left:50%;margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{right:50%;margin-right:-10px}.carousel-control .icon-next,.carousel-control .icon-prev{width:20px;height:20px;font-family:serif;line-height:1}.carousel-control .icon-prev:before{content:'\\2039'}.carousel-control .icon-next:before{content:'\\203a'}.carousel-indicators{position:absolute;bottom:10px;left:50%;z-index:15;width:60%;padding-left:0;margin-left:-30%;text-align:center;list-style:none}.carousel-indicators li{display:inline-block;width:10px;height:10px;margin:1px;text-indent:-999px;cursor:pointer;background-color:#000\\9;background-color:rgba(0,0,0,0);border:1px solid #fff;border-radius:10px}.carousel-indicators .active{width:12px;height:12px;margin:0;background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6)}.carousel-caption .btn{text-shadow:none}@media screen and (min-width:768px){.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{width:30px;height:30px;margin-top:-10px;font-size:30px}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{margin-right:-10px}.carousel-caption{right:20%;left:20%;padding-bottom:30px}.carousel-indicators{bottom:20px}}.btn-group-vertical>.btn-group:after,.btn-group-vertical>.btn-group:before,.btn-toolbar:after,.btn-toolbar:before,.clearfix:after,.clearfix:before,.container-fluid:after,.container-fluid:before,.container:after,.container:before,.dl-horizontal dd:after,.dl-horizontal dd:before,.form-horizontal .form-group:after,.form-horizontal .form-group:before,.modal-footer:after,.modal-footer:before,.modal-header:after,.modal-header:before,.nav:after,.nav:before,.navbar-collapse:after,.navbar-collapse:before,.navbar-header:after,.navbar-header:before,.navbar:after,.navbar:before,.pager:after,.pager:before,.panel-body:after,.panel-body:before,.row:after,.row:before{display:table;content:\" \"}.btn-group-vertical>.btn-group:after,.btn-toolbar:after,.clearfix:after,.container-fluid:after,.container:after,.dl-horizontal dd:after,.form-horizontal .form-group:after,.modal-footer:after,.modal-header:after,.nav:after,.navbar-collapse:after,.navbar-header:after,.navbar:after,.pager:after,.panel-body:after,.row:after{clear:both}.center-block{display:block;margin-right:auto;margin-left:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-lg,.visible-md,.visible-sm,.visible-xs{display:none!important}.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block{display:none!important}@media (max-width:767px){.visible-xs{display:block!important}table.visible-xs{display:table!important}tr.visible-xs{display:table-row!important}td.visible-xs,th.visible-xs{display:table-cell!important}}@media (max-width:767px){.visible-xs-block{display:block!important}}@media (max-width:767px){.visible-xs-inline{display:inline!important}}@media (max-width:767px){.visible-xs-inline-block{display:inline-block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm{display:block!important}table.visible-sm{display:table!important}tr.visible-sm{display:table-row!important}td.visible-sm,th.visible-sm{display:table-cell!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-block{display:block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline{display:inline!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline-block{display:inline-block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md{display:block!important}table.visible-md{display:table!important}tr.visible-md{display:table-row!important}td.visible-md,th.visible-md{display:table-cell!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-block{display:block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline{display:inline!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline-block{display:inline-block!important}}@media (min-width:1200px){.visible-lg{display:block!important}table.visible-lg{display:table!important}tr.visible-lg{display:table-row!important}td.visible-lg,th.visible-lg{display:table-cell!important}}@media (min-width:1200px){.visible-lg-block{display:block!important}}@media (min-width:1200px){.visible-lg-inline{display:inline!important}}@media (min-width:1200px){.visible-lg-inline-block{display:inline-block!important}}@media (max-width:767px){.hidden-xs{display:none!important}}@media (min-width:768px) and (max-width:991px){.hidden-sm{display:none!important}}@media (min-width:992px) and (max-width:1199px){.hidden-md{display:none!important}}@media (min-width:1200px){.hidden-lg{display:none!important}}.visible-print{display:none!important}@media print{.visible-print{display:block!important}table.visible-print{display:table!important}tr.visible-print{display:table-row!important}td.visible-print,th.visible-print{display:table-cell!important}}.visible-print-block{display:none!important}@media print{.visible-print-block{display:block!important}}.visible-print-inline{display:none!important}@media print{.visible-print-inline{display:inline!important}}.visible-print-inline-block{display:none!important}@media print{.visible-print-inline-block{display:inline-block!important}}@media print{.hidden-print{display:none!important}}\n/*# sourceMappingURL=bootstrap.min.css.map */"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "209.197.3.15",
        "startedDateTime": "2020-11-19T18:05:03.213Z",
        "time": 0.07300000015675323,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.05599999985861359,
          "receive": 0.01700000029813964,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/",
          "lineNumber": 16
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "54817",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/elm.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 16:54:16 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"cf12e-175e16d935c\""
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 725,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 19 Nov 2020 16:54:16 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"cf12e-175e16d935c\""
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 848174,
            "mimeType": "text/plain",
            "text": "(function(scope){\n'use strict';\n\nfunction F(arity, fun, wrapper) {\n  wrapper.a = arity;\n  wrapper.f = fun;\n  return wrapper;\n}\n\nfunction F2(fun) {\n  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })\n}\nfunction F3(fun) {\n  return F(3, fun, function(a) {\n    return function(b) { return function(c) { return fun(a, b, c); }; };\n  });\n}\nfunction F4(fun) {\n  return F(4, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return fun(a, b, c, d); }; }; };\n  });\n}\nfunction F5(fun) {\n  return F(5, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };\n  });\n}\nfunction F6(fun) {\n  return F(6, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return fun(a, b, c, d, e, f); }; }; }; }; };\n  });\n}\nfunction F7(fun) {\n  return F(7, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };\n  });\n}\nfunction F8(fun) {\n  return F(8, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return function(g) { return function(h) {\n    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };\n  });\n}\nfunction F9(fun) {\n  return F(9, fun, function(a) { return function(b) { return function(c) {\n    return function(d) { return function(e) { return function(f) {\n    return function(g) { return function(h) { return function(i) {\n    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };\n  });\n}\n\nfunction A2(fun, a, b) {\n  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);\n}\nfunction A3(fun, a, b, c) {\n  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);\n}\nfunction A4(fun, a, b, c, d) {\n  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);\n}\nfunction A5(fun, a, b, c, d, e) {\n  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);\n}\nfunction A6(fun, a, b, c, d, e, f) {\n  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);\n}\nfunction A7(fun, a, b, c, d, e, f, g) {\n  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);\n}\nfunction A8(fun, a, b, c, d, e, f, g, h) {\n  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);\n}\nfunction A9(fun, a, b, c, d, e, f, g, h, i) {\n  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);\n}\n\nconsole.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.0/optimize for better performance and smaller assets.');\n\n\nvar _List_Nil_UNUSED = { $: 0 };\nvar _List_Nil = { $: '[]' };\n\nfunction _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }\nfunction _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }\n\n\nvar _List_cons = F2(_List_Cons);\n\nfunction _List_fromArray(arr)\n{\n\tvar out = _List_Nil;\n\tfor (var i = arr.length; i--; )\n\t{\n\t\tout = _List_Cons(arr[i], out);\n\t}\n\treturn out;\n}\n\nfunction _List_toArray(xs)\n{\n\tfor (var out = []; xs.b; xs = xs.b) // WHILE_CONS\n\t{\n\t\tout.push(xs.a);\n\t}\n\treturn out;\n}\n\nvar _List_map2 = F3(function(f, xs, ys)\n{\n\tfor (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A2(f, xs.a, ys.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_map3 = F4(function(f, xs, ys, zs)\n{\n\tfor (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A3(f, xs.a, ys.a, zs.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_map4 = F5(function(f, ws, xs, ys, zs)\n{\n\tfor (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A4(f, ws.a, xs.a, ys.a, zs.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_map5 = F6(function(f, vs, ws, xs, ys, zs)\n{\n\tfor (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES\n\t{\n\t\tarr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));\n\t}\n\treturn _List_fromArray(arr);\n});\n\nvar _List_sortBy = F2(function(f, xs)\n{\n\treturn _List_fromArray(_List_toArray(xs).sort(function(a, b) {\n\t\treturn _Utils_cmp(f(a), f(b));\n\t}));\n});\n\nvar _List_sortWith = F2(function(f, xs)\n{\n\treturn _List_fromArray(_List_toArray(xs).sort(function(a, b) {\n\t\tvar ord = A2(f, a, b);\n\t\treturn ord === elm$core$Basics$EQ ? 0 : ord === elm$core$Basics$LT ? -1 : 1;\n\t}));\n});\n\n\n\n// EQUALITY\n\nfunction _Utils_eq(x, y)\n{\n\tfor (\n\t\tvar pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);\n\t\tisEqual && (pair = stack.pop());\n\t\tisEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)\n\t\t)\n\t{}\n\n\treturn isEqual;\n}\n\nfunction _Utils_eqHelp(x, y, depth, stack)\n{\n\tif (depth > 100)\n\t{\n\t\tstack.push(_Utils_Tuple2(x,y));\n\t\treturn true;\n\t}\n\n\tif (x === y)\n\t{\n\t\treturn true;\n\t}\n\n\tif (typeof x !== 'object' || x === null || y === null)\n\t{\n\t\ttypeof x === 'function' && _Debug_crash(5);\n\t\treturn false;\n\t}\n\n\t/**/\n\tif (x.$ === 'Set_elm_builtin')\n\t{\n\t\tx = elm$core$Set$toList(x);\n\t\ty = elm$core$Set$toList(y);\n\t}\n\tif (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')\n\t{\n\t\tx = elm$core$Dict$toList(x);\n\t\ty = elm$core$Dict$toList(y);\n\t}\n\t//*/\n\n\t/**_UNUSED/\n\tif (x.$ < 0)\n\t{\n\t\tx = elm$core$Dict$toList(x);\n\t\ty = elm$core$Dict$toList(y);\n\t}\n\t//*/\n\n\tfor (var key in x)\n\t{\n\t\tif (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nvar _Utils_equal = F2(_Utils_eq);\nvar _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });\n\n\n\n// COMPARISONS\n\n// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on\n// the particular integer values assigned to LT, EQ, and GT.\n\nfunction _Utils_cmp(x, y, ord)\n{\n\tif (typeof x !== 'object')\n\t{\n\t\treturn x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;\n\t}\n\n\t/**/\n\tif (x instanceof String)\n\t{\n\t\tvar a = x.valueOf();\n\t\tvar b = y.valueOf();\n\t\treturn a === b ? 0 : a < b ? -1 : 1;\n\t}\n\t//*/\n\n\t/**_UNUSED/\n\tif (typeof x.$ === 'undefined')\n\t//*/\n\t/**/\n\tif (x.$[0] === '#')\n\t//*/\n\t{\n\t\treturn (ord = _Utils_cmp(x.a, y.a))\n\t\t\t? ord\n\t\t\t: (ord = _Utils_cmp(x.b, y.b))\n\t\t\t\t? ord\n\t\t\t\t: _Utils_cmp(x.c, y.c);\n\t}\n\n\t// traverse conses until end of a list or a mismatch\n\tfor (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES\n\treturn ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);\n}\n\nvar _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });\nvar _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });\nvar _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });\nvar _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });\n\nvar _Utils_compare = F2(function(x, y)\n{\n\tvar n = _Utils_cmp(x, y);\n\treturn n < 0 ? elm$core$Basics$LT : n ? elm$core$Basics$GT : elm$core$Basics$EQ;\n});\n\n\n// COMMON VALUES\n\nvar _Utils_Tuple0_UNUSED = 0;\nvar _Utils_Tuple0 = { $: '#0' };\n\nfunction _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }\nfunction _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }\n\nfunction _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }\nfunction _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }\n\nfunction _Utils_chr_UNUSED(c) { return c; }\nfunction _Utils_chr(c) { return new String(c); }\n\n\n// RECORDS\n\nfunction _Utils_update(oldRecord, updatedFields)\n{\n\tvar newRecord = {};\n\n\tfor (var key in oldRecord)\n\t{\n\t\tnewRecord[key] = oldRecord[key];\n\t}\n\n\tfor (var key in updatedFields)\n\t{\n\t\tnewRecord[key] = updatedFields[key];\n\t}\n\n\treturn newRecord;\n}\n\n\n// APPEND\n\nvar _Utils_append = F2(_Utils_ap);\n\nfunction _Utils_ap(xs, ys)\n{\n\t// append Strings\n\tif (typeof xs === 'string')\n\t{\n\t\treturn xs + ys;\n\t}\n\n\t// append Lists\n\tif (!xs.b)\n\t{\n\t\treturn ys;\n\t}\n\tvar root = _List_Cons(xs.a, ys);\n\txs = xs.b\n\tfor (var curr = root; xs.b; xs = xs.b) // WHILE_CONS\n\t{\n\t\tcurr = curr.b = _List_Cons(xs.a, ys);\n\t}\n\treturn root;\n}\n\n\n\nvar _JsArray_empty = [];\n\nfunction _JsArray_singleton(value)\n{\n    return [value];\n}\n\nfunction _JsArray_length(array)\n{\n    return array.length;\n}\n\nvar _JsArray_initialize = F3(function(size, offset, func)\n{\n    var result = new Array(size);\n\n    for (var i = 0; i < size; i++)\n    {\n        result[i] = func(offset + i);\n    }\n\n    return result;\n});\n\nvar _JsArray_initializeFromList = F2(function (max, ls)\n{\n    var result = new Array(max);\n\n    for (var i = 0; i < max && ls.b; i++)\n    {\n        result[i] = ls.a;\n        ls = ls.b;\n    }\n\n    result.length = i;\n    return _Utils_Tuple2(result, ls);\n});\n\nvar _JsArray_unsafeGet = F2(function(index, array)\n{\n    return array[index];\n});\n\nvar _JsArray_unsafeSet = F3(function(index, value, array)\n{\n    var length = array.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = array[i];\n    }\n\n    result[index] = value;\n    return result;\n});\n\nvar _JsArray_push = F2(function(value, array)\n{\n    var length = array.length;\n    var result = new Array(length + 1);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = array[i];\n    }\n\n    result[length] = value;\n    return result;\n});\n\nvar _JsArray_foldl = F3(function(func, acc, array)\n{\n    var length = array.length;\n\n    for (var i = 0; i < length; i++)\n    {\n        acc = A2(func, array[i], acc);\n    }\n\n    return acc;\n});\n\nvar _JsArray_foldr = F3(function(func, acc, array)\n{\n    for (var i = array.length - 1; i >= 0; i--)\n    {\n        acc = A2(func, array[i], acc);\n    }\n\n    return acc;\n});\n\nvar _JsArray_map = F2(function(func, array)\n{\n    var length = array.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = func(array[i]);\n    }\n\n    return result;\n});\n\nvar _JsArray_indexedMap = F3(function(func, offset, array)\n{\n    var length = array.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++)\n    {\n        result[i] = A2(func, offset + i, array[i]);\n    }\n\n    return result;\n});\n\nvar _JsArray_slice = F3(function(from, to, array)\n{\n    return array.slice(from, to);\n});\n\nvar _JsArray_appendN = F3(function(n, dest, source)\n{\n    var destLen = dest.length;\n    var itemsToCopy = n - destLen;\n\n    if (itemsToCopy > source.length)\n    {\n        itemsToCopy = source.length;\n    }\n\n    var size = destLen + itemsToCopy;\n    var result = new Array(size);\n\n    for (var i = 0; i < destLen; i++)\n    {\n        result[i] = dest[i];\n    }\n\n    for (var i = 0; i < itemsToCopy; i++)\n    {\n        result[i + destLen] = source[i];\n    }\n\n    return result;\n});\n\n\n\n// LOG\n\nvar _Debug_log_UNUSED = F2(function(tag, value)\n{\n\treturn value;\n});\n\nvar _Debug_log = F2(function(tag, value)\n{\n\tconsole.log(tag + ': ' + _Debug_toString(value));\n\treturn value;\n});\n\n\n// TODOS\n\nfunction _Debug_todo(moduleName, region)\n{\n\treturn function(message) {\n\t\t_Debug_crash(8, moduleName, region, message);\n\t};\n}\n\nfunction _Debug_todoCase(moduleName, region, value)\n{\n\treturn function(message) {\n\t\t_Debug_crash(9, moduleName, region, value, message);\n\t};\n}\n\n\n// TO STRING\n\nfunction _Debug_toString_UNUSED(value)\n{\n\treturn '<internals>';\n}\n\nfunction _Debug_toString(value)\n{\n\treturn _Debug_toAnsiString(false, value);\n}\n\nfunction _Debug_toAnsiString(ansi, value)\n{\n\tif (typeof value === 'function')\n\t{\n\t\treturn _Debug_internalColor(ansi, '<function>');\n\t}\n\n\tif (typeof value === 'boolean')\n\t{\n\t\treturn _Debug_ctorColor(ansi, value ? 'True' : 'False');\n\t}\n\n\tif (typeof value === 'number')\n\t{\n\t\treturn _Debug_numberColor(ansi, value + '');\n\t}\n\n\tif (value instanceof String)\n\t{\n\t\treturn _Debug_charColor(ansi, \"'\" + _Debug_addSlashes(value, true) + \"'\");\n\t}\n\n\tif (typeof value === 'string')\n\t{\n\t\treturn _Debug_stringColor(ansi, '\"' + _Debug_addSlashes(value, false) + '\"');\n\t}\n\n\tif (typeof value === 'object' && '$' in value)\n\t{\n\t\tvar tag = value.$;\n\n\t\tif (typeof tag === 'number')\n\t\t{\n\t\t\treturn _Debug_internalColor(ansi, '<internals>');\n\t\t}\n\n\t\tif (tag[0] === '#')\n\t\t{\n\t\t\tvar output = [];\n\t\t\tfor (var k in value)\n\t\t\t{\n\t\t\t\tif (k === '$') continue;\n\t\t\t\toutput.push(_Debug_toAnsiString(ansi, value[k]));\n\t\t\t}\n\t\t\treturn '(' + output.join(',') + ')';\n\t\t}\n\n\t\tif (tag === 'Set_elm_builtin')\n\t\t{\n\t\t\treturn _Debug_ctorColor(ansi, 'Set')\n\t\t\t\t+ _Debug_fadeColor(ansi, '.fromList') + ' '\n\t\t\t\t+ _Debug_toAnsiString(ansi, elm$core$Set$toList(value));\n\t\t}\n\n\t\tif (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')\n\t\t{\n\t\t\treturn _Debug_ctorColor(ansi, 'Dict')\n\t\t\t\t+ _Debug_fadeColor(ansi, '.fromList') + ' '\n\t\t\t\t+ _Debug_toAnsiString(ansi, elm$core$Dict$toList(value));\n\t\t}\n\n\t\tif (tag === 'Array_elm_builtin')\n\t\t{\n\t\t\treturn _Debug_ctorColor(ansi, 'Array')\n\t\t\t\t+ _Debug_fadeColor(ansi, '.fromList') + ' '\n\t\t\t\t+ _Debug_toAnsiString(ansi, elm$core$Array$toList(value));\n\t\t}\n\n\t\tif (tag === '::' || tag === '[]')\n\t\t{\n\t\t\tvar output = '[';\n\n\t\t\tvalue.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)\n\n\t\t\tfor (; value.b; value = value.b) // WHILE_CONS\n\t\t\t{\n\t\t\t\toutput += ',' + _Debug_toAnsiString(ansi, value.a);\n\t\t\t}\n\t\t\treturn output + ']';\n\t\t}\n\n\t\tvar output = '';\n\t\tfor (var i in value)\n\t\t{\n\t\t\tif (i === '$') continue;\n\t\t\tvar str = _Debug_toAnsiString(ansi, value[i]);\n\t\t\tvar c0 = str[0];\n\t\t\tvar parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '\"' || str.indexOf(' ') < 0;\n\t\t\toutput += ' ' + (parenless ? str : '(' + str + ')');\n\t\t}\n\t\treturn _Debug_ctorColor(ansi, tag) + output;\n\t}\n\n\tif (typeof DataView === 'function' && value instanceof DataView)\n\t{\n\t\treturn _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');\n\t}\n\n\tif (typeof File === 'function' && value instanceof File)\n\t{\n\t\treturn _Debug_internalColor(ansi, '<' + value.name + '>');\n\t}\n\n\tif (typeof value === 'object')\n\t{\n\t\tvar output = [];\n\t\tfor (var key in value)\n\t\t{\n\t\t\tvar field = key[0] === '_' ? key.slice(1) : key;\n\t\t\toutput.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));\n\t\t}\n\t\tif (output.length === 0)\n\t\t{\n\t\t\treturn '{}';\n\t\t}\n\t\treturn '{ ' + output.join(', ') + ' }';\n\t}\n\n\treturn _Debug_internalColor(ansi, '<internals>');\n}\n\nfunction _Debug_addSlashes(str, isChar)\n{\n\tvar s = str\n\t\t.replace(/\\\\/g, '\\\\\\\\')\n\t\t.replace(/\\n/g, '\\\\n')\n\t\t.replace(/\\t/g, '\\\\t')\n\t\t.replace(/\\r/g, '\\\\r')\n\t\t.replace(/\\v/g, '\\\\v')\n\t\t.replace(/\\0/g, '\\\\0');\n\n\tif (isChar)\n\t{\n\t\treturn s.replace(/\\'/g, '\\\\\\'');\n\t}\n\telse\n\t{\n\t\treturn s.replace(/\\\"/g, '\\\\\"');\n\t}\n}\n\nfunction _Debug_ctorColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[96m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_numberColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[95m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_stringColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[93m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_charColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[92m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_fadeColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[37m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_internalColor(ansi, string)\n{\n\treturn ansi ? '\\x1b[94m' + string + '\\x1b[0m' : string;\n}\n\nfunction _Debug_toHexDigit(n)\n{\n\treturn String.fromCharCode(n < 10 ? 48 + n : 55 + n);\n}\n\n\n// CRASH\n\n\nfunction _Debug_crash_UNUSED(identifier)\n{\n\tthrow new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');\n}\n\n\nfunction _Debug_crash(identifier, fact1, fact2, fact3, fact4)\n{\n\tswitch(identifier)\n\t{\n\t\tcase 0:\n\t\t\tthrow new Error('What node should I take over? In JavaScript I need something like:\\n\\n    Elm.Main.init({\\n        node: document.getElementById(\"elm-node\")\\n    })\\n\\nYou need to do this with any Browser.sandbox or Browser.element program.');\n\n\t\tcase 1:\n\t\t\tthrow new Error('Browser.application programs cannot handle URLs like this:\\n\\n    ' + document.location.href + '\\n\\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');\n\n\t\tcase 2:\n\t\t\tvar jsonErrorString = fact1;\n\t\t\tthrow new Error('Problem with the flags given to your Elm program on initialization.\\n\\n' + jsonErrorString);\n\n\t\tcase 3:\n\t\t\tvar portName = fact1;\n\t\t\tthrow new Error('There can only be one port named `' + portName + '`, but your program has multiple.');\n\n\t\tcase 4:\n\t\t\tvar portName = fact1;\n\t\t\tvar problem = fact2;\n\t\t\tthrow new Error('Trying to send an unexpected type of value through port `' + portName + '`:\\n' + problem);\n\n\t\tcase 5:\n\t\t\tthrow new Error('Trying to use `(==)` on functions.\\nThere is no way to know if functions are \"the same\" in the Elm sense.\\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');\n\n\t\tcase 6:\n\t\t\tvar moduleName = fact1;\n\t\t\tthrow new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');\n\n\t\tcase 8:\n\t\t\tvar moduleName = fact1;\n\t\t\tvar region = fact2;\n\t\t\tvar message = fact3;\n\t\t\tthrow new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\\n\\n' + message);\n\n\t\tcase 9:\n\t\t\tvar moduleName = fact1;\n\t\t\tvar region = fact2;\n\t\t\tvar value = fact3;\n\t\t\tvar message = fact4;\n\t\t\tthrow new Error(\n\t\t\t\t'TODO in module `' + moduleName + '` from the `case` expression '\n\t\t\t\t+ _Debug_regionToString(region) + '\\n\\nIt received the following value:\\n\\n    '\n\t\t\t\t+ _Debug_toString(value).replace('\\n', '\\n    ')\n\t\t\t\t+ '\\n\\nBut the branch that handles it says:\\n\\n    ' + message.replace('\\n', '\\n    ')\n\t\t\t);\n\n\t\tcase 10:\n\t\t\tthrow new Error('Bug in https://github.com/elm/virtual-dom/issues');\n\n\t\tcase 11:\n\t\t\tthrow new Error('Cannot perform mod 0. Division by zero error.');\n\t}\n}\n\nfunction _Debug_regionToString(region)\n{\n\tif (region.start.line === region.end.line)\n\t{\n\t\treturn 'on line ' + region.start.line;\n\t}\n\treturn 'on lines ' + region.start.line + ' through ' + region.end.line;\n}\n\n\n\n// MATH\n\nvar _Basics_add = F2(function(a, b) { return a + b; });\nvar _Basics_sub = F2(function(a, b) { return a - b; });\nvar _Basics_mul = F2(function(a, b) { return a * b; });\nvar _Basics_fdiv = F2(function(a, b) { return a / b; });\nvar _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });\nvar _Basics_pow = F2(Math.pow);\n\nvar _Basics_remainderBy = F2(function(b, a) { return a % b; });\n\n// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf\nvar _Basics_modBy = F2(function(modulus, x)\n{\n\tvar answer = x % modulus;\n\treturn modulus === 0\n\t\t? _Debug_crash(11)\n\t\t:\n\t((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))\n\t\t? answer + modulus\n\t\t: answer;\n});\n\n\n// TRIGONOMETRY\n\nvar _Basics_pi = Math.PI;\nvar _Basics_e = Math.E;\nvar _Basics_cos = Math.cos;\nvar _Basics_sin = Math.sin;\nvar _Basics_tan = Math.tan;\nvar _Basics_acos = Math.acos;\nvar _Basics_asin = Math.asin;\nvar _Basics_atan = Math.atan;\nvar _Basics_atan2 = F2(Math.atan2);\n\n\n// MORE MATH\n\nfunction _Basics_toFloat(x) { return x; }\nfunction _Basics_truncate(n) { return n | 0; }\nfunction _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }\n\nvar _Basics_ceiling = Math.ceil;\nvar _Basics_floor = Math.floor;\nvar _Basics_round = Math.round;\nvar _Basics_sqrt = Math.sqrt;\nvar _Basics_log = Math.log;\nvar _Basics_isNaN = isNaN;\n\n\n// BOOLEANS\n\nfunction _Basics_not(bool) { return !bool; }\nvar _Basics_and = F2(function(a, b) { return a && b; });\nvar _Basics_or  = F2(function(a, b) { return a || b; });\nvar _Basics_xor = F2(function(a, b) { return a !== b; });\n\n\n\nfunction _Char_toCode(char)\n{\n\tvar code = char.charCodeAt(0);\n\tif (0xD800 <= code && code <= 0xDBFF)\n\t{\n\t\treturn (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000\n\t}\n\treturn code;\n}\n\nfunction _Char_fromCode(code)\n{\n\treturn _Utils_chr(\n\t\t(code < 0 || 0x10FFFF < code)\n\t\t\t? '\\uFFFD'\n\t\t\t:\n\t\t(code <= 0xFFFF)\n\t\t\t? String.fromCharCode(code)\n\t\t\t:\n\t\t(code -= 0x10000,\n\t\t\tString.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)\n\t\t)\n\t);\n}\n\nfunction _Char_toUpper(char)\n{\n\treturn _Utils_chr(char.toUpperCase());\n}\n\nfunction _Char_toLower(char)\n{\n\treturn _Utils_chr(char.toLowerCase());\n}\n\nfunction _Char_toLocaleUpper(char)\n{\n\treturn _Utils_chr(char.toLocaleUpperCase());\n}\n\nfunction _Char_toLocaleLower(char)\n{\n\treturn _Utils_chr(char.toLocaleLowerCase());\n}\n\n\n\nvar _String_cons = F2(function(chr, str)\n{\n\treturn chr + str;\n});\n\nfunction _String_uncons(string)\n{\n\tvar word = string.charCodeAt(0);\n\treturn word\n\t\t? elm$core$Maybe$Just(\n\t\t\t0xD800 <= word && word <= 0xDBFF\n\t\t\t\t? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))\n\t\t\t\t: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))\n\t\t)\n\t\t: elm$core$Maybe$Nothing;\n}\n\nvar _String_append = F2(function(a, b)\n{\n\treturn a + b;\n});\n\nfunction _String_length(str)\n{\n\treturn str.length;\n}\n\nvar _String_map = F2(function(func, string)\n{\n\tvar len = string.length;\n\tvar array = new Array(len);\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tarray[i] = func(_Utils_chr(string[i] + string[i+1]));\n\t\t\ti += 2;\n\t\t\tcontinue;\n\t\t}\n\t\tarray[i] = func(_Utils_chr(string[i]));\n\t\ti++;\n\t}\n\treturn array.join('');\n});\n\nvar _String_filter = F2(function(isGood, str)\n{\n\tvar arr = [];\n\tvar len = str.length;\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar char = str[i];\n\t\tvar word = str.charCodeAt(i);\n\t\ti++;\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tchar += str[i];\n\t\t\ti++;\n\t\t}\n\n\t\tif (isGood(_Utils_chr(char)))\n\t\t{\n\t\t\tarr.push(char);\n\t\t}\n\t}\n\treturn arr.join('');\n});\n\nfunction _String_reverse(str)\n{\n\tvar len = str.length;\n\tvar arr = new Array(len);\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar word = str.charCodeAt(i);\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tarr[len - i] = str[i + 1];\n\t\t\ti++;\n\t\t\tarr[len - i] = str[i - 1];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[len - i] = str[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn arr.join('');\n}\n\nvar _String_foldl = F3(function(func, state, string)\n{\n\tvar len = string.length;\n\tvar i = 0;\n\twhile (i < len)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\ti++;\n\t\tif (0xD800 <= word && word <= 0xDBFF)\n\t\t{\n\t\t\tchar += string[i];\n\t\t\ti++;\n\t\t}\n\t\tstate = A2(func, _Utils_chr(char), state);\n\t}\n\treturn state;\n});\n\nvar _String_foldr = F3(function(func, state, string)\n{\n\tvar i = string.length;\n\twhile (i--)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xDC00 <= word && word <= 0xDFFF)\n\t\t{\n\t\t\ti--;\n\t\t\tchar = string[i] + char;\n\t\t}\n\t\tstate = A2(func, _Utils_chr(char), state);\n\t}\n\treturn state;\n});\n\nvar _String_split = F2(function(sep, str)\n{\n\treturn str.split(sep);\n});\n\nvar _String_join = F2(function(sep, strs)\n{\n\treturn strs.join(sep);\n});\n\nvar _String_slice = F3(function(start, end, str) {\n\treturn str.slice(start, end);\n});\n\nfunction _String_trim(str)\n{\n\treturn str.trim();\n}\n\nfunction _String_trimLeft(str)\n{\n\treturn str.replace(/^\\s+/, '');\n}\n\nfunction _String_trimRight(str)\n{\n\treturn str.replace(/\\s+$/, '');\n}\n\nfunction _String_words(str)\n{\n\treturn _List_fromArray(str.trim().split(/\\s+/g));\n}\n\nfunction _String_lines(str)\n{\n\treturn _List_fromArray(str.split(/\\r\\n|\\r|\\n/g));\n}\n\nfunction _String_toUpper(str)\n{\n\treturn str.toUpperCase();\n}\n\nfunction _String_toLower(str)\n{\n\treturn str.toLowerCase();\n}\n\nvar _String_any = F2(function(isGood, string)\n{\n\tvar i = string.length;\n\twhile (i--)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xDC00 <= word && word <= 0xDFFF)\n\t\t{\n\t\t\ti--;\n\t\t\tchar = string[i] + char;\n\t\t}\n\t\tif (isGood(_Utils_chr(char)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\nvar _String_all = F2(function(isGood, string)\n{\n\tvar i = string.length;\n\twhile (i--)\n\t{\n\t\tvar char = string[i];\n\t\tvar word = string.charCodeAt(i);\n\t\tif (0xDC00 <= word && word <= 0xDFFF)\n\t\t{\n\t\t\ti--;\n\t\t\tchar = string[i] + char;\n\t\t}\n\t\tif (!isGood(_Utils_chr(char)))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n});\n\nvar _String_contains = F2(function(sub, str)\n{\n\treturn str.indexOf(sub) > -1;\n});\n\nvar _String_startsWith = F2(function(sub, str)\n{\n\treturn str.indexOf(sub) === 0;\n});\n\nvar _String_endsWith = F2(function(sub, str)\n{\n\treturn str.length >= sub.length &&\n\t\tstr.lastIndexOf(sub) === str.length - sub.length;\n});\n\nvar _String_indexes = F2(function(sub, str)\n{\n\tvar subLen = sub.length;\n\n\tif (subLen < 1)\n\t{\n\t\treturn _List_Nil;\n\t}\n\n\tvar i = 0;\n\tvar is = [];\n\n\twhile ((i = str.indexOf(sub, i)) > -1)\n\t{\n\t\tis.push(i);\n\t\ti = i + subLen;\n\t}\n\n\treturn _List_fromArray(is);\n});\n\n\n// TO STRING\n\nfunction _String_fromNumber(number)\n{\n\treturn number + '';\n}\n\n\n// INT CONVERSIONS\n\nfunction _String_toInt(str)\n{\n\tvar total = 0;\n\tvar code0 = str.charCodeAt(0);\n\tvar start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;\n\n\tfor (var i = start; i < str.length; ++i)\n\t{\n\t\tvar code = str.charCodeAt(i);\n\t\tif (code < 0x30 || 0x39 < code)\n\t\t{\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t}\n\t\ttotal = 10 * total + code - 0x30;\n\t}\n\n\treturn i == start\n\t\t? elm$core$Maybe$Nothing\n\t\t: elm$core$Maybe$Just(code0 == 0x2D ? -total : total);\n}\n\n\n// FLOAT CONVERSIONS\n\nfunction _String_toFloat(s)\n{\n\t// check if it is a hex, octal, or binary number\n\tif (s.length === 0 || /[\\sxbo]/.test(s))\n\t{\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n\tvar n = +s;\n\t// faster isNaN check\n\treturn n === n ? elm$core$Maybe$Just(n) : elm$core$Maybe$Nothing;\n}\n\nfunction _String_fromList(chars)\n{\n\treturn _List_toArray(chars).join('');\n}\n\n\n\n\n/**/\nfunction _Json_errorToString(error)\n{\n\treturn elm$json$Json$Decode$errorToString(error);\n}\n//*/\n\n\n// CORE DECODERS\n\nfunction _Json_succeed(msg)\n{\n\treturn {\n\t\t$: 0,\n\t\ta: msg\n\t};\n}\n\nfunction _Json_fail(msg)\n{\n\treturn {\n\t\t$: 1,\n\t\ta: msg\n\t};\n}\n\nfunction _Json_decodePrim(decoder)\n{\n\treturn { $: 2, b: decoder };\n}\n\nvar _Json_decodeInt = _Json_decodePrim(function(value) {\n\treturn (typeof value !== 'number')\n\t\t? _Json_expecting('an INT', value)\n\t\t:\n\t(-2147483647 < value && value < 2147483647 && (value | 0) === value)\n\t\t? elm$core$Result$Ok(value)\n\t\t:\n\t(isFinite(value) && !(value % 1))\n\t\t? elm$core$Result$Ok(value)\n\t\t: _Json_expecting('an INT', value);\n});\n\nvar _Json_decodeBool = _Json_decodePrim(function(value) {\n\treturn (typeof value === 'boolean')\n\t\t? elm$core$Result$Ok(value)\n\t\t: _Json_expecting('a BOOL', value);\n});\n\nvar _Json_decodeFloat = _Json_decodePrim(function(value) {\n\treturn (typeof value === 'number')\n\t\t? elm$core$Result$Ok(value)\n\t\t: _Json_expecting('a FLOAT', value);\n});\n\nvar _Json_decodeValue = _Json_decodePrim(function(value) {\n\treturn elm$core$Result$Ok(_Json_wrap(value));\n});\n\nvar _Json_decodeString = _Json_decodePrim(function(value) {\n\treturn (typeof value === 'string')\n\t\t? elm$core$Result$Ok(value)\n\t\t: (value instanceof String)\n\t\t\t? elm$core$Result$Ok(value + '')\n\t\t\t: _Json_expecting('a STRING', value);\n});\n\nfunction _Json_decodeList(decoder) { return { $: 3, b: decoder }; }\nfunction _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }\n\nfunction _Json_decodeNull(value) { return { $: 5, c: value }; }\n\nvar _Json_decodeField = F2(function(field, decoder)\n{\n\treturn {\n\t\t$: 6,\n\t\td: field,\n\t\tb: decoder\n\t};\n});\n\nvar _Json_decodeIndex = F2(function(index, decoder)\n{\n\treturn {\n\t\t$: 7,\n\t\te: index,\n\t\tb: decoder\n\t};\n});\n\nfunction _Json_decodeKeyValuePairs(decoder)\n{\n\treturn {\n\t\t$: 8,\n\t\tb: decoder\n\t};\n}\n\nfunction _Json_mapMany(f, decoders)\n{\n\treturn {\n\t\t$: 9,\n\t\tf: f,\n\t\tg: decoders\n\t};\n}\n\nvar _Json_andThen = F2(function(callback, decoder)\n{\n\treturn {\n\t\t$: 10,\n\t\tb: decoder,\n\t\th: callback\n\t};\n});\n\nfunction _Json_oneOf(decoders)\n{\n\treturn {\n\t\t$: 11,\n\t\tg: decoders\n\t};\n}\n\n\n// DECODING OBJECTS\n\nvar _Json_map1 = F2(function(f, d1)\n{\n\treturn _Json_mapMany(f, [d1]);\n});\n\nvar _Json_map2 = F3(function(f, d1, d2)\n{\n\treturn _Json_mapMany(f, [d1, d2]);\n});\n\nvar _Json_map3 = F4(function(f, d1, d2, d3)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3]);\n});\n\nvar _Json_map4 = F5(function(f, d1, d2, d3, d4)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4]);\n});\n\nvar _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5]);\n});\n\nvar _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);\n});\n\nvar _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);\n});\n\nvar _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)\n{\n\treturn _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);\n});\n\n\n// DECODE\n\nvar _Json_runOnString = F2(function(decoder, string)\n{\n\ttry\n\t{\n\t\tvar value = JSON.parse(string);\n\t\treturn _Json_runHelp(decoder, value);\n\t}\n\tcatch (e)\n\t{\n\t\treturn elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));\n\t}\n});\n\nvar _Json_run = F2(function(decoder, value)\n{\n\treturn _Json_runHelp(decoder, _Json_unwrap(value));\n});\n\nfunction _Json_runHelp(decoder, value)\n{\n\tswitch (decoder.$)\n\t{\n\t\tcase 2:\n\t\t\treturn decoder.b(value);\n\n\t\tcase 5:\n\t\t\treturn (value === null)\n\t\t\t\t? elm$core$Result$Ok(decoder.c)\n\t\t\t\t: _Json_expecting('null', value);\n\n\t\tcase 3:\n\t\t\tif (!_Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('a LIST', value);\n\t\t\t}\n\t\t\treturn _Json_runArrayDecoder(decoder.b, value, _List_fromArray);\n\n\t\tcase 4:\n\t\t\tif (!_Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an ARRAY', value);\n\t\t\t}\n\t\t\treturn _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);\n\n\t\tcase 6:\n\t\t\tvar field = decoder.d;\n\t\t\tif (typeof value !== 'object' || value === null || !(field in value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an OBJECT with a field named `' + field + '`', value);\n\t\t\t}\n\t\t\tvar result = _Json_runHelp(decoder.b, value[field]);\n\t\t\treturn (elm$core$Result$isOk(result)) ? result : elm$core$Result$Err(A2(elm$json$Json$Decode$Field, field, result.a));\n\n\t\tcase 7:\n\t\t\tvar index = decoder.e;\n\t\t\tif (!_Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an ARRAY', value);\n\t\t\t}\n\t\t\tif (index >= value.length)\n\t\t\t{\n\t\t\t\treturn _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);\n\t\t\t}\n\t\t\tvar result = _Json_runHelp(decoder.b, value[index]);\n\t\t\treturn (elm$core$Result$isOk(result)) ? result : elm$core$Result$Err(A2(elm$json$Json$Decode$Index, index, result.a));\n\n\t\tcase 8:\n\t\t\tif (typeof value !== 'object' || value === null || _Json_isArray(value))\n\t\t\t{\n\t\t\t\treturn _Json_expecting('an OBJECT', value);\n\t\t\t}\n\n\t\t\tvar keyValuePairs = _List_Nil;\n\t\t\t// TODO test perf of Object.keys and switch when support is good enough\n\t\t\tfor (var key in value)\n\t\t\t{\n\t\t\t\tif (value.hasOwnProperty(key))\n\t\t\t\t{\n\t\t\t\t\tvar result = _Json_runHelp(decoder.b, value[key]);\n\t\t\t\t\tif (!elm$core$Result$isOk(result))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn elm$core$Result$Err(A2(elm$json$Json$Decode$Field, key, result.a));\n\t\t\t\t\t}\n\t\t\t\t\tkeyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn elm$core$Result$Ok(elm$core$List$reverse(keyValuePairs));\n\n\t\tcase 9:\n\t\t\tvar answer = decoder.f;\n\t\t\tvar decoders = decoder.g;\n\t\t\tfor (var i = 0; i < decoders.length; i++)\n\t\t\t{\n\t\t\t\tvar result = _Json_runHelp(decoders[i], value);\n\t\t\t\tif (!elm$core$Result$isOk(result))\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tanswer = answer(result.a);\n\t\t\t}\n\t\t\treturn elm$core$Result$Ok(answer);\n\n\t\tcase 10:\n\t\t\tvar result = _Json_runHelp(decoder.b, value);\n\t\t\treturn (!elm$core$Result$isOk(result))\n\t\t\t\t? result\n\t\t\t\t: _Json_runHelp(decoder.h(result.a), value);\n\n\t\tcase 11:\n\t\t\tvar errors = _List_Nil;\n\t\t\tfor (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS\n\t\t\t{\n\t\t\t\tvar result = _Json_runHelp(temp.a, value);\n\t\t\t\tif (elm$core$Result$isOk(result))\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\terrors = _List_Cons(result.a, errors);\n\t\t\t}\n\t\t\treturn elm$core$Result$Err(elm$json$Json$Decode$OneOf(elm$core$List$reverse(errors)));\n\n\t\tcase 1:\n\t\t\treturn elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));\n\n\t\tcase 0:\n\t\t\treturn elm$core$Result$Ok(decoder.a);\n\t}\n}\n\nfunction _Json_runArrayDecoder(decoder, value, toElmValue)\n{\n\tvar len = value.length;\n\tvar array = new Array(len);\n\tfor (var i = 0; i < len; i++)\n\t{\n\t\tvar result = _Json_runHelp(decoder, value[i]);\n\t\tif (!elm$core$Result$isOk(result))\n\t\t{\n\t\t\treturn elm$core$Result$Err(A2(elm$json$Json$Decode$Index, i, result.a));\n\t\t}\n\t\tarray[i] = result.a;\n\t}\n\treturn elm$core$Result$Ok(toElmValue(array));\n}\n\nfunction _Json_isArray(value)\n{\n\treturn Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);\n}\n\nfunction _Json_toElmArray(array)\n{\n\treturn A2(elm$core$Array$initialize, array.length, function(i) { return array[i]; });\n}\n\nfunction _Json_expecting(type, value)\n{\n\treturn elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));\n}\n\n\n// EQUALITY\n\nfunction _Json_equality(x, y)\n{\n\tif (x === y)\n\t{\n\t\treturn true;\n\t}\n\n\tif (x.$ !== y.$)\n\t{\n\t\treturn false;\n\t}\n\n\tswitch (x.$)\n\t{\n\t\tcase 0:\n\t\tcase 1:\n\t\t\treturn x.a === y.a;\n\n\t\tcase 2:\n\t\t\treturn x.b === y.b;\n\n\t\tcase 5:\n\t\t\treturn x.c === y.c;\n\n\t\tcase 3:\n\t\tcase 4:\n\t\tcase 8:\n\t\t\treturn _Json_equality(x.b, y.b);\n\n\t\tcase 6:\n\t\t\treturn x.d === y.d && _Json_equality(x.b, y.b);\n\n\t\tcase 7:\n\t\t\treturn x.e === y.e && _Json_equality(x.b, y.b);\n\n\t\tcase 9:\n\t\t\treturn x.f === y.f && _Json_listEquality(x.g, y.g);\n\n\t\tcase 10:\n\t\t\treturn x.h === y.h && _Json_equality(x.b, y.b);\n\n\t\tcase 11:\n\t\t\treturn _Json_listEquality(x.g, y.g);\n\t}\n}\n\nfunction _Json_listEquality(aDecoders, bDecoders)\n{\n\tvar len = aDecoders.length;\n\tif (len !== bDecoders.length)\n\t{\n\t\treturn false;\n\t}\n\tfor (var i = 0; i < len; i++)\n\t{\n\t\tif (!_Json_equality(aDecoders[i], bDecoders[i]))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// ENCODE\n\nvar _Json_encode = F2(function(indentLevel, value)\n{\n\treturn JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';\n});\n\nfunction _Json_wrap(value) { return { $: 0, a: value }; }\nfunction _Json_unwrap(value) { return value.a; }\n\nfunction _Json_wrap_UNUSED(value) { return value; }\nfunction _Json_unwrap_UNUSED(value) { return value; }\n\nfunction _Json_emptyArray() { return []; }\nfunction _Json_emptyObject() { return {}; }\n\nvar _Json_addField = F3(function(key, value, object)\n{\n\tobject[key] = _Json_unwrap(value);\n\treturn object;\n});\n\nfunction _Json_addEntry(func)\n{\n\treturn F2(function(entry, array)\n\t{\n\t\tarray.push(_Json_unwrap(func(entry)));\n\t\treturn array;\n\t});\n}\n\nvar _Json_encodeNull = _Json_wrap(null);\n\n\n\n// TASKS\n\nfunction _Scheduler_succeed(value)\n{\n\treturn {\n\t\t$: 0,\n\t\ta: value\n\t};\n}\n\nfunction _Scheduler_fail(error)\n{\n\treturn {\n\t\t$: 1,\n\t\ta: error\n\t};\n}\n\nfunction _Scheduler_binding(callback)\n{\n\treturn {\n\t\t$: 2,\n\t\tb: callback,\n\t\tc: null\n\t};\n}\n\nvar _Scheduler_andThen = F2(function(callback, task)\n{\n\treturn {\n\t\t$: 3,\n\t\tb: callback,\n\t\td: task\n\t};\n});\n\nvar _Scheduler_onError = F2(function(callback, task)\n{\n\treturn {\n\t\t$: 4,\n\t\tb: callback,\n\t\td: task\n\t};\n});\n\nfunction _Scheduler_receive(callback)\n{\n\treturn {\n\t\t$: 5,\n\t\tb: callback\n\t};\n}\n\n\n// PROCESSES\n\nvar _Scheduler_guid = 0;\n\nfunction _Scheduler_rawSpawn(task)\n{\n\tvar proc = {\n\t\t$: 0,\n\t\te: _Scheduler_guid++,\n\t\tf: task,\n\t\tg: null,\n\t\th: []\n\t};\n\n\t_Scheduler_enqueue(proc);\n\n\treturn proc;\n}\n\nfunction _Scheduler_spawn(task)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\tcallback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));\n\t});\n}\n\nfunction _Scheduler_rawSend(proc, msg)\n{\n\tproc.h.push(msg);\n\t_Scheduler_enqueue(proc);\n}\n\nvar _Scheduler_send = F2(function(proc, msg)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\t_Scheduler_rawSend(proc, msg);\n\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t});\n});\n\nfunction _Scheduler_kill(proc)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\tvar task = proc.f;\n\t\tif (task.$ === 2 && task.c)\n\t\t{\n\t\t\ttask.c();\n\t\t}\n\n\t\tproc.f = null;\n\n\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t});\n}\n\n\n/* STEP PROCESSES\n\ntype alias Process =\n  { $ : tag\n  , id : unique_id\n  , root : Task\n  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }\n  , mailbox : [msg]\n  }\n\n*/\n\n\nvar _Scheduler_working = false;\nvar _Scheduler_queue = [];\n\n\nfunction _Scheduler_enqueue(proc)\n{\n\t_Scheduler_queue.push(proc);\n\tif (_Scheduler_working)\n\t{\n\t\treturn;\n\t}\n\t_Scheduler_working = true;\n\twhile (proc = _Scheduler_queue.shift())\n\t{\n\t\t_Scheduler_step(proc);\n\t}\n\t_Scheduler_working = false;\n}\n\n\nfunction _Scheduler_step(proc)\n{\n\twhile (proc.f)\n\t{\n\t\tvar rootTag = proc.f.$;\n\t\tif (rootTag === 0 || rootTag === 1)\n\t\t{\n\t\t\twhile (proc.g && proc.g.$ !== rootTag)\n\t\t\t{\n\t\t\t\tproc.g = proc.g.i;\n\t\t\t}\n\t\t\tif (!proc.g)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tproc.f = proc.g.b(proc.f.a);\n\t\t\tproc.g = proc.g.i;\n\t\t}\n\t\telse if (rootTag === 2)\n\t\t{\n\t\t\tproc.f.c = proc.f.b(function(newRoot) {\n\t\t\t\tproc.f = newRoot;\n\t\t\t\t_Scheduler_enqueue(proc);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\telse if (rootTag === 5)\n\t\t{\n\t\t\tif (proc.h.length === 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tproc.f = proc.f.b(proc.h.shift());\n\t\t}\n\t\telse // if (rootTag === 3 || rootTag === 4)\n\t\t{\n\t\t\tproc.g = {\n\t\t\t\t$: rootTag === 3 ? 0 : 1,\n\t\t\t\tb: proc.f.b,\n\t\t\t\ti: proc.g\n\t\t\t};\n\t\t\tproc.f = proc.f.d;\n\t\t}\n\t}\n}\n\n\n\nfunction _Process_sleep(time)\n{\n\treturn _Scheduler_binding(function(callback) {\n\t\tvar id = setTimeout(function() {\n\t\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t\t}, time);\n\n\t\treturn function() { clearTimeout(id); };\n\t});\n}\n\n\n\n\n// PROGRAMS\n\n\nvar _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)\n{\n\treturn _Platform_initialize(\n\t\tflagDecoder,\n\t\targs,\n\t\timpl.init,\n\t\timpl.update,\n\t\timpl.subscriptions,\n\t\tfunction() { return function() {} }\n\t);\n});\n\n\n\n// INITIALIZE A PROGRAM\n\n\nfunction _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)\n{\n\tvar result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));\n\telm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);\n\tvar managers = {};\n\tresult = init(result.a);\n\tvar model = result.a;\n\tvar stepper = stepperBuilder(sendToApp, model);\n\tvar ports = _Platform_setupEffects(managers, sendToApp);\n\n\tfunction sendToApp(msg, viewMetadata)\n\t{\n\t\tresult = A2(update, msg, model);\n\t\tstepper(model = result.a, viewMetadata);\n\t\t_Platform_dispatchEffects(managers, result.b, subscriptions(model));\n\t}\n\n\t_Platform_dispatchEffects(managers, result.b, subscriptions(model));\n\n\treturn ports ? { ports: ports } : {};\n}\n\n\n\n// TRACK PRELOADS\n//\n// This is used by code in elm/browser and elm/http\n// to register any HTTP requests that are triggered by init.\n//\n\n\nvar _Platform_preload;\n\n\nfunction _Platform_registerPreload(url)\n{\n\t_Platform_preload.add(url);\n}\n\n\n\n// EFFECT MANAGERS\n\n\nvar _Platform_effectManagers = {};\n\n\nfunction _Platform_setupEffects(managers, sendToApp)\n{\n\tvar ports;\n\n\t// setup all necessary effect managers\n\tfor (var key in _Platform_effectManagers)\n\t{\n\t\tvar manager = _Platform_effectManagers[key];\n\n\t\tif (manager.a)\n\t\t{\n\t\t\tports = ports || {};\n\t\t\tports[key] = manager.a(key, sendToApp);\n\t\t}\n\n\t\tmanagers[key] = _Platform_instantiateManager(manager, sendToApp);\n\t}\n\n\treturn ports;\n}\n\n\nfunction _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)\n{\n\treturn {\n\t\tb: init,\n\t\tc: onEffects,\n\t\td: onSelfMsg,\n\t\te: cmdMap,\n\t\tf: subMap\n\t};\n}\n\n\nfunction _Platform_instantiateManager(info, sendToApp)\n{\n\tvar router = {\n\t\tg: sendToApp,\n\t\th: undefined\n\t};\n\n\tvar onEffects = info.c;\n\tvar onSelfMsg = info.d;\n\tvar cmdMap = info.e;\n\tvar subMap = info.f;\n\n\tfunction loop(state)\n\t{\n\t\treturn A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)\n\t\t{\n\t\t\tvar value = msg.a;\n\n\t\t\tif (msg.$ === 0)\n\t\t\t{\n\t\t\t\treturn A3(onSelfMsg, router, value, state);\n\t\t\t}\n\n\t\t\treturn cmdMap && subMap\n\t\t\t\t? A4(onEffects, router, value.i, value.j, state)\n\t\t\t\t: A3(onEffects, router, cmdMap ? value.i : value.j, state);\n\t\t}));\n\t}\n\n\treturn router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));\n}\n\n\n\n// ROUTING\n\n\nvar _Platform_sendToApp = F2(function(router, msg)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\trouter.g(msg);\n\t\tcallback(_Scheduler_succeed(_Utils_Tuple0));\n\t});\n});\n\n\nvar _Platform_sendToSelf = F2(function(router, msg)\n{\n\treturn A2(_Scheduler_send, router.h, {\n\t\t$: 0,\n\t\ta: msg\n\t});\n});\n\n\n\n// BAGS\n\n\nfunction _Platform_leaf(home)\n{\n\treturn function(value)\n\t{\n\t\treturn {\n\t\t\t$: 1,\n\t\t\tk: home,\n\t\t\tl: value\n\t\t};\n\t};\n}\n\n\nfunction _Platform_batch(list)\n{\n\treturn {\n\t\t$: 2,\n\t\tm: list\n\t};\n}\n\n\nvar _Platform_map = F2(function(tagger, bag)\n{\n\treturn {\n\t\t$: 3,\n\t\tn: tagger,\n\t\to: bag\n\t}\n});\n\n\n\n// PIPE BAGS INTO EFFECT MANAGERS\n\n\nfunction _Platform_dispatchEffects(managers, cmdBag, subBag)\n{\n\tvar effectsDict = {};\n\t_Platform_gatherEffects(true, cmdBag, effectsDict, null);\n\t_Platform_gatherEffects(false, subBag, effectsDict, null);\n\n\tfor (var home in managers)\n\t{\n\t\t_Scheduler_rawSend(managers[home], {\n\t\t\t$: 'fx',\n\t\t\ta: effectsDict[home] || { i: _List_Nil, j: _List_Nil }\n\t\t});\n\t}\n}\n\n\nfunction _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)\n{\n\tswitch (bag.$)\n\t{\n\t\tcase 1:\n\t\t\tvar home = bag.k;\n\t\t\tvar effect = _Platform_toEffect(isCmd, home, taggers, bag.l);\n\t\t\teffectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);\n\t\t\treturn;\n\n\t\tcase 2:\n\t\t\tfor (var list = bag.m; list.b; list = list.b) // WHILE_CONS\n\t\t\t{\n\t\t\t\t_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);\n\t\t\t}\n\t\t\treturn;\n\n\t\tcase 3:\n\t\t\t_Platform_gatherEffects(isCmd, bag.o, effectsDict, {\n\t\t\t\tp: bag.n,\n\t\t\t\tq: taggers\n\t\t\t});\n\t\t\treturn;\n\t}\n}\n\n\nfunction _Platform_toEffect(isCmd, home, taggers, value)\n{\n\tfunction applyTaggers(x)\n\t{\n\t\tfor (var temp = taggers; temp; temp = temp.q)\n\t\t{\n\t\t\tx = temp.p(x);\n\t\t}\n\t\treturn x;\n\t}\n\n\tvar map = isCmd\n\t\t? _Platform_effectManagers[home].e\n\t\t: _Platform_effectManagers[home].f;\n\n\treturn A2(map, applyTaggers, value)\n}\n\n\nfunction _Platform_insert(isCmd, newEffect, effects)\n{\n\teffects = effects || { i: _List_Nil, j: _List_Nil };\n\n\tisCmd\n\t\t? (effects.i = _List_Cons(newEffect, effects.i))\n\t\t: (effects.j = _List_Cons(newEffect, effects.j));\n\n\treturn effects;\n}\n\n\n\n// PORTS\n\n\nfunction _Platform_checkPortName(name)\n{\n\tif (_Platform_effectManagers[name])\n\t{\n\t\t_Debug_crash(3, name)\n\t}\n}\n\n\n\n// OUTGOING PORTS\n\n\nfunction _Platform_outgoingPort(name, converter)\n{\n\t_Platform_checkPortName(name);\n\t_Platform_effectManagers[name] = {\n\t\te: _Platform_outgoingPortMap,\n\t\tr: converter,\n\t\ta: _Platform_setupOutgoingPort\n\t};\n\treturn _Platform_leaf(name);\n}\n\n\nvar _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });\n\n\nfunction _Platform_setupOutgoingPort(name)\n{\n\tvar subs = [];\n\tvar converter = _Platform_effectManagers[name].r;\n\n\t// CREATE MANAGER\n\n\tvar init = _Process_sleep(0);\n\n\t_Platform_effectManagers[name].b = init;\n\t_Platform_effectManagers[name].c = F3(function(router, cmdList, state)\n\t{\n\t\tfor ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS\n\t\t{\n\t\t\t// grab a separate reference to subs in case unsubscribe is called\n\t\t\tvar currentSubs = subs;\n\t\t\tvar value = _Json_unwrap(converter(cmdList.a));\n\t\t\tfor (var i = 0; i < currentSubs.length; i++)\n\t\t\t{\n\t\t\t\tcurrentSubs[i](value);\n\t\t\t}\n\t\t}\n\t\treturn init;\n\t});\n\n\t// PUBLIC API\n\n\tfunction subscribe(callback)\n\t{\n\t\tsubs.push(callback);\n\t}\n\n\tfunction unsubscribe(callback)\n\t{\n\t\t// copy subs into a new array in case unsubscribe is called within a\n\t\t// subscribed callback\n\t\tsubs = subs.slice();\n\t\tvar index = subs.indexOf(callback);\n\t\tif (index >= 0)\n\t\t{\n\t\t\tsubs.splice(index, 1);\n\t\t}\n\t}\n\n\treturn {\n\t\tsubscribe: subscribe,\n\t\tunsubscribe: unsubscribe\n\t};\n}\n\n\n\n// INCOMING PORTS\n\n\nfunction _Platform_incomingPort(name, converter)\n{\n\t_Platform_checkPortName(name);\n\t_Platform_effectManagers[name] = {\n\t\tf: _Platform_incomingPortMap,\n\t\tr: converter,\n\t\ta: _Platform_setupIncomingPort\n\t};\n\treturn _Platform_leaf(name);\n}\n\n\nvar _Platform_incomingPortMap = F2(function(tagger, finalTagger)\n{\n\treturn function(value)\n\t{\n\t\treturn tagger(finalTagger(value));\n\t};\n});\n\n\nfunction _Platform_setupIncomingPort(name, sendToApp)\n{\n\tvar subs = _List_Nil;\n\tvar converter = _Platform_effectManagers[name].r;\n\n\t// CREATE MANAGER\n\n\tvar init = _Scheduler_succeed(null);\n\n\t_Platform_effectManagers[name].b = init;\n\t_Platform_effectManagers[name].c = F3(function(router, subList, state)\n\t{\n\t\tsubs = subList;\n\t\treturn init;\n\t});\n\n\t// PUBLIC API\n\n\tfunction send(incomingValue)\n\t{\n\t\tvar result = A2(_Json_run, converter, _Json_wrap(incomingValue));\n\n\t\telm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);\n\n\t\tvar value = result.a;\n\t\tfor (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS\n\t\t{\n\t\t\tsendToApp(temp.a(value));\n\t\t}\n\t}\n\n\treturn { send: send };\n}\n\n\n\n// EXPORT ELM MODULES\n//\n// Have DEBUG and PROD versions so that we can (1) give nicer errors in\n// debug mode and (2) not pay for the bits needed for that in prod mode.\n//\n\n\nfunction _Platform_export_UNUSED(exports)\n{\n\tscope['Elm']\n\t\t? _Platform_mergeExportsProd(scope['Elm'], exports)\n\t\t: scope['Elm'] = exports;\n}\n\n\nfunction _Platform_mergeExportsProd(obj, exports)\n{\n\tfor (var name in exports)\n\t{\n\t\t(name in obj)\n\t\t\t? (name == 'init')\n\t\t\t\t? _Debug_crash(6)\n\t\t\t\t: _Platform_mergeExportsProd(obj[name], exports[name])\n\t\t\t: (obj[name] = exports[name]);\n\t}\n}\n\n\nfunction _Platform_export(exports)\n{\n\tscope['Elm']\n\t\t? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)\n\t\t: scope['Elm'] = exports;\n}\n\n\nfunction _Platform_mergeExportsDebug(moduleName, obj, exports)\n{\n\tfor (var name in exports)\n\t{\n\t\t(name in obj)\n\t\t\t? (name == 'init')\n\t\t\t\t? _Debug_crash(6, moduleName)\n\t\t\t\t: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])\n\t\t\t: (obj[name] = exports[name]);\n\t}\n}\n\n\n\n\n// STRINGS\n\n\nvar _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)\n{\n\tvar smallLength = smallString.length;\n\tvar isGood = offset + smallLength <= bigString.length;\n\n\tfor (var i = 0; isGood && i < smallLength; )\n\t{\n\t\tvar code = bigString.charCodeAt(offset);\n\t\tisGood =\n\t\t\tsmallString[i++] === bigString[offset++]\n\t\t\t&& (\n\t\t\t\tcode === 0x000A /* \\n */\n\t\t\t\t\t? ( row++, col=1 )\n\t\t\t\t\t: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )\n\t\t\t)\n\t}\n\n\treturn _Utils_Tuple3(isGood ? offset : -1, row, col);\n});\n\n\n\n// CHARS\n\n\nvar _Parser_isSubChar = F3(function(predicate, offset, string)\n{\n\treturn (\n\t\tstring.length <= offset\n\t\t\t? -1\n\t\t\t:\n\t\t(string.charCodeAt(offset) & 0xF800) === 0xD800\n\t\t\t? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)\n\t\t\t:\n\t\t(predicate(_Utils_chr(string[offset]))\n\t\t\t? ((string[offset] === '\\n') ? -2 : (offset + 1))\n\t\t\t: -1\n\t\t)\n\t);\n});\n\n\nvar _Parser_isAsciiCode = F3(function(code, offset, string)\n{\n\treturn string.charCodeAt(offset) === code;\n});\n\n\n\n// NUMBERS\n\n\nvar _Parser_chompBase10 = F2(function(offset, string)\n{\n\tfor (; offset < string.length; offset++)\n\t{\n\t\tvar code = string.charCodeAt(offset);\n\t\tif (code < 0x30 || 0x39 < code)\n\t\t{\n\t\t\treturn offset;\n\t\t}\n\t}\n\treturn offset;\n});\n\n\nvar _Parser_consumeBase = F3(function(base, offset, string)\n{\n\tfor (var total = 0; offset < string.length; offset++)\n\t{\n\t\tvar digit = string.charCodeAt(offset) - 0x30;\n\t\tif (digit < 0 || base <= digit) break;\n\t\ttotal = base * total + digit;\n\t}\n\treturn _Utils_Tuple2(offset, total);\n});\n\n\nvar _Parser_consumeBase16 = F2(function(offset, string)\n{\n\tfor (var total = 0; offset < string.length; offset++)\n\t{\n\t\tvar code = string.charCodeAt(offset);\n\t\tif (0x30 <= code && code <= 0x39)\n\t\t{\n\t\t\ttotal = 16 * total + code - 0x30;\n\t\t}\n\t\telse if (0x41 <= code && code <= 0x46)\n\t\t{\n\t\t\ttotal = 16 * total + code - 55;\n\t\t}\n\t\telse if (0x61 <= code && code <= 0x66)\n\t\t{\n\t\t\ttotal = 16 * total + code - 87;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn _Utils_Tuple2(offset, total);\n});\n\n\n\n// FIND STRING\n\n\nvar _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)\n{\n\tvar newOffset = bigString.indexOf(smallString, offset);\n\tvar target = newOffset < 0 ? bigString.length : newOffset + smallString.length;\n\n\twhile (offset < target)\n\t{\n\t\tvar code = bigString.charCodeAt(offset++);\n\t\tcode === 0x000A /* \\n */\n\t\t\t? ( col=1, row++ )\n\t\t\t: ( col++, (code & 0xF800) === 0xD800 && offset++ )\n\t}\n\n\treturn _Utils_Tuple3(newOffset, row, col);\n});\n\n\n\n// SEND REQUEST\n\nvar _Http_toTask = F3(function(router, toTask, request)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tfunction done(response) {\n\t\t\tcallback(toTask(request.expect.a(response)));\n\t\t}\n\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.addEventListener('error', function() { done(elm$http$Http$NetworkError_); });\n\t\txhr.addEventListener('timeout', function() { done(elm$http$Http$Timeout_); });\n\t\txhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });\n\t\telm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);\n\n\t\ttry {\n\t\t\txhr.open(request.method, request.url, true);\n\t\t} catch (e) {\n\t\t\treturn done(elm$http$Http$BadUrl_(request.url));\n\t\t}\n\n\t\t_Http_configureRequest(xhr, request);\n\n\t\trequest.body.a && xhr.setRequestHeader('Content-Type', request.body.a);\n\t\txhr.send(request.body.b);\n\n\t\treturn function() { xhr.c = true; xhr.abort(); };\n\t});\n});\n\n\n// CONFIGURE\n\nfunction _Http_configureRequest(xhr, request)\n{\n\tfor (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS\n\t{\n\t\txhr.setRequestHeader(headers.a.a, headers.a.b);\n\t}\n\txhr.timeout = request.timeout.a || 0;\n\txhr.responseType = request.expect.d;\n\txhr.withCredentials = request.allowCookiesFromOtherDomains;\n}\n\n\n// RESPONSES\n\nfunction _Http_toResponse(toBody, xhr)\n{\n\treturn A2(\n\t\t200 <= xhr.status && xhr.status < 300 ? elm$http$Http$GoodStatus_ : elm$http$Http$BadStatus_,\n\t\t_Http_toMetadata(xhr),\n\t\ttoBody(xhr.response)\n\t);\n}\n\n\n// METADATA\n\nfunction _Http_toMetadata(xhr)\n{\n\treturn {\n\t\turl: xhr.responseURL,\n\t\tstatusCode: xhr.status,\n\t\tstatusText: xhr.statusText,\n\t\theaders: _Http_parseHeaders(xhr.getAllResponseHeaders())\n\t};\n}\n\n\n// HEADERS\n\nfunction _Http_parseHeaders(rawHeaders)\n{\n\tif (!rawHeaders)\n\t{\n\t\treturn elm$core$Dict$empty;\n\t}\n\n\tvar headers = elm$core$Dict$empty;\n\tvar headerPairs = rawHeaders.split('\\r\\n');\n\tfor (var i = headerPairs.length; i--; )\n\t{\n\t\tvar headerPair = headerPairs[i];\n\t\tvar index = headerPair.indexOf(': ');\n\t\tif (index > 0)\n\t\t{\n\t\t\tvar key = headerPair.substring(0, index);\n\t\t\tvar value = headerPair.substring(index + 2);\n\n\t\t\theaders = A3(elm$core$Dict$update, key, function(oldValue) {\n\t\t\t\treturn elm$core$Maybe$Just(elm$core$Maybe$isJust(oldValue)\n\t\t\t\t\t? value + ', ' + oldValue.a\n\t\t\t\t\t: value\n\t\t\t\t);\n\t\t\t}, headers);\n\t\t}\n\t}\n\treturn headers;\n}\n\n\n// EXPECT\n\nvar _Http_expect = F3(function(type, toBody, toValue)\n{\n\treturn {\n\t\t$: 0,\n\t\td: type,\n\t\tb: toBody,\n\t\ta: toValue\n\t};\n});\n\nvar _Http_mapExpect = F2(function(func, expect)\n{\n\treturn {\n\t\t$: 0,\n\t\td: expect.d,\n\t\tb: expect.b,\n\t\ta: function(x) { return func(expect.a(x)); }\n\t};\n});\n\nfunction _Http_toDataView(arrayBuffer)\n{\n\treturn new DataView(arrayBuffer);\n}\n\n\n// BODY and PARTS\n\nvar _Http_emptyBody = { $: 0 };\nvar _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });\n\nfunction _Http_toFormData(parts)\n{\n\tfor (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS\n\t{\n\t\tvar part = parts.a;\n\t\tformData.append(part.a, part.b);\n\t}\n\treturn formData;\n}\n\nvar _Http_bytesToBlob = F2(function(mime, bytes)\n{\n\treturn new Blob([bytes], { type: mime });\n});\n\n\n// PROGRESS\n\nfunction _Http_track(router, xhr, tracker)\n{\n\t// TODO check out lengthComputable on loadstart event\n\n\txhr.upload.addEventListener('progress', function(event) {\n\t\tif (xhr.c) { return; }\n\t\t_Scheduler_rawSpawn(A2(elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, elm$http$Http$Sending({\n\t\t\tsent: event.loaded,\n\t\t\tsize: event.total\n\t\t}))));\n\t});\n\txhr.addEventListener('progress', function(event) {\n\t\tif (xhr.c) { return; }\n\t\t_Scheduler_rawSpawn(A2(elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, elm$http$Http$Receiving({\n\t\t\treceived: event.loaded,\n\t\t\tsize: event.lengthComputable ? elm$core$Maybe$Just(event.total) : elm$core$Maybe$Nothing\n\t\t}))));\n\t});\n}\n\n\n\n// HELPERS\n\n\nvar _VirtualDom_divertHrefToApp;\n\nvar _VirtualDom_doc = typeof document !== 'undefined' ? document : {};\n\n\nfunction _VirtualDom_appendChild(parent, child)\n{\n\tparent.appendChild(child);\n}\n\nvar _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)\n{\n\t// NOTE: this function needs _Platform_export available to work\n\n\t/**_UNUSED/\n\tvar node = args['node'];\n\t//*/\n\t/**/\n\tvar node = args && args['node'] ? args['node'] : _Debug_crash(0);\n\t//*/\n\n\tnode.parentNode.replaceChild(\n\t\t_VirtualDom_render(virtualNode, function() {}),\n\t\tnode\n\t);\n\n\treturn {};\n});\n\n\n\n// TEXT\n\n\nfunction _VirtualDom_text(string)\n{\n\treturn {\n\t\t$: 0,\n\t\ta: string\n\t};\n}\n\n\n\n// NODE\n\n\nvar _VirtualDom_nodeNS = F2(function(namespace, tag)\n{\n\treturn F2(function(factList, kidList)\n\t{\n\t\tfor (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS\n\t\t{\n\t\t\tvar kid = kidList.a;\n\t\t\tdescendantsCount += (kid.b || 0);\n\t\t\tkids.push(kid);\n\t\t}\n\t\tdescendantsCount += kids.length;\n\n\t\treturn {\n\t\t\t$: 1,\n\t\t\tc: tag,\n\t\t\td: _VirtualDom_organizeFacts(factList),\n\t\t\te: kids,\n\t\t\tf: namespace,\n\t\t\tb: descendantsCount\n\t\t};\n\t});\n});\n\n\nvar _VirtualDom_node = _VirtualDom_nodeNS(undefined);\n\n\n\n// KEYED NODE\n\n\nvar _VirtualDom_keyedNodeNS = F2(function(namespace, tag)\n{\n\treturn F2(function(factList, kidList)\n\t{\n\t\tfor (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS\n\t\t{\n\t\t\tvar kid = kidList.a;\n\t\t\tdescendantsCount += (kid.b.b || 0);\n\t\t\tkids.push(kid);\n\t\t}\n\t\tdescendantsCount += kids.length;\n\n\t\treturn {\n\t\t\t$: 2,\n\t\t\tc: tag,\n\t\t\td: _VirtualDom_organizeFacts(factList),\n\t\t\te: kids,\n\t\t\tf: namespace,\n\t\t\tb: descendantsCount\n\t\t};\n\t});\n});\n\n\nvar _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);\n\n\n\n// CUSTOM\n\n\nfunction _VirtualDom_custom(factList, model, render, diff)\n{\n\treturn {\n\t\t$: 3,\n\t\td: _VirtualDom_organizeFacts(factList),\n\t\tg: model,\n\t\th: render,\n\t\ti: diff\n\t};\n}\n\n\n\n// MAP\n\n\nvar _VirtualDom_map = F2(function(tagger, node)\n{\n\treturn {\n\t\t$: 4,\n\t\tj: tagger,\n\t\tk: node,\n\t\tb: 1 + (node.b || 0)\n\t};\n});\n\n\n\n// LAZY\n\n\nfunction _VirtualDom_thunk(refs, thunk)\n{\n\treturn {\n\t\t$: 5,\n\t\tl: refs,\n\t\tm: thunk,\n\t\tk: undefined\n\t};\n}\n\nvar _VirtualDom_lazy = F2(function(func, a)\n{\n\treturn _VirtualDom_thunk([func, a], function() {\n\t\treturn func(a);\n\t});\n});\n\nvar _VirtualDom_lazy2 = F3(function(func, a, b)\n{\n\treturn _VirtualDom_thunk([func, a, b], function() {\n\t\treturn A2(func, a, b);\n\t});\n});\n\nvar _VirtualDom_lazy3 = F4(function(func, a, b, c)\n{\n\treturn _VirtualDom_thunk([func, a, b, c], function() {\n\t\treturn A3(func, a, b, c);\n\t});\n});\n\nvar _VirtualDom_lazy4 = F5(function(func, a, b, c, d)\n{\n\treturn _VirtualDom_thunk([func, a, b, c, d], function() {\n\t\treturn A4(func, a, b, c, d);\n\t});\n});\n\nvar _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)\n{\n\treturn _VirtualDom_thunk([func, a, b, c, d, e], function() {\n\t\treturn A5(func, a, b, c, d, e);\n\t});\n});\n\nvar _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)\n{\n\treturn _VirtualDom_thunk([func, a, b, c, d, e, f], function() {\n\t\treturn A6(func, a, b, c, d, e, f);\n\t});\n});\n\nvar _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)\n{\n\treturn _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {\n\t\treturn A7(func, a, b, c, d, e, f, g);\n\t});\n});\n\nvar _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)\n{\n\treturn _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {\n\t\treturn A8(func, a, b, c, d, e, f, g, h);\n\t});\n});\n\n\n\n// FACTS\n\n\nvar _VirtualDom_on = F2(function(key, handler)\n{\n\treturn {\n\t\t$: 'a0',\n\t\tn: key,\n\t\to: handler\n\t};\n});\nvar _VirtualDom_style = F2(function(key, value)\n{\n\treturn {\n\t\t$: 'a1',\n\t\tn: key,\n\t\to: value\n\t};\n});\nvar _VirtualDom_property = F2(function(key, value)\n{\n\treturn {\n\t\t$: 'a2',\n\t\tn: key,\n\t\to: value\n\t};\n});\nvar _VirtualDom_attribute = F2(function(key, value)\n{\n\treturn {\n\t\t$: 'a3',\n\t\tn: key,\n\t\to: value\n\t};\n});\nvar _VirtualDom_attributeNS = F3(function(namespace, key, value)\n{\n\treturn {\n\t\t$: 'a4',\n\t\tn: key,\n\t\to: { f: namespace, o: value }\n\t};\n});\n\n\n\n// XSS ATTACK VECTOR CHECKS\n\n\nfunction _VirtualDom_noScript(tag)\n{\n\treturn tag == 'script' ? 'p' : tag;\n}\n\nfunction _VirtualDom_noOnOrFormAction(key)\n{\n\treturn /^(on|formAction$)/i.test(key) ? 'data-' + key : key;\n}\n\nfunction _VirtualDom_noInnerHtmlOrFormAction(key)\n{\n\treturn key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;\n}\n\nfunction _VirtualDom_noJavaScriptUri_UNUSED(value)\n{\n\treturn /^javascript:/i.test(value.replace(/\\s/g,'')) ? '' : value;\n}\n\nfunction _VirtualDom_noJavaScriptUri(value)\n{\n\treturn /^javascript:/i.test(value.replace(/\\s/g,''))\n\t\t? 'javascript:alert(\"This is an XSS vector. Please use ports or web components instead.\")'\n\t\t: value;\n}\n\nfunction _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)\n{\n\treturn /^\\s*(javascript:|data:text\\/html)/i.test(value) ? '' : value;\n}\n\nfunction _VirtualDom_noJavaScriptOrHtmlUri(value)\n{\n\treturn /^\\s*(javascript:|data:text\\/html)/i.test(value)\n\t\t? 'javascript:alert(\"This is an XSS vector. Please use ports or web components instead.\")'\n\t\t: value;\n}\n\n\n\n// MAP FACTS\n\n\nvar _VirtualDom_mapAttribute = F2(function(func, attr)\n{\n\treturn (attr.$ === 'a0')\n\t\t? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))\n\t\t: attr;\n});\n\nfunction _VirtualDom_mapHandler(func, handler)\n{\n\tvar tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler);\n\n\t// 0 = Normal\n\t// 1 = MayStopPropagation\n\t// 2 = MayPreventDefault\n\t// 3 = Custom\n\n\treturn {\n\t\t$: handler.$,\n\t\ta:\n\t\t\t!tag\n\t\t\t\t? A2(elm$json$Json$Decode$map, func, handler.a)\n\t\t\t\t:\n\t\t\tA3(elm$json$Json$Decode$map2,\n\t\t\t\ttag < 3\n\t\t\t\t\t? _VirtualDom_mapEventTuple\n\t\t\t\t\t: _VirtualDom_mapEventRecord,\n\t\t\t\telm$json$Json$Decode$succeed(func),\n\t\t\t\thandler.a\n\t\t\t)\n\t};\n}\n\nvar _VirtualDom_mapEventTuple = F2(function(func, tuple)\n{\n\treturn _Utils_Tuple2(func(tuple.a), tuple.b);\n});\n\nvar _VirtualDom_mapEventRecord = F2(function(func, record)\n{\n\treturn {\n\t\tmessage: func(record.message),\n\t\tstopPropagation: record.stopPropagation,\n\t\tpreventDefault: record.preventDefault\n\t}\n});\n\n\n\n// ORGANIZE FACTS\n\n\nfunction _VirtualDom_organizeFacts(factList)\n{\n\tfor (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS\n\t{\n\t\tvar entry = factList.a;\n\n\t\tvar tag = entry.$;\n\t\tvar key = entry.n;\n\t\tvar value = entry.o;\n\n\t\tif (tag === 'a2')\n\t\t{\n\t\t\t(key === 'className')\n\t\t\t\t? _VirtualDom_addClass(facts, key, _Json_unwrap(value))\n\t\t\t\t: facts[key] = _Json_unwrap(value);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar subFacts = facts[tag] || (facts[tag] = {});\n\t\t(tag === 'a3' && key === 'class')\n\t\t\t? _VirtualDom_addClass(subFacts, key, value)\n\t\t\t: subFacts[key] = value;\n\t}\n\n\treturn facts;\n}\n\nfunction _VirtualDom_addClass(object, key, newClass)\n{\n\tvar classes = object[key];\n\tobject[key] = classes ? classes + ' ' + newClass : newClass;\n}\n\n\n\n// RENDER\n\n\nfunction _VirtualDom_render(vNode, eventNode)\n{\n\tvar tag = vNode.$;\n\n\tif (tag === 5)\n\t{\n\t\treturn _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);\n\t}\n\n\tif (tag === 0)\n\t{\n\t\treturn _VirtualDom_doc.createTextNode(vNode.a);\n\t}\n\n\tif (tag === 4)\n\t{\n\t\tvar subNode = vNode.k;\n\t\tvar tagger = vNode.j;\n\n\t\twhile (subNode.$ === 4)\n\t\t{\n\t\t\ttypeof tagger !== 'object'\n\t\t\t\t? tagger = [tagger, subNode.j]\n\t\t\t\t: tagger.push(subNode.j);\n\n\t\t\tsubNode = subNode.k;\n\t\t}\n\n\t\tvar subEventRoot = { j: tagger, p: eventNode };\n\t\tvar domNode = _VirtualDom_render(subNode, subEventRoot);\n\t\tdomNode.elm_event_node_ref = subEventRoot;\n\t\treturn domNode;\n\t}\n\n\tif (tag === 3)\n\t{\n\t\tvar domNode = vNode.h(vNode.g);\n\t\t_VirtualDom_applyFacts(domNode, eventNode, vNode.d);\n\t\treturn domNode;\n\t}\n\n\t// at this point `tag` must be 1 or 2\n\n\tvar domNode = vNode.f\n\t\t? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)\n\t\t: _VirtualDom_doc.createElement(vNode.c);\n\n\tif (_VirtualDom_divertHrefToApp && vNode.c == 'a')\n\t{\n\t\tdomNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));\n\t}\n\n\t_VirtualDom_applyFacts(domNode, eventNode, vNode.d);\n\n\tfor (var kids = vNode.e, i = 0; i < kids.length; i++)\n\t{\n\t\t_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));\n\t}\n\n\treturn domNode;\n}\n\n\n\n// APPLY FACTS\n\n\nfunction _VirtualDom_applyFacts(domNode, eventNode, facts)\n{\n\tfor (var key in facts)\n\t{\n\t\tvar value = facts[key];\n\n\t\tkey === 'a1'\n\t\t\t? _VirtualDom_applyStyles(domNode, value)\n\t\t\t:\n\t\tkey === 'a0'\n\t\t\t? _VirtualDom_applyEvents(domNode, eventNode, value)\n\t\t\t:\n\t\tkey === 'a3'\n\t\t\t? _VirtualDom_applyAttrs(domNode, value)\n\t\t\t:\n\t\tkey === 'a4'\n\t\t\t? _VirtualDom_applyAttrsNS(domNode, value)\n\t\t\t:\n\t\t((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);\n\t}\n}\n\n\n\n// APPLY STYLES\n\n\nfunction _VirtualDom_applyStyles(domNode, styles)\n{\n\tvar domNodeStyle = domNode.style;\n\n\tfor (var key in styles)\n\t{\n\t\tdomNodeStyle[key] = styles[key];\n\t}\n}\n\n\n\n// APPLY ATTRS\n\n\nfunction _VirtualDom_applyAttrs(domNode, attrs)\n{\n\tfor (var key in attrs)\n\t{\n\t\tvar value = attrs[key];\n\t\ttypeof value !== 'undefined'\n\t\t\t? domNode.setAttribute(key, value)\n\t\t\t: domNode.removeAttribute(key);\n\t}\n}\n\n\n\n// APPLY NAMESPACED ATTRS\n\n\nfunction _VirtualDom_applyAttrsNS(domNode, nsAttrs)\n{\n\tfor (var key in nsAttrs)\n\t{\n\t\tvar pair = nsAttrs[key];\n\t\tvar namespace = pair.f;\n\t\tvar value = pair.o;\n\n\t\ttypeof value !== 'undefined'\n\t\t\t? domNode.setAttributeNS(namespace, key, value)\n\t\t\t: domNode.removeAttributeNS(namespace, key);\n\t}\n}\n\n\n\n// APPLY EVENTS\n\n\nfunction _VirtualDom_applyEvents(domNode, eventNode, events)\n{\n\tvar allCallbacks = domNode.elmFs || (domNode.elmFs = {});\n\n\tfor (var key in events)\n\t{\n\t\tvar newHandler = events[key];\n\t\tvar oldCallback = allCallbacks[key];\n\n\t\tif (!newHandler)\n\t\t{\n\t\t\tdomNode.removeEventListener(key, oldCallback);\n\t\t\tallCallbacks[key] = undefined;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (oldCallback)\n\t\t{\n\t\t\tvar oldHandler = oldCallback.q;\n\t\t\tif (oldHandler.$ === newHandler.$)\n\t\t\t{\n\t\t\t\toldCallback.q = newHandler;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdomNode.removeEventListener(key, oldCallback);\n\t\t}\n\n\t\toldCallback = _VirtualDom_makeCallback(eventNode, newHandler);\n\t\tdomNode.addEventListener(key, oldCallback,\n\t\t\t_VirtualDom_passiveSupported\n\t\t\t&& { passive: elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }\n\t\t);\n\t\tallCallbacks[key] = oldCallback;\n\t}\n}\n\n\n\n// PASSIVE EVENTS\n\n\nvar _VirtualDom_passiveSupported;\n\ntry\n{\n\twindow.addEventListener('t', null, Object.defineProperty({}, 'passive', {\n\t\tget: function() { _VirtualDom_passiveSupported = true; }\n\t}));\n}\ncatch(e) {}\n\n\n\n// EVENT HANDLERS\n\n\nfunction _VirtualDom_makeCallback(eventNode, initialHandler)\n{\n\tfunction callback(event)\n\t{\n\t\tvar handler = callback.q;\n\t\tvar result = _Json_runHelp(handler.a, event);\n\n\t\tif (!elm$core$Result$isOk(result))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler);\n\n\t\t// 0 = Normal\n\t\t// 1 = MayStopPropagation\n\t\t// 2 = MayPreventDefault\n\t\t// 3 = Custom\n\n\t\tvar value = result.a;\n\t\tvar message = !tag ? value : tag < 3 ? value.a : value.message;\n\t\tvar stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;\n\t\tvar currentEventNode = (\n\t\t\tstopPropagation && event.stopPropagation(),\n\t\t\t(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),\n\t\t\teventNode\n\t\t);\n\t\tvar tagger;\n\t\tvar i;\n\t\twhile (tagger = currentEventNode.j)\n\t\t{\n\t\t\tif (typeof tagger == 'function')\n\t\t\t{\n\t\t\t\tmessage = tagger(message);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor (var i = tagger.length; i--; )\n\t\t\t\t{\n\t\t\t\t\tmessage = tagger[i](message);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentEventNode = currentEventNode.p;\n\t\t}\n\t\tcurrentEventNode(message, stopPropagation); // stopPropagation implies isSync\n\t}\n\n\tcallback.q = initialHandler;\n\n\treturn callback;\n}\n\nfunction _VirtualDom_equalEvents(x, y)\n{\n\treturn x.$ == y.$ && _Json_equality(x.a, y.a);\n}\n\n\n\n// DIFF\n\n\n// TODO: Should we do patches like in iOS?\n//\n// type Patch\n//   = At Int Patch\n//   | Batch (List Patch)\n//   | Change ...\n//\n// How could it not be better?\n//\nfunction _VirtualDom_diff(x, y)\n{\n\tvar patches = [];\n\t_VirtualDom_diffHelp(x, y, patches, 0);\n\treturn patches;\n}\n\n\nfunction _VirtualDom_pushPatch(patches, type, index, data)\n{\n\tvar patch = {\n\t\t$: type,\n\t\tr: index,\n\t\ts: data,\n\t\tt: undefined,\n\t\tu: undefined\n\t};\n\tpatches.push(patch);\n\treturn patch;\n}\n\n\nfunction _VirtualDom_diffHelp(x, y, patches, index)\n{\n\tif (x === y)\n\t{\n\t\treturn;\n\t}\n\n\tvar xType = x.$;\n\tvar yType = y.$;\n\n\t// Bail if you run into different types of nodes. Implies that the\n\t// structure has changed significantly and it's not worth a diff.\n\tif (xType !== yType)\n\t{\n\t\tif (xType === 1 && yType === 2)\n\t\t{\n\t\t\ty = _VirtualDom_dekey(y);\n\t\t\tyType = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_VirtualDom_pushPatch(patches, 0, index, y);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Now we know that both nodes are the same $.\n\tswitch (yType)\n\t{\n\t\tcase 5:\n\t\t\tvar xRefs = x.l;\n\t\t\tvar yRefs = y.l;\n\t\t\tvar i = xRefs.length;\n\t\t\tvar same = i === yRefs.length;\n\t\t\twhile (same && i--)\n\t\t\t{\n\t\t\t\tsame = xRefs[i] === yRefs[i];\n\t\t\t}\n\t\t\tif (same)\n\t\t\t{\n\t\t\t\ty.k = x.k;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ty.k = y.m();\n\t\t\tvar subPatches = [];\n\t\t\t_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);\n\t\t\tsubPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);\n\t\t\treturn;\n\n\t\tcase 4:\n\t\t\t// gather nested taggers\n\t\t\tvar xTaggers = x.j;\n\t\t\tvar yTaggers = y.j;\n\t\t\tvar nesting = false;\n\n\t\t\tvar xSubNode = x.k;\n\t\t\twhile (xSubNode.$ === 4)\n\t\t\t{\n\t\t\t\tnesting = true;\n\n\t\t\t\ttypeof xTaggers !== 'object'\n\t\t\t\t\t? xTaggers = [xTaggers, xSubNode.j]\n\t\t\t\t\t: xTaggers.push(xSubNode.j);\n\n\t\t\t\txSubNode = xSubNode.k;\n\t\t\t}\n\n\t\t\tvar ySubNode = y.k;\n\t\t\twhile (ySubNode.$ === 4)\n\t\t\t{\n\t\t\t\tnesting = true;\n\n\t\t\t\ttypeof yTaggers !== 'object'\n\t\t\t\t\t? yTaggers = [yTaggers, ySubNode.j]\n\t\t\t\t\t: yTaggers.push(ySubNode.j);\n\n\t\t\t\tySubNode = ySubNode.k;\n\t\t\t}\n\n\t\t\t// Just bail if different numbers of taggers. This implies the\n\t\t\t// structure of the virtual DOM has changed.\n\t\t\tif (nesting && xTaggers.length !== yTaggers.length)\n\t\t\t{\n\t\t\t\t_VirtualDom_pushPatch(patches, 0, index, y);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// check if taggers are \"the same\"\n\t\t\tif (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)\n\t\t\t{\n\t\t\t\t_VirtualDom_pushPatch(patches, 2, index, yTaggers);\n\t\t\t}\n\n\t\t\t// diff everything below the taggers\n\t\t\t_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);\n\t\t\treturn;\n\n\t\tcase 0:\n\t\t\tif (x.a !== y.a)\n\t\t\t{\n\t\t\t\t_VirtualDom_pushPatch(patches, 3, index, y.a);\n\t\t\t}\n\t\t\treturn;\n\n\t\tcase 1:\n\t\t\t_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);\n\t\t\treturn;\n\n\t\tcase 2:\n\t\t\t_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);\n\t\t\treturn;\n\n\t\tcase 3:\n\t\t\tif (x.h !== y.h)\n\t\t\t{\n\t\t\t\t_VirtualDom_pushPatch(patches, 0, index, y);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar factsDiff = _VirtualDom_diffFacts(x.d, y.d);\n\t\t\tfactsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);\n\n\t\t\tvar patch = y.i(x.g, y.g);\n\t\t\tpatch && _VirtualDom_pushPatch(patches, 5, index, patch);\n\n\t\t\treturn;\n\t}\n}\n\n// assumes the incoming arrays are the same length\nfunction _VirtualDom_pairwiseRefEqual(as, bs)\n{\n\tfor (var i = 0; i < as.length; i++)\n\t{\n\t\tif (as[i] !== bs[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction _VirtualDom_diffNodes(x, y, patches, index, diffKids)\n{\n\t// Bail if obvious indicators have changed. Implies more serious\n\t// structural changes such that it's not worth it to diff.\n\tif (x.c !== y.c || x.f !== y.f)\n\t{\n\t\t_VirtualDom_pushPatch(patches, 0, index, y);\n\t\treturn;\n\t}\n\n\tvar factsDiff = _VirtualDom_diffFacts(x.d, y.d);\n\tfactsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);\n\n\tdiffKids(x, y, patches, index);\n}\n\n\n\n// DIFF FACTS\n\n\n// TODO Instead of creating a new diff object, it's possible to just test if\n// there *is* a diff. During the actual patch, do the diff again and make the\n// modifications directly. This way, there's no new allocations. Worth it?\nfunction _VirtualDom_diffFacts(x, y, category)\n{\n\tvar diff;\n\n\t// look for changes and removals\n\tfor (var xKey in x)\n\t{\n\t\tif (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')\n\t\t{\n\t\t\tvar subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);\n\t\t\tif (subDiff)\n\t\t\t{\n\t\t\t\tdiff = diff || {};\n\t\t\t\tdiff[xKey] = subDiff;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\t// remove if not in the new facts\n\t\tif (!(xKey in y))\n\t\t{\n\t\t\tdiff = diff || {};\n\t\t\tdiff[xKey] =\n\t\t\t\t!category\n\t\t\t\t\t? (typeof x[xKey] === 'string' ? '' : null)\n\t\t\t\t\t:\n\t\t\t\t(category === 'a1')\n\t\t\t\t\t? ''\n\t\t\t\t\t:\n\t\t\t\t(category === 'a0' || category === 'a3')\n\t\t\t\t\t? undefined\n\t\t\t\t\t:\n\t\t\t\t{ f: x[xKey].f, o: undefined };\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar xValue = x[xKey];\n\t\tvar yValue = y[xKey];\n\n\t\t// reference equal, so don't worry about it\n\t\tif (xValue === yValue && xKey !== 'value' && xKey !== 'checked'\n\t\t\t|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tdiff = diff || {};\n\t\tdiff[xKey] = yValue;\n\t}\n\n\t// add new stuff\n\tfor (var yKey in y)\n\t{\n\t\tif (!(yKey in x))\n\t\t{\n\t\t\tdiff = diff || {};\n\t\t\tdiff[yKey] = y[yKey];\n\t\t}\n\t}\n\n\treturn diff;\n}\n\n\n\n// DIFF KIDS\n\n\nfunction _VirtualDom_diffKids(xParent, yParent, patches, index)\n{\n\tvar xKids = xParent.e;\n\tvar yKids = yParent.e;\n\n\tvar xLen = xKids.length;\n\tvar yLen = yKids.length;\n\n\t// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS\n\n\tif (xLen > yLen)\n\t{\n\t\t_VirtualDom_pushPatch(patches, 6, index, {\n\t\t\tv: yLen,\n\t\t\ti: xLen - yLen\n\t\t});\n\t}\n\telse if (xLen < yLen)\n\t{\n\t\t_VirtualDom_pushPatch(patches, 7, index, {\n\t\t\tv: xLen,\n\t\t\te: yKids\n\t\t});\n\t}\n\n\t// PAIRWISE DIFF EVERYTHING ELSE\n\n\tfor (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)\n\t{\n\t\tvar xKid = xKids[i];\n\t\t_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);\n\t\tindex += xKid.b || 0;\n\t}\n}\n\n\n\n// KEYED DIFF\n\n\nfunction _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)\n{\n\tvar localPatches = [];\n\n\tvar changes = {}; // Dict String Entry\n\tvar inserts = []; // Array { index : Int, entry : Entry }\n\t// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }\n\n\tvar xKids = xParent.e;\n\tvar yKids = yParent.e;\n\tvar xLen = xKids.length;\n\tvar yLen = yKids.length;\n\tvar xIndex = 0;\n\tvar yIndex = 0;\n\n\tvar index = rootIndex;\n\n\twhile (xIndex < xLen && yIndex < yLen)\n\t{\n\t\tvar x = xKids[xIndex];\n\t\tvar y = yKids[yIndex];\n\n\t\tvar xKey = x.a;\n\t\tvar yKey = y.a;\n\t\tvar xNode = x.b;\n\t\tvar yNode = y.b;\n\n\t\tvar newMatch = undefined;\n\t\tvar oldMatch = undefined;\n\n\t\t// check if keys match\n\n\t\tif (xKey === yKey)\n\t\t{\n\t\t\tindex++;\n\t\t\t_VirtualDom_diffHelp(xNode, yNode, localPatches, index);\n\t\t\tindex += xNode.b || 0;\n\n\t\t\txIndex++;\n\t\t\tyIndex++;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// look ahead 1 to detect insertions and removals.\n\n\t\tvar xNext = xKids[xIndex + 1];\n\t\tvar yNext = yKids[yIndex + 1];\n\n\t\tif (xNext)\n\t\t{\n\t\t\tvar xNextKey = xNext.a;\n\t\t\tvar xNextNode = xNext.b;\n\t\t\toldMatch = yKey === xNextKey;\n\t\t}\n\n\t\tif (yNext)\n\t\t{\n\t\t\tvar yNextKey = yNext.a;\n\t\t\tvar yNextNode = yNext.b;\n\t\t\tnewMatch = xKey === yNextKey;\n\t\t}\n\n\n\t\t// swap x and y\n\t\tif (newMatch && oldMatch)\n\t\t{\n\t\t\tindex++;\n\t\t\t_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);\n\t\t\t_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);\n\t\t\tindex += xNode.b || 0;\n\n\t\t\tindex++;\n\t\t\t_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);\n\t\t\tindex += xNextNode.b || 0;\n\n\t\t\txIndex += 2;\n\t\t\tyIndex += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// insert y\n\t\tif (newMatch)\n\t\t{\n\t\t\tindex++;\n\t\t\t_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);\n\t\t\t_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);\n\t\t\tindex += xNode.b || 0;\n\n\t\t\txIndex += 1;\n\t\t\tyIndex += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// remove x\n\t\tif (oldMatch)\n\t\t{\n\t\t\tindex++;\n\t\t\t_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);\n\t\t\tindex += xNode.b || 0;\n\n\t\t\tindex++;\n\t\t\t_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);\n\t\t\tindex += xNextNode.b || 0;\n\n\t\t\txIndex += 2;\n\t\t\tyIndex += 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// remove x, insert y\n\t\tif (xNext && xNextKey === yNextKey)\n\t\t{\n\t\t\tindex++;\n\t\t\t_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);\n\t\t\t_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);\n\t\t\tindex += xNode.b || 0;\n\n\t\t\tindex++;\n\t\t\t_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);\n\t\t\tindex += xNextNode.b || 0;\n\n\t\t\txIndex += 2;\n\t\t\tyIndex += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbreak;\n\t}\n\n\t// eat up any remaining nodes with removeNode and insertNode\n\n\twhile (xIndex < xLen)\n\t{\n\t\tindex++;\n\t\tvar x = xKids[xIndex];\n\t\tvar xNode = x.b;\n\t\t_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);\n\t\tindex += xNode.b || 0;\n\t\txIndex++;\n\t}\n\n\twhile (yIndex < yLen)\n\t{\n\t\tvar endInserts = endInserts || [];\n\t\tvar y = yKids[yIndex];\n\t\t_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);\n\t\tyIndex++;\n\t}\n\n\tif (localPatches.length > 0 || inserts.length > 0 || endInserts)\n\t{\n\t\t_VirtualDom_pushPatch(patches, 8, rootIndex, {\n\t\t\tw: localPatches,\n\t\t\tx: inserts,\n\t\t\ty: endInserts\n\t\t});\n\t}\n}\n\n\n\n// CHANGES FROM KEYED DIFF\n\n\nvar _VirtualDom_POSTFIX = '_elmW6BL';\n\n\nfunction _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)\n{\n\tvar entry = changes[key];\n\n\t// never seen this key before\n\tif (!entry)\n\t{\n\t\tentry = {\n\t\t\tc: 0,\n\t\t\tz: vnode,\n\t\t\tr: yIndex,\n\t\t\ts: undefined\n\t\t};\n\n\t\tinserts.push({ r: yIndex, A: entry });\n\t\tchanges[key] = entry;\n\n\t\treturn;\n\t}\n\n\t// this key was removed earlier, a match!\n\tif (entry.c === 1)\n\t{\n\t\tinserts.push({ r: yIndex, A: entry });\n\n\t\tentry.c = 2;\n\t\tvar subPatches = [];\n\t\t_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);\n\t\tentry.r = yIndex;\n\t\tentry.s.s = {\n\t\t\tw: subPatches,\n\t\t\tA: entry\n\t\t};\n\n\t\treturn;\n\t}\n\n\t// this key has already been inserted or moved, a duplicate!\n\t_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);\n}\n\n\nfunction _VirtualDom_removeNode(changes, localPatches, key, vnode, index)\n{\n\tvar entry = changes[key];\n\n\t// never seen this key before\n\tif (!entry)\n\t{\n\t\tvar patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);\n\n\t\tchanges[key] = {\n\t\t\tc: 1,\n\t\t\tz: vnode,\n\t\t\tr: index,\n\t\t\ts: patch\n\t\t};\n\n\t\treturn;\n\t}\n\n\t// this key was inserted earlier, a match!\n\tif (entry.c === 0)\n\t{\n\t\tentry.c = 2;\n\t\tvar subPatches = [];\n\t\t_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);\n\n\t\t_VirtualDom_pushPatch(localPatches, 9, index, {\n\t\t\tw: subPatches,\n\t\t\tA: entry\n\t\t});\n\n\t\treturn;\n\t}\n\n\t// this key has already been removed or moved, a duplicate!\n\t_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);\n}\n\n\n\n// ADD DOM NODES\n//\n// Each DOM node has an \"index\" assigned in order of traversal. It is important\n// to minimize our crawl over the actual DOM, so these indexes (along with the\n// descendantsCount of virtual nodes) let us skip touching entire subtrees of\n// the DOM if we know there are no patches there.\n\n\nfunction _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)\n{\n\t_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);\n}\n\n\n// assumes `patches` is non-empty and indexes increase monotonically.\nfunction _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)\n{\n\tvar patch = patches[i];\n\tvar index = patch.r;\n\n\twhile (index === low)\n\t{\n\t\tvar patchType = patch.$;\n\n\t\tif (patchType === 1)\n\t\t{\n\t\t\t_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);\n\t\t}\n\t\telse if (patchType === 8)\n\t\t{\n\t\t\tpatch.t = domNode;\n\t\t\tpatch.u = eventNode;\n\n\t\t\tvar subPatches = patch.s.w;\n\t\t\tif (subPatches.length > 0)\n\t\t\t{\n\t\t\t\t_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);\n\t\t\t}\n\t\t}\n\t\telse if (patchType === 9)\n\t\t{\n\t\t\tpatch.t = domNode;\n\t\t\tpatch.u = eventNode;\n\n\t\t\tvar data = patch.s;\n\t\t\tif (data)\n\t\t\t{\n\t\t\t\tdata.A.s = domNode;\n\t\t\t\tvar subPatches = data.w;\n\t\t\t\tif (subPatches.length > 0)\n\t\t\t\t{\n\t\t\t\t\t_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpatch.t = domNode;\n\t\t\tpatch.u = eventNode;\n\t\t}\n\n\t\ti++;\n\n\t\tif (!(patch = patches[i]) || (index = patch.r) > high)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\n\tvar tag = vNode.$;\n\n\tif (tag === 4)\n\t{\n\t\tvar subNode = vNode.k;\n\n\t\twhile (subNode.$ === 4)\n\t\t{\n\t\t\tsubNode = subNode.k;\n\t\t}\n\n\t\treturn _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);\n\t}\n\n\t// tag must be 1 or 2 at this point\n\n\tvar vKids = vNode.e;\n\tvar childNodes = domNode.childNodes;\n\tfor (var j = 0; j < vKids.length; j++)\n\t{\n\t\tlow++;\n\t\tvar vKid = tag === 1 ? vKids[j] : vKids[j].b;\n\t\tvar nextLow = low + (vKid.b || 0);\n\t\tif (low <= index && index <= nextLow)\n\t\t{\n\t\t\ti = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);\n\t\t\tif (!(patch = patches[i]) || (index = patch.r) > high)\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\tlow = nextLow;\n\t}\n\treturn i;\n}\n\n\n\n// APPLY PATCHES\n\n\nfunction _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)\n{\n\tif (patches.length === 0)\n\t{\n\t\treturn rootDomNode;\n\t}\n\n\t_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);\n\treturn _VirtualDom_applyPatchesHelp(rootDomNode, patches);\n}\n\nfunction _VirtualDom_applyPatchesHelp(rootDomNode, patches)\n{\n\tfor (var i = 0; i < patches.length; i++)\n\t{\n\t\tvar patch = patches[i];\n\t\tvar localDomNode = patch.t\n\t\tvar newNode = _VirtualDom_applyPatch(localDomNode, patch);\n\t\tif (localDomNode === rootDomNode)\n\t\t{\n\t\t\trootDomNode = newNode;\n\t\t}\n\t}\n\treturn rootDomNode;\n}\n\nfunction _VirtualDom_applyPatch(domNode, patch)\n{\n\tswitch (patch.$)\n\t{\n\t\tcase 0:\n\t\t\treturn _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);\n\n\t\tcase 4:\n\t\t\t_VirtualDom_applyFacts(domNode, patch.u, patch.s);\n\t\t\treturn domNode;\n\n\t\tcase 3:\n\t\t\tdomNode.replaceData(0, domNode.length, patch.s);\n\t\t\treturn domNode;\n\n\t\tcase 1:\n\t\t\treturn _VirtualDom_applyPatchesHelp(domNode, patch.s);\n\n\t\tcase 2:\n\t\t\tif (domNode.elm_event_node_ref)\n\t\t\t{\n\t\t\t\tdomNode.elm_event_node_ref.j = patch.s;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdomNode.elm_event_node_ref = { j: patch.s, p: patch.u };\n\t\t\t}\n\t\t\treturn domNode;\n\n\t\tcase 6:\n\t\t\tvar data = patch.s;\n\t\t\tfor (var i = 0; i < data.i; i++)\n\t\t\t{\n\t\t\t\tdomNode.removeChild(domNode.childNodes[data.v]);\n\t\t\t}\n\t\t\treturn domNode;\n\n\t\tcase 7:\n\t\t\tvar data = patch.s;\n\t\t\tvar kids = data.e;\n\t\t\tvar i = data.v;\n\t\t\tvar theEnd = domNode.childNodes[i];\n\t\t\tfor (; i < kids.length; i++)\n\t\t\t{\n\t\t\t\tdomNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);\n\t\t\t}\n\t\t\treturn domNode;\n\n\t\tcase 9:\n\t\t\tvar data = patch.s;\n\t\t\tif (!data)\n\t\t\t{\n\t\t\t\tdomNode.parentNode.removeChild(domNode);\n\t\t\t\treturn domNode;\n\t\t\t}\n\t\t\tvar entry = data.A;\n\t\t\tif (typeof entry.r !== 'undefined')\n\t\t\t{\n\t\t\t\tdomNode.parentNode.removeChild(domNode);\n\t\t\t}\n\t\t\tentry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);\n\t\t\treturn domNode;\n\n\t\tcase 8:\n\t\t\treturn _VirtualDom_applyPatchReorder(domNode, patch);\n\n\t\tcase 5:\n\t\t\treturn patch.s(domNode);\n\n\t\tdefault:\n\t\t\t_Debug_crash(10); // 'Ran into an unknown patch!'\n\t}\n}\n\n\nfunction _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)\n{\n\tvar parentNode = domNode.parentNode;\n\tvar newNode = _VirtualDom_render(vNode, eventNode);\n\n\tif (!newNode.elm_event_node_ref)\n\t{\n\t\tnewNode.elm_event_node_ref = domNode.elm_event_node_ref;\n\t}\n\n\tif (parentNode && newNode !== domNode)\n\t{\n\t\tparentNode.replaceChild(newNode, domNode);\n\t}\n\treturn newNode;\n}\n\n\nfunction _VirtualDom_applyPatchReorder(domNode, patch)\n{\n\tvar data = patch.s;\n\n\t// remove end inserts\n\tvar frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);\n\n\t// removals\n\tdomNode = _VirtualDom_applyPatchesHelp(domNode, data.w);\n\n\t// inserts\n\tvar inserts = data.x;\n\tfor (var i = 0; i < inserts.length; i++)\n\t{\n\t\tvar insert = inserts[i];\n\t\tvar entry = insert.A;\n\t\tvar node = entry.c === 2\n\t\t\t? entry.s\n\t\t\t: _VirtualDom_render(entry.z, patch.u);\n\t\tdomNode.insertBefore(node, domNode.childNodes[insert.r]);\n\t}\n\n\t// add end inserts\n\tif (frag)\n\t{\n\t\t_VirtualDom_appendChild(domNode, frag);\n\t}\n\n\treturn domNode;\n}\n\n\nfunction _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)\n{\n\tif (!endInserts)\n\t{\n\t\treturn;\n\t}\n\n\tvar frag = _VirtualDom_doc.createDocumentFragment();\n\tfor (var i = 0; i < endInserts.length; i++)\n\t{\n\t\tvar insert = endInserts[i];\n\t\tvar entry = insert.A;\n\t\t_VirtualDom_appendChild(frag, entry.c === 2\n\t\t\t? entry.s\n\t\t\t: _VirtualDom_render(entry.z, patch.u)\n\t\t);\n\t}\n\treturn frag;\n}\n\n\nfunction _VirtualDom_virtualize(node)\n{\n\t// TEXT NODES\n\n\tif (node.nodeType === 3)\n\t{\n\t\treturn _VirtualDom_text(node.textContent);\n\t}\n\n\n\t// WEIRD NODES\n\n\tif (node.nodeType !== 1)\n\t{\n\t\treturn _VirtualDom_text('');\n\t}\n\n\n\t// ELEMENT NODES\n\n\tvar attrList = _List_Nil;\n\tvar attrs = node.attributes;\n\tfor (var i = attrs.length; i--; )\n\t{\n\t\tvar attr = attrs[i];\n\t\tvar name = attr.name;\n\t\tvar value = attr.value;\n\t\tattrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );\n\t}\n\n\tvar tag = node.tagName.toLowerCase();\n\tvar kidList = _List_Nil;\n\tvar kids = node.childNodes;\n\n\tfor (var i = kids.length; i--; )\n\t{\n\t\tkidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);\n\t}\n\treturn A3(_VirtualDom_node, tag, attrList, kidList);\n}\n\nfunction _VirtualDom_dekey(keyedNode)\n{\n\tvar keyedKids = keyedNode.e;\n\tvar len = keyedKids.length;\n\tvar kids = new Array(len);\n\tfor (var i = 0; i < len; i++)\n\t{\n\t\tkids[i] = keyedKids[i].b;\n\t}\n\n\treturn {\n\t\t$: 1,\n\t\tc: keyedNode.c,\n\t\td: keyedNode.d,\n\t\te: kids,\n\t\tf: keyedNode.f,\n\t\tb: keyedNode.b\n\t};\n}\n\n\n\n\n// ELEMENT\n\n\nvar _Debugger_element;\n\nvar _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)\n{\n\treturn _Platform_initialize(\n\t\tflagDecoder,\n\t\targs,\n\t\timpl.init,\n\t\timpl.update,\n\t\timpl.subscriptions,\n\t\tfunction(sendToApp, initialModel) {\n\t\t\tvar view = impl.view;\n\t\t\t/**_UNUSED/\n\t\t\tvar domNode = args['node'];\n\t\t\t//*/\n\t\t\t/**/\n\t\t\tvar domNode = args && args['node'] ? args['node'] : _Debug_crash(0);\n\t\t\t//*/\n\t\t\tvar currNode = _VirtualDom_virtualize(domNode);\n\n\t\t\treturn _Browser_makeAnimator(initialModel, function(model)\n\t\t\t{\n\t\t\t\tvar nextNode = view(model);\n\t\t\t\tvar patches = _VirtualDom_diff(currNode, nextNode);\n\t\t\t\tdomNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);\n\t\t\t\tcurrNode = nextNode;\n\t\t\t});\n\t\t}\n\t);\n});\n\n\n\n// DOCUMENT\n\n\nvar _Debugger_document;\n\nvar _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)\n{\n\treturn _Platform_initialize(\n\t\tflagDecoder,\n\t\targs,\n\t\timpl.init,\n\t\timpl.update,\n\t\timpl.subscriptions,\n\t\tfunction(sendToApp, initialModel) {\n\t\t\tvar divertHrefToApp = impl.setup && impl.setup(sendToApp)\n\t\t\tvar view = impl.view;\n\t\t\tvar title = _VirtualDom_doc.title;\n\t\t\tvar bodyNode = _VirtualDom_doc.body;\n\t\t\tvar currNode = _VirtualDom_virtualize(bodyNode);\n\t\t\treturn _Browser_makeAnimator(initialModel, function(model)\n\t\t\t{\n\t\t\t\t_VirtualDom_divertHrefToApp = divertHrefToApp;\n\t\t\t\tvar doc = view(model);\n\t\t\t\tvar nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);\n\t\t\t\tvar patches = _VirtualDom_diff(currNode, nextNode);\n\t\t\t\tbodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);\n\t\t\t\tcurrNode = nextNode;\n\t\t\t\t_VirtualDom_divertHrefToApp = 0;\n\t\t\t\t(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);\n\t\t\t});\n\t\t}\n\t);\n});\n\n\n\n// ANIMATION\n\n\nvar _Browser_cancelAnimationFrame =\n\ttypeof cancelAnimationFrame !== 'undefined'\n\t\t? cancelAnimationFrame\n\t\t: function(id) { clearTimeout(id); };\n\nvar _Browser_requestAnimationFrame =\n\ttypeof requestAnimationFrame !== 'undefined'\n\t\t? requestAnimationFrame\n\t\t: function(callback) { return setTimeout(callback, 1000 / 60); };\n\n\nfunction _Browser_makeAnimator(model, draw)\n{\n\tdraw(model);\n\n\tvar state = 0;\n\n\tfunction updateIfNeeded()\n\t{\n\t\tstate = state === 1\n\t\t\t? 0\n\t\t\t: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );\n\t}\n\n\treturn function(nextModel, isSync)\n\t{\n\t\tmodel = nextModel;\n\n\t\tisSync\n\t\t\t? ( draw(model),\n\t\t\t\tstate === 2 && (state = 1)\n\t\t\t\t)\n\t\t\t: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),\n\t\t\t\tstate = 2\n\t\t\t\t);\n\t};\n}\n\n\n\n// APPLICATION\n\n\nfunction _Browser_application(impl)\n{\n\tvar onUrlChange = impl.onUrlChange;\n\tvar onUrlRequest = impl.onUrlRequest;\n\tvar key = function() { key.a(onUrlChange(_Browser_getUrl())); };\n\n\treturn _Browser_document({\n\t\tsetup: function(sendToApp)\n\t\t{\n\t\t\tkey.a = sendToApp;\n\t\t\t_Browser_window.addEventListener('popstate', key);\n\t\t\t_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);\n\n\t\t\treturn F2(function(domNode, event)\n\t\t\t{\n\t\t\t\tif (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))\n\t\t\t\t{\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tvar href = domNode.href;\n\t\t\t\t\tvar curr = _Browser_getUrl();\n\t\t\t\t\tvar next = elm$url$Url$fromString(href).a;\n\t\t\t\t\tsendToApp(onUrlRequest(\n\t\t\t\t\t\t(next\n\t\t\t\t\t\t\t&& curr.protocol === next.protocol\n\t\t\t\t\t\t\t&& curr.host === next.host\n\t\t\t\t\t\t\t&& curr.port_.a === next.port_.a\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t? elm$browser$Browser$Internal(next)\n\t\t\t\t\t\t\t: elm$browser$Browser$External(href)\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tinit: function(flags)\n\t\t{\n\t\t\treturn A3(impl.init, flags, _Browser_getUrl(), key);\n\t\t},\n\t\tview: impl.view,\n\t\tupdate: impl.update,\n\t\tsubscriptions: impl.subscriptions\n\t});\n}\n\nfunction _Browser_getUrl()\n{\n\treturn elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);\n}\n\nvar _Browser_go = F2(function(key, n)\n{\n\treturn A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {\n\t\tn && history.go(n);\n\t\tkey();\n\t}));\n});\n\nvar _Browser_pushUrl = F2(function(key, url)\n{\n\treturn A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {\n\t\thistory.pushState({}, '', url);\n\t\tkey();\n\t}));\n});\n\nvar _Browser_replaceUrl = F2(function(key, url)\n{\n\treturn A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {\n\t\thistory.replaceState({}, '', url);\n\t\tkey();\n\t}));\n});\n\n\n\n// GLOBAL EVENTS\n\n\nvar _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };\nvar _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;\nvar _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;\n\nvar _Browser_on = F3(function(node, eventName, sendToSelf)\n{\n\treturn _Scheduler_spawn(_Scheduler_binding(function(callback)\n\t{\n\t\tfunction handler(event)\t{ _Scheduler_rawSpawn(sendToSelf(event)); }\n\t\tnode.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });\n\t\treturn function() { node.removeEventListener(eventName, handler); };\n\t}));\n});\n\nvar _Browser_decodeEvent = F2(function(decoder, event)\n{\n\tvar result = _Json_runHelp(decoder, event);\n\treturn elm$core$Result$isOk(result) ? elm$core$Maybe$Just(result.a) : elm$core$Maybe$Nothing;\n});\n\n\n\n// PAGE VISIBILITY\n\n\nfunction _Browser_visibilityInfo()\n{\n\treturn (typeof _VirtualDom_doc.hidden !== 'undefined')\n\t\t? { hidden: 'hidden', change: 'visibilitychange' }\n\t\t:\n\t(typeof _VirtualDom_doc.mozHidden !== 'undefined')\n\t\t? { hidden: 'mozHidden', change: 'mozvisibilitychange' }\n\t\t:\n\t(typeof _VirtualDom_doc.msHidden !== 'undefined')\n\t\t? { hidden: 'msHidden', change: 'msvisibilitychange' }\n\t\t:\n\t(typeof _VirtualDom_doc.webkitHidden !== 'undefined')\n\t\t? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }\n\t\t: { hidden: 'hidden', change: 'visibilitychange' };\n}\n\n\n\n// ANIMATION FRAMES\n\n\nfunction _Browser_rAF()\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar id = _Browser_requestAnimationFrame(function() {\n\t\t\tcallback(_Scheduler_succeed(Date.now()));\n\t\t});\n\n\t\treturn function() {\n\t\t\t_Browser_cancelAnimationFrame(id);\n\t\t};\n\t});\n}\n\n\nfunction _Browser_now()\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tcallback(_Scheduler_succeed(Date.now()));\n\t});\n}\n\n\n\n// DOM STUFF\n\n\nfunction _Browser_withNode(id, doStuff)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\t_Browser_requestAnimationFrame(function() {\n\t\t\tvar node = document.getElementById(id);\n\t\t\tcallback(node\n\t\t\t\t? _Scheduler_succeed(doStuff(node))\n\t\t\t\t: _Scheduler_fail(elm$browser$Browser$Dom$NotFound(id))\n\t\t\t);\n\t\t});\n\t});\n}\n\n\nfunction _Browser_withWindow(doStuff)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\t_Browser_requestAnimationFrame(function() {\n\t\t\tcallback(_Scheduler_succeed(doStuff()));\n\t\t});\n\t});\n}\n\n\n// FOCUS and BLUR\n\n\nvar _Browser_call = F2(function(functionName, id)\n{\n\treturn _Browser_withNode(id, function(node) {\n\t\tnode[functionName]();\n\t\treturn _Utils_Tuple0;\n\t});\n});\n\n\n\n// WINDOW VIEWPORT\n\n\nfunction _Browser_getViewport()\n{\n\treturn {\n\t\tscene: _Browser_getScene(),\n\t\tviewport: {\n\t\t\tx: _Browser_window.pageXOffset,\n\t\t\ty: _Browser_window.pageYOffset,\n\t\t\twidth: _Browser_doc.documentElement.clientWidth,\n\t\t\theight: _Browser_doc.documentElement.clientHeight\n\t\t}\n\t};\n}\n\nfunction _Browser_getScene()\n{\n\tvar body = _Browser_doc.body;\n\tvar elem = _Browser_doc.documentElement;\n\treturn {\n\t\twidth: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),\n\t\theight: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)\n\t};\n}\n\nvar _Browser_setViewport = F2(function(x, y)\n{\n\treturn _Browser_withWindow(function()\n\t{\n\t\t_Browser_window.scroll(x, y);\n\t\treturn _Utils_Tuple0;\n\t});\n});\n\n\n\n// ELEMENT VIEWPORT\n\n\nfunction _Browser_getViewportOf(id)\n{\n\treturn _Browser_withNode(id, function(node)\n\t{\n\t\treturn {\n\t\t\tscene: {\n\t\t\t\twidth: node.scrollWidth,\n\t\t\t\theight: node.scrollHeight\n\t\t\t},\n\t\t\tviewport: {\n\t\t\t\tx: node.scrollLeft,\n\t\t\t\ty: node.scrollTop,\n\t\t\t\twidth: node.clientWidth,\n\t\t\t\theight: node.clientHeight\n\t\t\t}\n\t\t};\n\t});\n}\n\n\nvar _Browser_setViewportOf = F3(function(id, x, y)\n{\n\treturn _Browser_withNode(id, function(node)\n\t{\n\t\tnode.scrollLeft = x;\n\t\tnode.scrollTop = y;\n\t\treturn _Utils_Tuple0;\n\t});\n});\n\n\n\n// ELEMENT\n\n\nfunction _Browser_getElement(id)\n{\n\treturn _Browser_withNode(id, function(node)\n\t{\n\t\tvar rect = node.getBoundingClientRect();\n\t\tvar x = _Browser_window.pageXOffset;\n\t\tvar y = _Browser_window.pageYOffset;\n\t\treturn {\n\t\t\tscene: _Browser_getScene(),\n\t\t\tviewport: {\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\twidth: _Browser_doc.documentElement.clientWidth,\n\t\t\t\theight: _Browser_doc.documentElement.clientHeight\n\t\t\t},\n\t\t\telement: {\n\t\t\t\tx: x + rect.left,\n\t\t\t\ty: y + rect.top,\n\t\t\t\twidth: rect.width,\n\t\t\t\theight: rect.height\n\t\t\t}\n\t\t};\n\t});\n}\n\n\n\n// LOAD and RELOAD\n\n\nfunction _Browser_reload(skipCache)\n{\n\treturn A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function(callback)\n\t{\n\t\t_VirtualDom_doc.location.reload(skipCache);\n\t}));\n}\n\nfunction _Browser_load(url)\n{\n\treturn A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function(callback)\n\t{\n\t\ttry\n\t\t{\n\t\t\t_Browser_window.location = url;\n\t\t}\n\t\tcatch(err)\n\t\t{\n\t\t\t// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.\n\t\t\t// Other browsers reload the page, so let's be consistent about that.\n\t\t\t_VirtualDom_doc.location.reload(false);\n\t\t}\n\t}));\n}\n\n\nfunction _Url_percentEncode(string)\n{\n\treturn encodeURIComponent(string);\n}\n\nfunction _Url_percentDecode(string)\n{\n\ttry\n\t{\n\t\treturn elm$core$Maybe$Just(decodeURIComponent(string));\n\t}\n\tcatch (e)\n\t{\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n}\n\n\nfunction _Time_now(millisToPosix)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tcallback(_Scheduler_succeed(millisToPosix(Date.now())));\n\t});\n}\n\nvar _Time_setInterval = F2(function(interval, task)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);\n\t\treturn function() { clearInterval(id); };\n\t});\n});\n\nfunction _Time_here()\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tcallback(_Scheduler_succeed(\n\t\t\tA2(elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)\n\t\t));\n\t});\n}\n\n\nfunction _Time_getZoneName()\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar name = elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tvar name = elm$time$Time$Offset(new Date().getTimezoneOffset());\n\t\t}\n\t\tcallback(_Scheduler_succeed(name));\n\t});\n}\n\n\n\n// DECODER\n\nvar _File_decoder = _Json_decodePrim(function(value) {\n\t// NOTE: checks if `File` exists in case this is run on node\n\treturn (typeof File !== 'undefined' && value instanceof File)\n\t\t? elm$core$Result$Ok(value)\n\t\t: _Json_expecting('a FILE', value);\n});\n\n\n// METADATA\n\nfunction _File_name(file) { return file.name; }\nfunction _File_mime(file) { return file.type; }\nfunction _File_size(file) { return file.size; }\n\nfunction _File_lastModified(file)\n{\n\treturn elm$time$Time$millisToPosix(file.lastModified);\n}\n\n\n// DOWNLOAD\n\nvar _File_downloadNode;\n\nfunction _File_getDownloadNode()\n{\n\treturn _File_downloadNode || (_File_downloadNode = document.createElement('a'));\n}\n\nvar _File_download = F3(function(name, mime, content)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar blob = new Blob([content], {type: mime});\n\n\t\t// for IE10+\n\t\tif (navigator.msSaveOrOpenBlob)\n\t\t{\n\t\t\tnavigator.msSaveOrOpenBlob(blob, name);\n\t\t\treturn;\n\t\t}\n\n\t\t// for HTML5\n\t\tvar node = _File_getDownloadNode();\n\t\tvar objectUrl = URL.createObjectURL(blob);\n\t\tnode.href = objectUrl;\n\t\tnode.download = name;\n\t\t_File_click(node);\n\t\tURL.revokeObjectURL(objectUrl);\n\t});\n});\n\nfunction _File_downloadUrl(href)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar node = _File_getDownloadNode();\n\t\tnode.href = href;\n\t\tnode.download = '';\n\t\tnode.origin === location.origin || (node.target = '_blank');\n\t\t_File_click(node);\n\t});\n}\n\n\n// IE COMPATIBILITY\n\nfunction _File_makeBytesSafeForInternetExplorer(bytes)\n{\n\t// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10\n\t// all other browsers can just run `new Blob([bytes])` directly with no problem\n\t//\n\treturn new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\n\nfunction _File_click(node)\n{\n\t// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11\n\t// all other browsers have MouseEvent and do not need this conditional stuff\n\t//\n\tif (typeof MouseEvent === 'function')\n\t{\n\t\tnode.dispatchEvent(new MouseEvent('click'));\n\t}\n\telse\n\t{\n\t\tvar event = document.createEvent('MouseEvents');\n\t\tevent.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\t\tdocument.body.appendChild(node);\n\t\tnode.dispatchEvent(event);\n\t\tdocument.body.removeChild(node);\n\t}\n}\n\n\n// UPLOAD\n\nvar _File_node;\n\nfunction _File_uploadOne(mimes)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\t_File_node = document.createElement('input');\n\t\t_File_node.type = 'file';\n\t\t_File_node.accept = A2(elm$core$String$join, ',', mimes);\n\t\t_File_node.addEventListener('change', function(event)\n\t\t{\n\t\t\tcallback(_Scheduler_succeed(event.target.files[0]));\n\t\t});\n\t\t_File_click(_File_node);\n\t});\n}\n\nfunction _File_uploadOneOrMore(mimes)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\t_File_node = document.createElement('input');\n\t\t_File_node.type = 'file';\n\t\t_File_node.multiple = true;\n\t\t_File_node.accept = A2(elm$core$String$join, ',', mimes);\n\t\t_File_node.addEventListener('change', function(event)\n\t\t{\n\t\t\tvar elmFiles = _List_fromArray(event.target.files);\n\t\t\tcallback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));\n\t\t});\n\t\t_File_click(_File_node);\n\t});\n}\n\n\n// CONTENT\n\nfunction _File_toString(blob)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar reader = new FileReader();\n\t\treader.addEventListener('loadend', function() {\n\t\t\tcallback(_Scheduler_succeed(reader.result));\n\t\t});\n\t\treader.readAsText(blob);\n\t\treturn function() { reader.abort(); };\n\t});\n}\n\nfunction _File_toBytes(blob)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar reader = new FileReader();\n\t\treader.addEventListener('loadend', function() {\n\t\t\tcallback(_Scheduler_succeed(new DataView(reader.result)));\n\t\t});\n\t\treader.readAsArrayBuffer(blob);\n\t\treturn function() { reader.abort(); };\n\t});\n}\n\nfunction _File_toUrl(blob)\n{\n\treturn _Scheduler_binding(function(callback)\n\t{\n\t\tvar reader = new FileReader();\n\t\treader.addEventListener('loadend', function() {\n\t\t\tcallback(_Scheduler_succeed(reader.result));\n\t\t});\n\t\treader.readAsDataURL(blob);\n\t\treturn function() { reader.abort(); };\n\t});\n}\n\n\n\n\nvar _Bitwise_and = F2(function(a, b)\n{\n\treturn a & b;\n});\n\nvar _Bitwise_or = F2(function(a, b)\n{\n\treturn a | b;\n});\n\nvar _Bitwise_xor = F2(function(a, b)\n{\n\treturn a ^ b;\n});\n\nfunction _Bitwise_complement(a)\n{\n\treturn ~a;\n};\n\nvar _Bitwise_shiftLeftBy = F2(function(offset, a)\n{\n\treturn a << offset;\n});\n\nvar _Bitwise_shiftRightBy = F2(function(offset, a)\n{\n\treturn a >> offset;\n});\n\nvar _Bitwise_shiftRightZfBy = F2(function(offset, a)\n{\n\treturn a >>> offset;\n});\n\n\n\n\n// VIRTUAL-DOM WIDGETS\n\n\nvar _Markdown_toHtml = F3(function(options, factList, rawMarkdown)\n{\n\treturn _VirtualDom_custom(\n\t\tfactList,\n\t\t{\n\t\t\ta: options,\n\t\t\tb: rawMarkdown\n\t\t},\n\t\t_Markdown_render,\n\t\t_Markdown_diff\n\t);\n});\n\n\n\n// WIDGET IMPLEMENTATION\n\n\nfunction _Markdown_render(model)\n{\n\treturn A2(_Markdown_replace, model, _VirtualDom_doc.createElement('div'));\n}\n\n\nfunction _Markdown_diff(x, y)\n{\n\treturn x.b === y.b && x.a === y.a\n\t\t? false\n\t\t: _Markdown_replace(y);\n}\n\n\nvar _Markdown_replace = F2(function(model, div)\n{\n\tdiv.innerHTML = _Markdown_marked(model.b, _Markdown_formatOptions(model.a));\n\treturn div;\n});\n\n\n\n// ACTUAL MARKDOWN PARSER\n\n\nvar _Markdown_marked = function() {\n\t// catch the `marked` object regardless of the outer environment.\n\t// (ex. a CommonJS module compatible environment.)\n\t// note that this depends on marked's implementation of environment detection.\n\tvar module = {};\n\tvar exports = module.exports = {};\n\n\t/**\n\t * marked - a markdown parser\n\t * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n\t * https://github.com/chjj/marked\n\t * commit cd2f6f5b7091154c5526e79b5f3bfb4d15995a51\n\t */\n\t(function(){var block={newline:/^\\n+/,code:/^( {4}[^\\n]+\\n*)+/,fences:noop,hr:/^( *[-*_]){3,} *(?:\\n+|$)/,heading:/^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,nptable:noop,lheading:/^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,blockquote:/^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,list:/^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,html:/^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,table:noop,paragraph:/^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,text:/^[^\\n]+/};block.bullet=/(?:[*+-]|\\d+\\.)/;block.item=/^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;block.item=replace(block.item,\"gm\")(/bull/g,block.bullet)();block.list=replace(block.list)(/bull/g,block.bullet)(\"hr\",\"\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))\")(\"def\",\"\\\\n+(?=\"+block.def.source+\")\")();block.blockquote=replace(block.blockquote)(\"def\",block.def)();block._tag=\"(?!(?:\"+\"a|em|strong|small|s|cite|q|dfn|abbr|data|time|code\"+\"|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo\"+\"|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b\";block.html=replace(block.html)(\"comment\",/<!--[\\s\\S]*?-->/)(\"closed\",/<(tag)[\\s\\S]+?<\\/\\1>/)(\"closing\",/<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)(/tag/g,block._tag)();block.paragraph=replace(block.paragraph)(\"hr\",block.hr)(\"heading\",block.heading)(\"lheading\",block.lheading)(\"blockquote\",block.blockquote)(\"tag\",\"<\"+block._tag)(\"def\",block.def)();block.normal=merge({},block);block.gfm=merge({},block.normal,{fences:/^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/});block.gfm.paragraph=replace(block.paragraph)(\"(?!\",\"(?!\"+block.gfm.fences.source.replace(\"\\\\1\",\"\\\\2\")+\"|\"+block.list.source.replace(\"\\\\1\",\"\\\\3\")+\"|\")();block.tables=merge({},block.gfm,{nptable:/^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,table:/^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/});function Lexer(options){this.tokens=[];this.tokens.links={};this.options=options||marked.defaults;this.rules=block.normal;if(this.options.gfm){if(this.options.tables){this.rules=block.tables}else{this.rules=block.gfm}}}Lexer.rules=block;Lexer.lex=function(src,options){var lexer=new Lexer(options);return lexer.lex(src)};Lexer.prototype.lex=function(src){src=src.replace(/\\r\\n|\\r/g,\"\\n\").replace(/\\t/g,\"    \").replace(/\\u00a0/g,\" \").replace(/\\u2424/g,\"\\n\");return this.token(src,true)};Lexer.prototype.token=function(src,top,bq){var src=src.replace(/^ +$/gm,\"\"),next,loose,cap,bull,b,item,space,i,l;while(src){if(cap=this.rules.newline.exec(src)){src=src.substring(cap[0].length);if(cap[0].length>1){this.tokens.push({type:\"space\"})}}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);cap=cap[0].replace(/^ {4}/gm,\"\");this.tokens.push({type:\"code\",text:!this.options.pedantic?cap.replace(/\\n+$/,\"\"):cap});continue}if(cap=this.rules.fences.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"code\",lang:cap[2],text:cap[3]||\"\"});continue}if(cap=this.rules.heading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"heading\",depth:cap[1].length,text:cap[2]});continue}if(top&&(cap=this.rules.nptable.exec(src))){src=src.substring(cap[0].length);item={type:\"table\",header:cap[1].replace(/^ *| *\\| *$/g,\"\").split(/ *\\| */),align:cap[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:cap[3].replace(/\\n$/,\"\").split(\"\\n\")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]=\"right\"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]=\"center\"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]=\"left\"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].split(/ *\\| */)}this.tokens.push(item);continue}if(cap=this.rules.lheading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"heading\",depth:cap[2]===\"=\"?1:2,text:cap[1]});continue}if(cap=this.rules.hr.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"hr\"});continue}if(cap=this.rules.blockquote.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"blockquote_start\"});cap=cap[0].replace(/^ *> ?/gm,\"\");this.token(cap,top,true);this.tokens.push({type:\"blockquote_end\"});continue}if(cap=this.rules.list.exec(src)){src=src.substring(cap[0].length);bull=cap[2];this.tokens.push({type:\"list_start\",ordered:bull.length>1});cap=cap[0].match(this.rules.item);next=false;l=cap.length;i=0;for(;i<l;i++){item=cap[i];space=item.length;item=item.replace(/^ *([*+-]|\\d+\\.) +/,\"\");if(~item.indexOf(\"\\n \")){space-=item.length;item=!this.options.pedantic?item.replace(new RegExp(\"^ {1,\"+space+\"}\",\"gm\"),\"\"):item.replace(/^ {1,4}/gm,\"\")}if(this.options.smartLists&&i!==l-1){b=block.bullet.exec(cap[i+1])[0];if(bull!==b&&!(bull.length>1&&b.length>1)){src=cap.slice(i+1).join(\"\\n\")+src;i=l-1}}loose=next||/\\n\\n(?!\\s*$)/.test(item);if(i!==l-1){next=item.charAt(item.length-1)===\"\\n\";if(!loose)loose=next}this.tokens.push({type:loose?\"loose_item_start\":\"list_item_start\"});this.token(item,false,bq);this.tokens.push({type:\"list_item_end\"})}this.tokens.push({type:\"list_end\"});continue}if(cap=this.rules.html.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:this.options.sanitize?\"paragraph\":\"html\",pre:!this.options.sanitizer&&(cap[1]===\"pre\"||cap[1]===\"script\"||cap[1]===\"style\"),text:cap[0]});continue}if(!bq&&top&&(cap=this.rules.def.exec(src))){src=src.substring(cap[0].length);this.tokens.links[cap[1].toLowerCase()]={href:cap[2],title:cap[3]};continue}if(top&&(cap=this.rules.table.exec(src))){src=src.substring(cap[0].length);item={type:\"table\",header:cap[1].replace(/^ *| *\\| *$/g,\"\").split(/ *\\| */),align:cap[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:cap[3].replace(/(?: *\\| *)?\\n$/,\"\").split(\"\\n\")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]=\"right\"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]=\"center\"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]=\"left\"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].replace(/^ *\\| *| *\\| *$/g,\"\").split(/ *\\| */)}this.tokens.push(item);continue}if(top&&(cap=this.rules.paragraph.exec(src))){src=src.substring(cap[0].length);this.tokens.push({type:\"paragraph\",text:cap[1].charAt(cap[1].length-1)===\"\\n\"?cap[1].slice(0,-1):cap[1]});continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:\"text\",text:cap[0]});continue}if(src){throw new Error(\"Infinite loop on byte: \"+src.charCodeAt(0))}}return this.tokens};var inline={escape:/^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,autolink:/^<([^ >]+(@|:\\/)[^ >]+)>/,url:noop,tag:/^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,link:/^!?\\[(inside)\\]\\(href\\)/,reflink:/^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,nolink:/^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,strong:/^_\\_([\\s\\S]+?)_\\_(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,em:/^\\b_((?:[^_]|_\\_)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,code:/^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,br:/^ {2,}\\n(?!\\s*$)/,del:noop,text:/^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/};inline._inside=/(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;inline._href=/\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;inline.link=replace(inline.link)(\"inside\",inline._inside)(\"href\",inline._href)();inline.reflink=replace(inline.reflink)(\"inside\",inline._inside)();inline.normal=merge({},inline);inline.pedantic=merge({},inline.normal,{strong:/^_\\_(?=\\S)([\\s\\S]*?\\S)_\\_(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,em:/^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/});inline.gfm=merge({},inline.normal,{escape:replace(inline.escape)(\"])\",\"~|])\")(),url:/^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,del:/^~~(?=\\S)([\\s\\S]*?\\S)~~/,text:replace(inline.text)(\"]|\",\"~]|\")(\"|\",\"|https?://|\")()});inline.breaks=merge({},inline.gfm,{br:replace(inline.br)(\"{2,}\",\"*\")(),text:replace(inline.gfm.text)(\"{2,}\",\"*\")()});function InlineLexer(links,options){this.options=options||marked.defaults;this.links=links;this.rules=inline.normal;this.renderer=this.options.renderer||new Renderer;this.renderer.options=this.options;if(!this.links){throw new Error(\"Tokens array requires a `links` property.\")}if(this.options.gfm){if(this.options.breaks){this.rules=inline.breaks}else{this.rules=inline.gfm}}else if(this.options.pedantic){this.rules=inline.pedantic}}InlineLexer.rules=inline;InlineLexer.output=function(src,links,options){var inline=new InlineLexer(links,options);return inline.output(src)};InlineLexer.prototype.output=function(src){var out=\"\",link,text,href,cap;while(src){if(cap=this.rules.escape.exec(src)){src=src.substring(cap[0].length);out+=cap[1];continue}if(cap=this.rules.autolink.exec(src)){src=src.substring(cap[0].length);if(cap[2]===\"@\"){text=cap[1].charAt(6)===\":\"?this.mangle(cap[1].substring(7)):this.mangle(cap[1]);href=this.mangle(\"mailto:\")+text}else{text=escape(cap[1]);href=text}out+=this.renderer.link(href,null,text);continue}if(!this.inLink&&(cap=this.rules.url.exec(src))){src=src.substring(cap[0].length);text=escape(cap[1]);href=text;out+=this.renderer.link(href,null,text);continue}if(cap=this.rules.tag.exec(src)){if(!this.inLink&&/^<a /i.test(cap[0])){this.inLink=true}else if(this.inLink&&/^<\\/a>/i.test(cap[0])){this.inLink=false}src=src.substring(cap[0].length);out+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(cap[0]):escape(cap[0]):cap[0];continue}if(cap=this.rules.link.exec(src)){src=src.substring(cap[0].length);this.inLink=true;out+=this.outputLink(cap,{href:cap[2],title:cap[3]});this.inLink=false;continue}if((cap=this.rules.reflink.exec(src))||(cap=this.rules.nolink.exec(src))){src=src.substring(cap[0].length);link=(cap[2]||cap[1]).replace(/\\s+/g,\" \");link=this.links[link.toLowerCase()];if(!link||!link.href){out+=cap[0].charAt(0);src=cap[0].substring(1)+src;continue}this.inLink=true;out+=this.outputLink(cap,link);this.inLink=false;continue}if(cap=this.rules.strong.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.strong(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.em.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.em(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.codespan(escape(cap[2],true));continue}if(cap=this.rules.br.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.br();continue}if(cap=this.rules.del.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.del(this.output(cap[1]));continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.text(escape(this.smartypants(cap[0])));continue}if(src){throw new Error(\"Infinite loop on byte: \"+src.charCodeAt(0))}}return out};InlineLexer.prototype.outputLink=function(cap,link){var href=escape(link.href),title=link.title?escape(link.title):null;return cap[0].charAt(0)!==\"!\"?this.renderer.link(href,title,this.output(cap[1])):this.renderer.image(href,title,escape(cap[1]))};InlineLexer.prototype.smartypants=function(text){if(!this.options.smartypants)return text;return text.replace(/---/g,\"—\").replace(/--/g,\"–\").replace(/(^|[-\\u2014\\/(\\[{\"\\s])'/g,\"$1‘\").replace(/'/g,\"’\").replace(/(^|[-\\u2014\\/(\\[{\\u2018\\s])\"/g,\"$1“\").replace(/\"/g,\"”\").replace(/\\.{3}/g,\"…\")};InlineLexer.prototype.mangle=function(text){if(!this.options.mangle)return text;var out=\"\",l=text.length,i=0,ch;for(;i<l;i++){ch=text.charCodeAt(i);if(Math.random()>.5){ch=\"x\"+ch.toString(16)}out+=\"&#\"+ch+\";\"}return out};function Renderer(options){this.options=options||{}}Renderer.prototype.code=function(code,lang,escaped){if(this.options.highlight){var out=this.options.highlight(code,lang);if(out!=null&&out!==code){escaped=true;code=out}}if(!lang){return\"<pre><code>\"+(escaped?code:escape(code,true))+\"\\n</code></pre>\"}return'<pre><code class=\"'+this.options.langPrefix+escape(lang,true)+'\">'+(escaped?code:escape(code,true))+\"\\n</code></pre>\\n\"};Renderer.prototype.blockquote=function(quote){return\"<blockquote>\\n\"+quote+\"</blockquote>\\n\"};Renderer.prototype.html=function(html){return html};Renderer.prototype.heading=function(text,level,raw){return\"<h\"+level+' id=\"'+this.options.headerPrefix+raw.toLowerCase().replace(/[^\\w]+/g,\"-\")+'\">'+text+\"</h\"+level+\">\\n\"};Renderer.prototype.hr=function(){return this.options.xhtml?\"<hr/>\\n\":\"<hr>\\n\"};Renderer.prototype.list=function(body,ordered){var type=ordered?\"ol\":\"ul\";return\"<\"+type+\">\\n\"+body+\"</\"+type+\">\\n\"};Renderer.prototype.listitem=function(text){return\"<li>\"+text+\"</li>\\n\"};Renderer.prototype.paragraph=function(text){return\"<p>\"+text+\"</p>\\n\"};Renderer.prototype.table=function(header,body){return\"<table>\\n\"+\"<thead>\\n\"+header+\"</thead>\\n\"+\"<tbody>\\n\"+body+\"</tbody>\\n\"+\"</table>\\n\"};Renderer.prototype.tablerow=function(content){return\"<tr>\\n\"+content+\"</tr>\\n\"};Renderer.prototype.tablecell=function(content,flags){var type=flags.header?\"th\":\"td\";var tag=flags.align?\"<\"+type+' style=\"text-align:'+flags.align+'\">':\"<\"+type+\">\";return tag+content+\"</\"+type+\">\\n\"};Renderer.prototype.strong=function(text){return\"<strong>\"+text+\"</strong>\"};Renderer.prototype.em=function(text){return\"<em>\"+text+\"</em>\"};Renderer.prototype.codespan=function(text){return\"<code>\"+text+\"</code>\"};Renderer.prototype.br=function(){return this.options.xhtml?\"<br/>\":\"<br>\"};Renderer.prototype.del=function(text){return\"<del>\"+text+\"</del>\"};Renderer.prototype.link=function(href,title,text){if(this.options.sanitize){try{var prot=decodeURIComponent(unescape(href)).replace(/[^\\w:]/g,\"\").toLowerCase()}catch(e){return\"\"}if(prot.indexOf(\"javascript:\")===0||prot.indexOf(\"vbscript:\")===0||prot.indexOf(\"data:\")===0){return\"\"}}var out='<a href=\"'+href+'\"';if(title){out+=' title=\"'+title+'\"'}out+=\">\"+text+\"</a>\";return out};Renderer.prototype.image=function(href,title,text){var out='<img src=\"'+href+'\" alt=\"'+text+'\"';if(title){out+=' title=\"'+title+'\"'}out+=this.options.xhtml?\"/>\":\">\";return out};Renderer.prototype.text=function(text){return text};function Parser(options){this.tokens=[];this.token=null;this.options=options||marked.defaults;this.options.renderer=this.options.renderer||new Renderer;this.renderer=this.options.renderer;this.renderer.options=this.options}Parser.parse=function(src,options,renderer){var parser=new Parser(options,renderer);return parser.parse(src)};Parser.prototype.parse=function(src){this.inline=new InlineLexer(src.links,this.options,this.renderer);this.tokens=src.reverse();var out=\"\";while(this.next()){out+=this.tok()}return out};Parser.prototype.next=function(){return this.token=this.tokens.pop()};Parser.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0};Parser.prototype.parseText=function(){var body=this.token.text;while(this.peek().type===\"text\"){body+=\"\\n\"+this.next().text}return this.inline.output(body)};Parser.prototype.tok=function(){switch(this.token.type){case\"space\":{return\"\"}case\"hr\":{return this.renderer.hr()}case\"heading\":{return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,this.token.text)}case\"code\":{return this.renderer.code(this.token.text,this.token.lang,this.token.escaped)}case\"table\":{var header=\"\",body=\"\",i,row,cell,flags,j;cell=\"\";for(i=0;i<this.token.header.length;i++){flags={header:true,align:this.token.align[i]};cell+=this.renderer.tablecell(this.inline.output(this.token.header[i]),{header:true,align:this.token.align[i]})}header+=this.renderer.tablerow(cell);for(i=0;i<this.token.cells.length;i++){row=this.token.cells[i];cell=\"\";for(j=0;j<row.length;j++){cell+=this.renderer.tablecell(this.inline.output(row[j]),{header:false,align:this.token.align[j]})}body+=this.renderer.tablerow(cell)}return this.renderer.table(header,body)}case\"blockquote_start\":{var body=\"\";while(this.next().type!==\"blockquote_end\"){body+=this.tok()}return this.renderer.blockquote(body)}case\"list_start\":{var body=\"\",ordered=this.token.ordered;while(this.next().type!==\"list_end\"){body+=this.tok()}return this.renderer.list(body,ordered)}case\"list_item_start\":{var body=\"\";while(this.next().type!==\"list_item_end\"){body+=this.token.type===\"text\"?this.parseText():this.tok()}return this.renderer.listitem(body)}case\"loose_item_start\":{var body=\"\";while(this.next().type!==\"list_item_end\"){body+=this.tok()}return this.renderer.listitem(body)}case\"html\":{var html=!this.token.pre&&!this.options.pedantic?this.inline.output(this.token.text):this.token.text;return this.renderer.html(html)}case\"paragraph\":{return this.renderer.paragraph(this.inline.output(this.token.text))}case\"text\":{return this.renderer.paragraph(this.parseText())}}};function escape(html,encode){return html.replace(!encode?/&(?!#?\\w+;)/g:/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\")}function unescape(html){return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/g,function(_,n){n=n.toLowerCase();if(n===\"colon\")return\":\";if(n.charAt(0)===\"#\"){return n.charAt(1)===\"x\"?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1))}return\"\"})}function replace(regex,opt){regex=regex.source;opt=opt||\"\";return function self(name,val){if(!name)return new RegExp(regex,opt);val=val.source||val;val=val.replace(/(^|[^\\[])\\^/g,\"$1\");regex=regex.replace(name,val);return self}}function noop(){}noop.exec=noop;function merge(obj){var i=1,target,key;for(;i<arguments.length;i++){target=arguments[i];for(key in target){if(Object.prototype.hasOwnProperty.call(target,key)){obj[key]=target[key]}}}return obj}function marked(src,opt,callback){if(callback||typeof opt===\"function\"){if(!callback){callback=opt;opt=null}opt=merge({},marked.defaults,opt||{});var highlight=opt.highlight,tokens,pending,i=0;try{tokens=Lexer.lex(src,opt)}catch(e){return callback(e)}pending=tokens.length;var done=function(err){if(err){opt.highlight=highlight;return callback(err)}var out;try{out=Parser.parse(tokens,opt)}catch(e){err=e}opt.highlight=highlight;return err?callback(err):callback(null,out)};if(!highlight||highlight.length<3){return done()}delete opt.highlight;if(!pending)return done();for(;i<tokens.length;i++){(function(token){if(token.type!==\"code\"){return--pending||done()}return highlight(token.text,token.lang,function(err,code){if(err)return done(err);if(code==null||code===token.text){return--pending||done()}token.text=code;token.escaped=true;--pending||done()})})(tokens[i])}return}try{if(opt)opt=merge({},marked.defaults,opt);return Parser.parse(Lexer.lex(src,opt),opt)}catch(e){e.message+=\"\\nPlease report this to https://github.com/chjj/marked.\";if((opt||marked.defaults).silent){return\"<p>An error occured:</p><pre>\"+escape(e.message+\"\",true)+\"</pre>\"}throw e}}marked.options=marked.setOptions=function(opt){merge(marked.defaults,opt);return marked};marked.defaults={gfm:true,tables:true,breaks:false,pedantic:false,sanitize:false,sanitizer:null,mangle:true,smartLists:false,silent:false,highlight:null,langPrefix:\"lang-\",smartypants:false,headerPrefix:\"\",renderer:new Renderer,xhtml:false};marked.Parser=Parser;marked.parser=Parser.parse;marked.Renderer=Renderer;marked.Lexer=Lexer;marked.lexer=Lexer.lex;marked.InlineLexer=InlineLexer;marked.inlineLexer=InlineLexer.output;marked.parse=marked;if(typeof module!==\"undefined\"&&typeof exports===\"object\"){module.exports=marked}else if(typeof define===\"function\"&&define.amd){define(function(){return marked})}else{this.marked=marked}}).call(function(){return this||(typeof window!==\"undefined\"?window:global)}());\n\n\treturn module.exports;\n}();\n\n\n// FORMAT OPTIONS FOR MARKED IMPLEMENTATION\n\nfunction _Markdown_formatOptions(options)\n{\n\tfunction toHighlight(code, lang)\n\t{\n\t\tif (!lang && elm$core$Maybe$isJust(options.defaultHighlighting))\n\t\t{\n\t\t\tlang = options.defaultHighlighting.a;\n\t\t}\n\n\t\tif (typeof hljs !== 'undefined' && lang && hljs.listLanguages().indexOf(lang) >= 0)\n\t\t{\n\t\t\treturn hljs.highlight(lang, code, true).value;\n\t\t}\n\n\t\treturn code;\n\t}\n\n\tvar gfm = options.githubFlavored.a;\n\n\treturn {\n\t\thighlight: toHighlight,\n\t\tgfm: gfm,\n\t\ttables: gfm && gfm.tables,\n\t\tbreaks: gfm && gfm.breaks,\n\t\tsanitize: options.sanitize,\n\t\tsmartypants: options.smartypants\n\t};\n}\nvar author$project$Main$UrlChange = function (a) {\n\treturn {$: 'UrlChange', a: a};\n};\nvar author$project$Main$UrlRequest = function (a) {\n\treturn {$: 'UrlRequest', a: a};\n};\nvar author$project$Components$SearchBar$Invalid = {$: 'Invalid'};\nvar author$project$Components$SearchBar$Model = F3(\n\tfunction (searchValue, key, state) {\n\t\treturn {key: key, searchValue: searchValue, state: state};\n\t});\nvar elm$core$Basics$False = {$: 'False'};\nvar elm$core$Basics$True = {$: 'True'};\nvar elm$core$Result$isOk = function (result) {\n\tif (result.$ === 'Ok') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\nvar elm$core$Basics$EQ = {$: 'EQ'};\nvar elm$core$Basics$GT = {$: 'GT'};\nvar elm$core$Basics$LT = {$: 'LT'};\nvar elm$core$Dict$foldr = F3(\n\tfunction (func, acc, t) {\n\t\tfoldr:\n\t\twhile (true) {\n\t\t\tif (t.$ === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar key = t.b;\n\t\t\t\tvar value = t.c;\n\t\t\t\tvar left = t.d;\n\t\t\t\tvar right = t.e;\n\t\t\t\tvar $temp$func = func,\n\t\t\t\t\t$temp$acc = A3(\n\t\t\t\t\tfunc,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tA3(elm$core$Dict$foldr, func, acc, right)),\n\t\t\t\t\t$temp$t = left;\n\t\t\t\tfunc = $temp$func;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tt = $temp$t;\n\t\t\t\tcontinue foldr;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$cons = _List_cons;\nvar elm$core$Dict$toList = function (dict) {\n\treturn A3(\n\t\telm$core$Dict$foldr,\n\t\tF3(\n\t\t\tfunction (key, value, list) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t_Utils_Tuple2(key, value),\n\t\t\t\t\tlist);\n\t\t\t}),\n\t\t_List_Nil,\n\t\tdict);\n};\nvar elm$core$Dict$keys = function (dict) {\n\treturn A3(\n\t\telm$core$Dict$foldr,\n\t\tF3(\n\t\t\tfunction (key, value, keyList) {\n\t\t\t\treturn A2(elm$core$List$cons, key, keyList);\n\t\t\t}),\n\t\t_List_Nil,\n\t\tdict);\n};\nvar elm$core$Set$toList = function (_n0) {\n\tvar dict = _n0.a;\n\treturn elm$core$Dict$keys(dict);\n};\nvar elm$core$Elm$JsArray$foldr = _JsArray_foldr;\nvar elm$core$Array$foldr = F3(\n\tfunction (func, baseCase, _n0) {\n\t\tvar tree = _n0.c;\n\t\tvar tail = _n0.d;\n\t\tvar helper = F2(\n\t\t\tfunction (node, acc) {\n\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\tvar subTree = node.a;\n\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldr, helper, acc, subTree);\n\t\t\t\t} else {\n\t\t\t\t\tvar values = node.a;\n\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldr, func, acc, values);\n\t\t\t\t}\n\t\t\t});\n\t\treturn A3(\n\t\t\telm$core$Elm$JsArray$foldr,\n\t\t\thelper,\n\t\t\tA3(elm$core$Elm$JsArray$foldr, func, baseCase, tail),\n\t\t\ttree);\n\t});\nvar elm$core$Array$toList = function (array) {\n\treturn A3(elm$core$Array$foldr, elm$core$List$cons, _List_Nil, array);\n};\nvar elm$core$Array$branchFactor = 32;\nvar elm$core$Array$Array_elm_builtin = F4(\n\tfunction (a, b, c, d) {\n\t\treturn {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};\n\t});\nvar elm$core$Basics$ceiling = _Basics_ceiling;\nvar elm$core$Basics$fdiv = _Basics_fdiv;\nvar elm$core$Basics$logBase = F2(\n\tfunction (base, number) {\n\t\treturn _Basics_log(number) / _Basics_log(base);\n\t});\nvar elm$core$Basics$toFloat = _Basics_toFloat;\nvar elm$core$Array$shiftStep = elm$core$Basics$ceiling(\n\tA2(elm$core$Basics$logBase, 2, elm$core$Array$branchFactor));\nvar elm$core$Elm$JsArray$empty = _JsArray_empty;\nvar elm$core$Array$empty = A4(elm$core$Array$Array_elm_builtin, 0, elm$core$Array$shiftStep, elm$core$Elm$JsArray$empty, elm$core$Elm$JsArray$empty);\nvar elm$core$Array$Leaf = function (a) {\n\treturn {$: 'Leaf', a: a};\n};\nvar elm$core$Array$SubTree = function (a) {\n\treturn {$: 'SubTree', a: a};\n};\nvar elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;\nvar elm$core$List$foldl = F3(\n\tfunction (func, acc, list) {\n\t\tfoldl:\n\t\twhile (true) {\n\t\t\tif (!list.b) {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar x = list.a;\n\t\t\t\tvar xs = list.b;\n\t\t\t\tvar $temp$func = func,\n\t\t\t\t\t$temp$acc = A2(func, x, acc),\n\t\t\t\t\t$temp$list = xs;\n\t\t\t\tfunc = $temp$func;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tcontinue foldl;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$reverse = function (list) {\n\treturn A3(elm$core$List$foldl, elm$core$List$cons, _List_Nil, list);\n};\nvar elm$core$Array$compressNodes = F2(\n\tfunction (nodes, acc) {\n\t\tcompressNodes:\n\t\twhile (true) {\n\t\t\tvar _n0 = A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, nodes);\n\t\t\tvar node = _n0.a;\n\t\t\tvar remainingNodes = _n0.b;\n\t\t\tvar newAcc = A2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\telm$core$Array$SubTree(node),\n\t\t\t\tacc);\n\t\t\tif (!remainingNodes.b) {\n\t\t\t\treturn elm$core$List$reverse(newAcc);\n\t\t\t} else {\n\t\t\t\tvar $temp$nodes = remainingNodes,\n\t\t\t\t\t$temp$acc = newAcc;\n\t\t\t\tnodes = $temp$nodes;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tcontinue compressNodes;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Basics$apR = F2(\n\tfunction (x, f) {\n\t\treturn f(x);\n\t});\nvar elm$core$Basics$eq = _Utils_equal;\nvar elm$core$Tuple$first = function (_n0) {\n\tvar x = _n0.a;\n\treturn x;\n};\nvar elm$core$Array$treeFromBuilder = F2(\n\tfunction (nodeList, nodeListSize) {\n\t\ttreeFromBuilder:\n\t\twhile (true) {\n\t\t\tvar newNodeSize = elm$core$Basics$ceiling(nodeListSize / elm$core$Array$branchFactor);\n\t\t\tif (newNodeSize === 1) {\n\t\t\t\treturn A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, nodeList).a;\n\t\t\t} else {\n\t\t\t\tvar $temp$nodeList = A2(elm$core$Array$compressNodes, nodeList, _List_Nil),\n\t\t\t\t\t$temp$nodeListSize = newNodeSize;\n\t\t\t\tnodeList = $temp$nodeList;\n\t\t\t\tnodeListSize = $temp$nodeListSize;\n\t\t\t\tcontinue treeFromBuilder;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Basics$add = _Basics_add;\nvar elm$core$Basics$apL = F2(\n\tfunction (f, x) {\n\t\treturn f(x);\n\t});\nvar elm$core$Basics$floor = _Basics_floor;\nvar elm$core$Basics$gt = _Utils_gt;\nvar elm$core$Basics$max = F2(\n\tfunction (x, y) {\n\t\treturn (_Utils_cmp(x, y) > 0) ? x : y;\n\t});\nvar elm$core$Basics$mul = _Basics_mul;\nvar elm$core$Basics$sub = _Basics_sub;\nvar elm$core$Elm$JsArray$length = _JsArray_length;\nvar elm$core$Array$builderToArray = F2(\n\tfunction (reverseNodeList, builder) {\n\t\tif (!builder.nodeListSize) {\n\t\t\treturn A4(\n\t\t\t\telm$core$Array$Array_elm_builtin,\n\t\t\t\telm$core$Elm$JsArray$length(builder.tail),\n\t\t\t\telm$core$Array$shiftStep,\n\t\t\t\telm$core$Elm$JsArray$empty,\n\t\t\t\tbuilder.tail);\n\t\t} else {\n\t\t\tvar treeLen = builder.nodeListSize * elm$core$Array$branchFactor;\n\t\t\tvar depth = elm$core$Basics$floor(\n\t\t\t\tA2(elm$core$Basics$logBase, elm$core$Array$branchFactor, treeLen - 1));\n\t\t\tvar correctNodeList = reverseNodeList ? elm$core$List$reverse(builder.nodeList) : builder.nodeList;\n\t\t\tvar tree = A2(elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);\n\t\t\treturn A4(\n\t\t\t\telm$core$Array$Array_elm_builtin,\n\t\t\t\telm$core$Elm$JsArray$length(builder.tail) + treeLen,\n\t\t\t\tA2(elm$core$Basics$max, 5, depth * elm$core$Array$shiftStep),\n\t\t\t\ttree,\n\t\t\t\tbuilder.tail);\n\t\t}\n\t});\nvar elm$core$Basics$idiv = _Basics_idiv;\nvar elm$core$Basics$lt = _Utils_lt;\nvar elm$core$Elm$JsArray$initialize = _JsArray_initialize;\nvar elm$core$Array$initializeHelp = F5(\n\tfunction (fn, fromIndex, len, nodeList, tail) {\n\t\tinitializeHelp:\n\t\twhile (true) {\n\t\t\tif (fromIndex < 0) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Array$builderToArray,\n\t\t\t\t\tfalse,\n\t\t\t\t\t{nodeList: nodeList, nodeListSize: (len / elm$core$Array$branchFactor) | 0, tail: tail});\n\t\t\t} else {\n\t\t\t\tvar leaf = elm$core$Array$Leaf(\n\t\t\t\t\tA3(elm$core$Elm$JsArray$initialize, elm$core$Array$branchFactor, fromIndex, fn));\n\t\t\t\tvar $temp$fn = fn,\n\t\t\t\t\t$temp$fromIndex = fromIndex - elm$core$Array$branchFactor,\n\t\t\t\t\t$temp$len = len,\n\t\t\t\t\t$temp$nodeList = A2(elm$core$List$cons, leaf, nodeList),\n\t\t\t\t\t$temp$tail = tail;\n\t\t\t\tfn = $temp$fn;\n\t\t\t\tfromIndex = $temp$fromIndex;\n\t\t\t\tlen = $temp$len;\n\t\t\t\tnodeList = $temp$nodeList;\n\t\t\t\ttail = $temp$tail;\n\t\t\t\tcontinue initializeHelp;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Basics$le = _Utils_le;\nvar elm$core$Basics$remainderBy = _Basics_remainderBy;\nvar elm$core$Array$initialize = F2(\n\tfunction (len, fn) {\n\t\tif (len <= 0) {\n\t\t\treturn elm$core$Array$empty;\n\t\t} else {\n\t\t\tvar tailLen = len % elm$core$Array$branchFactor;\n\t\t\tvar tail = A3(elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);\n\t\t\tvar initialFromIndex = (len - tailLen) - elm$core$Array$branchFactor;\n\t\t\treturn A5(elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);\n\t\t}\n\t});\nvar elm$core$Maybe$Just = function (a) {\n\treturn {$: 'Just', a: a};\n};\nvar elm$core$Maybe$Nothing = {$: 'Nothing'};\nvar elm$core$Result$Err = function (a) {\n\treturn {$: 'Err', a: a};\n};\nvar elm$core$Result$Ok = function (a) {\n\treturn {$: 'Ok', a: a};\n};\nvar elm$json$Json$Decode$Failure = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Failure', a: a, b: b};\n\t});\nvar elm$json$Json$Decode$Field = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Field', a: a, b: b};\n\t});\nvar elm$json$Json$Decode$Index = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Index', a: a, b: b};\n\t});\nvar elm$json$Json$Decode$OneOf = function (a) {\n\treturn {$: 'OneOf', a: a};\n};\nvar elm$core$Basics$and = _Basics_and;\nvar elm$core$Basics$append = _Utils_append;\nvar elm$core$Basics$or = _Basics_or;\nvar elm$core$Char$toCode = _Char_toCode;\nvar elm$core$Char$isLower = function (_char) {\n\tvar code = elm$core$Char$toCode(_char);\n\treturn (97 <= code) && (code <= 122);\n};\nvar elm$core$Char$isUpper = function (_char) {\n\tvar code = elm$core$Char$toCode(_char);\n\treturn (code <= 90) && (65 <= code);\n};\nvar elm$core$Char$isAlpha = function (_char) {\n\treturn elm$core$Char$isLower(_char) || elm$core$Char$isUpper(_char);\n};\nvar elm$core$Char$isDigit = function (_char) {\n\tvar code = elm$core$Char$toCode(_char);\n\treturn (code <= 57) && (48 <= code);\n};\nvar elm$core$Char$isAlphaNum = function (_char) {\n\treturn elm$core$Char$isLower(_char) || (elm$core$Char$isUpper(_char) || elm$core$Char$isDigit(_char));\n};\nvar elm$core$List$length = function (xs) {\n\treturn A3(\n\t\telm$core$List$foldl,\n\t\tF2(\n\t\t\tfunction (_n0, i) {\n\t\t\t\treturn i + 1;\n\t\t\t}),\n\t\t0,\n\t\txs);\n};\nvar elm$core$List$map2 = _List_map2;\nvar elm$core$List$rangeHelp = F3(\n\tfunction (lo, hi, list) {\n\t\trangeHelp:\n\t\twhile (true) {\n\t\t\tif (_Utils_cmp(lo, hi) < 1) {\n\t\t\t\tvar $temp$lo = lo,\n\t\t\t\t\t$temp$hi = hi - 1,\n\t\t\t\t\t$temp$list = A2(elm$core$List$cons, hi, list);\n\t\t\t\tlo = $temp$lo;\n\t\t\t\thi = $temp$hi;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tcontinue rangeHelp;\n\t\t\t} else {\n\t\t\t\treturn list;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$range = F2(\n\tfunction (lo, hi) {\n\t\treturn A3(elm$core$List$rangeHelp, lo, hi, _List_Nil);\n\t});\nvar elm$core$List$indexedMap = F2(\n\tfunction (f, xs) {\n\t\treturn A3(\n\t\t\telm$core$List$map2,\n\t\t\tf,\n\t\t\tA2(\n\t\t\t\telm$core$List$range,\n\t\t\t\t0,\n\t\t\t\telm$core$List$length(xs) - 1),\n\t\t\txs);\n\t});\nvar elm$core$String$all = _String_all;\nvar elm$core$String$fromInt = _String_fromNumber;\nvar elm$core$String$join = F2(\n\tfunction (sep, chunks) {\n\t\treturn A2(\n\t\t\t_String_join,\n\t\t\tsep,\n\t\t\t_List_toArray(chunks));\n\t});\nvar elm$core$String$uncons = _String_uncons;\nvar elm$core$String$split = F2(\n\tfunction (sep, string) {\n\t\treturn _List_fromArray(\n\t\t\tA2(_String_split, sep, string));\n\t});\nvar elm$json$Json$Decode$indent = function (str) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n    ',\n\t\tA2(elm$core$String$split, '\\n', str));\n};\nvar elm$json$Json$Encode$encode = _Json_encode;\nvar elm$json$Json$Decode$errorOneOf = F2(\n\tfunction (i, error) {\n\t\treturn '\\n\\n(' + (elm$core$String$fromInt(i + 1) + (') ' + elm$json$Json$Decode$indent(\n\t\t\telm$json$Json$Decode$errorToString(error))));\n\t});\nvar elm$json$Json$Decode$errorToString = function (error) {\n\treturn A2(elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);\n};\nvar elm$json$Json$Decode$errorToStringHelp = F2(\n\tfunction (error, context) {\n\t\terrorToStringHelp:\n\t\twhile (true) {\n\t\t\tswitch (error.$) {\n\t\t\t\tcase 'Field':\n\t\t\t\t\tvar f = error.a;\n\t\t\t\t\tvar err = error.b;\n\t\t\t\t\tvar isSimple = function () {\n\t\t\t\t\t\tvar _n1 = elm$core$String$uncons(f);\n\t\t\t\t\t\tif (_n1.$ === 'Nothing') {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n2 = _n1.a;\n\t\t\t\t\t\t\tvar _char = _n2.a;\n\t\t\t\t\t\t\tvar rest = _n2.b;\n\t\t\t\t\t\t\treturn elm$core$Char$isAlpha(_char) && A2(elm$core$String$all, elm$core$Char$isAlphaNum, rest);\n\t\t\t\t\t\t}\n\t\t\t\t\t}();\n\t\t\t\t\tvar fieldName = isSimple ? ('.' + f) : ('[\\'' + (f + '\\']'));\n\t\t\t\t\tvar $temp$error = err,\n\t\t\t\t\t\t$temp$context = A2(elm$core$List$cons, fieldName, context);\n\t\t\t\t\terror = $temp$error;\n\t\t\t\t\tcontext = $temp$context;\n\t\t\t\t\tcontinue errorToStringHelp;\n\t\t\t\tcase 'Index':\n\t\t\t\t\tvar i = error.a;\n\t\t\t\t\tvar err = error.b;\n\t\t\t\t\tvar indexName = '[' + (elm$core$String$fromInt(i) + ']');\n\t\t\t\t\tvar $temp$error = err,\n\t\t\t\t\t\t$temp$context = A2(elm$core$List$cons, indexName, context);\n\t\t\t\t\terror = $temp$error;\n\t\t\t\t\tcontext = $temp$context;\n\t\t\t\t\tcontinue errorToStringHelp;\n\t\t\t\tcase 'OneOf':\n\t\t\t\t\tvar errors = error.a;\n\t\t\t\t\tif (!errors.b) {\n\t\t\t\t\t\treturn 'Ran into a Json.Decode.oneOf with no possibilities' + function () {\n\t\t\t\t\t\t\tif (!context.b) {\n\t\t\t\t\t\t\t\treturn '!';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn ' at json' + A2(\n\t\t\t\t\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t\telm$core$List$reverse(context));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!errors.b.b) {\n\t\t\t\t\t\t\tvar err = errors.a;\n\t\t\t\t\t\t\tvar $temp$error = err,\n\t\t\t\t\t\t\t\t$temp$context = context;\n\t\t\t\t\t\t\terror = $temp$error;\n\t\t\t\t\t\t\tcontext = $temp$context;\n\t\t\t\t\t\t\tcontinue errorToStringHelp;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar starter = function () {\n\t\t\t\t\t\t\t\tif (!context.b) {\n\t\t\t\t\t\t\t\t\treturn 'Json.Decode.oneOf';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn 'The Json.Decode.oneOf at json' + A2(\n\t\t\t\t\t\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t\t\telm$core$List$reverse(context));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}();\n\t\t\t\t\t\t\tvar introduction = starter + (' failed in the following ' + (elm$core$String$fromInt(\n\t\t\t\t\t\t\t\telm$core$List$length(errors)) + ' ways:'));\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t\t\t\t'\\n\\n',\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\tintroduction,\n\t\t\t\t\t\t\t\t\tA2(elm$core$List$indexedMap, elm$json$Json$Decode$errorOneOf, errors)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tvar msg = error.a;\n\t\t\t\t\tvar json = error.b;\n\t\t\t\t\tvar introduction = function () {\n\t\t\t\t\t\tif (!context.b) {\n\t\t\t\t\t\t\treturn 'Problem with the given value:\\n\\n';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn 'Problem with the value at json' + (A2(\n\t\t\t\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\telm$core$List$reverse(context)) + ':\\n\\n    ');\n\t\t\t\t\t\t}\n\t\t\t\t\t}();\n\t\t\t\t\treturn introduction + (elm$json$Json$Decode$indent(\n\t\t\t\t\t\tA2(elm$json$Json$Encode$encode, 4, json)) + ('\\n\\n' + msg));\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Platform$Cmd$batch = _Platform_batch;\nvar elm$core$Platform$Cmd$none = elm$core$Platform$Cmd$batch(_List_Nil);\nvar author$project$Components$SearchBar$init = function (key) {\n\treturn _Utils_Tuple2(\n\t\tA3(author$project$Components$SearchBar$Model, '', key, author$project$Components$SearchBar$Invalid),\n\t\telm$core$Platform$Cmd$none);\n};\nvar author$project$Main$Loading = {$: 'Loading'};\nvar author$project$Main$NotReady = function (a) {\n\treturn {$: 'NotReady', a: a};\n};\nvar author$project$Main$Ready = function (a) {\n\treturn {$: 'Ready', a: a};\n};\nvar author$project$Main$NotFound = function (a) {\n\treturn {$: 'NotFound', a: a};\n};\nvar author$project$Main$getUser = function (state) {\n\tif (state.$ === 'Ready') {\n\t\tvar session = state.a;\n\t\tvar _n1 = session.user;\n\t\tif (_n1.$ === 'Just') {\n\t\t\tvar user = _n1.a;\n\t\t\treturn elm$core$Maybe$Just(user);\n\t\t} else {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t}\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar author$project$Main$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Server$url = 'http://localhost:3000';\nvar elm$json$Json$Decode$map2 = _Json_map2;\nvar NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = elm$json$Json$Decode$map2(elm$core$Basics$apR);\nvar elm$json$Json$Decode$andThen = _Json_andThen;\nvar elm$json$Json$Decode$decodeValue = _Json_run;\nvar elm$json$Json$Decode$fail = _Json_fail;\nvar elm$json$Json$Decode$null = _Json_decodeNull;\nvar elm$json$Json$Decode$oneOf = _Json_oneOf;\nvar elm$json$Json$Decode$succeed = _Json_succeed;\nvar elm$json$Json$Decode$value = _Json_decodeValue;\nvar NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(\n\tfunction (pathDecoder, valDecoder, fallback) {\n\t\tvar nullOr = function (decoder) {\n\t\t\treturn elm$json$Json$Decode$oneOf(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tdecoder,\n\t\t\t\t\t\telm$json$Json$Decode$null(fallback)\n\t\t\t\t\t]));\n\t\t};\n\t\tvar handleResult = function (input) {\n\t\t\tvar _n0 = A2(elm$json$Json$Decode$decodeValue, pathDecoder, input);\n\t\t\tif (_n0.$ === 'Ok') {\n\t\t\t\tvar rawValue = _n0.a;\n\t\t\t\tvar _n1 = A2(\n\t\t\t\t\telm$json$Json$Decode$decodeValue,\n\t\t\t\t\tnullOr(valDecoder),\n\t\t\t\t\trawValue);\n\t\t\t\tif (_n1.$ === 'Ok') {\n\t\t\t\t\tvar finalResult = _n1.a;\n\t\t\t\t\treturn elm$json$Json$Decode$succeed(finalResult);\n\t\t\t\t} else {\n\t\t\t\t\tvar finalErr = _n1.a;\n\t\t\t\t\treturn elm$json$Json$Decode$fail(\n\t\t\t\t\t\telm$json$Json$Decode$errorToString(finalErr));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn elm$json$Json$Decode$succeed(fallback);\n\t\t\t}\n\t\t};\n\t\treturn A2(elm$json$Json$Decode$andThen, handleResult, elm$json$Json$Decode$value);\n\t});\nvar elm$json$Json$Decode$field = _Json_decodeField;\nvar NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(\n\tfunction (key, valDecoder, fallback, decoder) {\n\t\treturn A2(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,\n\t\t\tA3(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,\n\t\t\t\tA2(elm$json$Json$Decode$field, key, elm$json$Json$Decode$value),\n\t\t\t\tvalDecoder,\n\t\t\t\tfallback),\n\t\t\tdecoder);\n\t});\nvar NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(\n\tfunction (key, valDecoder, decoder) {\n\t\treturn A2(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,\n\t\t\tA2(elm$json$Json$Decode$field, key, valDecoder),\n\t\t\tdecoder);\n\t});\nvar author$project$User$Model = function (username) {\n\treturn function (email) {\n\t\treturn function (avatar) {\n\t\t\treturn function (bio) {\n\t\t\t\treturn function (verif) {\n\t\t\t\t\treturn function (facebook) {\n\t\t\t\t\t\treturn function (twitter) {\n\t\t\t\t\t\t\treturn function (github) {\n\t\t\t\t\t\t\t\treturn function (token) {\n\t\t\t\t\t\t\t\t\treturn function (registered) {\n\t\t\t\t\t\t\t\t\t\treturn {avatar: avatar, bio: bio, email: email, facebook: facebook, github: github, registered: registered, token: token, twitter: twitter, username: username, verif: verif};\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\nvar elm$json$Json$Decode$bool = _Json_decodeBool;\nvar elm$json$Json$Decode$map = _Json_map1;\nvar elm$json$Json$Decode$nullable = function (decoder) {\n\treturn elm$json$Json$Decode$oneOf(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$json$Json$Decode$null(elm$core$Maybe$Nothing),\n\t\t\t\tA2(elm$json$Json$Decode$map, elm$core$Maybe$Just, decoder)\n\t\t\t]));\n};\nvar elm$json$Json$Decode$string = _Json_decodeString;\nvar elm$core$List$foldrHelper = F4(\n\tfunction (fn, acc, ctr, ls) {\n\t\tif (!ls.b) {\n\t\t\treturn acc;\n\t\t} else {\n\t\t\tvar a = ls.a;\n\t\t\tvar r1 = ls.b;\n\t\t\tif (!r1.b) {\n\t\t\t\treturn A2(fn, a, acc);\n\t\t\t} else {\n\t\t\t\tvar b = r1.a;\n\t\t\t\tvar r2 = r1.b;\n\t\t\t\tif (!r2.b) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tfn,\n\t\t\t\t\t\ta,\n\t\t\t\t\t\tA2(fn, b, acc));\n\t\t\t\t} else {\n\t\t\t\t\tvar c = r2.a;\n\t\t\t\t\tvar r3 = r2.b;\n\t\t\t\t\tif (!r3.b) {\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\ta,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\t\tb,\n\t\t\t\t\t\t\t\tA2(fn, c, acc)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar d = r3.a;\n\t\t\t\t\t\tvar r4 = r3.b;\n\t\t\t\t\t\tvar res = (ctr > 500) ? A3(\n\t\t\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\tacc,\n\t\t\t\t\t\t\telm$core$List$reverse(r4)) : A4(elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\ta,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\t\tb,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tfn,\n\t\t\t\t\t\t\t\t\tc,\n\t\t\t\t\t\t\t\t\tA2(fn, d, res))));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$foldr = F3(\n\tfunction (fn, acc, ls) {\n\t\treturn A4(elm$core$List$foldrHelper, fn, acc, 0, ls);\n\t});\nvar elm$core$List$map = F2(\n\tfunction (f, xs) {\n\t\treturn A3(\n\t\t\telm$core$List$foldr,\n\t\t\tF2(\n\t\t\t\tfunction (x, acc) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\tf(x),\n\t\t\t\t\t\tacc);\n\t\t\t\t}),\n\t\t\t_List_Nil,\n\t\t\txs);\n\t});\nvar elm$parser$Parser$DeadEnd = F3(\n\tfunction (row, col, problem) {\n\t\treturn {col: col, problem: problem, row: row};\n\t});\nvar elm$parser$Parser$problemToDeadEnd = function (p) {\n\treturn A3(elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);\n};\nvar elm$parser$Parser$Advanced$bagToList = F2(\n\tfunction (bag, list) {\n\t\tbagToList:\n\t\twhile (true) {\n\t\t\tswitch (bag.$) {\n\t\t\t\tcase 'Empty':\n\t\t\t\t\treturn list;\n\t\t\t\tcase 'AddRight':\n\t\t\t\t\tvar bag1 = bag.a;\n\t\t\t\t\tvar x = bag.b;\n\t\t\t\t\tvar $temp$bag = bag1,\n\t\t\t\t\t\t$temp$list = A2(elm$core$List$cons, x, list);\n\t\t\t\t\tbag = $temp$bag;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tcontinue bagToList;\n\t\t\t\tdefault:\n\t\t\t\t\tvar bag1 = bag.a;\n\t\t\t\t\tvar bag2 = bag.b;\n\t\t\t\t\tvar $temp$bag = bag1,\n\t\t\t\t\t\t$temp$list = A2(elm$parser$Parser$Advanced$bagToList, bag2, list);\n\t\t\t\t\tbag = $temp$bag;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tcontinue bagToList;\n\t\t\t}\n\t\t}\n\t});\nvar elm$parser$Parser$Advanced$run = F2(\n\tfunction (_n0, src) {\n\t\tvar parse = _n0.a;\n\t\tvar _n1 = parse(\n\t\t\t{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});\n\t\tif (_n1.$ === 'Good') {\n\t\t\tvar value = _n1.b;\n\t\t\treturn elm$core$Result$Ok(value);\n\t\t} else {\n\t\t\tvar bag = _n1.b;\n\t\t\treturn elm$core$Result$Err(\n\t\t\t\tA2(elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));\n\t\t}\n\t});\nvar elm$parser$Parser$run = F2(\n\tfunction (parser, source) {\n\t\tvar _n0 = A2(elm$parser$Parser$Advanced$run, parser, source);\n\t\tif (_n0.$ === 'Ok') {\n\t\t\tvar a = _n0.a;\n\t\t\treturn elm$core$Result$Ok(a);\n\t\t} else {\n\t\t\tvar problems = _n0.a;\n\t\t\treturn elm$core$Result$Err(\n\t\t\t\tA2(elm$core$List$map, elm$parser$Parser$problemToDeadEnd, problems));\n\t\t}\n\t});\nvar elm$core$Basics$identity = function (x) {\n\treturn x;\n};\nvar elm$parser$Parser$Advanced$Bad = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Bad', a: a, b: b};\n\t});\nvar elm$parser$Parser$Advanced$Good = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'Good', a: a, b: b, c: c};\n\t});\nvar elm$parser$Parser$Advanced$Parser = function (a) {\n\treturn {$: 'Parser', a: a};\n};\nvar elm$parser$Parser$Advanced$andThen = F2(\n\tfunction (callback, _n0) {\n\t\tvar parseA = _n0.a;\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s0) {\n\t\t\t\tvar _n1 = parseA(s0);\n\t\t\t\tif (_n1.$ === 'Bad') {\n\t\t\t\t\tvar p = _n1.a;\n\t\t\t\t\tvar x = _n1.b;\n\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p, x);\n\t\t\t\t} else {\n\t\t\t\t\tvar p1 = _n1.a;\n\t\t\t\t\tvar a = _n1.b;\n\t\t\t\t\tvar s1 = _n1.c;\n\t\t\t\t\tvar _n2 = callback(a);\n\t\t\t\t\tvar parseB = _n2.a;\n\t\t\t\t\tvar _n3 = parseB(s1);\n\t\t\t\t\tif (_n3.$ === 'Bad') {\n\t\t\t\t\t\tvar p2 = _n3.a;\n\t\t\t\t\t\tvar x = _n3.b;\n\t\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p1 || p2, x);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar p2 = _n3.a;\n\t\t\t\t\t\tvar b = _n3.b;\n\t\t\t\t\t\tvar s2 = _n3.c;\n\t\t\t\t\t\treturn A3(elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t});\nvar elm$parser$Parser$andThen = elm$parser$Parser$Advanced$andThen;\nvar elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};\nvar elm$core$String$length = _String_length;\nvar elm$parser$Parser$Advanced$AddRight = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'AddRight', a: a, b: b};\n\t});\nvar elm$parser$Parser$Advanced$DeadEnd = F4(\n\tfunction (row, col, problem, contextStack) {\n\t\treturn {col: col, contextStack: contextStack, problem: problem, row: row};\n\t});\nvar elm$parser$Parser$Advanced$Empty = {$: 'Empty'};\nvar elm$parser$Parser$Advanced$fromState = F2(\n\tfunction (s, x) {\n\t\treturn A2(\n\t\t\telm$parser$Parser$Advanced$AddRight,\n\t\t\telm$parser$Parser$Advanced$Empty,\n\t\t\tA4(elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));\n\t});\nvar elm$parser$Parser$Advanced$end = function (x) {\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\treturn _Utils_eq(\n\t\t\t\telm$core$String$length(s.src),\n\t\t\t\ts.offset) ? A3(elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(\n\t\t\t\telm$parser$Parser$Advanced$Bad,\n\t\t\t\tfalse,\n\t\t\t\tA2(elm$parser$Parser$Advanced$fromState, s, x));\n\t\t});\n};\nvar elm$parser$Parser$end = elm$parser$Parser$Advanced$end(elm$parser$Parser$ExpectingEnd);\nvar elm$core$Basics$always = F2(\n\tfunction (a, _n0) {\n\t\treturn a;\n\t});\nvar elm$parser$Parser$Advanced$map2 = F3(\n\tfunction (func, _n0, _n1) {\n\t\tvar parseA = _n0.a;\n\t\tvar parseB = _n1.a;\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s0) {\n\t\t\t\tvar _n2 = parseA(s0);\n\t\t\t\tif (_n2.$ === 'Bad') {\n\t\t\t\t\tvar p = _n2.a;\n\t\t\t\t\tvar x = _n2.b;\n\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p, x);\n\t\t\t\t} else {\n\t\t\t\t\tvar p1 = _n2.a;\n\t\t\t\t\tvar a = _n2.b;\n\t\t\t\t\tvar s1 = _n2.c;\n\t\t\t\t\tvar _n3 = parseB(s1);\n\t\t\t\t\tif (_n3.$ === 'Bad') {\n\t\t\t\t\t\tvar p2 = _n3.a;\n\t\t\t\t\t\tvar x = _n3.b;\n\t\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p1 || p2, x);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar p2 = _n3.a;\n\t\t\t\t\t\tvar b = _n3.b;\n\t\t\t\t\t\tvar s2 = _n3.c;\n\t\t\t\t\t\treturn A3(\n\t\t\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\t\t\tp1 || p2,\n\t\t\t\t\t\t\tA2(func, a, b),\n\t\t\t\t\t\t\ts2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t});\nvar elm$parser$Parser$Advanced$ignorer = F2(\n\tfunction (keepParser, ignoreParser) {\n\t\treturn A3(elm$parser$Parser$Advanced$map2, elm$core$Basics$always, keepParser, ignoreParser);\n\t});\nvar elm$parser$Parser$ignorer = elm$parser$Parser$Advanced$ignorer;\nvar elm$parser$Parser$Advanced$keeper = F2(\n\tfunction (parseFunc, parseArg) {\n\t\treturn A3(elm$parser$Parser$Advanced$map2, elm$core$Basics$apL, parseFunc, parseArg);\n\t});\nvar elm$parser$Parser$keeper = elm$parser$Parser$Advanced$keeper;\nvar elm$parser$Parser$Advanced$Append = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Append', a: a, b: b};\n\t});\nvar elm$parser$Parser$Advanced$oneOfHelp = F3(\n\tfunction (s0, bag, parsers) {\n\t\toneOfHelp:\n\t\twhile (true) {\n\t\t\tif (!parsers.b) {\n\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, false, bag);\n\t\t\t} else {\n\t\t\t\tvar parse = parsers.a.a;\n\t\t\t\tvar remainingParsers = parsers.b;\n\t\t\t\tvar _n1 = parse(s0);\n\t\t\t\tif (_n1.$ === 'Good') {\n\t\t\t\t\tvar step = _n1;\n\t\t\t\t\treturn step;\n\t\t\t\t} else {\n\t\t\t\t\tvar step = _n1;\n\t\t\t\t\tvar p = step.a;\n\t\t\t\t\tvar x = step.b;\n\t\t\t\t\tif (p) {\n\t\t\t\t\t\treturn step;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar $temp$s0 = s0,\n\t\t\t\t\t\t\t$temp$bag = A2(elm$parser$Parser$Advanced$Append, bag, x),\n\t\t\t\t\t\t\t$temp$parsers = remainingParsers;\n\t\t\t\t\t\ts0 = $temp$s0;\n\t\t\t\t\t\tbag = $temp$bag;\n\t\t\t\t\t\tparsers = $temp$parsers;\n\t\t\t\t\t\tcontinue oneOfHelp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$parser$Parser$Advanced$oneOf = function (parsers) {\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\treturn A3(elm$parser$Parser$Advanced$oneOfHelp, s, elm$parser$Parser$Advanced$Empty, parsers);\n\t\t});\n};\nvar elm$parser$Parser$oneOf = elm$parser$Parser$Advanced$oneOf;\nvar elm$parser$Parser$Advanced$succeed = function (a) {\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\treturn A3(elm$parser$Parser$Advanced$Good, false, a, s);\n\t\t});\n};\nvar elm$parser$Parser$succeed = elm$parser$Parser$Advanced$succeed;\nvar elm$parser$Parser$ExpectingSymbol = function (a) {\n\treturn {$: 'ExpectingSymbol', a: a};\n};\nvar elm$parser$Parser$Advanced$Token = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Token', a: a, b: b};\n\t});\nvar elm$core$Basics$negate = function (n) {\n\treturn -n;\n};\nvar elm$core$Basics$not = _Basics_not;\nvar elm$core$String$isEmpty = function (string) {\n\treturn string === '';\n};\nvar elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;\nvar elm$parser$Parser$Advanced$token = function (_n0) {\n\tvar str = _n0.a;\n\tvar expecting = _n0.b;\n\tvar progress = !elm$core$String$isEmpty(str);\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\tvar _n1 = A5(elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);\n\t\t\tvar newOffset = _n1.a;\n\t\t\tvar newRow = _n1.b;\n\t\t\tvar newCol = _n1.c;\n\t\t\treturn _Utils_eq(newOffset, -1) ? A2(\n\t\t\t\telm$parser$Parser$Advanced$Bad,\n\t\t\t\tfalse,\n\t\t\t\tA2(elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(\n\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\tprogress,\n\t\t\t\t_Utils_Tuple0,\n\t\t\t\t{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});\n\t\t});\n};\nvar elm$parser$Parser$Advanced$symbol = elm$parser$Parser$Advanced$token;\nvar elm$parser$Parser$symbol = function (str) {\n\treturn elm$parser$Parser$Advanced$symbol(\n\t\tA2(\n\t\t\telm$parser$Parser$Advanced$Token,\n\t\t\tstr,\n\t\t\telm$parser$Parser$ExpectingSymbol(str)));\n};\nvar elm$core$Basics$round = _Basics_round;\nvar elm$core$String$toFloat = _String_toFloat;\nvar elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;\nvar elm$parser$Parser$Advanced$chompWhileHelp = F5(\n\tfunction (isGood, offset, row, col, s0) {\n\t\tchompWhileHelp:\n\t\twhile (true) {\n\t\t\tvar newOffset = A3(elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);\n\t\t\tif (_Utils_eq(newOffset, -1)) {\n\t\t\t\treturn A3(\n\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\t_Utils_cmp(s0.offset, offset) < 0,\n\t\t\t\t\t_Utils_Tuple0,\n\t\t\t\t\t{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});\n\t\t\t} else {\n\t\t\t\tif (_Utils_eq(newOffset, -2)) {\n\t\t\t\t\tvar $temp$isGood = isGood,\n\t\t\t\t\t\t$temp$offset = offset + 1,\n\t\t\t\t\t\t$temp$row = row + 1,\n\t\t\t\t\t\t$temp$col = 1,\n\t\t\t\t\t\t$temp$s0 = s0;\n\t\t\t\t\tisGood = $temp$isGood;\n\t\t\t\t\toffset = $temp$offset;\n\t\t\t\t\trow = $temp$row;\n\t\t\t\t\tcol = $temp$col;\n\t\t\t\t\ts0 = $temp$s0;\n\t\t\t\t\tcontinue chompWhileHelp;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$isGood = isGood,\n\t\t\t\t\t\t$temp$offset = newOffset,\n\t\t\t\t\t\t$temp$row = row,\n\t\t\t\t\t\t$temp$col = col + 1,\n\t\t\t\t\t\t$temp$s0 = s0;\n\t\t\t\t\tisGood = $temp$isGood;\n\t\t\t\t\toffset = $temp$offset;\n\t\t\t\t\trow = $temp$row;\n\t\t\t\t\tcol = $temp$col;\n\t\t\t\t\ts0 = $temp$s0;\n\t\t\t\t\tcontinue chompWhileHelp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$parser$Parser$Advanced$chompWhile = function (isGood) {\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\treturn A5(elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);\n\t\t});\n};\nvar elm$parser$Parser$chompWhile = elm$parser$Parser$Advanced$chompWhile;\nvar elm$core$String$slice = _String_slice;\nvar elm$parser$Parser$Advanced$mapChompedString = F2(\n\tfunction (func, _n0) {\n\t\tvar parse = _n0.a;\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s0) {\n\t\t\t\tvar _n1 = parse(s0);\n\t\t\t\tif (_n1.$ === 'Bad') {\n\t\t\t\t\tvar p = _n1.a;\n\t\t\t\t\tvar x = _n1.b;\n\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p, x);\n\t\t\t\t} else {\n\t\t\t\t\tvar p = _n1.a;\n\t\t\t\t\tvar a = _n1.b;\n\t\t\t\t\tvar s1 = _n1.c;\n\t\t\t\t\treturn A3(\n\t\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\t\tp,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tfunc,\n\t\t\t\t\t\t\tA3(elm$core$String$slice, s0.offset, s1.offset, s0.src),\n\t\t\t\t\t\t\ta),\n\t\t\t\t\t\ts1);\n\t\t\t\t}\n\t\t\t});\n\t});\nvar elm$parser$Parser$Advanced$getChompedString = function (parser) {\n\treturn A2(elm$parser$Parser$Advanced$mapChompedString, elm$core$Basics$always, parser);\n};\nvar elm$parser$Parser$getChompedString = elm$parser$Parser$Advanced$getChompedString;\nvar elm$parser$Parser$Problem = function (a) {\n\treturn {$: 'Problem', a: a};\n};\nvar elm$parser$Parser$Advanced$problem = function (x) {\n\treturn elm$parser$Parser$Advanced$Parser(\n\t\tfunction (s) {\n\t\t\treturn A2(\n\t\t\t\telm$parser$Parser$Advanced$Bad,\n\t\t\t\tfalse,\n\t\t\t\tA2(elm$parser$Parser$Advanced$fromState, s, x));\n\t\t});\n};\nvar elm$parser$Parser$problem = function (msg) {\n\treturn elm$parser$Parser$Advanced$problem(\n\t\telm$parser$Parser$Problem(msg));\n};\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs = A2(\n\telm$parser$Parser$andThen,\n\tfunction (str) {\n\t\tif (elm$core$String$length(str) <= 9) {\n\t\t\tvar _n0 = elm$core$String$toFloat('0.' + str);\n\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\tvar floatVal = _n0.a;\n\t\t\t\treturn elm$parser$Parser$succeed(\n\t\t\t\t\telm$core$Basics$round(floatVal * 1000));\n\t\t\t} else {\n\t\t\t\treturn elm$parser$Parser$problem('Invalid float: \\\"' + (str + '\\\"'));\n\t\t\t}\n\t\t} else {\n\t\t\treturn elm$parser$Parser$problem(\n\t\t\t\t'Expected at most 9 digits, but got ' + elm$core$String$fromInt(\n\t\t\t\t\telm$core$String$length(str)));\n\t\t}\n\t},\n\telm$parser$Parser$getChompedString(\n\t\telm$parser$Parser$chompWhile(elm$core$Char$isDigit)));\nvar elm$time$Time$Posix = function (a) {\n\treturn {$: 'Posix', a: a};\n};\nvar elm$time$Time$millisToPosix = elm$time$Time$Posix;\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts = F6(\n\tfunction (monthYearDayMs, hour, minute, second, ms, utcOffsetMinutes) {\n\t\treturn elm$time$Time$millisToPosix((((monthYearDayMs + (((hour * 60) * 60) * 1000)) + (((minute - utcOffsetMinutes) * 60) * 1000)) + (second * 1000)) + ms);\n\t});\nvar elm$core$String$append = _String_append;\nvar elm$core$String$toInt = _String_toInt;\nvar elm$parser$Parser$Done = function (a) {\n\treturn {$: 'Done', a: a};\n};\nvar elm$parser$Parser$Loop = function (a) {\n\treturn {$: 'Loop', a: a};\n};\nvar elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};\nvar elm$parser$Parser$Advanced$chompIf = F2(\n\tfunction (isGood, expecting) {\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s) {\n\t\t\t\tvar newOffset = A3(elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);\n\t\t\t\treturn _Utils_eq(newOffset, -1) ? A2(\n\t\t\t\t\telm$parser$Parser$Advanced$Bad,\n\t\t\t\t\tfalse,\n\t\t\t\t\tA2(elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(\n\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\ttrue,\n\t\t\t\t\t_Utils_Tuple0,\n\t\t\t\t\t{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(\n\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\ttrue,\n\t\t\t\t\t_Utils_Tuple0,\n\t\t\t\t\t{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));\n\t\t\t});\n\t});\nvar elm$parser$Parser$chompIf = function (isGood) {\n\treturn A2(elm$parser$Parser$Advanced$chompIf, isGood, elm$parser$Parser$UnexpectedChar);\n};\nvar elm$parser$Parser$Advanced$map = F2(\n\tfunction (func, _n0) {\n\t\tvar parse = _n0.a;\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s0) {\n\t\t\t\tvar _n1 = parse(s0);\n\t\t\t\tif (_n1.$ === 'Good') {\n\t\t\t\t\tvar p = _n1.a;\n\t\t\t\t\tvar a = _n1.b;\n\t\t\t\t\tvar s1 = _n1.c;\n\t\t\t\t\treturn A3(\n\t\t\t\t\t\telm$parser$Parser$Advanced$Good,\n\t\t\t\t\t\tp,\n\t\t\t\t\t\tfunc(a),\n\t\t\t\t\t\ts1);\n\t\t\t\t} else {\n\t\t\t\t\tvar p = _n1.a;\n\t\t\t\t\tvar x = _n1.b;\n\t\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p, x);\n\t\t\t\t}\n\t\t\t});\n\t});\nvar elm$parser$Parser$map = elm$parser$Parser$Advanced$map;\nvar elm$parser$Parser$Advanced$Done = function (a) {\n\treturn {$: 'Done', a: a};\n};\nvar elm$parser$Parser$Advanced$Loop = function (a) {\n\treturn {$: 'Loop', a: a};\n};\nvar elm$parser$Parser$toAdvancedStep = function (step) {\n\tif (step.$ === 'Loop') {\n\t\tvar s = step.a;\n\t\treturn elm$parser$Parser$Advanced$Loop(s);\n\t} else {\n\t\tvar a = step.a;\n\t\treturn elm$parser$Parser$Advanced$Done(a);\n\t}\n};\nvar elm$parser$Parser$Advanced$loopHelp = F4(\n\tfunction (p, state, callback, s0) {\n\t\tloopHelp:\n\t\twhile (true) {\n\t\t\tvar _n0 = callback(state);\n\t\t\tvar parse = _n0.a;\n\t\t\tvar _n1 = parse(s0);\n\t\t\tif (_n1.$ === 'Good') {\n\t\t\t\tvar p1 = _n1.a;\n\t\t\t\tvar step = _n1.b;\n\t\t\t\tvar s1 = _n1.c;\n\t\t\t\tif (step.$ === 'Loop') {\n\t\t\t\t\tvar newState = step.a;\n\t\t\t\t\tvar $temp$p = p || p1,\n\t\t\t\t\t\t$temp$state = newState,\n\t\t\t\t\t\t$temp$callback = callback,\n\t\t\t\t\t\t$temp$s0 = s1;\n\t\t\t\t\tp = $temp$p;\n\t\t\t\t\tstate = $temp$state;\n\t\t\t\t\tcallback = $temp$callback;\n\t\t\t\t\ts0 = $temp$s0;\n\t\t\t\t\tcontinue loopHelp;\n\t\t\t\t} else {\n\t\t\t\t\tvar result = step.a;\n\t\t\t\t\treturn A3(elm$parser$Parser$Advanced$Good, p || p1, result, s1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar p1 = _n1.a;\n\t\t\t\tvar x = _n1.b;\n\t\t\t\treturn A2(elm$parser$Parser$Advanced$Bad, p || p1, x);\n\t\t\t}\n\t\t}\n\t});\nvar elm$parser$Parser$Advanced$loop = F2(\n\tfunction (state, callback) {\n\t\treturn elm$parser$Parser$Advanced$Parser(\n\t\t\tfunction (s) {\n\t\t\t\treturn A4(elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);\n\t\t\t});\n\t});\nvar elm$parser$Parser$loop = F2(\n\tfunction (state, callback) {\n\t\treturn A2(\n\t\t\telm$parser$Parser$Advanced$loop,\n\t\t\tstate,\n\t\t\tfunction (s) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\telm$parser$Parser$toAdvancedStep,\n\t\t\t\t\tcallback(s));\n\t\t\t});\n\t});\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt = function (quantity) {\n\tvar helper = function (str) {\n\t\tif (_Utils_eq(\n\t\t\telm$core$String$length(str),\n\t\t\tquantity)) {\n\t\t\tvar _n0 = elm$core$String$toInt(str);\n\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\tvar intVal = _n0.a;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\telm$parser$Parser$Done,\n\t\t\t\t\telm$parser$Parser$succeed(intVal));\n\t\t\t} else {\n\t\t\t\treturn elm$parser$Parser$problem('Invalid integer: \\\"' + (str + '\\\"'));\n\t\t\t}\n\t\t} else {\n\t\t\treturn A2(\n\t\t\t\telm$parser$Parser$map,\n\t\t\t\tfunction (nextChar) {\n\t\t\t\t\treturn elm$parser$Parser$Loop(\n\t\t\t\t\t\tA2(elm$core$String$append, str, nextChar));\n\t\t\t\t},\n\t\t\t\telm$parser$Parser$getChompedString(\n\t\t\t\t\telm$parser$Parser$chompIf(elm$core$Char$isDigit)));\n\t\t}\n\t};\n\treturn A2(elm$parser$Parser$loop, '', helper);\n};\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear = 1970;\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay = function (day) {\n\treturn elm$parser$Parser$problem(\n\t\t'Invalid day: ' + elm$core$String$fromInt(day));\n};\nvar elm$core$Basics$modBy = _Basics_modBy;\nvar elm$core$Basics$neq = _Utils_notEqual;\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear = function (year) {\n\treturn (!A2(elm$core$Basics$modBy, 4, year)) && (A2(elm$core$Basics$modBy, 100, year) || (!A2(elm$core$Basics$modBy, 400, year)));\n};\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore = function (y1) {\n\tvar y = y1 - 1;\n\treturn (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);\n};\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay = 86400000;\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear = 31536000000;\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay = function (_n0) {\n\tvar year = _n0.a;\n\tvar month = _n0.b;\n\tvar dayInMonth = _n0.c;\n\tif (dayInMonth < 0) {\n\t\treturn rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth);\n\t} else {\n\t\tvar succeedWith = function (extraMs) {\n\t\t\tvar yearMs = rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear * (year - rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear);\n\t\t\tvar days = ((month < 3) || (!rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year))) ? (dayInMonth - 1) : dayInMonth;\n\t\t\tvar dayMs = rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay * (days + (rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore(year) - rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore(rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear)));\n\t\t\treturn elm$parser$Parser$succeed((extraMs + yearMs) + dayMs);\n\t\t};\n\t\tswitch (month) {\n\t\t\tcase 1:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(0);\n\t\t\tcase 2:\n\t\t\t\treturn ((dayInMonth > 29) || ((dayInMonth === 29) && (!rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year)))) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(2678400000);\n\t\t\tcase 3:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(5097600000);\n\t\t\tcase 4:\n\t\t\t\treturn (dayInMonth > 30) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(7776000000);\n\t\t\tcase 5:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(10368000000);\n\t\t\tcase 6:\n\t\t\t\treturn (dayInMonth > 30) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(13046400000);\n\t\t\tcase 7:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(15638400000);\n\t\t\tcase 8:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(18316800000);\n\t\t\tcase 9:\n\t\t\t\treturn (dayInMonth > 30) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(20995200000);\n\t\t\tcase 10:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(23587200000);\n\t\t\tcase 11:\n\t\t\t\treturn (dayInMonth > 30) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(26265600000);\n\t\t\tcase 12:\n\t\t\t\treturn (dayInMonth > 31) ? rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(28857600000);\n\t\t\tdefault:\n\t\t\t\treturn elm$parser$Parser$problem(\n\t\t\t\t\t'Invalid month: \\\"' + (elm$core$String$fromInt(month) + '\\\"'));\n\t\t}\n\t}\n};\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs = A2(\n\telm$parser$Parser$andThen,\n\trtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay,\n\tA2(\n\t\telm$parser$Parser$keeper,\n\t\tA2(\n\t\t\telm$parser$Parser$keeper,\n\t\t\tA2(\n\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\telm$parser$Parser$succeed(\n\t\t\t\t\tF3(\n\t\t\t\t\t\tfunction (year, month, day) {\n\t\t\t\t\t\t\treturn _Utils_Tuple3(year, month, day);\n\t\t\t\t\t\t})),\n\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(4)),\n\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\t\telm$parser$Parser$symbol('-')),\n\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)\n\t\t\t\t\t]))),\n\t\telm$parser$Parser$oneOf(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\telm$parser$Parser$symbol('-')),\n\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)\n\t\t\t\t]))));\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes = function () {\n\tvar utcOffsetMinutesFromParts = F3(\n\t\tfunction (multiplier, hours, minutes) {\n\t\t\treturn (multiplier * (hours * 60)) + minutes;\n\t\t});\n\treturn A2(\n\t\telm$parser$Parser$keeper,\n\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\telm$parser$Parser$oneOf(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\tfunction (_n0) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t},\n\t\t\t\t\telm$parser$Parser$symbol('Z')),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\telm$parser$Parser$succeed(utcOffsetMinutesFromParts),\n\t\t\t\t\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol('+')),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\t\t\t\t\t\tfunction (_n2) {\n\t\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol('-'))\n\t\t\t\t\t\t\t\t\t]))),\n\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol(':')),\n\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),\n\t\t\t\t\t\t\t\telm$parser$Parser$succeed(0)\n\t\t\t\t\t\t\t]))),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\telm$parser$Parser$succeed(0),\n\t\t\t\t\telm$parser$Parser$end)\n\t\t\t\t])));\n}();\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601 = A2(\n\telm$parser$Parser$andThen,\n\tfunction (datePart) {\n\t\treturn elm$parser$Parser$oneOf(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$fromParts(datePart)),\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol('T')),\n\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\t\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol(':')),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)\n\t\t\t\t\t\t\t\t\t\t]))),\n\t\t\t\t\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol(':')),\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)\n\t\t\t\t\t\t\t\t\t]))),\n\t\t\t\t\t\telm$parser$Parser$oneOf(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(elm$core$Basics$identity),\n\t\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol('.')),\n\t\t\t\t\t\t\t\t\trtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs),\n\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(0)\n\t\t\t\t\t\t\t\t]))),\n\t\t\t\t\tA2(elm$parser$Parser$ignorer, rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes, elm$parser$Parser$end)),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\telm$parser$Parser$succeed(\n\t\t\t\t\t\tA6(rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts, datePart, 0, 0, 0, 0, 0)),\n\t\t\t\t\telm$parser$Parser$end)\n\t\t\t\t]));\n\t},\n\trtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs);\nvar rtfeldman$elm_iso8601_date_strings$Iso8601$toTime = function (str) {\n\treturn A2(elm$parser$Parser$run, rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601, str);\n};\nvar elm_community$json_extra$Json$Decode$Extra$datetime = A2(\n\telm$json$Json$Decode$andThen,\n\tfunction (dateString) {\n\t\tvar _n0 = rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(dateString);\n\t\tif (_n0.$ === 'Ok') {\n\t\t\tvar v = _n0.a;\n\t\t\treturn elm$json$Json$Decode$succeed(v);\n\t\t} else {\n\t\t\treturn elm$json$Json$Decode$fail('Expecting an ISO-8601 formatted date+time string');\n\t\t}\n\t},\n\telm$json$Json$Decode$string);\nvar author$project$User$decodeUser = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'registeredAt',\n\telm_community$json_extra$Json$Decode$Extra$datetime,\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'token',\n\t\telm$json$Json$Decode$string,\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'github',\n\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\tA3(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t'twitter',\n\t\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\t\tA3(\n\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t'facebook',\n\t\t\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\t\t\tA3(\n\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t'verif',\n\t\t\t\t\t\telm$json$Json$Decode$bool,\n\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t\t\t'bio',\n\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t'No description',\n\t\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t\t\t\t'profilePic',\n\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\tauthor$project$Server$url + '/img/profile/default.jpg',\n\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t\t\t'email',\n\t\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t\t\t\t'username',\n\t\t\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\t\t\telm$json$Json$Decode$succeed(author$project$User$Model)))))))))));\nvar elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};\nvar elm$core$Dict$empty = elm$core$Dict$RBEmpty_elm_builtin;\nvar elm$core$Basics$compare = _Utils_compare;\nvar elm$core$Dict$get = F2(\n\tfunction (targetKey, dict) {\n\t\tget:\n\t\twhile (true) {\n\t\t\tif (dict.$ === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t} else {\n\t\t\t\tvar key = dict.b;\n\t\t\t\tvar value = dict.c;\n\t\t\t\tvar left = dict.d;\n\t\t\t\tvar right = dict.e;\n\t\t\t\tvar _n1 = A2(elm$core$Basics$compare, targetKey, key);\n\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\tcase 'LT':\n\t\t\t\t\t\tvar $temp$targetKey = targetKey,\n\t\t\t\t\t\t\t$temp$dict = left;\n\t\t\t\t\t\ttargetKey = $temp$targetKey;\n\t\t\t\t\t\tdict = $temp$dict;\n\t\t\t\t\t\tcontinue get;\n\t\t\t\t\tcase 'EQ':\n\t\t\t\t\t\treturn elm$core$Maybe$Just(value);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar $temp$targetKey = targetKey,\n\t\t\t\t\t\t\t$temp$dict = right;\n\t\t\t\t\t\ttargetKey = $temp$targetKey;\n\t\t\t\t\t\tdict = $temp$dict;\n\t\t\t\t\t\tcontinue get;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Dict$Black = {$: 'Black'};\nvar elm$core$Dict$RBNode_elm_builtin = F5(\n\tfunction (a, b, c, d, e) {\n\t\treturn {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};\n\t});\nvar elm$core$Dict$Red = {$: 'Red'};\nvar elm$core$Dict$balance = F5(\n\tfunction (color, key, value, left, right) {\n\t\tif ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {\n\t\t\tvar _n1 = right.a;\n\t\t\tvar rK = right.b;\n\t\t\tvar rV = right.c;\n\t\t\tvar rLeft = right.d;\n\t\t\tvar rRight = right.e;\n\t\t\tif ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {\n\t\t\t\tvar _n3 = left.a;\n\t\t\t\tvar lK = left.b;\n\t\t\t\tvar lV = left.c;\n\t\t\t\tvar lLeft = left.d;\n\t\t\t\tvar lRight = left.e;\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Red,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, lK, lV, lLeft, lRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, rK, rV, rLeft, rRight));\n\t\t\t} else {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\tcolor,\n\t\t\t\t\trK,\n\t\t\t\t\trV,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, left, rLeft),\n\t\t\t\t\trRight);\n\t\t\t}\n\t\t} else {\n\t\t\tif ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {\n\t\t\t\tvar _n5 = left.a;\n\t\t\t\tvar lK = left.b;\n\t\t\t\tvar lV = left.c;\n\t\t\t\tvar _n6 = left.d;\n\t\t\t\tvar _n7 = _n6.a;\n\t\t\t\tvar llK = _n6.b;\n\t\t\t\tvar llV = _n6.c;\n\t\t\t\tvar llLeft = _n6.d;\n\t\t\t\tvar llRight = _n6.e;\n\t\t\t\tvar lRight = left.e;\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Red,\n\t\t\t\t\tlK,\n\t\t\t\t\tlV,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, llK, llV, llLeft, llRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, key, value, lRight, right));\n\t\t\t} else {\n\t\t\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Dict$insertHelp = F3(\n\tfunction (key, value, dict) {\n\t\tif (dict.$ === 'RBEmpty_elm_builtin') {\n\t\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, elm$core$Dict$RBEmpty_elm_builtin, elm$core$Dict$RBEmpty_elm_builtin);\n\t\t} else {\n\t\t\tvar nColor = dict.a;\n\t\t\tvar nKey = dict.b;\n\t\t\tvar nValue = dict.c;\n\t\t\tvar nLeft = dict.d;\n\t\t\tvar nRight = dict.e;\n\t\t\tvar _n1 = A2(elm$core$Basics$compare, key, nKey);\n\t\t\tswitch (_n1.$) {\n\t\t\t\tcase 'LT':\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\t\tnColor,\n\t\t\t\t\t\tnKey,\n\t\t\t\t\t\tnValue,\n\t\t\t\t\t\tA3(elm$core$Dict$insertHelp, key, value, nLeft),\n\t\t\t\t\t\tnRight);\n\t\t\t\tcase 'EQ':\n\t\t\t\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);\n\t\t\t\tdefault:\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\t\tnColor,\n\t\t\t\t\t\tnKey,\n\t\t\t\t\t\tnValue,\n\t\t\t\t\t\tnLeft,\n\t\t\t\t\t\tA3(elm$core$Dict$insertHelp, key, value, nRight));\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Dict$insert = F3(\n\tfunction (key, value, dict) {\n\t\tvar _n0 = A3(elm$core$Dict$insertHelp, key, value, dict);\n\t\tif ((_n0.$ === 'RBNode_elm_builtin') && (_n0.a.$ === 'Red')) {\n\t\t\tvar _n1 = _n0.a;\n\t\t\tvar k = _n0.b;\n\t\t\tvar v = _n0.c;\n\t\t\tvar l = _n0.d;\n\t\t\tvar r = _n0.e;\n\t\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, k, v, l, r);\n\t\t} else {\n\t\t\tvar x = _n0;\n\t\t\treturn x;\n\t\t}\n\t});\nvar elm$core$Dict$getMin = function (dict) {\n\tgetMin:\n\twhile (true) {\n\t\tif ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {\n\t\t\tvar left = dict.d;\n\t\t\tvar $temp$dict = left;\n\t\t\tdict = $temp$dict;\n\t\t\tcontinue getMin;\n\t\t} else {\n\t\t\treturn dict;\n\t\t}\n\t}\n};\nvar elm$core$Dict$moveRedLeft = function (dict) {\n\tif (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {\n\t\tif ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {\n\t\t\tvar clr = dict.a;\n\t\t\tvar k = dict.b;\n\t\t\tvar v = dict.c;\n\t\t\tvar _n1 = dict.d;\n\t\t\tvar lClr = _n1.a;\n\t\t\tvar lK = _n1.b;\n\t\t\tvar lV = _n1.c;\n\t\t\tvar lLeft = _n1.d;\n\t\t\tvar lRight = _n1.e;\n\t\t\tvar _n2 = dict.e;\n\t\t\tvar rClr = _n2.a;\n\t\t\tvar rK = _n2.b;\n\t\t\tvar rV = _n2.c;\n\t\t\tvar rLeft = _n2.d;\n\t\t\tvar _n3 = rLeft.a;\n\t\t\tvar rlK = rLeft.b;\n\t\t\tvar rlV = rLeft.c;\n\t\t\tvar rlL = rLeft.d;\n\t\t\tvar rlR = rLeft.e;\n\t\t\tvar rRight = _n2.e;\n\t\t\treturn A5(\n\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\telm$core$Dict$Red,\n\t\t\t\trlK,\n\t\t\t\trlV,\n\t\t\t\tA5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),\n\t\t\t\t\trlL),\n\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, rK, rV, rlR, rRight));\n\t\t} else {\n\t\t\tvar clr = dict.a;\n\t\t\tvar k = dict.b;\n\t\t\tvar v = dict.c;\n\t\t\tvar _n4 = dict.d;\n\t\t\tvar lClr = _n4.a;\n\t\t\tvar lK = _n4.b;\n\t\t\tvar lV = _n4.c;\n\t\t\tvar lLeft = _n4.d;\n\t\t\tvar lRight = _n4.e;\n\t\t\tvar _n5 = dict.e;\n\t\t\tvar rClr = _n5.a;\n\t\t\tvar rK = _n5.b;\n\t\t\tvar rV = _n5.c;\n\t\t\tvar rLeft = _n5.d;\n\t\t\tvar rRight = _n5.e;\n\t\t\tif (clr.$ === 'Black') {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));\n\t\t\t} else {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn dict;\n\t}\n};\nvar elm$core$Dict$moveRedRight = function (dict) {\n\tif (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {\n\t\tif ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {\n\t\t\tvar clr = dict.a;\n\t\t\tvar k = dict.b;\n\t\t\tvar v = dict.c;\n\t\t\tvar _n1 = dict.d;\n\t\t\tvar lClr = _n1.a;\n\t\t\tvar lK = _n1.b;\n\t\t\tvar lV = _n1.c;\n\t\t\tvar _n2 = _n1.d;\n\t\t\tvar _n3 = _n2.a;\n\t\t\tvar llK = _n2.b;\n\t\t\tvar llV = _n2.c;\n\t\t\tvar llLeft = _n2.d;\n\t\t\tvar llRight = _n2.e;\n\t\t\tvar lRight = _n1.e;\n\t\t\tvar _n4 = dict.e;\n\t\t\tvar rClr = _n4.a;\n\t\t\tvar rK = _n4.b;\n\t\t\tvar rV = _n4.c;\n\t\t\tvar rLeft = _n4.d;\n\t\t\tvar rRight = _n4.e;\n\t\t\treturn A5(\n\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\telm$core$Dict$Red,\n\t\t\t\tlK,\n\t\t\t\tlV,\n\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, llK, llV, llLeft, llRight),\n\t\t\t\tA5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tlRight,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight)));\n\t\t} else {\n\t\t\tvar clr = dict.a;\n\t\t\tvar k = dict.b;\n\t\t\tvar v = dict.c;\n\t\t\tvar _n5 = dict.d;\n\t\t\tvar lClr = _n5.a;\n\t\t\tvar lK = _n5.b;\n\t\t\tvar lV = _n5.c;\n\t\t\tvar lLeft = _n5.d;\n\t\t\tvar lRight = _n5.e;\n\t\t\tvar _n6 = dict.e;\n\t\t\tvar rClr = _n6.a;\n\t\t\tvar rK = _n6.b;\n\t\t\tvar rV = _n6.c;\n\t\t\tvar rLeft = _n6.d;\n\t\t\tvar rRight = _n6.e;\n\t\t\tif (clr.$ === 'Black') {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));\n\t\t\t} else {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\telm$core$Dict$Black,\n\t\t\t\t\tk,\n\t\t\t\t\tv,\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),\n\t\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn dict;\n\t}\n};\nvar elm$core$Dict$removeHelpPrepEQGT = F7(\n\tfunction (targetKey, dict, color, key, value, left, right) {\n\t\tif ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {\n\t\t\tvar _n1 = left.a;\n\t\t\tvar lK = left.b;\n\t\t\tvar lV = left.c;\n\t\t\tvar lLeft = left.d;\n\t\t\tvar lRight = left.e;\n\t\t\treturn A5(\n\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\tcolor,\n\t\t\t\tlK,\n\t\t\t\tlV,\n\t\t\t\tlLeft,\n\t\t\t\tA5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, lRight, right));\n\t\t} else {\n\t\t\t_n2$2:\n\t\t\twhile (true) {\n\t\t\t\tif ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {\n\t\t\t\t\tif (right.d.$ === 'RBNode_elm_builtin') {\n\t\t\t\t\t\tif (right.d.a.$ === 'Black') {\n\t\t\t\t\t\t\tvar _n3 = right.a;\n\t\t\t\t\t\t\tvar _n4 = right.d;\n\t\t\t\t\t\t\tvar _n5 = _n4.a;\n\t\t\t\t\t\t\treturn elm$core$Dict$moveRedRight(dict);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak _n2$2;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _n6 = right.a;\n\t\t\t\t\t\tvar _n7 = right.d;\n\t\t\t\t\t\treturn elm$core$Dict$moveRedRight(dict);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak _n2$2;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn dict;\n\t\t}\n\t});\nvar elm$core$Dict$removeMin = function (dict) {\n\tif ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {\n\t\tvar color = dict.a;\n\t\tvar key = dict.b;\n\t\tvar value = dict.c;\n\t\tvar left = dict.d;\n\t\tvar lColor = left.a;\n\t\tvar lLeft = left.d;\n\t\tvar right = dict.e;\n\t\tif (lColor.$ === 'Black') {\n\t\t\tif ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {\n\t\t\t\tvar _n3 = lLeft.a;\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\tcolor,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\telm$core$Dict$removeMin(left),\n\t\t\t\t\tright);\n\t\t\t} else {\n\t\t\t\tvar _n4 = elm$core$Dict$moveRedLeft(dict);\n\t\t\t\tif (_n4.$ === 'RBNode_elm_builtin') {\n\t\t\t\t\tvar nColor = _n4.a;\n\t\t\t\t\tvar nKey = _n4.b;\n\t\t\t\t\tvar nValue = _n4.c;\n\t\t\t\t\tvar nLeft = _n4.d;\n\t\t\t\t\tvar nRight = _n4.e;\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\t\tnColor,\n\t\t\t\t\t\tnKey,\n\t\t\t\t\t\tnValue,\n\t\t\t\t\t\telm$core$Dict$removeMin(nLeft),\n\t\t\t\t\t\tnRight);\n\t\t\t\t} else {\n\t\t\t\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn A5(\n\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\tcolor,\n\t\t\t\tkey,\n\t\t\t\tvalue,\n\t\t\t\telm$core$Dict$removeMin(left),\n\t\t\t\tright);\n\t\t}\n\t} else {\n\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t}\n};\nvar elm$core$Dict$removeHelp = F2(\n\tfunction (targetKey, dict) {\n\t\tif (dict.$ === 'RBEmpty_elm_builtin') {\n\t\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t\t} else {\n\t\t\tvar color = dict.a;\n\t\t\tvar key = dict.b;\n\t\t\tvar value = dict.c;\n\t\t\tvar left = dict.d;\n\t\t\tvar right = dict.e;\n\t\t\tif (_Utils_cmp(targetKey, key) < 0) {\n\t\t\t\tif ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {\n\t\t\t\t\tvar _n4 = left.a;\n\t\t\t\t\tvar lLeft = left.d;\n\t\t\t\t\tif ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {\n\t\t\t\t\t\tvar _n6 = lLeft.a;\n\t\t\t\t\t\treturn A5(\n\t\t\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\t\t\tcolor,\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tA2(elm$core$Dict$removeHelp, targetKey, left),\n\t\t\t\t\t\t\tright);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _n7 = elm$core$Dict$moveRedLeft(dict);\n\t\t\t\t\t\tif (_n7.$ === 'RBNode_elm_builtin') {\n\t\t\t\t\t\t\tvar nColor = _n7.a;\n\t\t\t\t\t\t\tvar nKey = _n7.b;\n\t\t\t\t\t\t\tvar nValue = _n7.c;\n\t\t\t\t\t\t\tvar nLeft = _n7.d;\n\t\t\t\t\t\t\tvar nRight = _n7.e;\n\t\t\t\t\t\t\treturn A5(\n\t\t\t\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\t\t\t\tnColor,\n\t\t\t\t\t\t\t\tnKey,\n\t\t\t\t\t\t\t\tnValue,\n\t\t\t\t\t\t\t\tA2(elm$core$Dict$removeHelp, targetKey, nLeft),\n\t\t\t\t\t\t\t\tnRight);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\telm$core$Dict$RBNode_elm_builtin,\n\t\t\t\t\t\tcolor,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tA2(elm$core$Dict$removeHelp, targetKey, left),\n\t\t\t\t\t\tright);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Dict$removeHelpEQGT,\n\t\t\t\t\ttargetKey,\n\t\t\t\t\tA7(elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Dict$removeHelpEQGT = F2(\n\tfunction (targetKey, dict) {\n\t\tif (dict.$ === 'RBNode_elm_builtin') {\n\t\t\tvar color = dict.a;\n\t\t\tvar key = dict.b;\n\t\t\tvar value = dict.c;\n\t\t\tvar left = dict.d;\n\t\t\tvar right = dict.e;\n\t\t\tif (_Utils_eq(targetKey, key)) {\n\t\t\t\tvar _n1 = elm$core$Dict$getMin(right);\n\t\t\t\tif (_n1.$ === 'RBNode_elm_builtin') {\n\t\t\t\t\tvar minKey = _n1.b;\n\t\t\t\t\tvar minValue = _n1.c;\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\t\tcolor,\n\t\t\t\t\t\tminKey,\n\t\t\t\t\t\tminValue,\n\t\t\t\t\t\tleft,\n\t\t\t\t\t\telm$core$Dict$removeMin(right));\n\t\t\t\t} else {\n\t\t\t\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn A5(\n\t\t\t\t\telm$core$Dict$balance,\n\t\t\t\t\tcolor,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tleft,\n\t\t\t\t\tA2(elm$core$Dict$removeHelp, targetKey, right));\n\t\t\t}\n\t\t} else {\n\t\t\treturn elm$core$Dict$RBEmpty_elm_builtin;\n\t\t}\n\t});\nvar elm$core$Dict$remove = F2(\n\tfunction (key, dict) {\n\t\tvar _n0 = A2(elm$core$Dict$removeHelp, key, dict);\n\t\tif ((_n0.$ === 'RBNode_elm_builtin') && (_n0.a.$ === 'Red')) {\n\t\t\tvar _n1 = _n0.a;\n\t\t\tvar k = _n0.b;\n\t\t\tvar v = _n0.c;\n\t\t\tvar l = _n0.d;\n\t\t\tvar r = _n0.e;\n\t\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, k, v, l, r);\n\t\t} else {\n\t\t\tvar x = _n0;\n\t\t\treturn x;\n\t\t}\n\t});\nvar elm$core$Dict$update = F3(\n\tfunction (targetKey, alter, dictionary) {\n\t\tvar _n0 = alter(\n\t\t\tA2(elm$core$Dict$get, targetKey, dictionary));\n\t\tif (_n0.$ === 'Just') {\n\t\t\tvar value = _n0.a;\n\t\t\treturn A3(elm$core$Dict$insert, targetKey, value, dictionary);\n\t\t} else {\n\t\t\treturn A2(elm$core$Dict$remove, targetKey, dictionary);\n\t\t}\n\t});\nvar elm$core$Maybe$isJust = function (maybe) {\n\tif (maybe.$ === 'Just') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\nvar elm$core$Platform$sendToApp = _Platform_sendToApp;\nvar elm$core$Platform$sendToSelf = _Platform_sendToSelf;\nvar elm$core$Result$map = F2(\n\tfunction (func, ra) {\n\t\tif (ra.$ === 'Ok') {\n\t\t\tvar a = ra.a;\n\t\t\treturn elm$core$Result$Ok(\n\t\t\t\tfunc(a));\n\t\t} else {\n\t\t\tvar e = ra.a;\n\t\t\treturn elm$core$Result$Err(e);\n\t\t}\n\t});\nvar elm$http$Http$BadStatus_ = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'BadStatus_', a: a, b: b};\n\t});\nvar elm$http$Http$BadUrl_ = function (a) {\n\treturn {$: 'BadUrl_', a: a};\n};\nvar elm$http$Http$GoodStatus_ = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'GoodStatus_', a: a, b: b};\n\t});\nvar elm$http$Http$NetworkError_ = {$: 'NetworkError_'};\nvar elm$http$Http$Receiving = function (a) {\n\treturn {$: 'Receiving', a: a};\n};\nvar elm$http$Http$Sending = function (a) {\n\treturn {$: 'Sending', a: a};\n};\nvar elm$http$Http$Timeout_ = {$: 'Timeout_'};\nvar elm$http$Http$emptyBody = _Http_emptyBody;\nvar elm$core$Result$mapError = F2(\n\tfunction (f, result) {\n\t\tif (result.$ === 'Ok') {\n\t\t\tvar v = result.a;\n\t\t\treturn elm$core$Result$Ok(v);\n\t\t} else {\n\t\t\tvar e = result.a;\n\t\t\treturn elm$core$Result$Err(\n\t\t\t\tf(e));\n\t\t}\n\t});\nvar elm$core$Basics$composeR = F3(\n\tfunction (f, g, x) {\n\t\treturn g(\n\t\t\tf(x));\n\t});\nvar elm$http$Http$expectStringResponse = F2(\n\tfunction (toMsg, toResult) {\n\t\treturn A3(\n\t\t\t_Http_expect,\n\t\t\t'',\n\t\t\telm$core$Basics$identity,\n\t\t\tA2(elm$core$Basics$composeR, toResult, toMsg));\n\t});\nvar elm$http$Http$BadBody = function (a) {\n\treturn {$: 'BadBody', a: a};\n};\nvar elm$http$Http$BadStatus = function (a) {\n\treturn {$: 'BadStatus', a: a};\n};\nvar elm$http$Http$BadUrl = function (a) {\n\treturn {$: 'BadUrl', a: a};\n};\nvar elm$http$Http$NetworkError = {$: 'NetworkError'};\nvar elm$http$Http$Timeout = {$: 'Timeout'};\nvar elm$http$Http$resolve = F2(\n\tfunction (toResult, response) {\n\t\tswitch (response.$) {\n\t\t\tcase 'BadUrl_':\n\t\t\t\tvar url = response.a;\n\t\t\t\treturn elm$core$Result$Err(\n\t\t\t\t\telm$http$Http$BadUrl(url));\n\t\t\tcase 'Timeout_':\n\t\t\t\treturn elm$core$Result$Err(elm$http$Http$Timeout);\n\t\t\tcase 'NetworkError_':\n\t\t\t\treturn elm$core$Result$Err(elm$http$Http$NetworkError);\n\t\t\tcase 'BadStatus_':\n\t\t\t\tvar metadata = response.a;\n\t\t\t\treturn elm$core$Result$Err(\n\t\t\t\t\telm$http$Http$BadStatus(metadata.statusCode));\n\t\t\tdefault:\n\t\t\t\tvar body = response.b;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Result$mapError,\n\t\t\t\t\telm$http$Http$BadBody,\n\t\t\t\t\ttoResult(body));\n\t\t}\n\t});\nvar elm$json$Json$Decode$decodeString = _Json_runOnString;\nvar elm$http$Http$expectJson = F2(\n\tfunction (toMsg, decoder) {\n\t\treturn A2(\n\t\t\telm$http$Http$expectStringResponse,\n\t\t\ttoMsg,\n\t\t\telm$http$Http$resolve(\n\t\t\t\tfunction (string) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$Result$mapError,\n\t\t\t\t\t\telm$json$Json$Decode$errorToString,\n\t\t\t\t\t\tA2(elm$json$Json$Decode$decodeString, decoder, string));\n\t\t\t\t}));\n\t});\nvar elm$http$Http$Header = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Header', a: a, b: b};\n\t});\nvar elm$http$Http$header = elm$http$Http$Header;\nvar elm$http$Http$Request = function (a) {\n\treturn {$: 'Request', a: a};\n};\nvar elm$core$Task$succeed = _Scheduler_succeed;\nvar elm$http$Http$State = F2(\n\tfunction (reqs, subs) {\n\t\treturn {reqs: reqs, subs: subs};\n\t});\nvar elm$http$Http$init = elm$core$Task$succeed(\n\tA2(elm$http$Http$State, elm$core$Dict$empty, _List_Nil));\nvar elm$core$Task$andThen = _Scheduler_andThen;\nvar elm$core$Process$kill = _Scheduler_kill;\nvar elm$core$Process$spawn = _Scheduler_spawn;\nvar elm$http$Http$updateReqs = F3(\n\tfunction (router, cmds, reqs) {\n\t\tupdateReqs:\n\t\twhile (true) {\n\t\t\tif (!cmds.b) {\n\t\t\t\treturn elm$core$Task$succeed(reqs);\n\t\t\t} else {\n\t\t\t\tvar cmd = cmds.a;\n\t\t\t\tvar otherCmds = cmds.b;\n\t\t\t\tif (cmd.$ === 'Cancel') {\n\t\t\t\t\tvar tracker = cmd.a;\n\t\t\t\t\tvar _n2 = A2(elm$core$Dict$get, tracker, reqs);\n\t\t\t\t\tif (_n2.$ === 'Nothing') {\n\t\t\t\t\t\tvar $temp$router = router,\n\t\t\t\t\t\t\t$temp$cmds = otherCmds,\n\t\t\t\t\t\t\t$temp$reqs = reqs;\n\t\t\t\t\t\trouter = $temp$router;\n\t\t\t\t\t\tcmds = $temp$cmds;\n\t\t\t\t\t\treqs = $temp$reqs;\n\t\t\t\t\t\tcontinue updateReqs;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar pid = _n2.a;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$core$Task$andThen,\n\t\t\t\t\t\t\tfunction (_n3) {\n\t\t\t\t\t\t\t\treturn A3(\n\t\t\t\t\t\t\t\t\telm$http$Http$updateReqs,\n\t\t\t\t\t\t\t\t\trouter,\n\t\t\t\t\t\t\t\t\totherCmds,\n\t\t\t\t\t\t\t\t\tA2(elm$core$Dict$remove, tracker, reqs));\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\telm$core$Process$kill(pid));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar req = cmd.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$Task$andThen,\n\t\t\t\t\t\tfunction (pid) {\n\t\t\t\t\t\t\tvar _n4 = req.tracker;\n\t\t\t\t\t\t\tif (_n4.$ === 'Nothing') {\n\t\t\t\t\t\t\t\treturn A3(elm$http$Http$updateReqs, router, otherCmds, reqs);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar tracker = _n4.a;\n\t\t\t\t\t\t\t\treturn A3(\n\t\t\t\t\t\t\t\t\telm$http$Http$updateReqs,\n\t\t\t\t\t\t\t\t\trouter,\n\t\t\t\t\t\t\t\t\totherCmds,\n\t\t\t\t\t\t\t\t\tA3(elm$core$Dict$insert, tracker, pid, reqs));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\telm$core$Process$spawn(\n\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t_Http_toTask,\n\t\t\t\t\t\t\t\trouter,\n\t\t\t\t\t\t\t\telm$core$Platform$sendToApp(router),\n\t\t\t\t\t\t\t\treq)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$http$Http$onEffects = F4(\n\tfunction (router, cmds, subs, state) {\n\t\treturn A2(\n\t\t\telm$core$Task$andThen,\n\t\t\tfunction (reqs) {\n\t\t\t\treturn elm$core$Task$succeed(\n\t\t\t\t\tA2(elm$http$Http$State, reqs, subs));\n\t\t\t},\n\t\t\tA3(elm$http$Http$updateReqs, router, cmds, state.reqs));\n\t});\nvar elm$core$List$maybeCons = F3(\n\tfunction (f, mx, xs) {\n\t\tvar _n0 = f(mx);\n\t\tif (_n0.$ === 'Just') {\n\t\t\tvar x = _n0.a;\n\t\t\treturn A2(elm$core$List$cons, x, xs);\n\t\t} else {\n\t\t\treturn xs;\n\t\t}\n\t});\nvar elm$core$List$filterMap = F2(\n\tfunction (f, xs) {\n\t\treturn A3(\n\t\t\telm$core$List$foldr,\n\t\t\telm$core$List$maybeCons(f),\n\t\t\t_List_Nil,\n\t\t\txs);\n\t});\nvar elm$core$Task$map2 = F3(\n\tfunction (func, taskA, taskB) {\n\t\treturn A2(\n\t\t\telm$core$Task$andThen,\n\t\t\tfunction (a) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Task$andThen,\n\t\t\t\t\tfunction (b) {\n\t\t\t\t\t\treturn elm$core$Task$succeed(\n\t\t\t\t\t\t\tA2(func, a, b));\n\t\t\t\t\t},\n\t\t\t\t\ttaskB);\n\t\t\t},\n\t\t\ttaskA);\n\t});\nvar elm$core$Task$sequence = function (tasks) {\n\treturn A3(\n\t\telm$core$List$foldr,\n\t\telm$core$Task$map2(elm$core$List$cons),\n\t\telm$core$Task$succeed(_List_Nil),\n\t\ttasks);\n};\nvar elm$http$Http$maybeSend = F4(\n\tfunction (router, desiredTracker, progress, _n0) {\n\t\tvar actualTracker = _n0.a;\n\t\tvar toMsg = _n0.b;\n\t\treturn _Utils_eq(desiredTracker, actualTracker) ? elm$core$Maybe$Just(\n\t\t\tA2(\n\t\t\t\telm$core$Platform$sendToApp,\n\t\t\t\trouter,\n\t\t\t\ttoMsg(progress))) : elm$core$Maybe$Nothing;\n\t});\nvar elm$http$Http$onSelfMsg = F3(\n\tfunction (router, _n0, state) {\n\t\tvar tracker = _n0.a;\n\t\tvar progress = _n0.b;\n\t\treturn A2(\n\t\t\telm$core$Task$andThen,\n\t\t\tfunction (_n1) {\n\t\t\t\treturn elm$core$Task$succeed(state);\n\t\t\t},\n\t\t\telm$core$Task$sequence(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$filterMap,\n\t\t\t\t\tA3(elm$http$Http$maybeSend, router, tracker, progress),\n\t\t\t\t\tstate.subs)));\n\t});\nvar elm$http$Http$Cancel = function (a) {\n\treturn {$: 'Cancel', a: a};\n};\nvar elm$http$Http$cmdMap = F2(\n\tfunction (func, cmd) {\n\t\tif (cmd.$ === 'Cancel') {\n\t\t\tvar tracker = cmd.a;\n\t\t\treturn elm$http$Http$Cancel(tracker);\n\t\t} else {\n\t\t\tvar r = cmd.a;\n\t\t\treturn elm$http$Http$Request(\n\t\t\t\t{\n\t\t\t\t\tallowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,\n\t\t\t\t\tbody: r.body,\n\t\t\t\t\texpect: A2(_Http_mapExpect, func, r.expect),\n\t\t\t\t\theaders: r.headers,\n\t\t\t\t\tmethod: r.method,\n\t\t\t\t\ttimeout: r.timeout,\n\t\t\t\t\ttracker: r.tracker,\n\t\t\t\t\turl: r.url\n\t\t\t\t});\n\t\t}\n\t});\nvar elm$http$Http$MySub = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'MySub', a: a, b: b};\n\t});\nvar elm$http$Http$subMap = F2(\n\tfunction (func, _n0) {\n\t\tvar tracker = _n0.a;\n\t\tvar toMsg = _n0.b;\n\t\treturn A2(\n\t\t\telm$http$Http$MySub,\n\t\t\ttracker,\n\t\t\tA2(elm$core$Basics$composeR, toMsg, func));\n\t});\n_Platform_effectManagers['Http'] = _Platform_createManager(elm$http$Http$init, elm$http$Http$onEffects, elm$http$Http$onSelfMsg, elm$http$Http$cmdMap, elm$http$Http$subMap);\nvar elm$http$Http$command = _Platform_leaf('Http');\nvar elm$http$Http$subscription = _Platform_leaf('Http');\nvar elm$http$Http$request = function (r) {\n\treturn elm$http$Http$command(\n\t\telm$http$Http$Request(\n\t\t\t{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));\n};\nvar author$project$Main$loadUser = function (token) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$emptyBody,\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Main$Response, author$project$User$decodeUser),\n\t\t\theaders: _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$http$Http$header, 'auth', token)\n\t\t\t\t]),\n\t\t\tmethod: 'GET',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/account/auth'\n\t\t});\n};\nvar author$project$Main$Gallery = function (a) {\n\treturn {$: 'Gallery', a: a};\n};\nvar author$project$Main$GalleryMsg = function (a) {\n\treturn {$: 'GalleryMsg', a: a};\n};\nvar elm$core$Platform$Cmd$map = _Platform_map;\nvar author$project$Main$stepGallery = F2(\n\tfunction (model, _n0) {\n\t\tvar gallery = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Gallery(gallery)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$GalleryMsg, cmd));\n\t});\nvar author$project$Main$Home = function (a) {\n\treturn {$: 'Home', a: a};\n};\nvar author$project$Main$HomeMsg = function (a) {\n\treturn {$: 'HomeMsg', a: a};\n};\nvar author$project$Main$stepHome = F2(\n\tfunction (model, _n0) {\n\t\tvar home = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Home(home)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$HomeMsg, cmd));\n\t});\nvar author$project$Main$Post = function (a) {\n\treturn {$: 'Post', a: a};\n};\nvar author$project$Main$PostMsg = function (a) {\n\treturn {$: 'PostMsg', a: a};\n};\nvar author$project$Main$stepPost = F2(\n\tfunction (model, _n0) {\n\t\tvar post = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Post(post)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$PostMsg, cmd));\n\t});\nvar author$project$Main$Profile = function (a) {\n\treturn {$: 'Profile', a: a};\n};\nvar author$project$Main$ProfileMsg = function (a) {\n\treturn {$: 'ProfileMsg', a: a};\n};\nvar author$project$Main$stepProfile = F2(\n\tfunction (model, _n0) {\n\t\tvar profile = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Profile(profile)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$ProfileMsg, cmd));\n\t});\nvar author$project$Main$Results = function (a) {\n\treturn {$: 'Results', a: a};\n};\nvar author$project$Main$ResultsMsg = function (a) {\n\treturn {$: 'ResultsMsg', a: a};\n};\nvar author$project$Main$stepResults = F2(\n\tfunction (model, _n0) {\n\t\tvar results = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Results(results)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$ResultsMsg, cmd));\n\t});\nvar author$project$Main$SignIn = function (a) {\n\treturn {$: 'SignIn', a: a};\n};\nvar author$project$Main$SignInMsg = function (a) {\n\treturn {$: 'SignInMsg', a: a};\n};\nvar author$project$Session$Session = function (user) {\n\treturn {user: user};\n};\nvar author$project$Session$init = author$project$Session$Session(elm$core$Maybe$Nothing);\nvar author$project$Session$update = F2(\n\tfunction (msg, model) {\n\t\tif (msg.$ === 'NoUpdate') {\n\t\t\treturn model;\n\t\t} else {\n\t\t\tvar usr = msg.a;\n\t\t\treturn _Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tuser: elm$core$Maybe$Just(usr)\n\t\t\t\t});\n\t\t}\n\t});\nvar author$project$Main$stepSignIn = F2(\n\tfunction (model, _n0) {\n\t\tvar signin = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\tvar session = _n0.c;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$SignIn(signin),\n\t\t\t\t\tstate: author$project$Main$Ready(\n\t\t\t\t\t\tA2(author$project$Session$update, session, author$project$Session$init))\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$SignInMsg, cmd));\n\t});\nvar author$project$Main$SignUp = function (a) {\n\treturn {$: 'SignUp', a: a};\n};\nvar author$project$Main$SignUpMsg = function (a) {\n\treturn {$: 'SignUpMsg', a: a};\n};\nvar author$project$Main$stepSignUp = F2(\n\tfunction (model, _n0) {\n\t\tvar signup = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$SignUp(signup)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$SignUpMsg, cmd));\n\t});\nvar author$project$Main$Tags = function (a) {\n\treturn {$: 'Tags', a: a};\n};\nvar author$project$Main$TagsMsg = function (a) {\n\treturn {$: 'TagsMsg', a: a};\n};\nvar author$project$Main$stepTags = F2(\n\tfunction (model, _n0) {\n\t\tvar tags = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Tags(tags)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$TagsMsg, cmd));\n\t});\nvar author$project$Main$Upload = function (a) {\n\treturn {$: 'Upload', a: a};\n};\nvar author$project$Main$UploadMsg = function (a) {\n\treturn {$: 'UploadMsg', a: a};\n};\nvar author$project$Main$stepUpload = F2(\n\tfunction (model, _n0) {\n\t\tvar upload = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Upload(upload)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$UploadMsg, cmd));\n\t});\nvar author$project$Main$Users = function (a) {\n\treturn {$: 'Users', a: a};\n};\nvar author$project$Main$UsersMsg = function (a) {\n\treturn {$: 'UsersMsg', a: a};\n};\nvar author$project$Main$stepUsers = F2(\n\tfunction (model, _n0) {\n\t\tvar users = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tpage: author$project$Main$Users(users)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$UsersMsg, cmd));\n\t});\nvar author$project$Pages$Gallery$Loading = {$: 'Loading'};\nvar author$project$Pages$Gallery$Model = F4(\n\tfunction (status, page, key, sort) {\n\t\treturn {key: key, page: page, sort: sort, status: status};\n\t});\nvar author$project$Image$PreviewContainer = F2(\n\tfunction (total, images) {\n\t\treturn {images: images, total: total};\n\t});\nvar author$project$Image$Preview = F8(\n\tfunction (id, title, url, author, points, views, favorites, uploaded) {\n\t\treturn {author: author, favorites: favorites, id: id, points: points, title: title, uploaded: uploaded, url: url, views: views};\n\t});\nvar elm$json$Json$Decode$int = _Json_decodeInt;\nvar author$project$Image$decodePreview = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'uploaded',\n\telm_community$json_extra$Json$Decode$Extra$datetime,\n\tA4(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t'favorites',\n\t\telm$json$Json$Decode$int,\n\t\t0,\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'views',\n\t\t\telm$json$Json$Decode$int,\n\t\t\tA3(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t'points',\n\t\t\t\telm$json$Json$Decode$int,\n\t\t\t\tA4(\n\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t'author',\n\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t'Anonymous',\n\t\t\t\t\tA3(\n\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t'file',\n\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t'title',\n\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t\t'id',\n\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\telm$json$Json$Decode$succeed(author$project$Image$Preview)))))))));\nvar elm$json$Json$Decode$list = _Json_decodeList;\nvar author$project$Image$decodePreviewContainer = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'images',\n\telm$json$Json$Decode$list(author$project$Image$decodePreview),\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'total',\n\t\telm$json$Json$Decode$int,\n\t\telm$json$Json$Decode$succeed(author$project$Image$PreviewContainer)));\nvar author$project$Pages$Gallery$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Gallery$getSort = function (sort) {\n\tswitch (sort) {\n\t\tcase 'popular':\n\t\t\treturn 'views';\n\t\tcase 'rating':\n\t\t\treturn 'points';\n\t\tdefault:\n\t\t\treturn 'uploaded';\n\t}\n};\nvar elm$http$Http$get = function (r) {\n\treturn elm$http$Http$request(\n\t\t{body: elm$http$Http$emptyBody, expect: r.expect, headers: _List_Nil, method: 'GET', timeout: elm$core$Maybe$Nothing, tracker: elm$core$Maybe$Nothing, url: r.url});\n};\nvar author$project$Pages$Gallery$get = F2(\n\tfunction (sort, page) {\n\t\treturn elm$http$Http$get(\n\t\t\t{\n\t\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Gallery$Response, author$project$Image$decodePreviewContainer),\n\t\t\t\turl: author$project$Server$url + ('/images/get' + ('?page=' + (elm$core$String$fromInt(page) + ('&sort=' + (author$project$Pages$Gallery$getSort(sort) + ('&order=' + elm$core$String$fromInt(-1)))))))\n\t\t\t});\n\t});\nvar author$project$Pages$Gallery$init = F4(\n\tfunction (user, key, page, sort) {\n\t\tif (page.$ === 'Just') {\n\t\t\tvar _int = page.a;\n\t\t\tif (sort.$ === 'Just') {\n\t\t\t\tvar string = sort.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA4(author$project$Pages$Gallery$Model, author$project$Pages$Gallery$Loading, _int, key, string),\n\t\t\t\t\tA2(author$project$Pages$Gallery$get, string, _int));\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA4(author$project$Pages$Gallery$Model, author$project$Pages$Gallery$Loading, _int, key, 'newest'),\n\t\t\t\t\tA2(author$project$Pages$Gallery$get, 'newest', _int));\n\t\t\t}\n\t\t} else {\n\t\t\treturn _Utils_Tuple2(\n\t\t\t\tA4(author$project$Pages$Gallery$Model, author$project$Pages$Gallery$Loading, 1, key, 'newest'),\n\t\t\t\tA2(author$project$Pages$Gallery$get, 'newest', 1));\n\t\t}\n\t});\nvar author$project$Components$Carousel$Right = {$: 'Right'};\nvar author$project$Components$Carousel$Start = {$: 'Start'};\nvar author$project$Components$Carousel$init = function (imgs) {\n\treturn {counter: author$project$Components$Carousel$Start, current: 0, dir: author$project$Components$Carousel$Right, source: imgs};\n};\nvar author$project$Pages$Home$Loading = {$: 'Loading'};\nvar author$project$Pages$Home$LoadingTags = {$: 'LoadingTags'};\nvar author$project$Pages$Home$Model = F5(\n\tfunction (key, carousel, user, status, tagStatus) {\n\t\treturn {carousel: carousel, key: key, status: status, tagStatus: tagStatus, user: user};\n\t});\nvar author$project$Pages$Home$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Home$getLatest = elm$http$Http$get(\n\t{\n\t\texpect: A2(\n\t\t\telm$http$Http$expectJson,\n\t\t\tauthor$project$Pages$Home$Response,\n\t\t\telm$json$Json$Decode$list(author$project$Image$decodePreview)),\n\t\turl: author$project$Server$url + '/posts/latest'\n\t});\nvar author$project$Pages$Home$TagsResponse = function (a) {\n\treturn {$: 'TagsResponse', a: a};\n};\nvar author$project$Pages$Home$getTrending = elm$http$Http$get(\n\t{\n\t\texpect: A2(\n\t\t\telm$http$Http$expectJson,\n\t\t\tauthor$project$Pages$Home$TagsResponse,\n\t\t\telm$json$Json$Decode$list(elm$json$Json$Decode$string)),\n\t\turl: author$project$Server$url + '/tags/trending'\n\t});\nvar elm$core$Array$fromListHelp = F3(\n\tfunction (list, nodeList, nodeListSize) {\n\t\tfromListHelp:\n\t\twhile (true) {\n\t\t\tvar _n0 = A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, list);\n\t\t\tvar jsArray = _n0.a;\n\t\t\tvar remainingItems = _n0.b;\n\t\t\tif (_Utils_cmp(\n\t\t\t\telm$core$Elm$JsArray$length(jsArray),\n\t\t\t\telm$core$Array$branchFactor) < 0) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Array$builderToArray,\n\t\t\t\t\ttrue,\n\t\t\t\t\t{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});\n\t\t\t} else {\n\t\t\t\tvar $temp$list = remainingItems,\n\t\t\t\t\t$temp$nodeList = A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\telm$core$Array$Leaf(jsArray),\n\t\t\t\t\tnodeList),\n\t\t\t\t\t$temp$nodeListSize = nodeListSize + 1;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tnodeList = $temp$nodeList;\n\t\t\t\tnodeListSize = $temp$nodeListSize;\n\t\t\t\tcontinue fromListHelp;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Array$fromList = function (list) {\n\tif (!list.b) {\n\t\treturn elm$core$Array$empty;\n\t} else {\n\t\treturn A3(elm$core$Array$fromListHelp, list, _List_Nil, 0);\n\t}\n};\nvar author$project$Pages$Home$init = F2(\n\tfunction (user, key) {\n\t\treturn _Utils_Tuple2(\n\t\t\tA5(\n\t\t\t\tauthor$project$Pages$Home$Model,\n\t\t\t\tkey,\n\t\t\t\tauthor$project$Components$Carousel$init(\n\t\t\t\t\telm$core$Array$fromList(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t['assets/carousel/1.jpg', 'assets/carousel/2.jpg', 'assets/carousel/3.jpg', 'assets/carousel/4.jpg', 'assets/carousel/5.jpg', 'assets/carousel/6.jpg']))),\n\t\t\t\tuser,\n\t\t\t\tauthor$project$Pages$Home$Loading,\n\t\t\t\tauthor$project$Pages$Home$LoadingTags),\n\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[author$project$Pages$Home$getLatest, author$project$Pages$Home$getTrending])));\n\t});\nvar author$project$Pages$Post$Empty = {$: 'Empty'};\nvar author$project$Pages$Post$Loading = {$: 'Loading'};\nvar author$project$Pages$Post$LoadingComments = {$: 'LoadingComments'};\nvar author$project$Pages$Post$LoadingInfo = {$: 'LoadingInfo'};\nvar author$project$Pages$Post$LoadingStats = {$: 'LoadingStats'};\nvar author$project$Pages$Post$Model = function (key) {\n\treturn function (user) {\n\t\treturn function (status) {\n\t\t\treturn function (comments) {\n\t\t\t\treturn function (comment) {\n\t\t\t\t\treturn function (id) {\n\t\t\t\t\t\treturn function (stats) {\n\t\t\t\t\t\t\treturn function (vote) {\n\t\t\t\t\t\t\t\treturn function (editing) {\n\t\t\t\t\t\t\t\t\treturn function (edit) {\n\t\t\t\t\t\t\t\t\t\treturn function (deleting) {\n\t\t\t\t\t\t\t\t\t\t\treturn function (title) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn {comment: comment, comments: comments, deleting: deleting, edit: edit, editing: editing, id: id, key: key, stats: stats, status: status, title: title, user: user, vote: vote};\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\nvar author$project$Image$Model = F7(\n\tfunction (title, url, id, description, author, tags, uploaded) {\n\t\treturn {author: author, description: description, id: id, tags: tags, title: title, uploaded: uploaded, url: url};\n\t});\nvar author$project$Image$decodeImage = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'uploaded',\n\telm_community$json_extra$Json$Decode$Extra$datetime,\n\tA4(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t'tags',\n\t\telm$json$Json$Decode$list(elm$json$Json$Decode$string),\n\t\t_List_Nil,\n\t\tA4(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t'author',\n\t\t\telm$json$Json$Decode$string,\n\t\t\t'Anonymous',\n\t\t\tA4(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t'description',\n\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t'No description',\n\t\t\t\tA3(\n\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t'id',\n\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\tA3(\n\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t'file',\n\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t'title',\n\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\telm$json$Json$Decode$succeed(author$project$Image$Model))))))));\nvar author$project$Pages$Post$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Post$get = function (id) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$emptyBody,\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Post$Response, author$project$Image$decodeImage),\n\t\t\theaders: _List_Nil,\n\t\t\tmethod: 'GET',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + ('/image' + ('?id=' + id))\n\t\t});\n};\nvar author$project$Pages$Post$InfoResponse = function (a) {\n\treturn {$: 'InfoResponse', a: a};\n};\nvar author$project$Pages$Post$Info = F2(\n\tfunction (vote, favorite) {\n\t\treturn {favorite: favorite, vote: vote};\n\t});\nvar author$project$Pages$Post$decodeUserInfo = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'favorite',\n\telm$json$Json$Decode$bool,\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'vote',\n\t\telm$json$Json$Decode$string,\n\t\telm$json$Json$Decode$succeed(author$project$Pages$Post$Info)));\nvar author$project$Pages$Post$getUserInfo = F2(\n\tfunction (id, mbyUser) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$emptyBody,\n\t\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Post$InfoResponse, author$project$Pages$Post$decodeUserInfo),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tif (mbyUser.$ === 'Just') {\n\t\t\t\t\t\t\tvar user = mbyUser.a;\n\t\t\t\t\t\t\treturn A2(elm$http$Http$header, 'auth', user.token);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn A2(elm$http$Http$header, 'auth', '');\n\t\t\t\t\t\t}\n\t\t\t\t\t}()\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'GET',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + ('/image/info' + ('?id=' + id))\n\t\t\t});\n\t});\nvar author$project$Image$Comment$Model = F7(\n\tfunction (content, username, url, date, points, id, edited) {\n\t\treturn {content: content, date: date, edited: edited, id: id, points: points, url: url, username: username};\n\t});\nvar author$project$Image$Comment$commentDecoder = A4(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t'edited',\n\telm$json$Json$Decode$nullable(elm_community$json_extra$Json$Decode$Extra$datetime),\n\telm$core$Maybe$Nothing,\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'_id',\n\t\telm$json$Json$Decode$string,\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'points',\n\t\t\telm$json$Json$Decode$int,\n\t\t\tA3(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t'uploaded',\n\t\t\t\telm_community$json_extra$Json$Decode$Extra$datetime,\n\t\t\t\tA4(\n\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t'avatar',\n\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t'placeholder',\n\t\t\t\t\tA3(\n\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t'username',\n\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t'content',\n\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\telm$json$Json$Decode$succeed(author$project$Image$Comment$Model))))))));\nvar author$project$Pages$Post$LoadComments = function (a) {\n\treturn {$: 'LoadComments', a: a};\n};\nvar author$project$Pages$Post$loadComments = function (id) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$Post$LoadComments,\n\t\t\t\telm$json$Json$Decode$list(author$project$Image$Comment$commentDecoder)),\n\t\t\turl: author$project$Server$url + ('/comment/get' + ('?id=' + id))\n\t\t});\n};\nvar elm$browser$Browser$External = function (a) {\n\treturn {$: 'External', a: a};\n};\nvar elm$browser$Browser$Internal = function (a) {\n\treturn {$: 'Internal', a: a};\n};\nvar elm$browser$Browser$Dom$NotFound = function (a) {\n\treturn {$: 'NotFound', a: a};\n};\nvar elm$core$Basics$never = function (_n0) {\n\tnever:\n\twhile (true) {\n\t\tvar nvr = _n0.a;\n\t\tvar $temp$_n0 = nvr;\n\t\t_n0 = $temp$_n0;\n\t\tcontinue never;\n\t}\n};\nvar elm$core$Task$Perform = function (a) {\n\treturn {$: 'Perform', a: a};\n};\nvar elm$core$Task$init = elm$core$Task$succeed(_Utils_Tuple0);\nvar elm$core$Task$map = F2(\n\tfunction (func, taskA) {\n\t\treturn A2(\n\t\t\telm$core$Task$andThen,\n\t\t\tfunction (a) {\n\t\t\t\treturn elm$core$Task$succeed(\n\t\t\t\t\tfunc(a));\n\t\t\t},\n\t\t\ttaskA);\n\t});\nvar elm$core$Task$spawnCmd = F2(\n\tfunction (router, _n0) {\n\t\tvar task = _n0.a;\n\t\treturn _Scheduler_spawn(\n\t\t\tA2(\n\t\t\t\telm$core$Task$andThen,\n\t\t\t\telm$core$Platform$sendToApp(router),\n\t\t\t\ttask));\n\t});\nvar elm$core$Task$onEffects = F3(\n\tfunction (router, commands, state) {\n\t\treturn A2(\n\t\t\telm$core$Task$map,\n\t\t\tfunction (_n0) {\n\t\t\t\treturn _Utils_Tuple0;\n\t\t\t},\n\t\t\telm$core$Task$sequence(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\telm$core$Task$spawnCmd(router),\n\t\t\t\t\tcommands)));\n\t});\nvar elm$core$Task$onSelfMsg = F3(\n\tfunction (_n0, _n1, _n2) {\n\t\treturn elm$core$Task$succeed(_Utils_Tuple0);\n\t});\nvar elm$core$Task$cmdMap = F2(\n\tfunction (tagger, _n0) {\n\t\tvar task = _n0.a;\n\t\treturn elm$core$Task$Perform(\n\t\t\tA2(elm$core$Task$map, tagger, task));\n\t});\n_Platform_effectManagers['Task'] = _Platform_createManager(elm$core$Task$init, elm$core$Task$onEffects, elm$core$Task$onSelfMsg, elm$core$Task$cmdMap);\nvar elm$core$Task$command = _Platform_leaf('Task');\nvar elm$core$Task$perform = F2(\n\tfunction (toMessage, task) {\n\t\treturn elm$core$Task$command(\n\t\t\telm$core$Task$Perform(\n\t\t\t\tA2(elm$core$Task$map, toMessage, task)));\n\t});\nvar elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {\n\tswitch (handler.$) {\n\t\tcase 'Normal':\n\t\t\treturn 0;\n\t\tcase 'MayStopPropagation':\n\t\t\treturn 1;\n\t\tcase 'MayPreventDefault':\n\t\t\treturn 2;\n\t\tdefault:\n\t\t\treturn 3;\n\t}\n};\nvar elm$core$String$dropLeft = F2(\n\tfunction (n, string) {\n\t\treturn (n < 1) ? string : A3(\n\t\t\telm$core$String$slice,\n\t\t\tn,\n\t\t\telm$core$String$length(string),\n\t\t\tstring);\n\t});\nvar elm$core$String$startsWith = _String_startsWith;\nvar elm$url$Url$Http = {$: 'Http'};\nvar elm$url$Url$Https = {$: 'Https'};\nvar elm$core$String$indexes = _String_indexes;\nvar elm$core$String$left = F2(\n\tfunction (n, string) {\n\t\treturn (n < 1) ? '' : A3(elm$core$String$slice, 0, n, string);\n\t});\nvar elm$core$String$contains = _String_contains;\nvar elm$url$Url$Url = F6(\n\tfunction (protocol, host, port_, path, query, fragment) {\n\t\treturn {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};\n\t});\nvar elm$url$Url$chompBeforePath = F5(\n\tfunction (protocol, path, params, frag, str) {\n\t\tif (elm$core$String$isEmpty(str) || A2(elm$core$String$contains, '@', str)) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar _n0 = A2(elm$core$String$indexes, ':', str);\n\t\t\tif (!_n0.b) {\n\t\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t\tA6(elm$url$Url$Url, protocol, str, elm$core$Maybe$Nothing, path, params, frag));\n\t\t\t} else {\n\t\t\t\tif (!_n0.b.b) {\n\t\t\t\t\tvar i = _n0.a;\n\t\t\t\t\tvar _n1 = elm$core$String$toInt(\n\t\t\t\t\t\tA2(elm$core$String$dropLeft, i + 1, str));\n\t\t\t\t\tif (_n1.$ === 'Nothing') {\n\t\t\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar port_ = _n1;\n\t\t\t\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t\t\t\tA6(\n\t\t\t\t\t\t\t\telm$url$Url$Url,\n\t\t\t\t\t\t\t\tprotocol,\n\t\t\t\t\t\t\t\tA2(elm$core$String$left, i, str),\n\t\t\t\t\t\t\t\tport_,\n\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\t\tfrag));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$url$Url$chompBeforeQuery = F4(\n\tfunction (protocol, params, frag, str) {\n\t\tif (elm$core$String$isEmpty(str)) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar _n0 = A2(elm$core$String$indexes, '/', str);\n\t\t\tif (!_n0.b) {\n\t\t\t\treturn A5(elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);\n\t\t\t} else {\n\t\t\t\tvar i = _n0.a;\n\t\t\t\treturn A5(\n\t\t\t\t\telm$url$Url$chompBeforePath,\n\t\t\t\t\tprotocol,\n\t\t\t\t\tA2(elm$core$String$dropLeft, i, str),\n\t\t\t\t\tparams,\n\t\t\t\t\tfrag,\n\t\t\t\t\tA2(elm$core$String$left, i, str));\n\t\t\t}\n\t\t}\n\t});\nvar elm$url$Url$chompBeforeFragment = F3(\n\tfunction (protocol, frag, str) {\n\t\tif (elm$core$String$isEmpty(str)) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar _n0 = A2(elm$core$String$indexes, '?', str);\n\t\t\tif (!_n0.b) {\n\t\t\t\treturn A4(elm$url$Url$chompBeforeQuery, protocol, elm$core$Maybe$Nothing, frag, str);\n\t\t\t} else {\n\t\t\t\tvar i = _n0.a;\n\t\t\t\treturn A4(\n\t\t\t\t\telm$url$Url$chompBeforeQuery,\n\t\t\t\t\tprotocol,\n\t\t\t\t\telm$core$Maybe$Just(\n\t\t\t\t\t\tA2(elm$core$String$dropLeft, i + 1, str)),\n\t\t\t\t\tfrag,\n\t\t\t\t\tA2(elm$core$String$left, i, str));\n\t\t\t}\n\t\t}\n\t});\nvar elm$url$Url$chompAfterProtocol = F2(\n\tfunction (protocol, str) {\n\t\tif (elm$core$String$isEmpty(str)) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar _n0 = A2(elm$core$String$indexes, '#', str);\n\t\t\tif (!_n0.b) {\n\t\t\t\treturn A3(elm$url$Url$chompBeforeFragment, protocol, elm$core$Maybe$Nothing, str);\n\t\t\t} else {\n\t\t\t\tvar i = _n0.a;\n\t\t\t\treturn A3(\n\t\t\t\t\telm$url$Url$chompBeforeFragment,\n\t\t\t\t\tprotocol,\n\t\t\t\t\telm$core$Maybe$Just(\n\t\t\t\t\t\tA2(elm$core$String$dropLeft, i + 1, str)),\n\t\t\t\t\tA2(elm$core$String$left, i, str));\n\t\t\t}\n\t\t}\n\t});\nvar elm$url$Url$fromString = function (str) {\n\treturn A2(elm$core$String$startsWith, 'http://', str) ? A2(\n\t\telm$url$Url$chompAfterProtocol,\n\t\telm$url$Url$Http,\n\t\tA2(elm$core$String$dropLeft, 7, str)) : (A2(elm$core$String$startsWith, 'https://', str) ? A2(\n\t\telm$url$Url$chompAfterProtocol,\n\t\telm$url$Url$Https,\n\t\tA2(elm$core$String$dropLeft, 8, str)) : elm$core$Maybe$Nothing);\n};\nvar elm$browser$Browser$Dom$setViewport = _Browser_setViewport;\nvar author$project$Pages$Post$init = F3(\n\tfunction (key, user, fragment) {\n\t\treturn _Utils_Tuple2(\n\t\t\tauthor$project$Pages$Post$Model(key)(user)(author$project$Pages$Post$Loading)(author$project$Pages$Post$LoadingComments)('')(fragment)(author$project$Pages$Post$LoadingStats)(author$project$Pages$Post$LoadingInfo)(elm$core$Maybe$Nothing)('')(elm$core$Maybe$Nothing)('Loading'),\n\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Pages$Post$get(fragment),\n\t\t\t\t\t\tA2(author$project$Pages$Post$getUserInfo, fragment, user),\n\t\t\t\t\t\tauthor$project$Pages$Post$loadComments(fragment),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\tfunction (_n0) {\n\t\t\t\t\t\t\treturn author$project$Pages$Post$Empty;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0))\n\t\t\t\t\t])));\n\t});\nvar author$project$Pages$Profile$Information = {$: 'Information'};\nvar author$project$Pages$Profile$Loading = {$: 'Loading'};\nvar author$project$Pages$Profile$LoadingPosts = {$: 'LoadingPosts'};\nvar author$project$Pages$Profile$Model = F6(\n\tfunction (user, key, tab, fragment, status, postsStatus) {\n\t\treturn {fragment: fragment, key: key, postsStatus: postsStatus, status: status, tab: tab, user: user};\n\t});\nvar author$project$Pages$Profile$Success = {$: 'Success'};\nvar author$project$Pages$Profile$PostsResponse = function (a) {\n\treturn {$: 'PostsResponse', a: a};\n};\nvar author$project$Pages$Profile$getPosts = F2(\n\tfunction (username, limit) {\n\t\treturn elm$http$Http$get(\n\t\t\t{\n\t\t\t\texpect: A2(\n\t\t\t\t\telm$http$Http$expectJson,\n\t\t\t\t\tauthor$project$Pages$Profile$PostsResponse,\n\t\t\t\t\telm$json$Json$Decode$list(author$project$Image$decodePreview)),\n\t\t\t\turl: author$project$Server$url + ('/account/posts' + ('?username=' + (username + ('&limit=' + elm$core$String$fromInt(limit)))))\n\t\t\t});\n\t});\nvar author$project$Pages$Profile$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded = A2(elm$core$Basics$composeR, elm$json$Json$Decode$succeed, NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom);\nvar author$project$User$decodeUserNotLoggedIn = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'registeredAt',\n\telm_community$json_extra$Json$Decode$Extra$datetime,\n\tA2(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,\n\t\t'Hidden',\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'github',\n\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\tA3(\n\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t'twitter',\n\t\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\t\tA3(\n\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t'facebook',\n\t\t\t\t\telm$json$Json$Decode$nullable(elm$json$Json$Decode$string),\n\t\t\t\t\tA3(\n\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t'verif',\n\t\t\t\t\t\telm$json$Json$Decode$bool,\n\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t\t\t'bio',\n\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t'No description',\n\t\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t\t\t\t\t\t\t'profilePic',\n\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\tauthor$project$Server$url + '/img/profile/default.jpg',\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$hardcoded,\n\t\t\t\t\t\t\t\t\t'Hidden',\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t\t\t\t\t\t\t\t'username',\n\t\t\t\t\t\t\t\t\t\telm$json$Json$Decode$string,\n\t\t\t\t\t\t\t\t\t\telm$json$Json$Decode$succeed(author$project$User$Model)))))))))));\nvar author$project$Pages$Profile$loadUser = function (username) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Profile$Response, author$project$User$decodeUserNotLoggedIn),\n\t\t\turl: author$project$Server$url + ('/account/user' + ('?username=' + username))\n\t\t});\n};\nvar author$project$Pages$Profile$postCount = 5;\nvar author$project$Pages$Profile$init = F3(\n\tfunction (key, user, fragment) {\n\t\treturn _Utils_eq(fragment, user.username) ? _Utils_Tuple2(\n\t\t\tA6(author$project$Pages$Profile$Model, user, key, author$project$Pages$Profile$Information, fragment, author$project$Pages$Profile$Success, author$project$Pages$Profile$LoadingPosts),\n\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(author$project$Pages$Profile$getPosts, fragment, author$project$Pages$Profile$postCount)\n\t\t\t\t\t]))) : _Utils_Tuple2(\n\t\t\tA6(author$project$Pages$Profile$Model, user, key, author$project$Pages$Profile$Information, fragment, author$project$Pages$Profile$Loading, author$project$Pages$Profile$LoadingPosts),\n\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Pages$Profile$loadUser(fragment),\n\t\t\t\t\t\tA2(author$project$Pages$Profile$getPosts, fragment, author$project$Pages$Profile$postCount)\n\t\t\t\t\t])));\n\t});\nvar author$project$Pages$Results$Empty = {$: 'Empty'};\nvar author$project$Pages$Results$LoadingImage = {$: 'LoadingImage'};\nvar author$project$Pages$Results$LoadingUser = {$: 'LoadingUser'};\nvar author$project$Pages$Results$Model = F3(\n\tfunction (query, imageStatus, userStatus) {\n\t\treturn {imageStatus: imageStatus, query: query, userStatus: userStatus};\n\t});\nvar author$project$Pages$Results$ImageResponse = function (a) {\n\treturn {$: 'ImageResponse', a: a};\n};\nvar author$project$Pages$Results$getPosts = function (q) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Results$ImageResponse, author$project$Image$decodePreviewContainer),\n\t\t\turl: author$project$Server$url + ('/images/search' + ('?q=' + q))\n\t\t});\n};\nvar author$project$Pages$Results$UsersResponse = function (a) {\n\treturn {$: 'UsersResponse', a: a};\n};\nvar author$project$User$PreviewContainer = F2(\n\tfunction (total, users) {\n\t\treturn {total: total, users: users};\n\t});\nvar author$project$User$Preview = F3(\n\tfunction (username, avatar, verif) {\n\t\treturn {avatar: avatar, username: username, verif: verif};\n\t});\nvar author$project$User$decodePreview = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'verif',\n\telm$json$Json$Decode$bool,\n\tA4(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t\t'profilePic',\n\t\telm$json$Json$Decode$string,\n\t\tauthor$project$Server$url + '/img/profile/default.jpg',\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'username',\n\t\t\telm$json$Json$Decode$string,\n\t\t\telm$json$Json$Decode$succeed(author$project$User$Preview))));\nvar author$project$User$decodePreviewContainer = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'users',\n\telm$json$Json$Decode$list(author$project$User$decodePreview),\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'total',\n\t\telm$json$Json$Decode$int,\n\t\telm$json$Json$Decode$succeed(author$project$User$PreviewContainer)));\nvar author$project$Pages$Results$getUsers = function (q) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Results$UsersResponse, author$project$User$decodePreviewContainer),\n\t\t\turl: author$project$Server$url + ('/accounts/search' + ('?q=' + q))\n\t\t});\n};\nvar author$project$Pages$Results$init = function (fragment) {\n\tif (fragment.$ === 'Just') {\n\t\tvar q = fragment.a;\n\t\treturn _Utils_Tuple2(\n\t\t\tA3(author$project$Pages$Results$Model, q, author$project$Pages$Results$LoadingImage, author$project$Pages$Results$LoadingUser),\n\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\treturn author$project$Pages$Results$Empty;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)),\n\t\t\t\t\t\tauthor$project$Pages$Results$getUsers(q),\n\t\t\t\t\t\tauthor$project$Pages$Results$getPosts(q)\n\t\t\t\t\t])));\n\t} else {\n\t\treturn _Utils_Tuple2(\n\t\t\tA3(author$project$Pages$Results$Model, '', author$project$Pages$Results$LoadingImage, author$project$Pages$Results$LoadingUser),\n\t\t\telm$core$Platform$Cmd$none);\n\t}\n};\nvar author$project$Pages$SignIn$Empty = {$: 'Empty'};\nvar author$project$Pages$SignIn$Loading = {$: 'Loading'};\nvar author$project$Pages$SignIn$Model = F5(\n\tfunction (name, password, warning, status, key) {\n\t\treturn {key: key, name: name, password: password, status: status, warning: warning};\n\t});\nvar author$project$Session$NoUpdate = {$: 'NoUpdate'};\nvar author$project$Pages$SignIn$init = function (key) {\n\treturn _Utils_Tuple3(\n\t\tA5(author$project$Pages$SignIn$Model, '', '', '', author$project$Pages$SignIn$Loading, key),\n\t\tA2(\n\t\t\telm$core$Task$perform,\n\t\t\tfunction (_n0) {\n\t\t\t\treturn author$project$Pages$SignIn$Empty;\n\t\t\t},\n\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)),\n\t\tauthor$project$Session$NoUpdate);\n};\nvar author$project$Pages$SignUp$Empty = {$: 'Empty'};\nvar author$project$Pages$SignUp$Loading = {$: 'Loading'};\nvar author$project$Pages$SignUp$Model = function (name) {\n\treturn function (password) {\n\t\treturn function (passwordAgain) {\n\t\t\treturn function (email) {\n\t\t\t\treturn function (warning) {\n\t\t\t\t\treturn function (status) {\n\t\t\t\t\t\treturn function (verification) {\n\t\t\t\t\t\t\treturn function (key) {\n\t\t\t\t\t\t\t\treturn function (errorUsername) {\n\t\t\t\t\t\t\t\t\treturn function (errorEmail) {\n\t\t\t\t\t\t\t\t\t\treturn {email: email, errorEmail: errorEmail, errorUsername: errorUsername, key: key, name: name, password: password, passwordAgain: passwordAgain, status: status, verification: verification, warning: warning};\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\nvar author$project$Pages$SignUp$init = function (key) {\n\treturn _Utils_Tuple2(\n\t\tauthor$project$Pages$SignUp$Model('')('')('')('')('')(author$project$Pages$SignUp$Loading)('')(key)(false)(false),\n\t\tA2(\n\t\t\telm$core$Task$perform,\n\t\t\tfunction (_n0) {\n\t\t\t\treturn author$project$Pages$SignUp$Empty;\n\t\t\t},\n\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)));\n};\nvar author$project$Pages$Tags$Empty = {$: 'Empty'};\nvar author$project$Pages$Tags$Loading = {$: 'Loading'};\nvar author$project$Pages$Tags$Model = F3(\n\tfunction (query, status, page) {\n\t\treturn {page: page, query: query, status: status};\n\t});\nvar author$project$Pages$Tags$Request = {$: 'Request'};\nvar author$project$Pages$Tags$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Tags$getImages = F2(\n\tfunction (query, page) {\n\t\treturn elm$http$Http$get(\n\t\t\t{\n\t\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Tags$Response, author$project$Image$decodePreviewContainer),\n\t\t\t\turl: author$project$Server$url + ('/tags' + ('?q=' + (query + ('&page=' + elm$core$String$fromInt(page)))))\n\t\t\t});\n\t});\nvar elm$json$Json$Encode$int = _Json_wrap;\nvar elm$json$Json$Encode$object = function (pairs) {\n\treturn _Json_wrap(\n\t\tA3(\n\t\t\telm$core$List$foldl,\n\t\t\tF2(\n\t\t\t\tfunction (_n0, obj) {\n\t\t\t\t\tvar k = _n0.a;\n\t\t\t\t\tvar v = _n0.b;\n\t\t\t\t\treturn A3(_Json_addField, k, v, obj);\n\t\t\t\t}),\n\t\t\t_Json_emptyObject(_Utils_Tuple0),\n\t\t\tpairs));\n};\nvar elm$json$Json$Encode$string = _Json_wrap;\nvar author$project$Query$encode = F2(\n\tfunction (query, page) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'query',\n\t\t\t\t\telm$json$Json$Encode$string(query)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'page',\n\t\t\t\t\telm$json$Json$Encode$int(page))\n\t\t\t\t]));\n\t});\nvar author$project$Query$saveState = _Platform_outgoingPort('saveState', elm$core$Basics$identity);\nvar author$project$Pages$Tags$init = F2(\n\tfunction (key, query) {\n\t\tif (query.$ === 'Just') {\n\t\t\tvar q = query.a;\n\t\t\treturn _Utils_Tuple2(\n\t\t\t\tA3(author$project$Pages$Tags$Model, q, author$project$Pages$Tags$Loading, 1),\n\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\t\treturn author$project$Pages$Tags$Empty;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)),\n\t\t\t\t\t\t\tA2(author$project$Pages$Tags$getImages, q, 1),\n\t\t\t\t\t\t\tauthor$project$Query$saveState(\n\t\t\t\t\t\t\tA2(author$project$Query$encode, q, 1))\n\t\t\t\t\t\t])));\n\t\t} else {\n\t\t\treturn _Utils_Tuple2(\n\t\t\t\tA3(author$project$Pages$Tags$Model, '', author$project$Pages$Tags$Loading, 1),\n\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\t\tfunction (_n2) {\n\t\t\t\t\t\t\t\treturn author$project$Pages$Tags$Request;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0))\n\t\t\t\t\t\t])));\n\t\t}\n\t});\nvar author$project$Pages$Upload$Empty = {$: 'Empty'};\nvar author$project$Pages$Upload$Loading = {$: 'Loading'};\nvar author$project$Pages$Upload$Model = function (preview) {\n\treturn function (key) {\n\t\treturn function (user) {\n\t\t\treturn function (tag) {\n\t\t\t\treturn function (tags) {\n\t\t\t\t\treturn function (fileSize) {\n\t\t\t\t\t\treturn function (mime) {\n\t\t\t\t\t\t\treturn function (title) {\n\t\t\t\t\t\t\t\treturn function (description) {\n\t\t\t\t\t\t\t\t\treturn function (status) {\n\t\t\t\t\t\t\t\t\t\treturn function (warning) {\n\t\t\t\t\t\t\t\t\t\t\treturn function (fileStatus) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn function (id) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn function (fraction) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn {description: description, fileSize: fileSize, fileStatus: fileStatus, fraction: fraction, id: id, key: key, mime: mime, preview: preview, status: status, tag: tag, tags: tags, title: title, user: user, warning: warning};\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\nvar author$project$Pages$Upload$NotLoaded = {$: 'NotLoaded'};\nvar author$project$Pages$Upload$init = F2(\n\tfunction (user, key) {\n\t\treturn _Utils_Tuple2(\n\t\t\tauthor$project$Pages$Upload$Model('')(key)(user)('')(_List_Nil)(0)('')('')('')(author$project$Pages$Upload$Loading)('')(author$project$Pages$Upload$NotLoaded)('')(0.0),\n\t\t\tA2(\n\t\t\t\telm$core$Task$perform,\n\t\t\t\tfunction (_n0) {\n\t\t\t\t\treturn author$project$Pages$Upload$Empty;\n\t\t\t\t},\n\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)));\n\t});\nvar author$project$Pages$Users$Loading = {$: 'Loading'};\nvar author$project$Pages$Users$Model = F4(\n\tfunction (key, status, query, page) {\n\t\treturn {key: key, page: page, query: query, status: status};\n\t});\nvar author$project$Pages$Users$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Users$getUsers = F2(\n\tfunction (query, page) {\n\t\treturn elm$http$Http$get(\n\t\t\t{\n\t\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Users$Response, author$project$User$decodePreviewContainer),\n\t\t\t\turl: author$project$Server$url + ('/accounts/paginate' + ('?q=' + (query + ('&page=' + elm$core$String$fromInt(page)))))\n\t\t\t});\n\t});\nvar author$project$Pages$Users$init = function (key) {\n\treturn _Utils_Tuple2(\n\t\tA4(author$project$Pages$Users$Model, key, author$project$Pages$Users$Loading, '', 1),\n\t\tA2(author$project$Pages$Users$getUsers, '', 1));\n};\nvar elm$core$Maybe$withDefault = F2(\n\tfunction (_default, maybe) {\n\t\tif (maybe.$ === 'Just') {\n\t\t\tvar value = maybe.a;\n\t\t\treturn value;\n\t\t} else {\n\t\t\treturn _default;\n\t\t}\n\t});\nvar elm$url$Url$Parser$Parser = function (a) {\n\treturn {$: 'Parser', a: a};\n};\nvar elm$url$Url$Parser$State = F5(\n\tfunction (visited, unvisited, params, frag, value) {\n\t\treturn {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};\n\t});\nvar elm$url$Url$Parser$mapState = F2(\n\tfunction (func, _n0) {\n\t\tvar visited = _n0.visited;\n\t\tvar unvisited = _n0.unvisited;\n\t\tvar params = _n0.params;\n\t\tvar frag = _n0.frag;\n\t\tvar value = _n0.value;\n\t\treturn A5(\n\t\t\telm$url$Url$Parser$State,\n\t\t\tvisited,\n\t\t\tunvisited,\n\t\t\tparams,\n\t\t\tfrag,\n\t\t\tfunc(value));\n\t});\nvar elm$url$Url$Parser$map = F2(\n\tfunction (subValue, _n0) {\n\t\tvar parseArg = _n0.a;\n\t\treturn elm$url$Url$Parser$Parser(\n\t\t\tfunction (_n1) {\n\t\t\t\tvar visited = _n1.visited;\n\t\t\t\tvar unvisited = _n1.unvisited;\n\t\t\t\tvar params = _n1.params;\n\t\t\t\tvar frag = _n1.frag;\n\t\t\t\tvar value = _n1.value;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\telm$url$Url$Parser$mapState(value),\n\t\t\t\t\tparseArg(\n\t\t\t\t\t\tA5(elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));\n\t\t\t});\n\t});\nvar elm$core$List$append = F2(\n\tfunction (xs, ys) {\n\t\tif (!ys.b) {\n\t\t\treturn xs;\n\t\t} else {\n\t\t\treturn A3(elm$core$List$foldr, elm$core$List$cons, ys, xs);\n\t\t}\n\t});\nvar elm$core$List$concat = function (lists) {\n\treturn A3(elm$core$List$foldr, elm$core$List$append, _List_Nil, lists);\n};\nvar elm$core$List$concatMap = F2(\n\tfunction (f, list) {\n\t\treturn elm$core$List$concat(\n\t\t\tA2(elm$core$List$map, f, list));\n\t});\nvar elm$url$Url$Parser$oneOf = function (parsers) {\n\treturn elm$url$Url$Parser$Parser(\n\t\tfunction (state) {\n\t\t\treturn A2(\n\t\t\t\telm$core$List$concatMap,\n\t\t\t\tfunction (_n0) {\n\t\t\t\t\tvar parser = _n0.a;\n\t\t\t\t\treturn parser(state);\n\t\t\t\t},\n\t\t\t\tparsers);\n\t\t});\n};\nvar elm$url$Url$Parser$getFirstMatch = function (states) {\n\tgetFirstMatch:\n\twhile (true) {\n\t\tif (!states.b) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar state = states.a;\n\t\t\tvar rest = states.b;\n\t\t\tvar _n1 = state.unvisited;\n\t\t\tif (!_n1.b) {\n\t\t\t\treturn elm$core$Maybe$Just(state.value);\n\t\t\t} else {\n\t\t\t\tif ((_n1.a === '') && (!_n1.b.b)) {\n\t\t\t\t\treturn elm$core$Maybe$Just(state.value);\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$states = rest;\n\t\t\t\t\tstates = $temp$states;\n\t\t\t\t\tcontinue getFirstMatch;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nvar elm$url$Url$Parser$removeFinalEmpty = function (segments) {\n\tif (!segments.b) {\n\t\treturn _List_Nil;\n\t} else {\n\t\tif ((segments.a === '') && (!segments.b.b)) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tvar segment = segments.a;\n\t\t\tvar rest = segments.b;\n\t\t\treturn A2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tsegment,\n\t\t\t\telm$url$Url$Parser$removeFinalEmpty(rest));\n\t\t}\n\t}\n};\nvar elm$url$Url$Parser$preparePath = function (path) {\n\tvar _n0 = A2(elm$core$String$split, '/', path);\n\tif (_n0.b && (_n0.a === '')) {\n\t\tvar segments = _n0.b;\n\t\treturn elm$url$Url$Parser$removeFinalEmpty(segments);\n\t} else {\n\t\tvar segments = _n0;\n\t\treturn elm$url$Url$Parser$removeFinalEmpty(segments);\n\t}\n};\nvar elm$url$Url$percentDecode = _Url_percentDecode;\nvar elm$url$Url$Parser$addToParametersHelp = F2(\n\tfunction (value, maybeList) {\n\t\tif (maybeList.$ === 'Nothing') {\n\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[value]));\n\t\t} else {\n\t\t\tvar list = maybeList.a;\n\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\tA2(elm$core$List$cons, value, list));\n\t\t}\n\t});\nvar elm$url$Url$Parser$addParam = F2(\n\tfunction (segment, dict) {\n\t\tvar _n0 = A2(elm$core$String$split, '=', segment);\n\t\tif ((_n0.b && _n0.b.b) && (!_n0.b.b.b)) {\n\t\t\tvar rawKey = _n0.a;\n\t\t\tvar _n1 = _n0.b;\n\t\t\tvar rawValue = _n1.a;\n\t\t\tvar _n2 = elm$url$Url$percentDecode(rawKey);\n\t\t\tif (_n2.$ === 'Nothing') {\n\t\t\t\treturn dict;\n\t\t\t} else {\n\t\t\t\tvar key = _n2.a;\n\t\t\t\tvar _n3 = elm$url$Url$percentDecode(rawValue);\n\t\t\t\tif (_n3.$ === 'Nothing') {\n\t\t\t\t\treturn dict;\n\t\t\t\t} else {\n\t\t\t\t\tvar value = _n3.a;\n\t\t\t\t\treturn A3(\n\t\t\t\t\t\telm$core$Dict$update,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\telm$url$Url$Parser$addToParametersHelp(value),\n\t\t\t\t\t\tdict);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn dict;\n\t\t}\n\t});\nvar elm$url$Url$Parser$prepareQuery = function (maybeQuery) {\n\tif (maybeQuery.$ === 'Nothing') {\n\t\treturn elm$core$Dict$empty;\n\t} else {\n\t\tvar qry = maybeQuery.a;\n\t\treturn A3(\n\t\t\telm$core$List$foldr,\n\t\t\telm$url$Url$Parser$addParam,\n\t\t\telm$core$Dict$empty,\n\t\t\tA2(elm$core$String$split, '&', qry));\n\t}\n};\nvar elm$url$Url$Parser$parse = F2(\n\tfunction (_n0, url) {\n\t\tvar parser = _n0.a;\n\t\treturn elm$url$Url$Parser$getFirstMatch(\n\t\t\tparser(\n\t\t\t\tA5(\n\t\t\t\t\telm$url$Url$Parser$State,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\telm$url$Url$Parser$preparePath(url.path),\n\t\t\t\t\telm$url$Url$Parser$prepareQuery(url.query),\n\t\t\t\t\turl.fragment,\n\t\t\t\t\telm$core$Basics$identity)));\n\t});\nvar elm$url$Url$Parser$query = function (_n0) {\n\tvar queryParser = _n0.a;\n\treturn elm$url$Url$Parser$Parser(\n\t\tfunction (_n1) {\n\t\t\tvar visited = _n1.visited;\n\t\t\tvar unvisited = _n1.unvisited;\n\t\t\tvar params = _n1.params;\n\t\t\tvar frag = _n1.frag;\n\t\t\tvar value = _n1.value;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA5(\n\t\t\t\t\telm$url$Url$Parser$State,\n\t\t\t\t\tvisited,\n\t\t\t\t\tunvisited,\n\t\t\t\t\tparams,\n\t\t\t\t\tfrag,\n\t\t\t\t\tvalue(\n\t\t\t\t\t\tqueryParser(params)))\n\t\t\t\t]);\n\t\t});\n};\nvar elm$url$Url$Parser$slash = F2(\n\tfunction (_n0, _n1) {\n\t\tvar parseBefore = _n0.a;\n\t\tvar parseAfter = _n1.a;\n\t\treturn elm$url$Url$Parser$Parser(\n\t\t\tfunction (state) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$concatMap,\n\t\t\t\t\tparseAfter,\n\t\t\t\t\tparseBefore(state));\n\t\t\t});\n\t});\nvar elm$url$Url$Parser$questionMark = F2(\n\tfunction (parser, queryParser) {\n\t\treturn A2(\n\t\t\telm$url$Url$Parser$slash,\n\t\t\tparser,\n\t\t\telm$url$Url$Parser$query(queryParser));\n\t});\nvar elm$url$Url$Parser$s = function (str) {\n\treturn elm$url$Url$Parser$Parser(\n\t\tfunction (_n0) {\n\t\t\tvar visited = _n0.visited;\n\t\t\tvar unvisited = _n0.unvisited;\n\t\t\tvar params = _n0.params;\n\t\t\tvar frag = _n0.frag;\n\t\t\tvar value = _n0.value;\n\t\t\tif (!unvisited.b) {\n\t\t\t\treturn _List_Nil;\n\t\t\t} else {\n\t\t\t\tvar next = unvisited.a;\n\t\t\t\tvar rest = unvisited.b;\n\t\t\t\treturn _Utils_eq(next, str) ? _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA5(\n\t\t\t\t\t\telm$url$Url$Parser$State,\n\t\t\t\t\t\tA2(elm$core$List$cons, next, visited),\n\t\t\t\t\t\trest,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\tfrag,\n\t\t\t\t\t\tvalue)\n\t\t\t\t\t]) : _List_Nil;\n\t\t\t}\n\t\t});\n};\nvar elm$url$Url$Parser$custom = F2(\n\tfunction (tipe, stringToSomething) {\n\t\treturn elm$url$Url$Parser$Parser(\n\t\t\tfunction (_n0) {\n\t\t\t\tvar visited = _n0.visited;\n\t\t\t\tvar unvisited = _n0.unvisited;\n\t\t\t\tvar params = _n0.params;\n\t\t\t\tvar frag = _n0.frag;\n\t\t\t\tvar value = _n0.value;\n\t\t\t\tif (!unvisited.b) {\n\t\t\t\t\treturn _List_Nil;\n\t\t\t\t} else {\n\t\t\t\t\tvar next = unvisited.a;\n\t\t\t\t\tvar rest = unvisited.b;\n\t\t\t\t\tvar _n2 = stringToSomething(next);\n\t\t\t\t\tif (_n2.$ === 'Just') {\n\t\t\t\t\t\tvar nextValue = _n2.a;\n\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA5(\n\t\t\t\t\t\t\t\telm$url$Url$Parser$State,\n\t\t\t\t\t\t\t\tA2(elm$core$List$cons, next, visited),\n\t\t\t\t\t\t\t\trest,\n\t\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\t\tfrag,\n\t\t\t\t\t\t\t\tvalue(nextValue))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _List_Nil;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t});\nvar elm$url$Url$Parser$string = A2(elm$url$Url$Parser$custom, 'STRING', elm$core$Maybe$Just);\nvar elm$url$Url$Parser$top = elm$url$Url$Parser$Parser(\n\tfunction (state) {\n\t\treturn _List_fromArray(\n\t\t\t[state]);\n\t});\nvar elm$url$Url$Parser$Internal$Parser = function (a) {\n\treturn {$: 'Parser', a: a};\n};\nvar elm$url$Url$Parser$Query$custom = F2(\n\tfunction (key, func) {\n\t\treturn elm$url$Url$Parser$Internal$Parser(\n\t\t\tfunction (dict) {\n\t\t\t\treturn func(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(elm$core$Dict$get, key, dict)));\n\t\t\t});\n\t});\nvar elm$url$Url$Parser$Query$int = function (key) {\n\treturn A2(\n\t\telm$url$Url$Parser$Query$custom,\n\t\tkey,\n\t\tfunction (stringList) {\n\t\t\tif (stringList.b && (!stringList.b.b)) {\n\t\t\t\tvar str = stringList.a;\n\t\t\t\treturn elm$core$String$toInt(str);\n\t\t\t} else {\n\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t}\n\t\t});\n};\nvar elm$url$Url$Parser$Query$string = function (key) {\n\treturn A2(\n\t\telm$url$Url$Parser$Query$custom,\n\t\tkey,\n\t\tfunction (stringList) {\n\t\t\tif (stringList.b && (!stringList.b.b)) {\n\t\t\t\tvar str = stringList.a;\n\t\t\t\treturn elm$core$Maybe$Just(str);\n\t\t\t} else {\n\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t}\n\t\t});\n};\nvar author$project$Main$routeUrl = F2(\n\tfunction (url, model) {\n\t\tvar parser = elm$url$Url$Parser$oneOf(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tF2(\n\t\t\t\t\t\tfunction (page, sort) {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\tauthor$project$Main$stepGallery,\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Gallery$init,\n\t\t\t\t\t\t\t\t\tauthor$project$Main$getUser(model.state),\n\t\t\t\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t\t\t\tpage,\n\t\t\t\t\t\t\t\t\tsort));\n\t\t\t\t\t\t}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$url$Url$Parser$questionMark,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$url$Url$Parser$questionMark,\n\t\t\t\t\t\t\telm$url$Url$Parser$s('gallery'),\n\t\t\t\t\t\t\telm$url$Url$Parser$Query$int('page')),\n\t\t\t\t\t\telm$url$Url$Parser$Query$string('sort'))),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Main$stepSignUp,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tauthor$project$Pages$SignUp$init(model.key)),\n\t\t\t\t\telm$url$Url$Parser$s('sign_up')),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Main$stepSignIn,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tauthor$project$Pages$SignIn$init(model.key)),\n\t\t\t\t\telm$url$Url$Parser$s('sign_in')),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Main$stepUpload,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tauthor$project$Pages$Upload$init,\n\t\t\t\t\t\t\tauthor$project$Main$getUser(model.state),\n\t\t\t\t\t\t\tmodel.key)),\n\t\t\t\t\telm$url$Url$Parser$s('upload')),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Main$stepHome,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tauthor$project$Pages$Home$init,\n\t\t\t\t\t\t\tauthor$project$Main$getUser(model.state),\n\t\t\t\t\t\t\tmodel.key)),\n\t\t\t\t\telm$url$Url$Parser$top),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n1 = author$project$Main$getUser(model.state);\n\t\t\t\t\t\tif (_n1.$ === 'Just') {\n\t\t\t\t\t\t\tvar userAcc = _n1.a;\n\t\t\t\t\t\t\treturn function (user) {\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\tauthor$project$Main$stepProfile,\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\tA3(author$project$Pages$Profile$init, model.key, userAcc, user));\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn function (user) {\n\t\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpage: author$project$Main$NotFound('You must be logged in to do this')\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}(),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$url$Url$Parser$slash,\n\t\t\t\t\t\telm$url$Url$Parser$s('profile'),\n\t\t\t\t\t\telm$url$Url$Parser$string)),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Main$stepUsers,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tauthor$project$Pages$Users$init(model.key)),\n\t\t\t\t\telm$url$Url$Parser$s('users')),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n2 = model.state;\n\t\t\t\t\t\tif (_n2.$ === 'Ready') {\n\t\t\t\t\t\t\tvar session = _n2.a;\n\t\t\t\t\t\t\treturn function (id) {\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\tauthor$project$Main$stepPost,\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\tA3(author$project$Pages$Post$init, model.key, session.user, id));\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn function (id) {\n\t\t\t\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}(),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$url$Url$Parser$slash,\n\t\t\t\t\t\telm$url$Url$Parser$s('post'),\n\t\t\t\t\t\telm$url$Url$Parser$string)),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tfunction (q) {\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tauthor$project$Main$stepResults,\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\tauthor$project$Pages$Results$init(q));\n\t\t\t\t\t},\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$url$Url$Parser$questionMark,\n\t\t\t\t\t\telm$url$Url$Parser$s('search'),\n\t\t\t\t\t\telm$url$Url$Parser$Query$string('q'))),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$Parser$map,\n\t\t\t\t\tfunction (q) {\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tauthor$project$Main$stepTags,\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\tA2(author$project$Pages$Tags$init, model.key, q));\n\t\t\t\t\t},\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$url$Url$Parser$questionMark,\n\t\t\t\t\t\telm$url$Url$Parser$s('tags'),\n\t\t\t\t\t\telm$url$Url$Parser$Query$string('q')))\n\t\t\t\t]));\n\t\tvar _n0 = model.state;\n\t\tif (_n0.$ === 'NotReady') {\n\t\t\tvar token = _n0.a;\n\t\t\treturn _Utils_Tuple2(\n\t\t\t\t_Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{page: author$project$Main$Loading}),\n\t\t\t\tauthor$project$Main$loadUser(token));\n\t\t} else {\n\t\t\treturn A2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpage: author$project$Main$NotFound('Oops, this page doesn\\'t exist!')\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none),\n\t\t\t\tA2(elm$url$Url$Parser$parse, parser, url));\n\t\t}\n\t});\nvar author$project$Main$init = F3(\n\tfunction (flag, url, key) {\n\t\tif (flag.$ === 'Nothing') {\n\t\t\treturn A2(\n\t\t\t\tauthor$project$Main$routeUrl,\n\t\t\t\turl,\n\t\t\t\t{\n\t\t\t\t\tkey: key,\n\t\t\t\t\tpage: author$project$Main$Loading,\n\t\t\t\t\tsearch: author$project$Components$SearchBar$init(key),\n\t\t\t\t\tstate: author$project$Main$Ready(author$project$Session$init),\n\t\t\t\t\turl: url\n\t\t\t\t});\n\t\t} else {\n\t\t\tvar token = flag.a;\n\t\t\treturn A2(\n\t\t\t\tauthor$project$Main$routeUrl,\n\t\t\t\turl,\n\t\t\t\t{\n\t\t\t\t\tkey: key,\n\t\t\t\t\tpage: author$project$Main$Loading,\n\t\t\t\t\tsearch: author$project$Components$SearchBar$init(key),\n\t\t\t\t\tstate: author$project$Main$NotReady(token),\n\t\t\t\t\turl: url\n\t\t\t\t});\n\t\t}\n\t});\nvar author$project$Components$Carousel$Reset = {$: 'Reset'};\nvar author$project$Components$Carousel$SwitchLeft = function (a) {\n\treturn {$: 'SwitchLeft', a: a};\n};\nvar author$project$Components$Carousel$SwitchRight = function (a) {\n\treturn {$: 'SwitchRight', a: a};\n};\nvar elm$time$Time$Every = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Every', a: a, b: b};\n\t});\nvar elm$time$Time$State = F2(\n\tfunction (taggers, processes) {\n\t\treturn {processes: processes, taggers: taggers};\n\t});\nvar elm$time$Time$init = elm$core$Task$succeed(\n\tA2(elm$time$Time$State, elm$core$Dict$empty, elm$core$Dict$empty));\nvar elm$core$Dict$foldl = F3(\n\tfunction (func, acc, dict) {\n\t\tfoldl:\n\t\twhile (true) {\n\t\t\tif (dict.$ === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar key = dict.b;\n\t\t\t\tvar value = dict.c;\n\t\t\t\tvar left = dict.d;\n\t\t\t\tvar right = dict.e;\n\t\t\t\tvar $temp$func = func,\n\t\t\t\t\t$temp$acc = A3(\n\t\t\t\t\tfunc,\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tA3(elm$core$Dict$foldl, func, acc, left)),\n\t\t\t\t\t$temp$dict = right;\n\t\t\t\tfunc = $temp$func;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tdict = $temp$dict;\n\t\t\t\tcontinue foldl;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Dict$merge = F6(\n\tfunction (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {\n\t\tvar stepState = F3(\n\t\t\tfunction (rKey, rValue, _n0) {\n\t\t\t\tstepState:\n\t\t\t\twhile (true) {\n\t\t\t\t\tvar list = _n0.a;\n\t\t\t\t\tvar result = _n0.b;\n\t\t\t\t\tif (!list.b) {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\tlist,\n\t\t\t\t\t\t\tA3(rightStep, rKey, rValue, result));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _n2 = list.a;\n\t\t\t\t\t\tvar lKey = _n2.a;\n\t\t\t\t\t\tvar lValue = _n2.b;\n\t\t\t\t\t\tvar rest = list.b;\n\t\t\t\t\t\tif (_Utils_cmp(lKey, rKey) < 0) {\n\t\t\t\t\t\t\tvar $temp$rKey = rKey,\n\t\t\t\t\t\t\t\t$temp$rValue = rValue,\n\t\t\t\t\t\t\t\t$temp$_n0 = _Utils_Tuple2(\n\t\t\t\t\t\t\t\trest,\n\t\t\t\t\t\t\t\tA3(leftStep, lKey, lValue, result));\n\t\t\t\t\t\t\trKey = $temp$rKey;\n\t\t\t\t\t\t\trValue = $temp$rValue;\n\t\t\t\t\t\t\t_n0 = $temp$_n0;\n\t\t\t\t\t\t\tcontinue stepState;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_Utils_cmp(lKey, rKey) > 0) {\n\t\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\t\tlist,\n\t\t\t\t\t\t\t\t\tA3(rightStep, rKey, rValue, result));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\t\trest,\n\t\t\t\t\t\t\t\t\tA4(bothStep, lKey, lValue, rValue, result));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\tvar _n3 = A3(\n\t\t\telm$core$Dict$foldl,\n\t\t\tstepState,\n\t\t\t_Utils_Tuple2(\n\t\t\t\telm$core$Dict$toList(leftDict),\n\t\t\t\tinitialResult),\n\t\t\trightDict);\n\t\tvar leftovers = _n3.a;\n\t\tvar intermediateResult = _n3.b;\n\t\treturn A3(\n\t\t\telm$core$List$foldl,\n\t\t\tF2(\n\t\t\t\tfunction (_n4, result) {\n\t\t\t\t\tvar k = _n4.a;\n\t\t\t\t\tvar v = _n4.b;\n\t\t\t\t\treturn A3(leftStep, k, v, result);\n\t\t\t\t}),\n\t\t\tintermediateResult,\n\t\t\tleftovers);\n\t});\nvar elm$time$Time$addMySub = F2(\n\tfunction (_n0, state) {\n\t\tvar interval = _n0.a;\n\t\tvar tagger = _n0.b;\n\t\tvar _n1 = A2(elm$core$Dict$get, interval, state);\n\t\tif (_n1.$ === 'Nothing') {\n\t\t\treturn A3(\n\t\t\t\telm$core$Dict$insert,\n\t\t\t\tinterval,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[tagger]),\n\t\t\t\tstate);\n\t\t} else {\n\t\t\tvar taggers = _n1.a;\n\t\t\treturn A3(\n\t\t\t\telm$core$Dict$insert,\n\t\t\t\tinterval,\n\t\t\t\tA2(elm$core$List$cons, tagger, taggers),\n\t\t\t\tstate);\n\t\t}\n\t});\nvar elm$time$Time$Name = function (a) {\n\treturn {$: 'Name', a: a};\n};\nvar elm$time$Time$Offset = function (a) {\n\treturn {$: 'Offset', a: a};\n};\nvar elm$time$Time$Zone = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Zone', a: a, b: b};\n\t});\nvar elm$time$Time$customZone = elm$time$Time$Zone;\nvar elm$time$Time$setInterval = _Time_setInterval;\nvar elm$time$Time$spawnHelp = F3(\n\tfunction (router, intervals, processes) {\n\t\tif (!intervals.b) {\n\t\t\treturn elm$core$Task$succeed(processes);\n\t\t} else {\n\t\t\tvar interval = intervals.a;\n\t\t\tvar rest = intervals.b;\n\t\t\tvar spawnTimer = elm$core$Process$spawn(\n\t\t\t\tA2(\n\t\t\t\t\telm$time$Time$setInterval,\n\t\t\t\t\tinterval,\n\t\t\t\t\tA2(elm$core$Platform$sendToSelf, router, interval)));\n\t\t\tvar spawnRest = function (id) {\n\t\t\t\treturn A3(\n\t\t\t\t\telm$time$Time$spawnHelp,\n\t\t\t\t\trouter,\n\t\t\t\t\trest,\n\t\t\t\t\tA3(elm$core$Dict$insert, interval, id, processes));\n\t\t\t};\n\t\t\treturn A2(elm$core$Task$andThen, spawnRest, spawnTimer);\n\t\t}\n\t});\nvar elm$time$Time$onEffects = F3(\n\tfunction (router, subs, _n0) {\n\t\tvar processes = _n0.processes;\n\t\tvar rightStep = F3(\n\t\t\tfunction (_n6, id, _n7) {\n\t\t\t\tvar spawns = _n7.a;\n\t\t\t\tvar existing = _n7.b;\n\t\t\t\tvar kills = _n7.c;\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\tspawns,\n\t\t\t\t\texisting,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Task$andThen,\n\t\t\t\t\t\tfunction (_n5) {\n\t\t\t\t\t\t\treturn kills;\n\t\t\t\t\t\t},\n\t\t\t\t\t\telm$core$Process$kill(id)));\n\t\t\t});\n\t\tvar newTaggers = A3(elm$core$List$foldl, elm$time$Time$addMySub, elm$core$Dict$empty, subs);\n\t\tvar leftStep = F3(\n\t\t\tfunction (interval, taggers, _n4) {\n\t\t\t\tvar spawns = _n4.a;\n\t\t\t\tvar existing = _n4.b;\n\t\t\t\tvar kills = _n4.c;\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\tA2(elm$core$List$cons, interval, spawns),\n\t\t\t\t\texisting,\n\t\t\t\t\tkills);\n\t\t\t});\n\t\tvar bothStep = F4(\n\t\t\tfunction (interval, taggers, id, _n3) {\n\t\t\t\tvar spawns = _n3.a;\n\t\t\t\tvar existing = _n3.b;\n\t\t\t\tvar kills = _n3.c;\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\tspawns,\n\t\t\t\t\tA3(elm$core$Dict$insert, interval, id, existing),\n\t\t\t\t\tkills);\n\t\t\t});\n\t\tvar _n1 = A6(\n\t\t\telm$core$Dict$merge,\n\t\t\tleftStep,\n\t\t\tbothStep,\n\t\t\trightStep,\n\t\t\tnewTaggers,\n\t\t\tprocesses,\n\t\t\t_Utils_Tuple3(\n\t\t\t\t_List_Nil,\n\t\t\t\telm$core$Dict$empty,\n\t\t\t\telm$core$Task$succeed(_Utils_Tuple0)));\n\t\tvar spawnList = _n1.a;\n\t\tvar existingDict = _n1.b;\n\t\tvar killTask = _n1.c;\n\t\treturn A2(\n\t\t\telm$core$Task$andThen,\n\t\t\tfunction (newProcesses) {\n\t\t\t\treturn elm$core$Task$succeed(\n\t\t\t\t\tA2(elm$time$Time$State, newTaggers, newProcesses));\n\t\t\t},\n\t\t\tA2(\n\t\t\t\telm$core$Task$andThen,\n\t\t\t\tfunction (_n2) {\n\t\t\t\t\treturn A3(elm$time$Time$spawnHelp, router, spawnList, existingDict);\n\t\t\t\t},\n\t\t\t\tkillTask));\n\t});\nvar elm$time$Time$now = _Time_now(elm$time$Time$millisToPosix);\nvar elm$time$Time$onSelfMsg = F3(\n\tfunction (router, interval, state) {\n\t\tvar _n0 = A2(elm$core$Dict$get, interval, state.taggers);\n\t\tif (_n0.$ === 'Nothing') {\n\t\t\treturn elm$core$Task$succeed(state);\n\t\t} else {\n\t\t\tvar taggers = _n0.a;\n\t\t\tvar tellTaggers = function (time) {\n\t\t\t\treturn elm$core$Task$sequence(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\tfunction (tagger) {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$Platform$sendToApp,\n\t\t\t\t\t\t\t\trouter,\n\t\t\t\t\t\t\t\ttagger(time));\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttaggers));\n\t\t\t};\n\t\t\treturn A2(\n\t\t\t\telm$core$Task$andThen,\n\t\t\t\tfunction (_n1) {\n\t\t\t\t\treturn elm$core$Task$succeed(state);\n\t\t\t\t},\n\t\t\t\tA2(elm$core$Task$andThen, tellTaggers, elm$time$Time$now));\n\t\t}\n\t});\nvar elm$core$Basics$composeL = F3(\n\tfunction (g, f, x) {\n\t\treturn g(\n\t\t\tf(x));\n\t});\nvar elm$time$Time$subMap = F2(\n\tfunction (f, _n0) {\n\t\tvar interval = _n0.a;\n\t\tvar tagger = _n0.b;\n\t\treturn A2(\n\t\t\telm$time$Time$Every,\n\t\t\tinterval,\n\t\t\tA2(elm$core$Basics$composeL, f, tagger));\n\t});\n_Platform_effectManagers['Time'] = _Platform_createManager(elm$time$Time$init, elm$time$Time$onEffects, elm$time$Time$onSelfMsg, 0, elm$time$Time$subMap);\nvar elm$time$Time$subscription = _Platform_leaf('Time');\nvar elm$time$Time$every = F2(\n\tfunction (interval, tagger) {\n\t\treturn elm$time$Time$subscription(\n\t\t\tA2(elm$time$Time$Every, interval, tagger));\n\t});\nvar author$project$Components$Carousel$subscriptions = function (model) {\n\tvar _n0 = model.counter;\n\tif (_n0.$ === 'Start') {\n\t\treturn A2(\n\t\t\telm$time$Time$every,\n\t\t\t5000,\n\t\t\tfunction (_n1) {\n\t\t\t\tvar _n2 = model.dir;\n\t\t\t\tif (_n2.$ === 'Right') {\n\t\t\t\t\treturn author$project$Components$Carousel$SwitchRight(model.current);\n\t\t\t\t} else {\n\t\t\t\t\treturn author$project$Components$Carousel$SwitchLeft(model.current);\n\t\t\t\t}\n\t\t\t});\n\t} else {\n\t\treturn A2(\n\t\t\telm$time$Time$every,\n\t\t\t1000,\n\t\t\tfunction (_n3) {\n\t\t\t\treturn author$project$Components$Carousel$Reset;\n\t\t\t});\n\t}\n};\nvar author$project$Pages$Home$Reload = {$: 'Reload'};\nvar author$project$Pages$Home$UpdateCarousel = function (a) {\n\treturn {$: 'UpdateCarousel', a: a};\n};\nvar elm$core$Platform$Sub$batch = _Platform_batch;\nvar elm$core$Platform$Sub$map = _Platform_map;\nvar author$project$Pages$Home$subscriptions = function (model) {\n\treturn elm$core$Platform$Sub$batch(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$core$Platform$Sub$map,\n\t\t\t\tauthor$project$Pages$Home$UpdateCarousel,\n\t\t\t\tauthor$project$Components$Carousel$subscriptions(model.carousel)),\n\t\t\t\tA2(\n\t\t\t\telm$time$Time$every,\n\t\t\t\t30000,\n\t\t\t\tfunction (_n0) {\n\t\t\t\t\treturn author$project$Pages$Home$Reload;\n\t\t\t\t})\n\t\t\t]));\n};\nvar author$project$Pages$Post$Reload = {$: 'Reload'};\nvar author$project$Pages$Post$subscriptions = function (model) {\n\treturn A2(\n\t\telm$time$Time$every,\n\t\t30000,\n\t\tfunction (_n0) {\n\t\t\treturn author$project$Pages$Post$Reload;\n\t\t});\n};\nvar author$project$Pages$Tags$Restore = function (a) {\n\treturn {$: 'Restore', a: a};\n};\nvar author$project$Query$restoreState = _Platform_incomingPort(\n\t'restoreState',\n\telm$json$Json$Decode$oneOf(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$json$Json$Decode$null(elm$core$Maybe$Nothing),\n\t\t\t\tA2(elm$json$Json$Decode$map, elm$core$Maybe$Just, elm$json$Json$Decode$value)\n\t\t\t])));\nvar author$project$Pages$Tags$subscriptions = function (model) {\n\treturn author$project$Query$restoreState(author$project$Pages$Tags$Restore);\n};\nvar author$project$Pages$Upload$Progress = function (a) {\n\treturn {$: 'Progress', a: a};\n};\nvar elm$http$Http$track = F2(\n\tfunction (tracker, toMsg) {\n\t\treturn elm$http$Http$subscription(\n\t\t\tA2(elm$http$Http$MySub, tracker, toMsg));\n\t});\nvar author$project$Pages$Upload$subscriptions = function (model) {\n\treturn A2(elm$http$Http$track, 'upload', author$project$Pages$Upload$Progress);\n};\nvar elm$core$Platform$Sub$none = elm$core$Platform$Sub$batch(_List_Nil);\nvar author$project$Main$subscriptions = function (model) {\n\tvar _n0 = model.page;\n\tswitch (_n0.$) {\n\t\tcase 'Home':\n\t\t\tvar home = _n0.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$Platform$Sub$map,\n\t\t\t\tauthor$project$Main$HomeMsg,\n\t\t\t\tauthor$project$Pages$Home$subscriptions(home));\n\t\tcase 'Post':\n\t\t\tvar post = _n0.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$Platform$Sub$map,\n\t\t\t\tauthor$project$Main$PostMsg,\n\t\t\t\tauthor$project$Pages$Post$subscriptions(post));\n\t\tcase 'Tags':\n\t\t\tvar tags = _n0.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$Platform$Sub$map,\n\t\t\t\tauthor$project$Main$TagsMsg,\n\t\t\t\tauthor$project$Pages$Tags$subscriptions(tags));\n\t\tcase 'Upload':\n\t\t\tvar upload = _n0.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$Platform$Sub$map,\n\t\t\t\tauthor$project$Main$UploadMsg,\n\t\t\t\tauthor$project$Pages$Upload$subscriptions(upload));\n\t\tdefault:\n\t\t\treturn elm$core$Platform$Sub$none;\n\t}\n};\nvar author$project$Components$SearchBar$getModel = function (_n0) {\n\tvar model = _n0.a;\n\tvar cmd = _n0.b;\n\treturn model;\n};\nvar author$project$Components$SearchBar$Valid = {$: 'Valid'};\nvar elm$browser$Browser$Navigation$replaceUrl = _Browser_replaceUrl;\nvar author$project$Components$SearchBar$update = F2(\n\tfunction (msg, model) {\n\t\tif (msg.$ === 'UpdateValue') {\n\t\t\tvar val = msg.a;\n\t\t\treturn (elm$core$String$length(val) < 2) ? _Utils_Tuple2(\n\t\t\t\t_Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{searchValue: val, state: author$project$Components$SearchBar$Invalid}),\n\t\t\t\telm$core$Platform$Cmd$none) : _Utils_Tuple2(\n\t\t\t\t_Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{searchValue: val, state: author$project$Components$SearchBar$Valid}),\n\t\t\t\telm$core$Platform$Cmd$none);\n\t\t} else {\n\t\t\tvar key = msg.a;\n\t\t\tif (key === 13) {\n\t\t\t\tvar _n2 = model.state;\n\t\t\t\tif (_n2.$ === 'Invalid') {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{searchValue: '', state: author$project$Components$SearchBar$Invalid}),\n\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$replaceUrl, model.key, '/search?q=' + model.searchValue));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t}\n\t\t}\n\t});\nvar author$project$Main$Failure = {$: 'Failure'};\nvar author$project$Main$UpdateSearch = function (a) {\n\treturn {$: 'UpdateSearch', a: a};\n};\nvar author$project$Main$stepSearch = F2(\n\tfunction (model, _n0) {\n\t\tvar search = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\tsearch: _Utils_Tuple2(search, cmd)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Main$UpdateSearch, cmd));\n\t});\nvar author$project$Pages$Gallery$Empty = {$: 'Empty'};\nvar author$project$Pages$Gallery$Failure = {$: 'Failure'};\nvar author$project$Pages$Gallery$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;\nvar author$project$Pages$Gallery$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar imageUrl = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Gallery$Success(imageUrl)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{status: author$project$Pages$Gallery$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'SortNewest':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{sort: 'newest', status: author$project$Pages$Gallery$Loading}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t'gallery?page=' + (elm$core$String$fromInt(1) + '&sort=newest')));\n\t\t\tcase 'SortPopular':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{sort: 'popular', status: author$project$Pages$Gallery$Loading}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t'gallery?page=' + (elm$core$String$fromInt(1) + '&sort=popular')));\n\t\t\tcase 'SortTop':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{sort: 'rating', status: author$project$Pages$Gallery$Loading}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t'gallery?page=' + (elm$core$String$fromInt(1) + '&sort=rating')));\n\t\t\tdefault:\n\t\t\t\tvar sort = msg.a;\n\t\t\t\tvar page = msg.b;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t\t\t'/gallery?page=' + (elm$core$String$fromInt(page) + ('&sort=' + model.sort))),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\t\t\tfunction (_n2) {\n\t\t\t\t\t\t\t\t\treturn author$project$Pages$Gallery$Empty;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0))\n\t\t\t\t\t\t\t])));\n\t\t}\n\t});\nvar author$project$Components$Carousel$Left = {$: 'Left'};\nvar author$project$Components$Carousel$Stop = {$: 'Stop'};\nvar elm$core$Array$length = function (_n0) {\n\tvar len = _n0.a;\n\treturn len;\n};\nvar elm$core$Basics$ge = _Utils_ge;\nvar author$project$Components$Carousel$handle = F2(\n\tfunction (current, model) {\n\t\treturn (current < 0) ? (elm$core$Array$length(model.source) - 1) : ((_Utils_cmp(\n\t\t\tcurrent,\n\t\t\telm$core$Array$length(model.source)) > -1) ? 0 : current);\n\t});\nvar author$project$Components$Carousel$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'SwitchRight':\n\t\t\t\tvar i = msg.a;\n\t\t\t\treturn _Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{\n\t\t\t\t\t\tcounter: author$project$Components$Carousel$Stop,\n\t\t\t\t\t\tcurrent: A2(author$project$Components$Carousel$handle, i + 1, model),\n\t\t\t\t\t\tdir: author$project$Components$Carousel$Right\n\t\t\t\t\t});\n\t\t\tcase 'SwitchLeft':\n\t\t\t\tvar i = msg.a;\n\t\t\t\treturn _Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{\n\t\t\t\t\t\tcounter: author$project$Components$Carousel$Stop,\n\t\t\t\t\t\tcurrent: A2(author$project$Components$Carousel$handle, i - 1, model),\n\t\t\t\t\t\tdir: author$project$Components$Carousel$Left\n\t\t\t\t\t});\n\t\t\tcase 'Jump':\n\t\t\t\tvar i = msg.a;\n\t\t\t\treturn _Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{counter: author$project$Components$Carousel$Stop, current: i});\n\t\t\tdefault:\n\t\t\t\treturn _Utils_update(\n\t\t\t\t\tmodel,\n\t\t\t\t\t{counter: author$project$Components$Carousel$Start});\n\t\t}\n\t});\nvar author$project$Pages$Home$Failure = {$: 'Failure'};\nvar author$project$Pages$Home$FailureTags = {$: 'FailureTags'};\nvar author$project$Pages$Home$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$Home$SuccessTags = function (a) {\n\treturn {$: 'SuccessTags', a: a};\n};\nvar author$project$Pages$Home$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'UpdateCarousel':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcarousel: A2(author$project$Components$Carousel$update, mesg, model.carousel)\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar images = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Home$Success(images)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{status: author$project$Pages$Home$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'TagsResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar tags = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttagStatus: author$project$Pages$Home$SuccessTags(tags)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{tagStatus: author$project$Pages$Home$FailureTags}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[author$project$Pages$Home$getLatest, author$project$Pages$Home$getTrending])));\n\t\t}\n\t});\nvar author$project$Pages$Post$Failure = {$: 'Failure'};\nvar author$project$Pages$Post$FailureComments = {$: 'FailureComments'};\nvar author$project$Pages$Post$FailureInfo = {$: 'FailureInfo'};\nvar author$project$Pages$Post$FailureStats = {$: 'FailureStats'};\nvar author$project$Pages$Post$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$Post$SuccessComments = function (a) {\n\treturn {$: 'SuccessComments', a: a};\n};\nvar author$project$Pages$Post$SuccessInfo = function (a) {\n\treturn {$: 'SuccessInfo', a: a};\n};\nvar author$project$Pages$Post$SuccessStats = function (a) {\n\treturn {$: 'SuccessStats', a: a};\n};\nvar author$project$Pages$Post$ManageCommentResponse = function (a) {\n\treturn {$: 'ManageCommentResponse', a: a};\n};\nvar author$project$Pages$Post$encodeID = function (id) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'id',\n\t\t\t\telm$json$Json$Encode$string(id))\n\t\t\t]));\n};\nvar elm$http$Http$expectBytesResponse = F2(\n\tfunction (toMsg, toResult) {\n\t\treturn A3(\n\t\t\t_Http_expect,\n\t\t\t'arraybuffer',\n\t\t\t_Http_toDataView,\n\t\t\tA2(elm$core$Basics$composeR, toResult, toMsg));\n\t});\nvar elm$http$Http$expectWhatever = function (toMsg) {\n\treturn A2(\n\t\telm$http$Http$expectBytesResponse,\n\t\ttoMsg,\n\t\telm$http$Http$resolve(\n\t\t\tfunction (_n0) {\n\t\t\t\treturn elm$core$Result$Ok(_Utils_Tuple0);\n\t\t\t}));\n};\nvar elm$http$Http$jsonBody = function (value) {\n\treturn A2(\n\t\t_Http_pair,\n\t\t'application/json',\n\t\tA2(elm$json$Json$Encode$encode, 0, value));\n};\nvar author$project$Pages$Post$deleteComment = function (id) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$Post$encodeID(id)),\n\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$ManageCommentResponse),\n\t\t\theaders: _List_Nil,\n\t\t\tmethod: 'DELETE',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/comment/delete'\n\t\t});\n};\nvar author$project$Pages$Post$DeleteResponse = function (a) {\n\treturn {$: 'DeleteResponse', a: a};\n};\nvar author$project$Pages$Post$deletePost = F2(\n\tfunction (id, token) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tauthor$project$Pages$Post$encodeID(id)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$DeleteResponse),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', token)\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'DELETE',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/image/delete'\n\t\t\t});\n\t});\nvar author$project$Pages$Post$encodeEdit = F2(\n\tfunction (id, comment) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'id',\n\t\t\t\t\telm$json$Json$Encode$string(id)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'comment',\n\t\t\t\t\telm$json$Json$Encode$string(comment))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Post$editComment = F2(\n\tfunction (id, comment) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tA2(author$project$Pages$Post$encodeEdit, id, comment)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$ManageCommentResponse),\n\t\t\t\theaders: _List_Nil,\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/comment/edit'\n\t\t\t});\n\t});\nvar author$project$Pages$Post$RateResponse = function (a) {\n\treturn {$: 'RateResponse', a: a};\n};\nvar author$project$Pages$Post$favorite = function (model) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$Post$encodeID(model.id)),\n\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$RateResponse),\n\t\t\theaders: function () {\n\t\t\t\tvar _n0 = model.user;\n\t\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\t\tvar user = _n0.a;\n\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', user.token)\n\t\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\treturn _List_Nil;\n\t\t\t\t}\n\t\t\t}(),\n\t\t\tmethod: 'POST',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/image/favorite'\n\t\t});\n};\nvar author$project$Image$Stats$Model = F3(\n\tfunction (views, points, favorites) {\n\t\treturn {favorites: favorites, points: points, views: views};\n\t});\nvar author$project$Image$Stats$statsDecoder = A4(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,\n\t'favorites',\n\telm$json$Json$Decode$int,\n\t0,\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'points',\n\t\telm$json$Json$Decode$int,\n\t\tA3(\n\t\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t\t'views',\n\t\t\telm$json$Json$Decode$int,\n\t\t\telm$json$Json$Decode$succeed(author$project$Image$Stats$Model))));\nvar author$project$Pages$Post$StatsResponse = function (a) {\n\treturn {$: 'StatsResponse', a: a};\n};\nvar author$project$Pages$Post$loadStats = function (id) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$Post$StatsResponse, author$project$Image$Stats$statsDecoder),\n\t\t\turl: author$project$Server$url + ('/image/stats' + ('?id=' + id))\n\t\t});\n};\nvar author$project$Pages$Post$CommentResponse = function (a) {\n\treturn {$: 'CommentResponse', a: a};\n};\nvar author$project$Pages$Post$encodeComment = F3(\n\tfunction (id, username, content) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'id',\n\t\t\t\t\telm$json$Json$Encode$string(id)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'username',\n\t\t\t\t\telm$json$Json$Encode$string(username)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'content',\n\t\t\t\t\telm$json$Json$Encode$string(content))\n\t\t\t\t]));\n\t});\nvar elm$http$Http$post = function (r) {\n\treturn elm$http$Http$request(\n\t\t{body: r.body, expect: r.expect, headers: _List_Nil, method: 'POST', timeout: elm$core$Maybe$Nothing, tracker: elm$core$Maybe$Nothing, url: r.url});\n};\nvar author$project$Pages$Post$postComment = F3(\n\tfunction (id, username, content) {\n\t\treturn elm$http$Http$post(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tA3(author$project$Pages$Post$encodeComment, id, username, content)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$CommentResponse),\n\t\t\t\turl: author$project$Server$url + '/comment/add'\n\t\t\t});\n\t});\nvar author$project$Pages$Post$encodeRate = F2(\n\tfunction (vote, id) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'vote',\n\t\t\t\t\telm$json$Json$Encode$string(vote)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'id',\n\t\t\t\t\telm$json$Json$Encode$string(id))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Post$rate = F2(\n\tfunction (model, vote) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tA2(author$project$Pages$Post$encodeRate, vote, model.id)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Post$RateResponse),\n\t\t\t\theaders: function () {\n\t\t\t\t\tvar _n0 = model.user;\n\t\t\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\t\t\tvar user = _n0.a;\n\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', user.token)\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _List_Nil;\n\t\t\t\t\t}\n\t\t\t\t}(),\n\t\t\t\tmethod: 'POST',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/image/rate'\n\t\t\t});\n\t});\nvar author$project$Pages$Post$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar image = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: image.id,\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Post$Success(image),\n\t\t\t\t\t\t\t\ttitle: image.title\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tauthor$project$Pages$Post$loadStats(model.id));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{status: author$project$Pages$Post$Failure, title: 'Failed to load'}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'LoadComments':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar comments = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcomments: author$project$Pages$Post$SuccessComments(comments)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{comments: author$project$Pages$Post$FailureComments}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'CommentResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tauthor$project$Pages$Post$loadComments(model.id));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'RateResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Post$loadStats(model.id),\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Post$getUserInfo, model.id, model.user)\n\t\t\t\t\t\t\t\t])));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'StatsResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar stats = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstats: author$project$Pages$Post$SuccessStats(stats)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{stats: author$project$Pages$Post$FailureStats}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Comment':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{comment: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'DeletePost':\n\t\t\t\tvar id = msg.a;\n\t\t\t\tvar token = msg.b;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Post$deletePost, id, token));\n\t\t\tcase 'DeleteResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/'));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'ManageCommentResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tauthor$project$Pages$Post$loadComments(model.id));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'InfoResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar info = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvote: author$project$Pages$Post$SuccessInfo(info)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{vote: author$project$Pages$Post$FailureInfo}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Submit':\n\t\t\t\tvar _n9 = model.user;\n\t\t\t\tif (_n9.$ === 'Just') {\n\t\t\t\t\tvar user = _n9.a;\n\t\t\t\t\treturn (model.comment === '') ? _Utils_Tuple2(model, elm$core$Platform$Cmd$none) : _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{comment: ''}),\n\t\t\t\t\t\tA3(author$project$Pages$Post$postComment, model.id, user.username, model.comment));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Upvote':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Post$rate, model, 'upvote'));\n\t\t\tcase 'Downvote':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Post$rate, model, 'downvote'));\n\t\t\tcase 'Veto':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Post$rate, model, 'veto'));\n\t\t\tcase 'Favorite':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Pages$Post$favorite(model));\n\t\t\tcase 'EditComment':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{edit: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Edit':\n\t\t\t\tvar id = msg.a;\n\t\t\t\tvar content = msg.b;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdeleting: elm$core$Maybe$Nothing,\n\t\t\t\t\t\t\tedit: content,\n\t\t\t\t\t\t\tediting: elm$core$Maybe$Just(id)\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'EditCancel':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{edit: '', editing: elm$core$Maybe$Nothing}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'EditConfirm':\n\t\t\t\tvar _n10 = model.editing;\n\t\t\t\tif (_n10.$ === 'Just') {\n\t\t\t\t\tvar id = _n10.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{edit: '', editing: elm$core$Maybe$Nothing}),\n\t\t\t\t\t\tA2(author$project$Pages$Post$editComment, id, model.edit));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{edit: '', editing: elm$core$Maybe$Nothing}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'DeleteComment':\n\t\t\t\tvar id = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdeleting: elm$core$Maybe$Just(id),\n\t\t\t\t\t\t\tediting: elm$core$Maybe$Nothing\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'DeleteCommentConfirm':\n\t\t\t\tvar _n11 = model.deleting;\n\t\t\t\tif (_n11.$ === 'Just') {\n\t\t\t\t\tvar id = _n11.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{deleting: elm$core$Maybe$Nothing}),\n\t\t\t\t\t\tauthor$project$Pages$Post$deleteComment(id));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{deleting: elm$core$Maybe$Nothing}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'DeleteCommentCancel':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{deleting: elm$core$Maybe$Nothing}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tdefault:\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tauthor$project$Pages$Post$loadComments(model.id),\n\t\t\t\t\t\t\t\tauthor$project$Pages$Post$loadStats(model.id)\n\t\t\t\t\t\t\t])));\n\t\t}\n\t});\nvar author$project$Pages$Profile$Failure = {$: 'Failure'};\nvar author$project$Pages$Profile$FailurePosts = {$: 'FailurePosts'};\nvar author$project$Pages$Profile$Favorites = function (a) {\n\treturn {$: 'Favorites', a: a};\n};\nvar author$project$Pages$Profile$FavoritesMsg = function (a) {\n\treturn {$: 'FavoritesMsg', a: a};\n};\nvar author$project$Pages$Profile$GotFile = function (a) {\n\treturn {$: 'GotFile', a: a};\n};\nvar author$project$Pages$Profile$History = function (a) {\n\treturn {$: 'History', a: a};\n};\nvar author$project$Pages$Profile$HistoryMsg = function (a) {\n\treturn {$: 'HistoryMsg', a: a};\n};\nvar author$project$Pages$Profile$Security = function (a) {\n\treturn {$: 'Security', a: a};\n};\nvar author$project$Pages$Profile$Settings = function (a) {\n\treturn {$: 'Settings', a: a};\n};\nvar author$project$Pages$Profile$SuccessPosts = function (a) {\n\treturn {$: 'SuccessPosts', a: a};\n};\nvar author$project$Pages$Profile$AvatarResponse = function (a) {\n\treturn {$: 'AvatarResponse', a: a};\n};\nvar elm$file$File$name = _File_name;\nvar elm$http$Http$fileBody = _Http_pair('');\nvar author$project$Pages$Profile$put = F2(\n\tfunction (file, user) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$fileBody(file),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Profile$AvatarResponse),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$http$Http$header,\n\t\t\t\t\t\t'name',\n\t\t\t\t\t\telm$file$File$name(file)),\n\t\t\t\t\t\tA2(elm$http$Http$header, 'user', user)\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'PUT',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/upload/profile'\n\t\t\t});\n\t});\nvar author$project$Pages$Profile$stepFavorites = F2(\n\tfunction (model, _n0) {\n\t\tvar fav = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\ttab: author$project$Pages$Profile$Favorites(fav)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Pages$Profile$FavoritesMsg, cmd));\n\t});\nvar author$project$Pages$Profile$stepHistory = F2(\n\tfunction (model, _n0) {\n\t\tvar hist = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\ttab: author$project$Pages$Profile$History(hist)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Pages$Profile$HistoryMsg, cmd));\n\t});\nvar author$project$Pages$Profile$SecurityMsg = function (a) {\n\treturn {$: 'SecurityMsg', a: a};\n};\nvar author$project$Pages$Profile$stepSecurity = F2(\n\tfunction (model, _n0) {\n\t\tvar sec = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\ttab: author$project$Pages$Profile$Security(sec)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Pages$Profile$SecurityMsg, cmd));\n\t});\nvar author$project$Pages$Profile$SettingsMsg = function (a) {\n\treturn {$: 'SettingsMsg', a: a};\n};\nvar author$project$Pages$Profile$stepSettings = F2(\n\tfunction (model, _n0) {\n\t\tvar settings = _n0.a;\n\t\tvar cmd = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\t_Utils_update(\n\t\t\t\tmodel,\n\t\t\t\t{\n\t\t\t\t\ttab: author$project$Pages$Profile$Settings(settings)\n\t\t\t\t}),\n\t\t\tA2(elm$core$Platform$Cmd$map, author$project$Pages$Profile$SettingsMsg, cmd));\n\t});\nvar author$project$Pages$Profile$Favorites$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Profile$Favorites$getFavs = function (username) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$Profile$Favorites$Response,\n\t\t\t\telm$json$Json$Decode$list(author$project$Image$decodePreview)),\n\t\t\turl: author$project$Server$url + ('/account/favorites' + ('?username=' + username))\n\t\t});\n};\nvar author$project$Pages$Profile$Favorites$getModel = function (_n0) {\n\tvar model = _n0.a;\n\tvar cmd = _n0.b;\n\treturn model;\n};\nvar author$project$Pages$Profile$Favorites$Loading = {$: 'Loading'};\nvar author$project$Pages$Profile$Favorites$Model = F2(\n\tfunction (user, status) {\n\t\treturn {status: status, user: user};\n\t});\nvar author$project$Pages$Profile$Favorites$init = function (user) {\n\treturn _Utils_Tuple2(\n\t\tA2(author$project$Pages$Profile$Favorites$Model, user, author$project$Pages$Profile$Favorites$Loading),\n\t\telm$core$Platform$Cmd$none);\n};\nvar author$project$Pages$Profile$Favorites$Failure = {$: 'Failure'};\nvar author$project$Pages$Profile$Favorites$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$Profile$Favorites$update = F2(\n\tfunction (msg, model) {\n\t\tif (msg.$ === 'Empty') {\n\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t} else {\n\t\t\tvar response = msg.a;\n\t\t\tif (response.$ === 'Ok') {\n\t\t\t\tvar images = response.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstatus: author$project$Pages$Profile$Favorites$Success(images)\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{status: author$project$Pages$Profile$Favorites$Failure}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$Profile$History$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$Profile$History$Activity = F2(\n\tfunction (day, count) {\n\t\treturn {count: count, day: day};\n\t});\nvar author$project$Pages$Profile$History$decodeActivity = A3(\n\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t'count',\n\telm$json$Json$Decode$int,\n\tA3(\n\t\tNoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,\n\t\t'day',\n\t\telm$json$Json$Decode$int,\n\t\telm$json$Json$Decode$succeed(author$project$Pages$Profile$History$Activity)));\nvar author$project$Pages$Profile$History$get = F2(\n\tfunction (username, date) {\n\t\treturn elm$http$Http$get(\n\t\t\t{\n\t\t\t\texpect: A2(\n\t\t\t\t\telm$http$Http$expectJson,\n\t\t\t\t\tauthor$project$Pages$Profile$History$Response,\n\t\t\t\t\telm$json$Json$Decode$list(author$project$Pages$Profile$History$decodeActivity)),\n\t\t\t\turl: author$project$Server$url + ('/account/activity' + ('?username=' + (username + ('&date=' + elm$core$String$fromInt(date)))))\n\t\t\t});\n\t});\nvar author$project$Pages$Profile$History$getModel = function (_n0) {\n\tvar model = _n0.a;\n\tvar cmd = _n0.b;\n\treturn model;\n};\nvar author$project$Pages$Profile$History$Loading = {$: 'Loading'};\nvar author$project$Pages$Profile$History$Model = F2(\n\tfunction (user, status) {\n\t\treturn {status: status, user: user};\n\t});\nvar author$project$Pages$Profile$History$init = function (user) {\n\treturn _Utils_Tuple2(\n\t\tA2(author$project$Pages$Profile$History$Model, user, author$project$Pages$Profile$History$Loading),\n\t\telm$core$Platform$Cmd$none);\n};\nvar author$project$Pages$Profile$History$Failure = {$: 'Failure'};\nvar author$project$Pages$Profile$History$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$Profile$History$update = F2(\n\tfunction (msg, model) {\n\t\tif (msg.$ === 'Empty') {\n\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t} else {\n\t\t\tvar response = msg.a;\n\t\t\tif (response.$ === 'Ok') {\n\t\t\t\tvar act = response.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstatus: author$project$Pages$Profile$History$Success(act)\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{status: author$project$Pages$Profile$History$Failure}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$Profile$Security$getModel = function (_n0) {\n\tvar model = _n0.a;\n\tvar cmd = _n0.b;\n\treturn model;\n};\nvar author$project$Pages$Profile$Security$Loading = {$: 'Loading'};\nvar author$project$Pages$Profile$Security$Model = F9(\n\tfunction (user, key, code, password, newPassword, passStatus, delStatus, mailStatus, codeStatus) {\n\t\treturn {code: code, codeStatus: codeStatus, delStatus: delStatus, key: key, mailStatus: mailStatus, newPassword: newPassword, passStatus: passStatus, password: password, user: user};\n\t});\nvar author$project$Pages$Profile$Security$None = {$: 'None'};\nvar author$project$Pages$Profile$Security$init = F2(\n\tfunction (key, user) {\n\t\treturn _Utils_Tuple2(\n\t\t\tA9(author$project$Pages$Profile$Security$Model, user, key, '', '', '', author$project$Pages$Profile$Security$Loading, author$project$Pages$Profile$Security$None, author$project$Pages$Profile$Security$Loading, author$project$Pages$Profile$Security$Loading),\n\t\t\telm$core$Platform$Cmd$none);\n\t});\nvar author$project$Pages$Profile$Security$Failure = {$: 'Failure'};\nvar author$project$Pages$Profile$Security$Success = {$: 'Success'};\nvar author$project$Pages$Profile$Security$PasswordResponse = function (a) {\n\treturn {$: 'PasswordResponse', a: a};\n};\nvar ktonon$elm_crypto$Crypto$SHA$Alg$SHA256 = {$: 'SHA256'};\nvar ktonon$elm_crypto$Crypto$SHA$Alg$SHA512 = {$: 'SHA512'};\nvar ktonon$elm_word$Word$Bit32 = {$: 'Bit32'};\nvar ktonon$elm_word$Word$Bit64 = {$: 'Bit64'};\nvar ktonon$elm_crypto$Crypto$SHA$Alg$wordSize = function (alg) {\n\twordSize:\n\twhile (true) {\n\t\tswitch (alg.$) {\n\t\t\tcase 'SHA224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue wordSize;\n\t\t\tcase 'SHA256':\n\t\t\t\treturn ktonon$elm_word$Word$Bit32;\n\t\t\tcase 'SHA384':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue wordSize;\n\t\t\tcase 'SHA512':\n\t\t\t\treturn ktonon$elm_word$Word$Bit64;\n\t\t\tcase 'SHA512_224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue wordSize;\n\t\t\tdefault:\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue wordSize;\n\t\t}\n\t}\n};\nvar elm$core$List$repeatHelp = F3(\n\tfunction (result, n, value) {\n\t\trepeatHelp:\n\t\twhile (true) {\n\t\t\tif (n <= 0) {\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\tvar $temp$result = A2(elm$core$List$cons, value, result),\n\t\t\t\t\t$temp$n = n - 1,\n\t\t\t\t\t$temp$value = value;\n\t\t\t\tresult = $temp$result;\n\t\t\t\tn = $temp$n;\n\t\t\t\tvalue = $temp$value;\n\t\t\t\tcontinue repeatHelp;\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$repeat = F2(\n\tfunction (n, value) {\n\t\treturn A3(elm$core$List$repeatHelp, _List_Nil, n, value);\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInBytes = function (alg) {\n\tsizeInBytes:\n\twhile (true) {\n\t\tswitch (alg.$) {\n\t\t\tcase 'SHA224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue sizeInBytes;\n\t\t\tcase 'SHA256':\n\t\t\t\treturn 64;\n\t\t\tcase 'SHA384':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue sizeInBytes;\n\t\t\tcase 'SHA512':\n\t\t\t\treturn 128;\n\t\t\tcase 'SHA512_224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue sizeInBytes;\n\t\t\tdefault:\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue sizeInBytes;\n\t\t}\n\t}\n};\nvar ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInBits = A2(\n\telm$core$Basics$composeR,\n\tktonon$elm_crypto$Crypto$SHA$Chunk$sizeInBytes,\n\telm$core$Basics$mul(8));\nvar ktonon$elm_crypto$Crypto$SHA$Preprocess$messageSizeBytes = function (alg) {\n\tmessageSizeBytes:\n\twhile (true) {\n\t\tswitch (alg.$) {\n\t\t\tcase 'SHA224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue messageSizeBytes;\n\t\t\tcase 'SHA256':\n\t\t\t\treturn 8;\n\t\t\tcase 'SHA384':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue messageSizeBytes;\n\t\t\tcase 'SHA512':\n\t\t\t\treturn 16;\n\t\t\tcase 'SHA512_224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue messageSizeBytes;\n\t\t\tdefault:\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue messageSizeBytes;\n\t\t}\n\t}\n};\nvar ktonon$elm_crypto$Crypto$SHA$Preprocess$calculateK = F2(\n\tfunction (alg, l) {\n\t\tvar c = ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInBits(alg);\n\t\treturn A2(\n\t\t\telm$core$Basics$modBy,\n\t\t\tc,\n\t\t\t((c - 1) - (8 * ktonon$elm_crypto$Crypto$SHA$Preprocess$messageSizeBytes(alg))) - A2(elm$core$Basics$modBy, c, l));\n\t});\nvar elm$core$Basics$pow = _Basics_pow;\nvar elm$core$Bitwise$and = _Bitwise_and;\nvar elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;\nvar ktonon$elm_word$Word$Bytes$fromInt = F2(\n\tfunction (byteCount, value) {\n\t\treturn (byteCount > 4) ? A2(\n\t\t\telm$core$List$append,\n\t\t\tA2(\n\t\t\t\tktonon$elm_word$Word$Bytes$fromInt,\n\t\t\t\tbyteCount - 4,\n\t\t\t\t(value / A2(elm$core$Basics$pow, 2, 32)) | 0),\n\t\t\tA2(ktonon$elm_word$Word$Bytes$fromInt, 4, 4294967295 & value)) : A2(\n\t\t\telm$core$List$map,\n\t\t\tfunction (i) {\n\t\t\t\treturn 255 & (value >>> ((byteCount - i) * A2(elm$core$Basics$pow, 2, 3)));\n\t\t\t},\n\t\t\tA2(elm$core$List$range, 1, byteCount));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Preprocess$postfix = F2(\n\tfunction (alg, messageSize) {\n\t\treturn elm$core$List$concat(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t[128]),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$core$List$repeat,\n\t\t\t\t\t((A2(ktonon$elm_crypto$Crypto$SHA$Preprocess$calculateK, alg, messageSize) - 7) / 8) | 0,\n\t\t\t\t\t0),\n\t\t\t\t\tA2(\n\t\t\t\t\tktonon$elm_word$Word$Bytes$fromInt,\n\t\t\t\t\tktonon$elm_crypto$Crypto$SHA$Preprocess$messageSizeBytes(alg),\n\t\t\t\t\tmessageSize)\n\t\t\t\t]));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Preprocess$preprocess = F2(\n\tfunction (alg, message) {\n\t\treturn A2(\n\t\t\telm$core$List$append,\n\t\t\tmessage,\n\t\t\tA2(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Preprocess$postfix,\n\t\t\t\talg,\n\t\t\t\t8 * elm$core$List$length(message)));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Types$WorkingVars = F8(\n\tfunction (a, b, c, d, e, f, g, h) {\n\t\treturn {a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h};\n\t});\nvar ktonon$elm_word$Word$D = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'D', a: a, b: b};\n\t});\nvar ktonon$elm_word$Word$W = function (a) {\n\treturn {$: 'W', a: a};\n};\nvar ktonon$elm_crypto$Crypto$SHA$Constants$initialHashValues = function (alg) {\n\tswitch (alg.$) {\n\t\tcase 'SHA224':\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tktonon$elm_word$Word$W(3238371032),\n\t\t\t\tktonon$elm_word$Word$W(914150663),\n\t\t\t\tktonon$elm_word$Word$W(812702999),\n\t\t\t\tktonon$elm_word$Word$W(4144912697),\n\t\t\t\tktonon$elm_word$Word$W(4290775857),\n\t\t\t\tktonon$elm_word$Word$W(1750603025),\n\t\t\t\tktonon$elm_word$Word$W(1694076839),\n\t\t\t\tktonon$elm_word$Word$W(3204075428));\n\t\tcase 'SHA256':\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tktonon$elm_word$Word$W(1779033703),\n\t\t\t\tktonon$elm_word$Word$W(3144134277),\n\t\t\t\tktonon$elm_word$Word$W(1013904242),\n\t\t\t\tktonon$elm_word$Word$W(2773480762),\n\t\t\t\tktonon$elm_word$Word$W(1359893119),\n\t\t\t\tktonon$elm_word$Word$W(2600822924),\n\t\t\t\tktonon$elm_word$Word$W(528734635),\n\t\t\t\tktonon$elm_word$Word$W(1541459225));\n\t\tcase 'SHA384':\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tA2(ktonon$elm_word$Word$D, 3418070365, 3238371032),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1654270250, 914150663),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2438529370, 812702999),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 355462360, 4144912697),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1731405415, 4290775857),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2394180231, 1750603025),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 3675008525, 1694076839),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1203062813, 3204075428));\n\t\tcase 'SHA512':\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1779033703, 4089235720),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 3144134277, 2227873595),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1013904242, 4271175723),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2773480762, 1595750129),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1359893119, 2917565137),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2600822924, 725511199),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 528734635, 4215389547),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1541459225, 327033209));\n\t\tcase 'SHA512_224':\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2352822216, 424955298),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1944164710, 2312950998),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 502970286, 855612546),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1738396948, 1479516111),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 258812777, 2077511080),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2011393907, 79989058),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 1067287976, 1780299464),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 286451373, 2446758561));\n\t\tdefault:\n\t\t\treturn A8(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\t\tA2(ktonon$elm_word$Word$D, 573645204, 4230739756),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2673172387, 3360449730),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 596883563, 1867755857),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2520282905, 1497426621),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 2519219938, 2827943907),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 3193839141, 1401305490),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 721525244, 746961066),\n\t\t\t\tA2(ktonon$elm_word$Word$D, 246885852, 2177182882));\n\t}\n};\nvar elm$core$List$drop = F2(\n\tfunction (n, list) {\n\t\tdrop:\n\t\twhile (true) {\n\t\t\tif (n <= 0) {\n\t\t\t\treturn list;\n\t\t\t} else {\n\t\t\t\tif (!list.b) {\n\t\t\t\t\treturn list;\n\t\t\t\t} else {\n\t\t\t\t\tvar x = list.a;\n\t\t\t\t\tvar xs = list.b;\n\t\t\t\t\tvar $temp$n = n - 1,\n\t\t\t\t\t\t$temp$list = xs;\n\t\t\t\t\tn = $temp$n;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tcontinue drop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$isEmpty = function (xs) {\n\tif (!xs.b) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\nvar elm$core$List$takeReverse = F3(\n\tfunction (n, list, kept) {\n\t\ttakeReverse:\n\t\twhile (true) {\n\t\t\tif (n <= 0) {\n\t\t\t\treturn kept;\n\t\t\t} else {\n\t\t\t\tif (!list.b) {\n\t\t\t\t\treturn kept;\n\t\t\t\t} else {\n\t\t\t\t\tvar x = list.a;\n\t\t\t\t\tvar xs = list.b;\n\t\t\t\t\tvar $temp$n = n - 1,\n\t\t\t\t\t\t$temp$list = xs,\n\t\t\t\t\t\t$temp$kept = A2(elm$core$List$cons, x, kept);\n\t\t\t\t\tn = $temp$n;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tkept = $temp$kept;\n\t\t\t\t\tcontinue takeReverse;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$takeTailRec = F2(\n\tfunction (n, list) {\n\t\treturn elm$core$List$reverse(\n\t\t\tA3(elm$core$List$takeReverse, n, list, _List_Nil));\n\t});\nvar elm$core$List$takeFast = F3(\n\tfunction (ctr, n, list) {\n\t\tif (n <= 0) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tvar _n0 = _Utils_Tuple2(n, list);\n\t\t\t_n0$1:\n\t\t\twhile (true) {\n\t\t\t\t_n0$5:\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!_n0.b.b) {\n\t\t\t\t\t\treturn list;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_n0.b.b.b) {\n\t\t\t\t\t\t\tswitch (_n0.a) {\n\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\tbreak _n0$1;\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\t\t\t\tvar x = _n2.a;\n\t\t\t\t\t\t\t\t\tvar _n3 = _n2.b;\n\t\t\t\t\t\t\t\t\tvar y = _n3.a;\n\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[x, y]);\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tif (_n0.b.b.b.b) {\n\t\t\t\t\t\t\t\t\t\tvar _n4 = _n0.b;\n\t\t\t\t\t\t\t\t\t\tvar x = _n4.a;\n\t\t\t\t\t\t\t\t\t\tvar _n5 = _n4.b;\n\t\t\t\t\t\t\t\t\t\tvar y = _n5.a;\n\t\t\t\t\t\t\t\t\t\tvar _n6 = _n5.b;\n\t\t\t\t\t\t\t\t\t\tvar z = _n6.a;\n\t\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[x, y, z]);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbreak _n0$5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tif (_n0.b.b.b.b && _n0.b.b.b.b.b) {\n\t\t\t\t\t\t\t\t\t\tvar _n7 = _n0.b;\n\t\t\t\t\t\t\t\t\t\tvar x = _n7.a;\n\t\t\t\t\t\t\t\t\t\tvar _n8 = _n7.b;\n\t\t\t\t\t\t\t\t\t\tvar y = _n8.a;\n\t\t\t\t\t\t\t\t\t\tvar _n9 = _n8.b;\n\t\t\t\t\t\t\t\t\t\tvar z = _n9.a;\n\t\t\t\t\t\t\t\t\t\tvar _n10 = _n9.b;\n\t\t\t\t\t\t\t\t\t\tvar w = _n10.a;\n\t\t\t\t\t\t\t\t\t\tvar tl = _n10.b;\n\t\t\t\t\t\t\t\t\t\treturn (ctr > 1000) ? A2(\n\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\tz,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tw,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$takeTailRec, n - 4, tl))))) : A2(\n\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\tz,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tw,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA3(elm$core$List$takeFast, ctr + 1, n - 4, tl)))));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbreak _n0$5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_n0.a === 1) {\n\t\t\t\t\t\t\t\tbreak _n0$1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak _n0$5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t}\n\t\t\tvar _n1 = _n0.b;\n\t\t\tvar x = _n1.a;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[x]);\n\t\t}\n\t});\nvar elm$core$List$take = F2(\n\tfunction (n, list) {\n\t\treturn A3(elm$core$List$takeFast, 0, n, list);\n\t});\nvar ktonon$elm_word$Word$sizeInBytes = function (s) {\n\tif (s.$ === 'Bit32') {\n\t\treturn 4;\n\t} else {\n\t\treturn 8;\n\t}\n};\nvar ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInWords = function (alg) {\n\treturn (ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInBytes(alg) / ktonon$elm_word$Word$sizeInBytes(\n\t\tktonon$elm_crypto$Crypto$SHA$Alg$wordSize(alg))) | 0;\n};\nvar ktonon$elm_crypto$Crypto$SHA$Chunk$next = F2(\n\tfunction (alg, words) {\n\t\tvar n = ktonon$elm_crypto$Crypto$SHA$Chunk$sizeInWords(alg);\n\t\tvar chunk = A2(elm$core$List$take, n, words);\n\t\treturn _Utils_Tuple2(\n\t\t\telm$core$List$isEmpty(chunk) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(chunk),\n\t\t\tA2(elm$core$List$drop, n, words));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Constants$roundConstants = function (alg) {\n\troundConstants:\n\twhile (true) {\n\t\tswitch (alg.$) {\n\t\t\tcase 'SHA224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue roundConstants;\n\t\t\tcase 'SHA256':\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tktonon$elm_word$Word$W(1116352408),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1899447441),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3049323471),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3921009573),\n\t\t\t\t\t\tktonon$elm_word$Word$W(961987163),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1508970993),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2453635748),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2870763221),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3624381080),\n\t\t\t\t\t\tktonon$elm_word$Word$W(310598401),\n\t\t\t\t\t\tktonon$elm_word$Word$W(607225278),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1426881987),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1925078388),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2162078206),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2614888103),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3248222580),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3835390401),\n\t\t\t\t\t\tktonon$elm_word$Word$W(4022224774),\n\t\t\t\t\t\tktonon$elm_word$Word$W(264347078),\n\t\t\t\t\t\tktonon$elm_word$Word$W(604807628),\n\t\t\t\t\t\tktonon$elm_word$Word$W(770255983),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1249150122),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1555081692),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1996064986),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2554220882),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2821834349),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2952996808),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3210313671),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3336571891),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3584528711),\n\t\t\t\t\t\tktonon$elm_word$Word$W(113926993),\n\t\t\t\t\t\tktonon$elm_word$Word$W(338241895),\n\t\t\t\t\t\tktonon$elm_word$Word$W(666307205),\n\t\t\t\t\t\tktonon$elm_word$Word$W(773529912),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1294757372),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1396182291),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1695183700),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1986661051),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2177026350),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2456956037),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2730485921),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2820302411),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3259730800),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3345764771),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3516065817),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3600352804),\n\t\t\t\t\t\tktonon$elm_word$Word$W(4094571909),\n\t\t\t\t\t\tktonon$elm_word$Word$W(275423344),\n\t\t\t\t\t\tktonon$elm_word$Word$W(430227734),\n\t\t\t\t\t\tktonon$elm_word$Word$W(506948616),\n\t\t\t\t\t\tktonon$elm_word$Word$W(659060556),\n\t\t\t\t\t\tktonon$elm_word$Word$W(883997877),\n\t\t\t\t\t\tktonon$elm_word$Word$W(958139571),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1322822218),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1537002063),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1747873779),\n\t\t\t\t\t\tktonon$elm_word$Word$W(1955562222),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2024104815),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2227730452),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2361852424),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2428436474),\n\t\t\t\t\t\tktonon$elm_word$Word$W(2756734187),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3204031479),\n\t\t\t\t\t\tktonon$elm_word$Word$W(3329325298)\n\t\t\t\t\t]);\n\t\t\tcase 'SHA384':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue roundConstants;\n\t\t\tcase 'SHA512':\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1116352408, 3609767458),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1899447441, 602891725),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3049323471, 3964484399),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3921009573, 2173295548),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 961987163, 4081628472),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1508970993, 3053834265),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2453635748, 2937671579),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2870763221, 3664609560),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3624381080, 2734883394),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 310598401, 1164996542),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 607225278, 1323610764),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1426881987, 3590304994),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1925078388, 4068182383),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2162078206, 991336113),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2614888103, 633803317),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3248222580, 3479774868),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3835390401, 2666613458),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 4022224774, 944711139),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 264347078, 2341262773),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 604807628, 2007800933),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 770255983, 1495990901),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1249150122, 1856431235),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1555081692, 3175218132),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1996064986, 2198950837),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2554220882, 3999719339),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2821834349, 766784016),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2952996808, 2566594879),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3210313671, 3203337956),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3336571891, 1034457026),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3584528711, 2466948901),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 113926993, 3758326383),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 338241895, 168717936),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 666307205, 1188179964),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 773529912, 1546045734),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1294757372, 1522805485),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1396182291, 2643833823),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1695183700, 2343527390),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1986661051, 1014477480),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2177026350, 1206759142),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2456956037, 344077627),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2730485921, 1290863460),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2820302411, 3158454273),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3259730800, 3505952657),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3345764771, 106217008),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3516065817, 3606008344),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3600352804, 1432725776),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 4094571909, 1467031594),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 275423344, 851169720),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 430227734, 3100823752),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 506948616, 1363258195),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 659060556, 3750685593),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 883997877, 3785050280),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 958139571, 3318307427),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1322822218, 3812723403),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1537002063, 2003034995),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1747873779, 3602036899),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1955562222, 1575990012),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2024104815, 1125592928),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2227730452, 2716904306),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2361852424, 442776044),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2428436474, 593698344),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 2756734187, 3733110249),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3204031479, 2999351573),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3329325298, 3815920427),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3391569614, 3928383900),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3515267271, 566280711),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 3940187606, 3454069534),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 4118630271, 4000239992),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 116418474, 1914138554),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 174292421, 2731055270),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 289380356, 3203993006),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 460393269, 320620315),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 685471733, 587496836),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 852142971, 1086792851),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1017036298, 365543100),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1126000580, 2618297676),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1288033470, 3409855158),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1501505948, 4234509866),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1607167915, 987167468),\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$D, 1816402316, 1246189591)\n\t\t\t\t\t]);\n\t\t\tcase 'SHA512_224':\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue roundConstants;\n\t\t\tdefault:\n\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512;\n\t\t\t\talg = $temp$alg;\n\t\t\t\tcontinue roundConstants;\n\t\t}\n\t}\n};\nvar elm$core$Elm$JsArray$appendN = _JsArray_appendN;\nvar elm$core$Elm$JsArray$slice = _JsArray_slice;\nvar elm$core$Array$appendHelpBuilder = F2(\n\tfunction (tail, builder) {\n\t\tvar tailLen = elm$core$Elm$JsArray$length(tail);\n\t\tvar notAppended = (elm$core$Array$branchFactor - elm$core$Elm$JsArray$length(builder.tail)) - tailLen;\n\t\tvar appended = A3(elm$core$Elm$JsArray$appendN, elm$core$Array$branchFactor, builder.tail, tail);\n\t\treturn (notAppended < 0) ? {\n\t\t\tnodeList: A2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\telm$core$Array$Leaf(appended),\n\t\t\t\tbuilder.nodeList),\n\t\t\tnodeListSize: builder.nodeListSize + 1,\n\t\t\ttail: A3(elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)\n\t\t} : ((!notAppended) ? {\n\t\t\tnodeList: A2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\telm$core$Array$Leaf(appended),\n\t\t\t\tbuilder.nodeList),\n\t\t\tnodeListSize: builder.nodeListSize + 1,\n\t\t\ttail: elm$core$Elm$JsArray$empty\n\t\t} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});\n\t});\nvar elm$core$Array$bitMask = 4294967295 >>> (32 - elm$core$Array$shiftStep);\nvar elm$core$Elm$JsArray$push = _JsArray_push;\nvar elm$core$Elm$JsArray$singleton = _JsArray_singleton;\nvar elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;\nvar elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;\nvar elm$core$Array$insertTailInTree = F4(\n\tfunction (shift, index, tail, tree) {\n\t\tvar pos = elm$core$Array$bitMask & (index >>> shift);\n\t\tif (_Utils_cmp(\n\t\t\tpos,\n\t\t\telm$core$Elm$JsArray$length(tree)) > -1) {\n\t\t\tif (shift === 5) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Elm$JsArray$push,\n\t\t\t\t\telm$core$Array$Leaf(tail),\n\t\t\t\t\ttree);\n\t\t\t} else {\n\t\t\t\tvar newSub = elm$core$Array$SubTree(\n\t\t\t\t\tA4(elm$core$Array$insertTailInTree, shift - elm$core$Array$shiftStep, index, tail, elm$core$Elm$JsArray$empty));\n\t\t\t\treturn A2(elm$core$Elm$JsArray$push, newSub, tree);\n\t\t\t}\n\t\t} else {\n\t\t\tvar value = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);\n\t\t\tif (value.$ === 'SubTree') {\n\t\t\t\tvar subTree = value.a;\n\t\t\t\tvar newSub = elm$core$Array$SubTree(\n\t\t\t\t\tA4(elm$core$Array$insertTailInTree, shift - elm$core$Array$shiftStep, index, tail, subTree));\n\t\t\t\treturn A3(elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);\n\t\t\t} else {\n\t\t\t\tvar newSub = elm$core$Array$SubTree(\n\t\t\t\t\tA4(\n\t\t\t\t\t\telm$core$Array$insertTailInTree,\n\t\t\t\t\t\tshift - elm$core$Array$shiftStep,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\ttail,\n\t\t\t\t\t\telm$core$Elm$JsArray$singleton(value)));\n\t\t\t\treturn A3(elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;\nvar elm$core$Array$unsafeReplaceTail = F2(\n\tfunction (newTail, _n0) {\n\t\tvar len = _n0.a;\n\t\tvar startShift = _n0.b;\n\t\tvar tree = _n0.c;\n\t\tvar tail = _n0.d;\n\t\tvar originalTailLen = elm$core$Elm$JsArray$length(tail);\n\t\tvar newTailLen = elm$core$Elm$JsArray$length(newTail);\n\t\tvar newArrayLen = len + (newTailLen - originalTailLen);\n\t\tif (_Utils_eq(newTailLen, elm$core$Array$branchFactor)) {\n\t\t\tvar overflow = _Utils_cmp(newArrayLen >>> elm$core$Array$shiftStep, 1 << startShift) > 0;\n\t\t\tif (overflow) {\n\t\t\t\tvar newShift = startShift + elm$core$Array$shiftStep;\n\t\t\t\tvar newTree = A4(\n\t\t\t\t\telm$core$Array$insertTailInTree,\n\t\t\t\t\tnewShift,\n\t\t\t\t\tlen,\n\t\t\t\t\tnewTail,\n\t\t\t\t\telm$core$Elm$JsArray$singleton(\n\t\t\t\t\t\telm$core$Array$SubTree(tree)));\n\t\t\t\treturn A4(elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, elm$core$Elm$JsArray$empty);\n\t\t\t} else {\n\t\t\t\treturn A4(\n\t\t\t\t\telm$core$Array$Array_elm_builtin,\n\t\t\t\t\tnewArrayLen,\n\t\t\t\t\tstartShift,\n\t\t\t\t\tA4(elm$core$Array$insertTailInTree, startShift, len, newTail, tree),\n\t\t\t\t\telm$core$Elm$JsArray$empty);\n\t\t\t}\n\t\t} else {\n\t\t\treturn A4(elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);\n\t\t}\n\t});\nvar elm$core$Array$appendHelpTree = F2(\n\tfunction (toAppend, array) {\n\t\tvar len = array.a;\n\t\tvar tree = array.c;\n\t\tvar tail = array.d;\n\t\tvar itemsToAppend = elm$core$Elm$JsArray$length(toAppend);\n\t\tvar notAppended = (elm$core$Array$branchFactor - elm$core$Elm$JsArray$length(tail)) - itemsToAppend;\n\t\tvar appended = A3(elm$core$Elm$JsArray$appendN, elm$core$Array$branchFactor, tail, toAppend);\n\t\tvar newArray = A2(elm$core$Array$unsafeReplaceTail, appended, array);\n\t\tif (notAppended < 0) {\n\t\t\tvar nextTail = A3(elm$core$Elm$JsArray$slice, notAppended, itemsToAppend, toAppend);\n\t\t\treturn A2(elm$core$Array$unsafeReplaceTail, nextTail, newArray);\n\t\t} else {\n\t\t\treturn newArray;\n\t\t}\n\t});\nvar elm$core$Elm$JsArray$foldl = _JsArray_foldl;\nvar elm$core$Array$builderFromArray = function (_n0) {\n\tvar len = _n0.a;\n\tvar tree = _n0.c;\n\tvar tail = _n0.d;\n\tvar helper = F2(\n\t\tfunction (node, acc) {\n\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\tvar subTree = node.a;\n\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, helper, acc, subTree);\n\t\t\t} else {\n\t\t\t\treturn A2(elm$core$List$cons, node, acc);\n\t\t\t}\n\t\t});\n\treturn {\n\t\tnodeList: A3(elm$core$Elm$JsArray$foldl, helper, _List_Nil, tree),\n\t\tnodeListSize: (len / elm$core$Array$branchFactor) | 0,\n\t\ttail: tail\n\t};\n};\nvar elm$core$Array$append = F2(\n\tfunction (a, _n0) {\n\t\tvar aTail = a.d;\n\t\tvar bLen = _n0.a;\n\t\tvar bTree = _n0.c;\n\t\tvar bTail = _n0.d;\n\t\tif (_Utils_cmp(bLen, elm$core$Array$branchFactor * 4) < 1) {\n\t\t\tvar foldHelper = F2(\n\t\t\t\tfunction (node, array) {\n\t\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\t\tvar tree = node.a;\n\t\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, foldHelper, array, tree);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar leaf = node.a;\n\t\t\t\t\t\treturn A2(elm$core$Array$appendHelpTree, leaf, array);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\treturn A2(\n\t\t\t\telm$core$Array$appendHelpTree,\n\t\t\t\tbTail,\n\t\t\t\tA3(elm$core$Elm$JsArray$foldl, foldHelper, a, bTree));\n\t\t} else {\n\t\t\tvar foldHelper = F2(\n\t\t\t\tfunction (node, builder) {\n\t\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\t\tvar tree = node.a;\n\t\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, foldHelper, builder, tree);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar leaf = node.a;\n\t\t\t\t\t\treturn A2(elm$core$Array$appendHelpBuilder, leaf, builder);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\treturn A2(\n\t\t\t\telm$core$Array$builderToArray,\n\t\t\t\ttrue,\n\t\t\t\tA2(\n\t\t\t\t\telm$core$Array$appendHelpBuilder,\n\t\t\t\t\tbTail,\n\t\t\t\t\tA3(\n\t\t\t\t\t\telm$core$Elm$JsArray$foldl,\n\t\t\t\t\t\tfoldHelper,\n\t\t\t\t\t\telm$core$Array$builderFromArray(a),\n\t\t\t\t\t\tbTree)));\n\t\t}\n\t});\nvar elm$core$Array$getHelp = F3(\n\tfunction (shift, index, tree) {\n\t\tgetHelp:\n\t\twhile (true) {\n\t\t\tvar pos = elm$core$Array$bitMask & (index >>> shift);\n\t\t\tvar _n0 = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);\n\t\t\tif (_n0.$ === 'SubTree') {\n\t\t\t\tvar subTree = _n0.a;\n\t\t\t\tvar $temp$shift = shift - elm$core$Array$shiftStep,\n\t\t\t\t\t$temp$index = index,\n\t\t\t\t\t$temp$tree = subTree;\n\t\t\t\tshift = $temp$shift;\n\t\t\t\tindex = $temp$index;\n\t\t\t\ttree = $temp$tree;\n\t\t\t\tcontinue getHelp;\n\t\t\t} else {\n\t\t\t\tvar values = _n0.a;\n\t\t\t\treturn A2(elm$core$Elm$JsArray$unsafeGet, elm$core$Array$bitMask & index, values);\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$Array$tailIndex = function (len) {\n\treturn (len >>> 5) << 5;\n};\nvar elm$core$Array$get = F2(\n\tfunction (index, _n0) {\n\t\tvar len = _n0.a;\n\t\tvar startShift = _n0.b;\n\t\tvar tree = _n0.c;\n\t\tvar tail = _n0.d;\n\t\treturn ((index < 0) || (_Utils_cmp(index, len) > -1)) ? elm$core$Maybe$Nothing : ((_Utils_cmp(\n\t\t\tindex,\n\t\t\telm$core$Array$tailIndex(len)) > -1) ? elm$core$Maybe$Just(\n\t\t\tA2(elm$core$Elm$JsArray$unsafeGet, elm$core$Array$bitMask & index, tail)) : elm$core$Maybe$Just(\n\t\t\tA3(elm$core$Array$getHelp, startShift, index, tree)));\n\t});\nvar ktonon$elm_word$Word$Mismatch = {$: 'Mismatch'};\nvar ktonon$elm_crypto$Crypto$SHA$MessageSchedule$at = function (i) {\n\treturn A2(\n\t\telm$core$Basics$composeR,\n\t\telm$core$Array$get(i),\n\t\telm$core$Maybe$withDefault(ktonon$elm_word$Word$Mismatch));\n};\nvar ktonon$elm_word$Word$Helpers$lowMask = function (n) {\n\tswitch (n) {\n\t\tcase 0:\n\t\t\treturn 0;\n\t\tcase 1:\n\t\t\treturn 1;\n\t\tcase 2:\n\t\t\treturn 3;\n\t\tcase 3:\n\t\t\treturn 7;\n\t\tcase 4:\n\t\t\treturn 15;\n\t\tcase 5:\n\t\t\treturn 31;\n\t\tcase 6:\n\t\t\treturn 63;\n\t\tcase 7:\n\t\t\treturn 127;\n\t\tcase 8:\n\t\t\treturn 255;\n\t\tcase 9:\n\t\t\treturn 511;\n\t\tcase 10:\n\t\t\treturn 1023;\n\t\tcase 11:\n\t\t\treturn 2047;\n\t\tcase 12:\n\t\t\treturn 4095;\n\t\tcase 13:\n\t\t\treturn 8191;\n\t\tcase 14:\n\t\t\treturn 16383;\n\t\tcase 15:\n\t\t\treturn 32767;\n\t\tcase 16:\n\t\t\treturn 65535;\n\t\tcase 17:\n\t\t\treturn 131071;\n\t\tcase 18:\n\t\t\treturn 262143;\n\t\tcase 19:\n\t\t\treturn 524287;\n\t\tcase 20:\n\t\t\treturn 1048575;\n\t\tcase 21:\n\t\t\treturn 2097151;\n\t\tcase 22:\n\t\t\treturn 4194303;\n\t\tcase 23:\n\t\t\treturn 8388607;\n\t\tcase 24:\n\t\t\treturn 16777215;\n\t\tcase 25:\n\t\t\treturn 33554431;\n\t\tcase 26:\n\t\t\treturn 67108863;\n\t\tcase 27:\n\t\t\treturn 134217727;\n\t\tcase 28:\n\t\t\treturn 268435455;\n\t\tcase 29:\n\t\t\treturn 536870911;\n\t\tcase 30:\n\t\t\treturn 1073741823;\n\t\tcase 31:\n\t\t\treturn 2147483647;\n\t\tdefault:\n\t\t\treturn 4294967295;\n\t}\n};\nvar ktonon$elm_word$Word$Helpers$safeShiftRightZfBy = F2(\n\tfunction (n, val) {\n\t\treturn (n >= 32) ? 0 : (val >>> n);\n\t});\nvar ktonon$elm_word$Word$dShiftRightZfBy = F2(\n\tfunction (n, _n0) {\n\t\tvar xh = _n0.a;\n\t\tvar xl = _n0.b;\n\t\treturn (n > 32) ? _Utils_Tuple2(\n\t\t\t0,\n\t\t\tA2(ktonon$elm_word$Word$Helpers$safeShiftRightZfBy, n - 32, xh)) : _Utils_Tuple2(\n\t\t\tA2(ktonon$elm_word$Word$Helpers$safeShiftRightZfBy, n, xh),\n\t\t\tA2(ktonon$elm_word$Word$Helpers$safeShiftRightZfBy, n, xl) + ((ktonon$elm_word$Word$Helpers$lowMask(n) & xh) << (32 - n)));\n\t});\nvar ktonon$elm_word$Word$Helpers$rotatedLowBits = F2(\n\tfunction (n, val) {\n\t\treturn elm$core$Basics$add(\n\t\t\t(ktonon$elm_word$Word$Helpers$lowMask(n) & val) << (32 - n));\n\t});\nvar ktonon$elm_word$Word$rotateRightBy = F2(\n\tfunction (unboundN, word) {\n\t\tswitch (word.$) {\n\t\t\tcase 'W':\n\t\t\t\tvar x = word.a;\n\t\t\t\tvar n = A2(elm$core$Basics$modBy, 32, unboundN);\n\t\t\t\treturn ktonon$elm_word$Word$W(\n\t\t\t\t\tA3(\n\t\t\t\t\t\tktonon$elm_word$Word$Helpers$rotatedLowBits,\n\t\t\t\t\t\tn,\n\t\t\t\t\t\tx,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$Helpers$safeShiftRightZfBy, n, x)));\n\t\t\tcase 'D':\n\t\t\t\tvar xh = word.a;\n\t\t\t\tvar xl = word.b;\n\t\t\t\tvar n = A2(elm$core$Basics$modBy, 64, unboundN);\n\t\t\t\tif (n > 32) {\n\t\t\t\t\tvar n_ = n - 32;\n\t\t\t\t\tvar _n1 = A2(\n\t\t\t\t\t\tktonon$elm_word$Word$dShiftRightZfBy,\n\t\t\t\t\t\tn_,\n\t\t\t\t\t\t_Utils_Tuple2(xl, xh));\n\t\t\t\t\tvar zh = _n1.a;\n\t\t\t\t\tvar zl = _n1.b;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$D,\n\t\t\t\t\t\tA3(ktonon$elm_word$Word$Helpers$rotatedLowBits, n_, xh, zh),\n\t\t\t\t\t\tzl);\n\t\t\t\t} else {\n\t\t\t\t\tvar _n2 = A2(\n\t\t\t\t\t\tktonon$elm_word$Word$dShiftRightZfBy,\n\t\t\t\t\t\tn,\n\t\t\t\t\t\t_Utils_Tuple2(xh, xl));\n\t\t\t\t\tvar zh = _n2.a;\n\t\t\t\t\tvar zl = _n2.b;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$D,\n\t\t\t\t\t\tA3(ktonon$elm_word$Word$Helpers$rotatedLowBits, n, xl, zh),\n\t\t\t\t\t\tzl);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn ktonon$elm_word$Word$Mismatch;\n\t\t}\n\t});\nvar ktonon$elm_word$Word$shiftRightZfBy = F2(\n\tfunction (n, word) {\n\t\tswitch (word.$) {\n\t\t\tcase 'W':\n\t\t\t\tvar x = word.a;\n\t\t\t\treturn ktonon$elm_word$Word$W(\n\t\t\t\t\tA2(ktonon$elm_word$Word$Helpers$safeShiftRightZfBy, n, x));\n\t\t\tcase 'D':\n\t\t\t\tvar xh = word.a;\n\t\t\t\tvar xl = word.b;\n\t\t\t\tvar _n1 = A2(\n\t\t\t\t\tktonon$elm_word$Word$dShiftRightZfBy,\n\t\t\t\t\tn,\n\t\t\t\t\t_Utils_Tuple2(xh, xl));\n\t\t\t\tvar zh = _n1.a;\n\t\t\t\tvar zl = _n1.b;\n\t\t\t\treturn A2(ktonon$elm_word$Word$D, zh, zl);\n\t\t\tdefault:\n\t\t\t\treturn ktonon$elm_word$Word$Mismatch;\n\t\t}\n\t});\nvar elm$core$Bitwise$xor = _Bitwise_xor;\nvar ktonon$elm_word$Word$xor = F2(\n\tfunction (wx, wy) {\n\t\tvar _n0 = _Utils_Tuple2(wx, wy);\n\t\t_n0$2:\n\t\twhile (true) {\n\t\t\tswitch (_n0.a.$) {\n\t\t\t\tcase 'W':\n\t\t\t\t\tif (_n0.b.$ === 'W') {\n\t\t\t\t\t\tvar x = _n0.a.a;\n\t\t\t\t\t\tvar y = _n0.b.a;\n\t\t\t\t\t\treturn ktonon$elm_word$Word$W(x ^ y);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tcase 'D':\n\t\t\t\t\tif (_n0.b.$ === 'D') {\n\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\tvar xh = _n1.a;\n\t\t\t\t\t\tvar xl = _n1.b;\n\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\tvar yh = _n2.a;\n\t\t\t\t\t\tvar yl = _n2.b;\n\t\t\t\t\t\treturn A2(ktonon$elm_word$Word$D, xh ^ yh, xl ^ yl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tbreak _n0$2;\n\t\t\t}\n\t\t}\n\t\treturn ktonon$elm_word$Word$Mismatch;\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$MessageSchedule$sigma0 = F2(\n\tfunction (alg, word) {\n\t\tsigma0:\n\t\twhile (true) {\n\t\t\tswitch (alg.$) {\n\t\t\t\tcase 'SHA224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma0;\n\t\t\t\tcase 'SHA384':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma0;\n\t\t\t\tcase 'SHA256':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$shiftRightZfBy, 3, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 18, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 7, word)));\n\t\t\t\tcase 'SHA512':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$shiftRightZfBy, 7, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 8, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 1, word)));\n\t\t\t\tcase 'SHA512_224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma0;\n\t\t\t\tdefault:\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma0;\n\t\t\t}\n\t\t}\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$MessageSchedule$sigma1 = F2(\n\tfunction (alg, word) {\n\t\tsigma1:\n\t\twhile (true) {\n\t\t\tswitch (alg.$) {\n\t\t\t\tcase 'SHA224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma1;\n\t\t\t\tcase 'SHA384':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma1;\n\t\t\t\tcase 'SHA256':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$shiftRightZfBy, 10, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 19, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 17, word)));\n\t\t\t\tcase 'SHA512':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$shiftRightZfBy, 6, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 61, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 19, word)));\n\t\t\t\tcase 'SHA512_224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma1;\n\t\t\t\tdefault:\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sigma1;\n\t\t\t}\n\t\t}\n\t});\nvar ktonon$elm_word$Word$low31mask = 2147483647;\nvar ktonon$elm_word$Word$carry32 = F2(\n\tfunction (x, y) {\n\t\tvar _n0 = (x >>> 31) + (y >>> 31);\n\t\tswitch (_n0) {\n\t\t\tcase 0:\n\t\t\t\treturn 0;\n\t\t\tcase 2:\n\t\t\t\treturn 1;\n\t\t\tdefault:\n\t\t\t\treturn (1 === (((ktonon$elm_word$Word$low31mask & x) + (ktonon$elm_word$Word$low31mask & y)) >>> 31)) ? 1 : 0;\n\t\t}\n\t});\nvar ktonon$elm_word$Word$mod32 = function (val) {\n\treturn A2(\n\t\telm$core$Basics$modBy,\n\t\tA2(elm$core$Basics$pow, 2, 32),\n\t\tval);\n};\nvar ktonon$elm_word$Word$add = F2(\n\tfunction (wx, wy) {\n\t\tvar _n0 = _Utils_Tuple2(wx, wy);\n\t\t_n0$2:\n\t\twhile (true) {\n\t\t\tswitch (_n0.a.$) {\n\t\t\t\tcase 'W':\n\t\t\t\t\tif (_n0.b.$ === 'W') {\n\t\t\t\t\t\tvar x = _n0.a.a;\n\t\t\t\t\t\tvar y = _n0.b.a;\n\t\t\t\t\t\treturn ktonon$elm_word$Word$W(\n\t\t\t\t\t\t\tktonon$elm_word$Word$mod32(x + y));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tcase 'D':\n\t\t\t\t\tif (_n0.b.$ === 'D') {\n\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\tvar xh = _n1.a;\n\t\t\t\t\t\tvar xl = _n1.b;\n\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\tvar yh = _n2.a;\n\t\t\t\t\t\tvar yl = _n2.b;\n\t\t\t\t\t\tvar zl = xl + yl;\n\t\t\t\t\t\tvar zh = (xh + yh) + A2(ktonon$elm_word$Word$carry32, xl, yl);\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$D,\n\t\t\t\t\t\t\tktonon$elm_word$Word$mod32(zh),\n\t\t\t\t\t\t\tktonon$elm_word$Word$mod32(zl));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tbreak _n0$2;\n\t\t\t}\n\t\t}\n\t\treturn ktonon$elm_word$Word$Mismatch;\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$MessageSchedule$nextPart = F3(\n\tfunction (alg, i, w) {\n\t\tvar i2 = A2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$at, i - 2, w);\n\t\tvar s1 = A2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$sigma1, alg, i2);\n\t\tvar i15 = A2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$at, i - 15, w);\n\t\tvar s0 = A2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$sigma0, alg, i15);\n\t\treturn A2(\n\t\t\telm$core$Array$append,\n\t\t\tw,\n\t\t\telm$core$Array$fromList(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tktonon$elm_word$Word$add,\n\t\t\t\t\t\ts1,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$add,\n\t\t\t\t\t\t\tA2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$at, i - 7, w),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\tktonon$elm_word$Word$add,\n\t\t\t\t\t\t\t\ts0,\n\t\t\t\t\t\t\t\tA2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$at, i - 16, w))))\n\t\t\t\t\t])));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$MessageSchedule$fromChunk = F2(\n\tfunction (alg, chunk) {\n\t\tvar n = elm$core$List$length(\n\t\t\tktonon$elm_crypto$Crypto$SHA$Constants$roundConstants(alg));\n\t\treturn A3(\n\t\t\telm$core$List$foldl,\n\t\t\tktonon$elm_crypto$Crypto$SHA$MessageSchedule$nextPart(alg),\n\t\t\telm$core$Array$fromList(chunk),\n\t\t\tA2(elm$core$List$range, 16, n - 1));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Process$sum0 = F2(\n\tfunction (alg, word) {\n\t\tsum0:\n\t\twhile (true) {\n\t\t\tswitch (alg.$) {\n\t\t\t\tcase 'SHA224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum0;\n\t\t\t\tcase 'SHA384':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum0;\n\t\t\t\tcase 'SHA256':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 22, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 13, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 2, word)));\n\t\t\t\tcase 'SHA512':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 39, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 34, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 28, word)));\n\t\t\t\tcase 'SHA512_224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum0;\n\t\t\t\tdefault:\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum0;\n\t\t\t}\n\t\t}\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Process$sum1 = F2(\n\tfunction (alg, word) {\n\t\tsum1:\n\t\twhile (true) {\n\t\t\tswitch (alg.$) {\n\t\t\t\tcase 'SHA224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA256,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum1;\n\t\t\t\tcase 'SHA384':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum1;\n\t\t\t\tcase 'SHA256':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 25, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 11, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 6, word)));\n\t\t\t\tcase 'SHA512':\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 41, word),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 18, word),\n\t\t\t\t\t\t\tA2(ktonon$elm_word$Word$rotateRightBy, 14, word)));\n\t\t\t\tcase 'SHA512_224':\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum1;\n\t\t\t\tdefault:\n\t\t\t\t\tvar $temp$alg = ktonon$elm_crypto$Crypto$SHA$Alg$SHA512,\n\t\t\t\t\t\t$temp$word = word;\n\t\t\t\t\talg = $temp$alg;\n\t\t\t\t\tword = $temp$word;\n\t\t\t\t\tcontinue sum1;\n\t\t\t}\n\t\t}\n\t});\nvar ktonon$elm_word$Word$and = F2(\n\tfunction (wx, wy) {\n\t\tvar _n0 = _Utils_Tuple2(wx, wy);\n\t\t_n0$2:\n\t\twhile (true) {\n\t\t\tswitch (_n0.a.$) {\n\t\t\t\tcase 'W':\n\t\t\t\t\tif (_n0.b.$ === 'W') {\n\t\t\t\t\t\tvar x = _n0.a.a;\n\t\t\t\t\t\tvar y = _n0.b.a;\n\t\t\t\t\t\treturn ktonon$elm_word$Word$W(x & y);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tcase 'D':\n\t\t\t\t\tif (_n0.b.$ === 'D') {\n\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\tvar xh = _n1.a;\n\t\t\t\t\t\tvar xl = _n1.b;\n\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\tvar yh = _n2.a;\n\t\t\t\t\t\tvar yl = _n2.b;\n\t\t\t\t\t\treturn A2(ktonon$elm_word$Word$D, xh & yh, xl & yl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tbreak _n0$2;\n\t\t\t}\n\t\t}\n\t\treturn ktonon$elm_word$Word$Mismatch;\n\t});\nvar elm$core$Bitwise$complement = _Bitwise_complement;\nvar ktonon$elm_word$Word$complement = function (word) {\n\tswitch (word.$) {\n\t\tcase 'W':\n\t\t\tvar x = word.a;\n\t\t\treturn ktonon$elm_word$Word$W(~x);\n\t\tcase 'D':\n\t\t\tvar xh = word.a;\n\t\t\tvar xl = word.b;\n\t\t\treturn A2(ktonon$elm_word$Word$D, ~xh, ~xl);\n\t\tdefault:\n\t\t\treturn ktonon$elm_word$Word$Mismatch;\n\t}\n};\nvar ktonon$elm_crypto$Crypto$SHA$Process$compress = F3(\n\tfunction (alg, _n0, _n1) {\n\t\tvar k = _n0.a;\n\t\tvar w = _n0.b;\n\t\tvar a = _n1.a;\n\t\tvar b = _n1.b;\n\t\tvar c = _n1.c;\n\t\tvar d = _n1.d;\n\t\tvar e = _n1.e;\n\t\tvar f = _n1.f;\n\t\tvar g = _n1.g;\n\t\tvar h = _n1.h;\n\t\tvar s1 = A2(ktonon$elm_crypto$Crypto$SHA$Process$sum1, alg, e);\n\t\tvar s0 = A2(ktonon$elm_crypto$Crypto$SHA$Process$sum0, alg, a);\n\t\tvar maj = A2(\n\t\t\tktonon$elm_word$Word$xor,\n\t\t\tA2(ktonon$elm_word$Word$and, b, c),\n\t\t\tA2(\n\t\t\t\tktonon$elm_word$Word$xor,\n\t\t\t\tA2(ktonon$elm_word$Word$and, a, c),\n\t\t\t\tA2(ktonon$elm_word$Word$and, a, b)));\n\t\tvar temp2 = A2(ktonon$elm_word$Word$add, s0, maj);\n\t\tvar ch = A2(\n\t\t\tktonon$elm_word$Word$xor,\n\t\t\tA2(\n\t\t\t\tktonon$elm_word$Word$and,\n\t\t\t\tg,\n\t\t\t\tktonon$elm_word$Word$complement(e)),\n\t\t\tA2(ktonon$elm_word$Word$and, e, f));\n\t\tvar temp1 = A2(\n\t\t\tktonon$elm_word$Word$add,\n\t\t\tw,\n\t\t\tA2(\n\t\t\t\tktonon$elm_word$Word$add,\n\t\t\t\tk,\n\t\t\t\tA2(\n\t\t\t\t\tktonon$elm_word$Word$add,\n\t\t\t\t\tch,\n\t\t\t\t\tA2(ktonon$elm_word$Word$add, s1, h))));\n\t\treturn A8(\n\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\tA2(ktonon$elm_word$Word$add, temp1, temp2),\n\t\t\ta,\n\t\t\tb,\n\t\t\tc,\n\t\t\tA2(ktonon$elm_word$Word$add, d, temp1),\n\t\t\te,\n\t\t\tf,\n\t\t\tg);\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Process$compressLoop = F3(\n\tfunction (alg, workingVars, messageSchedule) {\n\t\treturn A3(\n\t\t\telm$core$List$foldl,\n\t\t\tktonon$elm_crypto$Crypto$SHA$Process$compress(alg),\n\t\t\tworkingVars,\n\t\t\tA3(\n\t\t\t\telm$core$List$map2,\n\t\t\t\tF2(\n\t\t\t\t\tfunction (a, b) {\n\t\t\t\t\t\treturn _Utils_Tuple2(a, b);\n\t\t\t\t\t}),\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Constants$roundConstants(alg),\n\t\t\t\telm$core$Array$toList(messageSchedule)));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Types$addWorkingVars = F2(\n\tfunction (x, y) {\n\t\treturn A8(\n\t\t\tktonon$elm_crypto$Crypto$SHA$Types$WorkingVars,\n\t\t\tA2(ktonon$elm_word$Word$add, x.a, y.a),\n\t\t\tA2(ktonon$elm_word$Word$add, x.b, y.b),\n\t\t\tA2(ktonon$elm_word$Word$add, x.c, y.c),\n\t\t\tA2(ktonon$elm_word$Word$add, x.d, y.d),\n\t\t\tA2(ktonon$elm_word$Word$add, x.e, y.e),\n\t\t\tA2(ktonon$elm_word$Word$add, x.f, y.f),\n\t\t\tA2(ktonon$elm_word$Word$add, x.g, y.g),\n\t\t\tA2(ktonon$elm_word$Word$add, x.h, y.h));\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Process$chunks_ = F3(\n\tfunction (alg, words, currentHash) {\n\t\tchunks_:\n\t\twhile (true) {\n\t\t\tvar _n0 = A2(ktonon$elm_crypto$Crypto$SHA$Chunk$next, alg, words);\n\t\t\tif (_n0.a.$ === 'Nothing') {\n\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\treturn currentHash;\n\t\t\t} else {\n\t\t\t\tvar chunk = _n0.a.a;\n\t\t\t\tvar rest = _n0.b;\n\t\t\t\tvar vars = A2(\n\t\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$addWorkingVars,\n\t\t\t\t\tcurrentHash,\n\t\t\t\t\tA3(\n\t\t\t\t\t\tktonon$elm_crypto$Crypto$SHA$Process$compressLoop,\n\t\t\t\t\t\talg,\n\t\t\t\t\t\tcurrentHash,\n\t\t\t\t\t\tA2(ktonon$elm_crypto$Crypto$SHA$MessageSchedule$fromChunk, alg, chunk)));\n\t\t\t\tvar $temp$alg = alg,\n\t\t\t\t\t$temp$words = rest,\n\t\t\t\t\t$temp$currentHash = vars;\n\t\t\t\talg = $temp$alg;\n\t\t\t\twords = $temp$words;\n\t\t\t\tcurrentHash = $temp$currentHash;\n\t\t\t\tcontinue chunks_;\n\t\t\t}\n\t\t}\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Types$toSingleWord = function (word) {\n\tif (word.$ === 'D') {\n\t\tvar xh = word.a;\n\t\tvar xl = word.b;\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\tktonon$elm_word$Word$W(xh),\n\t\t\t\tktonon$elm_word$Word$W(xl)\n\t\t\t]);\n\t} else {\n\t\treturn _List_fromArray(\n\t\t\t[word]);\n\t}\n};\nvar ktonon$elm_crypto$Crypto$SHA$Types$workingVarsToWords = F2(\n\tfunction (alg, _n0) {\n\t\tvar a = _n0.a;\n\t\tvar b = _n0.b;\n\t\tvar c = _n0.c;\n\t\tvar d = _n0.d;\n\t\tvar e = _n0.e;\n\t\tvar f = _n0.f;\n\t\tvar g = _n0.g;\n\t\tvar h = _n0.h;\n\t\tswitch (alg.$) {\n\t\t\tcase 'SHA224':\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a, b, c, d, e, f, g]));\n\t\t\tcase 'SHA256':\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a, b, c, d, e, f, g, h]));\n\t\t\tcase 'SHA384':\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a, b, c, d, e, f]));\n\t\t\tcase 'SHA512':\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a, b, c, d, e, f, g, h]));\n\t\t\tcase 'SHA512_224':\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$take,\n\t\t\t\t\t\t7,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$List$concatMap,\n\t\t\t\t\t\t\tktonon$elm_crypto$Crypto$SHA$Types$toSingleWord,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[a, b, c, d]))));\n\t\t\tdefault:\n\t\t\t\treturn elm$core$Array$fromList(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a, b, c, d]));\n\t\t}\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$Process$chunks = F2(\n\tfunction (alg, words) {\n\t\treturn A2(\n\t\t\tktonon$elm_crypto$Crypto$SHA$Types$workingVarsToWords,\n\t\t\talg,\n\t\t\tA3(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Process$chunks_,\n\t\t\t\talg,\n\t\t\t\telm$core$Array$toList(words),\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Constants$initialHashValues(alg)));\n\t});\nvar elm$core$Array$push = F2(\n\tfunction (a, array) {\n\t\tvar tail = array.d;\n\t\treturn A2(\n\t\t\telm$core$Array$unsafeReplaceTail,\n\t\t\tA2(elm$core$Elm$JsArray$push, a, tail),\n\t\t\tarray);\n\t});\nvar ktonon$elm_word$Word$FourBytes = F4(\n\tfunction (a, b, c, d) {\n\t\treturn {$: 'FourBytes', a: a, b: b, c: c, d: d};\n\t});\nvar ktonon$elm_word$Word$int32FromBytes = function (_n0) {\n\tvar x3 = _n0.a;\n\tvar x2 = _n0.b;\n\tvar x1 = _n0.c;\n\tvar x0 = _n0.d;\n\treturn ((x0 + (x1 * A2(elm$core$Basics$pow, 2, 8))) + (x2 * A2(elm$core$Basics$pow, 2, 16))) + (x3 * A2(elm$core$Basics$pow, 2, 24));\n};\nvar ktonon$elm_word$Word$pad4 = function (bytes) {\n\t_n0$4:\n\twhile (true) {\n\t\tif (bytes.b) {\n\t\t\tif (bytes.b.b) {\n\t\t\t\tif (bytes.b.b.b) {\n\t\t\t\t\tif (bytes.b.b.b.b) {\n\t\t\t\t\t\tif (!bytes.b.b.b.b.b) {\n\t\t\t\t\t\t\tvar x3 = bytes.a;\n\t\t\t\t\t\t\tvar _n1 = bytes.b;\n\t\t\t\t\t\t\tvar x2 = _n1.a;\n\t\t\t\t\t\t\tvar _n2 = _n1.b;\n\t\t\t\t\t\t\tvar x1 = _n2.a;\n\t\t\t\t\t\t\tvar _n3 = _n2.b;\n\t\t\t\t\t\t\tvar x0 = _n3.a;\n\t\t\t\t\t\t\treturn A4(ktonon$elm_word$Word$FourBytes, x3, x2, x1, x0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak _n0$4;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar x3 = bytes.a;\n\t\t\t\t\t\tvar _n4 = bytes.b;\n\t\t\t\t\t\tvar x2 = _n4.a;\n\t\t\t\t\t\tvar _n5 = _n4.b;\n\t\t\t\t\t\tvar x1 = _n5.a;\n\t\t\t\t\t\treturn A4(ktonon$elm_word$Word$FourBytes, x3, x2, x1, 0);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar x3 = bytes.a;\n\t\t\t\t\tvar _n6 = bytes.b;\n\t\t\t\t\tvar x2 = _n6.a;\n\t\t\t\t\treturn A4(ktonon$elm_word$Word$FourBytes, x3, x2, 0, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar x3 = bytes.a;\n\t\t\t\treturn A4(ktonon$elm_word$Word$FourBytes, x3, 0, 0, 0);\n\t\t\t}\n\t\t} else {\n\t\t\tbreak _n0$4;\n\t\t}\n\t}\n\treturn A4(ktonon$elm_word$Word$FourBytes, 0, 0, 0, 0);\n};\nvar ktonon$elm_word$Word$accWords = F3(\n\tfunction (wordSize, bytes, acc) {\n\t\taccWords:\n\t\twhile (true) {\n\t\t\tvar _n0 = _Utils_Tuple2(wordSize, bytes);\n\t\t\t_n0$2:\n\t\t\twhile (true) {\n\t\t\t\tif (_n0.a.$ === 'Bit32') {\n\t\t\t\t\tif (_n0.b.b) {\n\t\t\t\t\t\tif ((_n0.b.b.b && _n0.b.b.b.b) && _n0.b.b.b.b.b) {\n\t\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\t\tvar x3 = _n2.a;\n\t\t\t\t\t\t\tvar _n3 = _n2.b;\n\t\t\t\t\t\t\tvar x2 = _n3.a;\n\t\t\t\t\t\t\tvar _n4 = _n3.b;\n\t\t\t\t\t\t\tvar x1 = _n4.a;\n\t\t\t\t\t\t\tvar _n5 = _n4.b;\n\t\t\t\t\t\t\tvar x0 = _n5.a;\n\t\t\t\t\t\t\tvar rest = _n5.b;\n\t\t\t\t\t\t\tvar acc2 = A2(\n\t\t\t\t\t\t\t\telm$core$Array$push,\n\t\t\t\t\t\t\t\tktonon$elm_word$Word$W(\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tA4(ktonon$elm_word$Word$FourBytes, x3, x2, x1, x0))),\n\t\t\t\t\t\t\t\tacc);\n\t\t\t\t\t\t\tvar $temp$wordSize = wordSize,\n\t\t\t\t\t\t\t\t$temp$bytes = rest,\n\t\t\t\t\t\t\t\t$temp$acc = acc2;\n\t\t\t\t\t\t\twordSize = $temp$wordSize;\n\t\t\t\t\t\t\tbytes = $temp$bytes;\n\t\t\t\t\t\t\tacc = $temp$acc;\n\t\t\t\t\t\t\tcontinue accWords;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n15 = _n0.a;\n\t\t\t\t\t\t\tvar rest = _n0.b;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$Array$push,\n\t\t\t\t\t\t\t\tktonon$elm_word$Word$W(\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$pad4(rest))),\n\t\t\t\t\t\t\t\tacc);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (_n0.b.b) {\n\t\t\t\t\t\tif ((((((_n0.b.b.b && _n0.b.b.b.b) && _n0.b.b.b.b.b) && _n0.b.b.b.b.b.b) && _n0.b.b.b.b.b.b.b) && _n0.b.b.b.b.b.b.b.b) && _n0.b.b.b.b.b.b.b.b.b) {\n\t\t\t\t\t\t\tvar _n6 = _n0.a;\n\t\t\t\t\t\t\tvar _n7 = _n0.b;\n\t\t\t\t\t\t\tvar x7 = _n7.a;\n\t\t\t\t\t\t\tvar _n8 = _n7.b;\n\t\t\t\t\t\t\tvar x6 = _n8.a;\n\t\t\t\t\t\t\tvar _n9 = _n8.b;\n\t\t\t\t\t\t\tvar x5 = _n9.a;\n\t\t\t\t\t\t\tvar _n10 = _n9.b;\n\t\t\t\t\t\t\tvar x4 = _n10.a;\n\t\t\t\t\t\t\tvar _n11 = _n10.b;\n\t\t\t\t\t\t\tvar x3 = _n11.a;\n\t\t\t\t\t\t\tvar _n12 = _n11.b;\n\t\t\t\t\t\t\tvar x2 = _n12.a;\n\t\t\t\t\t\t\tvar _n13 = _n12.b;\n\t\t\t\t\t\t\tvar x1 = _n13.a;\n\t\t\t\t\t\t\tvar _n14 = _n13.b;\n\t\t\t\t\t\t\tvar x0 = _n14.a;\n\t\t\t\t\t\t\tvar rest = _n14.b;\n\t\t\t\t\t\t\tvar acc2 = A2(\n\t\t\t\t\t\t\t\telm$core$Array$push,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$D,\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tA4(ktonon$elm_word$Word$FourBytes, x7, x6, x5, x4)),\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tA4(ktonon$elm_word$Word$FourBytes, x3, x2, x1, x0))),\n\t\t\t\t\t\t\t\tacc);\n\t\t\t\t\t\t\tvar $temp$wordSize = wordSize,\n\t\t\t\t\t\t\t\t$temp$bytes = rest,\n\t\t\t\t\t\t\t\t$temp$acc = acc2;\n\t\t\t\t\t\t\twordSize = $temp$wordSize;\n\t\t\t\t\t\t\tbytes = $temp$bytes;\n\t\t\t\t\t\t\tacc = $temp$acc;\n\t\t\t\t\t\t\tcontinue accWords;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n16 = _n0.a;\n\t\t\t\t\t\t\tvar rest = _n0.b;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$Array$push,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$D,\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$pad4(\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$take, 4, rest))),\n\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$int32FromBytes(\n\t\t\t\t\t\t\t\t\t\tktonon$elm_word$Word$pad4(\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$drop, 4, rest)))),\n\t\t\t\t\t\t\t\tacc);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\t});\nvar ktonon$elm_word$Word$fromBytes = F2(\n\tfunction (wordSize, bytes) {\n\t\treturn A3(ktonon$elm_word$Word$accWords, wordSize, bytes, elm$core$Array$empty);\n\t});\nvar ktonon$elm_crypto$Crypto$SHA$digest = function (alg) {\n\treturn A2(\n\t\telm$core$Basics$composeR,\n\t\tktonon$elm_crypto$Crypto$SHA$Preprocess$preprocess(alg),\n\t\tA2(\n\t\t\telm$core$Basics$composeR,\n\t\t\tktonon$elm_word$Word$fromBytes(\n\t\t\t\tktonon$elm_crypto$Crypto$SHA$Alg$wordSize(alg)),\n\t\t\tktonon$elm_crypto$Crypto$SHA$Process$chunks(alg)));\n};\nvar elm$core$String$foldr = _String_foldr;\nvar elm$core$String$toList = function (string) {\n\treturn A3(elm$core$String$foldr, elm$core$List$cons, _List_Nil, string);\n};\nvar elm$core$Bitwise$or = _Bitwise_or;\nvar ktonon$elm_word$Word$Bytes$splitUtf8 = function (x) {\n\treturn (x < 128) ? _List_fromArray(\n\t\t[x]) : ((x < 2048) ? _List_fromArray(\n\t\t[192 | ((1984 & x) >>> 6), 128 | (63 & x)]) : _List_fromArray(\n\t\t[224 | ((61440 & x) >>> 12), 128 | ((4032 & x) >>> 6), 128 | (63 & x)]));\n};\nvar ktonon$elm_word$Word$Bytes$fromUTF8 = A2(\n\telm$core$Basics$composeR,\n\telm$core$String$toList,\n\tA2(\n\t\telm$core$List$foldl,\n\t\tF2(\n\t\t\tfunction (_char, acc) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$append,\n\t\t\t\t\tacc,\n\t\t\t\t\tktonon$elm_word$Word$Bytes$splitUtf8(\n\t\t\t\t\t\telm$core$Char$toCode(_char)));\n\t\t\t}),\n\t\t_List_Nil));\nvar elm$core$Array$foldl = F3(\n\tfunction (func, baseCase, _n0) {\n\t\tvar tree = _n0.c;\n\t\tvar tail = _n0.d;\n\t\tvar helper = F2(\n\t\t\tfunction (node, acc) {\n\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\tvar subTree = node.a;\n\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, helper, acc, subTree);\n\t\t\t\t} else {\n\t\t\t\t\tvar values = node.a;\n\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, func, acc, values);\n\t\t\t\t}\n\t\t\t});\n\t\treturn A3(\n\t\t\telm$core$Elm$JsArray$foldl,\n\t\t\tfunc,\n\t\t\tA3(elm$core$Elm$JsArray$foldl, helper, baseCase, tree),\n\t\t\ttail);\n\t});\nvar ktonon$elm_word$Word$Hex$fromArray = function (toHex) {\n\treturn A2(\n\t\telm$core$Array$foldl,\n\t\tF2(\n\t\t\tfunction (val, acc) {\n\t\t\t\treturn _Utils_ap(\n\t\t\t\t\tacc,\n\t\t\t\t\ttoHex(val));\n\t\t\t}),\n\t\t'');\n};\nvar elm$core$Char$fromCode = _Char_fromCode;\nvar elm$core$String$cons = _String_cons;\nvar ktonon$elm_word$Word$Hex$fromIntAccumulator = function (x) {\n\treturn elm$core$String$cons(\n\t\telm$core$Char$fromCode(\n\t\t\t(x < 10) ? (x + 48) : ((x + 97) - 10)));\n};\nvar ktonon$elm_word$Word$Hex$fromInt = F2(\n\tfunction (charCount, value) {\n\t\treturn A3(\n\t\t\telm$core$List$foldl,\n\t\t\tfunction (i) {\n\t\t\t\treturn ktonon$elm_word$Word$Hex$fromIntAccumulator(\n\t\t\t\t\t15 & (value >>> (i * A2(elm$core$Basics$pow, 2, 2))));\n\t\t\t},\n\t\t\t'',\n\t\t\tA2(elm$core$List$range, 0, charCount - 1));\n\t});\nvar ktonon$elm_word$Word$Hex$fromWord = function (word) {\n\tswitch (word.$) {\n\t\tcase 'W':\n\t\t\tvar x = word.a;\n\t\t\treturn A2(ktonon$elm_word$Word$Hex$fromInt, 8, x);\n\t\tcase 'D':\n\t\t\tvar h = word.a;\n\t\t\tvar l = word.b;\n\t\t\treturn _Utils_ap(\n\t\t\t\tA2(ktonon$elm_word$Word$Hex$fromInt, 8, h),\n\t\t\t\tA2(ktonon$elm_word$Word$Hex$fromInt, 8, l));\n\t\tdefault:\n\t\t\treturn 'M';\n\t}\n};\nvar ktonon$elm_word$Word$Hex$fromWordArray = ktonon$elm_word$Word$Hex$fromArray(ktonon$elm_word$Word$Hex$fromWord);\nvar ktonon$elm_crypto$Crypto$Hash$sha256 = function (message) {\n\treturn ktonon$elm_word$Word$Hex$fromWordArray(\n\t\tA2(\n\t\t\tktonon$elm_crypto$Crypto$SHA$digest,\n\t\t\tktonon$elm_crypto$Crypto$SHA$Alg$SHA256,\n\t\t\tktonon$elm_word$Word$Bytes$fromUTF8(message)));\n};\nvar author$project$Pages$Profile$Security$passwordEncoder = F2(\n\tfunction (oldP, newP) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'oldPassword',\n\t\t\t\t\telm$json$Json$Encode$string(\n\t\t\t\t\t\tktonon$elm_crypto$Crypto$Hash$sha256(oldP))),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'newPassword',\n\t\t\t\t\telm$json$Json$Encode$string(\n\t\t\t\t\t\tktonon$elm_crypto$Crypto$Hash$sha256(newP)))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Profile$Security$changePassword = function (model) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tA2(author$project$Pages$Profile$Security$passwordEncoder, model.password, model.newPassword)),\n\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Profile$Security$PasswordResponse),\n\t\t\theaders: _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$http$Http$header, 'auth', model.user.token)\n\t\t\t\t]),\n\t\t\tmethod: 'PATCH',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/account/password'\n\t\t});\n};\nvar author$project$Pages$Profile$Security$DeleteResponse = function (a) {\n\treturn {$: 'DeleteResponse', a: a};\n};\nvar author$project$Pages$Profile$Security$deleteEncoder = function (password) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'password',\n\t\t\t\telm$json$Json$Encode$string(\n\t\t\t\t\tktonon$elm_crypto$Crypto$Hash$sha256(password)))\n\t\t\t]));\n};\nvar author$project$Pages$Profile$Security$deleteAccount = function (model) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$Profile$Security$deleteEncoder(model.password)),\n\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Profile$Security$DeleteResponse),\n\t\t\theaders: _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$http$Http$header, 'auth', model.user.token)\n\t\t\t\t]),\n\t\t\tmethod: 'DELETE',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/account/delete'\n\t\t});\n};\nvar author$project$Pages$Profile$Security$MailResponse = function (a) {\n\treturn {$: 'MailResponse', a: a};\n};\nvar author$project$Pages$Profile$Security$requestMail = function (email) {\n\treturn elm$http$Http$get(\n\t\t{\n\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Profile$Security$MailResponse),\n\t\t\turl: author$project$Server$url + ('/mailer/send' + ('?mail=' + email))\n\t\t});\n};\nvar author$project$Pages$Profile$Security$VerifyResponse = function (a) {\n\treturn {$: 'VerifyResponse', a: a};\n};\nvar author$project$Pages$Profile$Security$verifyCode = function (model) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$emptyBody,\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$Profile$Security$VerifyResponse,\n\t\t\t\tA2(elm$json$Json$Decode$field, 'response', elm$json$Json$Decode$bool)),\n\t\t\theaders: _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$http$Http$header, 'auth', model.user.token)\n\t\t\t\t]),\n\t\t\tmethod: 'GET',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + ('/account/verify' + ('?username=' + (model.user.username + ('&code=' + model.code))))\n\t\t});\n};\nvar elm$core$Maybe$destruct = F3(\n\tfunction (_default, func, maybe) {\n\t\tif (maybe.$ === 'Just') {\n\t\t\tvar a = maybe.a;\n\t\t\treturn func(a);\n\t\t} else {\n\t\t\treturn _default;\n\t\t}\n\t});\nvar elm$json$Json$Encode$null = _Json_encodeNull;\nvar author$project$User$storeToken = _Platform_outgoingPort(\n\t'storeToken',\n\tfunction ($) {\n\t\treturn A3(elm$core$Maybe$destruct, elm$json$Json$Encode$null, elm$json$Json$Encode$string, $);\n\t});\nvar author$project$User$logout = author$project$User$storeToken(elm$core$Maybe$Nothing);\nvar elm$browser$Browser$Navigation$reload = _Browser_reload(false);\nvar author$project$Pages$Profile$Security$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Request':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Pages$Profile$Security$requestMail(model.user.email));\n\t\t\tcase 'Verify':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Pages$Profile$Security$verifyCode(model));\n\t\t\tcase 'VerifyResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar bool = response.a;\n\t\t\t\t\tif (bool) {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{codeStatus: author$project$Pages$Profile$Security$Success}),\n\t\t\t\t\t\t\telm$browser$Browser$Navigation$reload);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{codeStatus: author$project$Pages$Profile$Security$Failure}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{codeStatus: author$project$Pages$Profile$Security$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'MailResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{mailStatus: author$project$Pages$Profile$Security$Success}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{mailStatus: author$project$Pages$Profile$Security$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Code':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{code: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Password':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{password: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'NewPassword':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{newPassword: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Delete':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{delStatus: author$project$Pages$Profile$Security$Loading}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'ConfirmDelete':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Pages$Profile$Security$deleteAccount(model));\n\t\t\tcase 'ChangePassword':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Pages$Profile$Security$changePassword(model));\n\t\t\tcase 'PasswordResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{passStatus: author$project$Pages$Profile$Security$Success}),\n\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tauthor$project$User$logout,\n\t\t\t\t\t\t\t\t\telm$browser$Browser$Navigation$reload,\n\t\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/sign_in')\n\t\t\t\t\t\t\t\t])));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{passStatus: author$project$Pages$Profile$Security$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{delStatus: author$project$Pages$Profile$Security$Success}),\n\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tauthor$project$User$logout,\n\t\t\t\t\t\t\t\t\telm$browser$Browser$Navigation$reload,\n\t\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/')\n\t\t\t\t\t\t\t\t])));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{delStatus: author$project$Pages$Profile$Security$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$Profile$Settings$getModel = function (_n0) {\n\tvar model = _n0.a;\n\tvar cmd = _n0.b;\n\treturn model;\n};\nvar author$project$Pages$Profile$Settings$Model = F6(\n\tfunction (user, bio, facebook, twitter, github, warning) {\n\t\treturn {bio: bio, facebook: facebook, github: github, twitter: twitter, user: user, warning: warning};\n\t});\nvar author$project$Social$getLink = function (link) {\n\tif (link.$ === 'Nothing') {\n\t\treturn '';\n\t} else {\n\t\tvar url = link.a;\n\t\treturn url;\n\t}\n};\nvar author$project$Pages$Profile$Settings$init = function (user) {\n\treturn _Utils_Tuple2(\n\t\tA6(\n\t\t\tauthor$project$Pages$Profile$Settings$Model,\n\t\t\tuser,\n\t\t\tuser.bio,\n\t\t\tauthor$project$Social$getLink(user.facebook),\n\t\t\tauthor$project$Social$getLink(user.twitter),\n\t\t\tauthor$project$Social$getLink(user.github),\n\t\t\t_List_Nil),\n\t\telm$core$Platform$Cmd$none);\n};\nvar author$project$Pages$Profile$Settings$UpdateResponse = function (a) {\n\treturn {$: 'UpdateResponse', a: a};\n};\nvar author$project$Pages$Profile$Settings$settingsEncoder = function (model) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'facebook',\n\t\t\t\telm$json$Json$Encode$string(model.facebook)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'twitter',\n\t\t\t\telm$json$Json$Encode$string(model.twitter)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'github',\n\t\t\t\telm$json$Json$Encode$string(model.github)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'bio',\n\t\t\t\telm$json$Json$Encode$string(model.bio))\n\t\t\t]));\n};\nvar author$project$Pages$Profile$Settings$patch = F2(\n\tfunction (model, token) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tauthor$project$Pages$Profile$Settings$settingsEncoder(model)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Profile$Settings$UpdateResponse),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', token)\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/account/update'\n\t\t\t});\n\t});\nvar author$project$Social$validate = F2(\n\tfunction (url, social) {\n\t\treturn ((A2(elm$core$String$startsWith, 'http', url) && (A2(elm$core$String$contains, social, url) && A2(elm$core$String$contains, '.com', url))) || (url === '')) ? true : false;\n\t});\nvar author$project$Pages$Profile$Settings$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'UpdateResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$browser$Browser$Navigation$reload);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Bio':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{bio: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Facebook':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{facebook: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Twitter':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{twitter: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Github':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{github: string}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tdefault:\n\t\t\t\treturn (A2(author$project$Social$validate, model.facebook, 'facebook') && (A2(author$project$Social$validate, model.twitter, 'twitter') && A2(author$project$Social$validate, model.github, 'github'))) ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: _List_Nil}),\n\t\t\t\t\tA2(author$project$Pages$Profile$Settings$patch, model, model.user.token)) : _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twarning: A2(elm$core$List$cons, 'Invalid social network link', _List_Nil)\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t}\n\t});\nvar elm$file$File$Select$file = F2(\n\tfunction (mimes, toMsg) {\n\t\treturn A2(\n\t\t\telm$core$Task$perform,\n\t\t\ttoMsg,\n\t\t\t_File_uploadOne(mimes));\n\t});\nvar author$project$Pages$Profile$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'SwitchInformation':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{tab: author$project$Pages$Profile$Information}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'SwitchSettings':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttab: author$project$Pages$Profile$Settings(\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Settings$getModel(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Settings$init(model.user)))\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'SwitchSecurity':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttab: author$project$Pages$Profile$Security(\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Security$getModel(\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Profile$Security$init, model.key, model.user)))\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'SwitchHistory':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttab: author$project$Pages$Profile$History(\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$History$getModel(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$History$init(model.user)))\n\t\t\t\t\t\t}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Platform$Cmd$map,\n\t\t\t\t\t\tauthor$project$Pages$Profile$HistoryMsg,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$History$get, model.user.username, 5)));\n\t\t\tcase 'SwitchFavorites':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttab: author$project$Pages$Profile$Favorites(\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Favorites$getModel(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Favorites$init(model.user)))\n\t\t\t\t\t\t}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Platform$Cmd$map,\n\t\t\t\t\t\tauthor$project$Pages$Profile$FavoritesMsg,\n\t\t\t\t\t\tauthor$project$Pages$Profile$Favorites$getFavs(model.fragment)));\n\t\t\tcase 'SettingsMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n1 = model.tab;\n\t\t\t\tif (_n1.$ === 'Settings') {\n\t\t\t\t\tvar sett = _n1.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Pages$Profile$stepSettings,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$Settings$update, mesg, sett));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'SecurityMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n2 = model.tab;\n\t\t\t\tif (_n2.$ === 'Security') {\n\t\t\t\t\tvar sec = _n2.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Pages$Profile$stepSecurity,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$Security$update, mesg, sec));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'HistoryMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n3 = model.tab;\n\t\t\t\tif (_n3.$ === 'History') {\n\t\t\t\t\tvar hist = _n3.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Pages$Profile$stepHistory,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$History$update, mesg, hist));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'FavoritesMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n4 = model.tab;\n\t\t\t\tif (_n4.$ === 'Favorites') {\n\t\t\t\t\tvar fav = _n4.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Pages$Profile$stepFavorites,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$Favorites$update, mesg, fav));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Select':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$file$File$Select$file,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t['image/*']),\n\t\t\t\t\t\tauthor$project$Pages$Profile$GotFile));\n\t\t\tcase 'GotFile':\n\t\t\t\tvar file = msg.a;\n\t\t\t\tvar username = model.user.username;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Profile$put, file, username));\n\t\t\tcase 'AvatarResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$browser$Browser$Navigation$reload);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar user = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{status: author$project$Pages$Profile$Success, user: user}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{status: author$project$Pages$Profile$Failure}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'LoadMore':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(author$project$Pages$Profile$getPosts, model.user.username, 0));\n\t\t\tdefault:\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar posts = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpostsStatus: author$project$Pages$Profile$SuccessPosts(posts)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{postsStatus: author$project$Pages$Profile$FailurePosts}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$Results$FailureImage = {$: 'FailureImage'};\nvar author$project$Pages$Results$FailureUser = {$: 'FailureUser'};\nvar author$project$Pages$Results$SuccessImage = function (a) {\n\treturn {$: 'SuccessImage', a: a};\n};\nvar author$project$Pages$Results$SuccessUser = function (a) {\n\treturn {$: 'SuccessUser', a: a};\n};\nvar author$project$Pages$Results$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'ImageResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar images = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\timageStatus: author$project$Pages$Results$SuccessImage(images)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{imageStatus: author$project$Pages$Results$FailureImage}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar users = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tuserStatus: author$project$Pages$Results$SuccessUser(users)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{userStatus: author$project$Pages$Results$FailureUser}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$SignIn$Failure = function (a) {\n\treturn {$: 'Failure', a: a};\n};\nvar author$project$Pages$SignIn$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$SignIn$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$SignIn$encodeLogin = function (model) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'username',\n\t\t\t\telm$json$Json$Encode$string(model.name)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'password',\n\t\t\t\telm$json$Json$Encode$string(\n\t\t\t\t\tktonon$elm_crypto$Crypto$Hash$sha256(model.password)))\n\t\t\t]));\n};\nvar author$project$Pages$SignIn$login = function (model) {\n\treturn elm$http$Http$post(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$SignIn$encodeLogin(model)),\n\t\t\texpect: A2(elm$http$Http$expectJson, author$project$Pages$SignIn$Response, author$project$User$decodeUser),\n\t\t\turl: author$project$Server$url + '/account/sign_in'\n\t\t});\n};\nvar author$project$Session$Update = function (a) {\n\treturn {$: 'Update', a: a};\n};\nvar author$project$User$encodeForStorage = function (user) {\n\treturn author$project$User$storeToken(\n\t\telm$core$Maybe$Just(user.token));\n};\nvar author$project$Pages$SignIn$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple3(model, elm$core$Platform$Cmd$none, author$project$Session$NoUpdate);\n\t\t\tcase 'Name':\n\t\t\t\tvar name = msg.a;\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{name: name}),\n\t\t\t\t\telm$core$Platform$Cmd$none,\n\t\t\t\t\tauthor$project$Session$NoUpdate);\n\t\t\tcase 'Password':\n\t\t\t\tvar password = msg.a;\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{password: password}),\n\t\t\t\t\telm$core$Platform$Cmd$none,\n\t\t\t\t\tauthor$project$Session$NoUpdate);\n\t\t\tcase 'Submit':\n\t\t\t\treturn (model.name === '') ? _Utils_Tuple3(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter your username'}),\n\t\t\t\t\telm$core$Platform$Cmd$none,\n\t\t\t\t\tauthor$project$Session$NoUpdate) : ((model.password === '') ? _Utils_Tuple3(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter your password'}),\n\t\t\t\t\telm$core$Platform$Cmd$none,\n\t\t\t\t\tauthor$project$Session$NoUpdate) : _Utils_Tuple3(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{status: author$project$Pages$SignIn$Loading, warning: 'Loading'}),\n\t\t\t\t\tauthor$project$Pages$SignIn$login(model),\n\t\t\t\t\tauthor$project$Session$NoUpdate));\n\t\t\tdefault:\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar user = response.a;\n\t\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignIn$Success('')\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/'),\n\t\t\t\t\t\t\t\t\tauthor$project$User$encodeForStorage(user)\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Session$Update(user));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignIn$Failure(log)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none,\n\t\t\t\t\t\tauthor$project$Session$NoUpdate);\n\t\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$SignUp$Failure = function (a) {\n\treturn {$: 'Failure', a: a};\n};\nvar author$project$Pages$SignUp$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$SignUp$EmailResponse = function (a) {\n\treturn {$: 'EmailResponse', a: a};\n};\nvar author$project$Pages$SignUp$emailEncoder = function (email) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'email',\n\t\t\t\telm$json$Json$Encode$string(email))\n\t\t\t]));\n};\nvar author$project$Pages$SignUp$checkEmail = function (email) {\n\treturn elm$http$Http$post(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$SignUp$emailEncoder(email)),\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$SignUp$EmailResponse,\n\t\t\t\tA2(elm$json$Json$Decode$field, 'response', elm$json$Json$Decode$string)),\n\t\t\turl: author$project$Server$url + '/account/validate'\n\t\t});\n};\nvar author$project$Pages$SignUp$UsernameResponse = function (a) {\n\treturn {$: 'UsernameResponse', a: a};\n};\nvar author$project$Pages$SignUp$usernameEncoder = function (name) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'username',\n\t\t\t\telm$json$Json$Encode$string(name))\n\t\t\t]));\n};\nvar author$project$Pages$SignUp$checkUsername = function (username) {\n\treturn elm$http$Http$post(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$SignUp$usernameEncoder(username)),\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$SignUp$UsernameResponse,\n\t\t\t\tA2(elm$json$Json$Decode$field, 'response', elm$json$Json$Decode$string)),\n\t\t\turl: author$project$Server$url + '/account/validate'\n\t\t});\n};\nvar author$project$Pages$SignUp$len = function (pass) {\n\treturn (elm$core$String$length(pass) > 6) ? true : false;\n};\nvar author$project$Pages$SignUp$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar author$project$Pages$SignUp$userEncoder = function (model) {\n\treturn elm$json$Json$Encode$object(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'username',\n\t\t\t\telm$json$Json$Encode$string(model.name)),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'password',\n\t\t\t\telm$json$Json$Encode$string(\n\t\t\t\t\tktonon$elm_crypto$Crypto$Hash$sha256(model.password))),\n\t\t\t\t_Utils_Tuple2(\n\t\t\t\t'email',\n\t\t\t\telm$json$Json$Encode$string(model.email))\n\t\t\t]));\n};\nvar author$project$Pages$SignUp$post = function (model) {\n\treturn elm$http$Http$request(\n\t\t{\n\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\tauthor$project$Pages$SignUp$userEncoder(model)),\n\t\t\texpect: A2(\n\t\t\t\telm$http$Http$expectJson,\n\t\t\t\tauthor$project$Pages$SignUp$Response,\n\t\t\t\tA2(elm$json$Json$Decode$field, 'response', elm$json$Json$Decode$string)),\n\t\t\theaders: _List_Nil,\n\t\t\tmethod: 'POST',\n\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\turl: author$project$Server$url + '/account/sign_up'\n\t\t});\n};\nvar elm$core$String$fromChar = function (_char) {\n\treturn A2(elm$core$String$cons, _char, '');\n};\nvar tricycle$elm_email$Email$parseDomain = A2(\n\telm$parser$Parser$andThen,\n\tfunction (a) {\n\t\treturn (elm$core$String$length(a) < 1) ? elm$parser$Parser$problem('Domain has to be atleast 1 character long.') : elm$parser$Parser$succeed(a);\n\t},\n\telm$parser$Parser$getChompedString(\n\t\tA2(\n\t\t\telm$parser$Parser$ignorer,\n\t\t\telm$parser$Parser$succeed(_Utils_Tuple0),\n\t\t\telm$parser$Parser$chompWhile(\n\t\t\t\tfunction (a) {\n\t\t\t\t\treturn (elm$core$Char$isAlphaNum(a) || _Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('-'))) && ((!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('@'))) && (!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('.'))));\n\t\t\t\t}))));\nvar elm$core$String$endsWith = _String_endsWith;\nvar tricycle$elm_email$Email$parseLocalPart = A2(\n\telm$parser$Parser$andThen,\n\tfunction (localPart) {\n\t\treturn (A2(elm$core$String$startsWith, '.', localPart) || (A2(elm$core$String$endsWith, '.', localPart) || (!_Utils_eq(\n\t\t\tA2(elm$core$String$indexes, '..', localPart),\n\t\t\t_List_Nil)))) ? elm$parser$Parser$problem('localPart can\\'t start or end with a dot, nor can there be double dots') : elm$parser$Parser$succeed(localPart);\n\t},\n\telm$parser$Parser$getChompedString(\n\t\tA2(\n\t\t\telm$parser$Parser$ignorer,\n\t\t\telm$parser$Parser$succeed(_Utils_Tuple0),\n\t\t\telm$parser$Parser$chompWhile(\n\t\t\t\tfunction (a) {\n\t\t\t\t\treturn (!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('+'))) && ((!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('@'))) && ((!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('\\\\'))) && (!_Utils_eq(\n\t\t\t\t\t\ta,\n\t\t\t\t\t\t_Utils_chr('\\\"')))));\n\t\t\t\t}))));\nvar tricycle$elm_email$Email$parseTld = A2(\n\telm$parser$Parser$andThen,\n\tfunction (a) {\n\t\treturn (elm$core$String$length(a) >= 2) ? elm$parser$Parser$succeed(a) : elm$parser$Parser$problem('Tld needs to be at least 2 character long.');\n\t},\n\telm$parser$Parser$getChompedString(\n\t\tA2(\n\t\t\telm$parser$Parser$ignorer,\n\t\t\telm$parser$Parser$succeed(_Utils_Tuple0),\n\t\t\telm$parser$Parser$chompWhile(\n\t\t\t\tfunction (a) {\n\t\t\t\t\treturn elm$core$Char$isUpper(a) || elm$core$Char$isLower(a);\n\t\t\t\t}))));\nvar tricycle$elm_email$Email$parseEmail = function () {\n\tvar split = F2(\n\t\tfunction (_char, parser) {\n\t\t\treturn A2(\n\t\t\t\telm$parser$Parser$loop,\n\t\t\t\t_List_Nil,\n\t\t\t\tfunction (r) {\n\t\t\t\t\treturn elm$parser$Parser$oneOf(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\t\t\t\t\telm$parser$Parser$succeed(\n\t\t\t\t\t\t\t\t\t\tfunction (tld) {\n\t\t\t\t\t\t\t\t\t\t\treturn elm$parser$Parser$Loop(\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$cons, tld, r));\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\telm$parser$Parser$symbol(\n\t\t\t\t\t\t\t\t\t\telm$core$String$fromChar(_char))),\n\t\t\t\t\t\t\t\tparser),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$parser$Parser$map,\n\t\t\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\t\t\treturn elm$parser$Parser$Done(\n\t\t\t\t\t\t\t\t\t\telm$core$List$reverse(r));\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\telm$parser$Parser$succeed(_Utils_Tuple0))\n\t\t\t\t\t\t\t]));\n\t\t\t\t});\n\t\t});\n\treturn A2(\n\t\telm$parser$Parser$keeper,\n\t\tA2(\n\t\t\telm$parser$Parser$keeper,\n\t\t\tA2(\n\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$keeper,\n\t\t\t\t\telm$parser$Parser$succeed(\n\t\t\t\t\t\tF4(\n\t\t\t\t\t\t\tfunction (localPart, tags, domain, tlds) {\n\t\t\t\t\t\t\t\tvar fullLocalPart = A2(\n\t\t\t\t\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tlocalPart,\n\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\tif (!tags.b) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn '+' + A2(elm$core$String$join, '+', tags);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\treturn (elm$core$String$length(fullLocalPart) > 64) ? elm$core$Maybe$Nothing : ((elm$core$List$length(tlds) < 1) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(\n\t\t\t\t\t\t\t\t\t{domain: domain, localPart: localPart, tags: tags, tld: tlds}));\n\t\t\t\t\t\t\t})),\n\t\t\t\t\ttricycle$elm_email$Email$parseLocalPart),\n\t\t\t\tA2(\n\t\t\t\t\telm$parser$Parser$ignorer,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tsplit,\n\t\t\t\t\t\t_Utils_chr('+'),\n\t\t\t\t\t\ttricycle$elm_email$Email$parseLocalPart),\n\t\t\t\t\telm$parser$Parser$symbol('@'))),\n\t\t\ttricycle$elm_email$Email$parseDomain),\n\t\tA2(\n\t\t\telm$parser$Parser$ignorer,\n\t\t\tA2(\n\t\t\t\tsplit,\n\t\t\t\t_Utils_chr('.'),\n\t\t\t\ttricycle$elm_email$Email$parseTld),\n\t\t\telm$parser$Parser$end));\n}();\nvar tricycle$elm_email$Email$fromString = function (string) {\n\tvar _n0 = A2(elm$parser$Parser$run, tricycle$elm_email$Email$parseEmail, string);\n\tif (_n0.$ === 'Ok') {\n\t\tvar result = _n0.a;\n\t\treturn result;\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar author$project$Pages$SignUp$validateEmail = function (email) {\n\treturn tricycle$elm_email$Email$fromString(email);\n};\nvar author$project$Pages$SignUp$validatePassword = F2(\n\tfunction (pass, passAgain) {\n\t\treturn (_Utils_eq(pass, passAgain) && (passAgain !== '')) ? true : false;\n\t});\nvar author$project$Pages$SignUp$validateUsername = function (name) {\n\treturn (name !== '') ? true : false;\n};\nvar author$project$Pages$SignUp$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Name':\n\t\t\t\tvar name = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{name: name}),\n\t\t\t\t\tauthor$project$Pages$SignUp$checkUsername(name));\n\t\t\tcase 'Password':\n\t\t\t\tvar password = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{password: password}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'PasswordAgain':\n\t\t\t\tvar password = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{passwordAgain: password}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Email':\n\t\t\t\tvar email = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{email: email}),\n\t\t\t\t\tauthor$project$Pages$SignUp$checkEmail(email));\n\t\t\tcase 'Warning':\n\t\t\t\tvar error = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: error}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Submit':\n\t\t\t\treturn (model.name === '') ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter your username'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : ((!author$project$Pages$SignUp$validateUsername(model.name)) ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Username must be longer'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : (model.errorUsername ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Username is already taken'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : (_Utils_eq(\n\t\t\t\t\tauthor$project$Pages$SignUp$validateEmail(model.email),\n\t\t\t\t\telm$core$Maybe$Nothing) ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter a valid e-mail address'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : (model.errorEmail ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'E-mail is already taken'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : ((model.password === '') ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter your password'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : ((!author$project$Pages$SignUp$len(model.password)) ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Password is too short'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : ((model.passwordAgain === '') ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Enter your password again'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : ((!A2(author$project$Pages$SignUp$validatePassword, model.password, model.passwordAgain)) ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{warning: 'Passwords do not match'}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{status: author$project$Pages$SignUp$Loading, warning: 'Loading'}),\n\t\t\t\t\tauthor$project$Pages$SignUp$post(model))))))))));\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar string = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignUp$Success(string)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/sign_in'));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignUp$Failure(log)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'UsernameResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar string = response.a;\n\t\t\t\t\tif (string === 'OK') {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{errorUsername: true}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{errorUsername: false}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignUp$Failure(log)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'EmailResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar string = response.a;\n\t\t\t\t\tif (string === 'OK') {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{errorEmail: true}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{errorEmail: false}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$SignUp$Failure(log)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tvar code = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{verification: code}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t}\n\t});\nvar author$project$Pages$Tags$Failure = function (a) {\n\treturn {$: 'Failure', a: a};\n};\nvar author$project$Pages$Tags$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar elm$json$Json$Decode$at = F2(\n\tfunction (fields, decoder) {\n\t\treturn A3(elm$core$List$foldr, elm$json$Json$Decode$field, decoder, fields);\n\t});\nvar author$project$Query$decodePage = function (json) {\n\tvar _n0 = A2(\n\t\telm$json$Json$Decode$decodeValue,\n\t\tA2(\n\t\t\telm$json$Json$Decode$at,\n\t\t\t_List_fromArray(\n\t\t\t\t['page']),\n\t\t\telm$json$Json$Decode$int),\n\t\tjson);\n\tif (_n0.$ === 'Err') {\n\t\treturn 1;\n\t} else {\n\t\tvar a = _n0.a;\n\t\treturn a;\n\t}\n};\nvar author$project$Query$decodeQuery = function (json) {\n\tvar _n0 = A2(\n\t\telm$json$Json$Decode$decodeValue,\n\t\tA2(\n\t\t\telm$json$Json$Decode$at,\n\t\t\t_List_fromArray(\n\t\t\t\t['query']),\n\t\t\telm$json$Json$Decode$string),\n\t\tjson);\n\tif (_n0.$ === 'Err') {\n\t\treturn '';\n\t} else {\n\t\tvar a = _n0.a;\n\t\treturn a;\n\t}\n};\nvar author$project$Query$request = _Platform_outgoingPort(\n\t'request',\n\tfunction ($) {\n\t\treturn elm$json$Json$Encode$null;\n\t});\nvar author$project$Pages$Tags$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Request':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tauthor$project$Query$request(_Utils_Tuple0));\n\t\t\tcase 'Jump':\n\t\t\t\tvar _int = msg.a;\n\t\t\t\treturn (model.query === '') ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: _int, status: author$project$Pages$Tags$Loading}),\n\t\t\t\t\telm$core$Platform$Cmd$none) : _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: _int}),\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(author$project$Pages$Tags$getImages, model.query, _int),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\t\t\treturn author$project$Pages$Tags$Empty;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0)),\n\t\t\t\t\t\t\t\tauthor$project$Query$saveState(\n\t\t\t\t\t\t\t\tA2(author$project$Query$encode, model.query, _int))\n\t\t\t\t\t\t\t])));\n\t\t\tcase 'Query':\n\t\t\t\tvar string = msg.a;\n\t\t\t\treturn (string === '') ? _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: 1, query: string, status: author$project$Pages$Tags$Loading}),\n\t\t\t\t\tauthor$project$Query$saveState(\n\t\t\t\t\t\tA2(author$project$Query$encode, string, model.page))) : _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: 1, query: string}),\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(author$project$Pages$Tags$getImages, string, model.page),\n\t\t\t\t\t\t\t\tauthor$project$Query$saveState(\n\t\t\t\t\t\t\t\tA2(author$project$Query$encode, string, model.page))\n\t\t\t\t\t\t\t])));\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar container = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Tags$Success(container)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Tags$Failure('Connection error')\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tvar value = msg.a;\n\t\t\t\tif (value.$ === 'Nothing') {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar json = value.a;\n\t\t\t\t\tvar query = author$project$Query$decodeQuery(json);\n\t\t\t\t\tvar page = author$project$Query$decodePage(json);\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{page: page, query: query}),\n\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Tags$getImages, query, page),\n\t\t\t\t\t\t\t\t\tauthor$project$Query$saveState(\n\t\t\t\t\t\t\t\t\tA2(author$project$Query$encode, query, page))\n\t\t\t\t\t\t\t\t])));\n\t\t\t\t}\n\t\t}\n\t});\nvar author$project$Pages$Upload$GetPreview = function (a) {\n\treturn {$: 'GetPreview', a: a};\n};\nvar author$project$Pages$Upload$GotFiles = function (a) {\n\treturn {$: 'GotFiles', a: a};\n};\nvar author$project$Pages$Upload$Loaded = function (a) {\n\treturn {$: 'Loaded', a: a};\n};\nvar author$project$Pages$Upload$Response = function (a) {\n\treturn {$: 'Response', a: a};\n};\nvar elm$json$Json$Encode$list = F2(\n\tfunction (func, entries) {\n\t\treturn _Json_wrap(\n\t\t\tA3(\n\t\t\t\telm$core$List$foldl,\n\t\t\t\t_Json_addEntry(func),\n\t\t\t\t_Json_emptyArray(_Utils_Tuple0),\n\t\t\t\tentries));\n\t});\nvar author$project$Pages$Upload$encodeMetadata = F2(\n\tfunction (model, id) {\n\t\treturn elm$json$Json$Encode$object(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'title',\n\t\t\t\t\telm$json$Json$Encode$string(model.title)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'tags',\n\t\t\t\t\tA2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, model.tags)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'description',\n\t\t\t\t\telm$json$Json$Encode$string(model.description)),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t'id',\n\t\t\t\t\telm$json$Json$Encode$string(id))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Upload$postMetatada = F3(\n\tfunction (model, token, id) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$jsonBody(\n\t\t\t\t\tA2(author$project$Pages$Upload$encodeMetadata, model, id)),\n\t\t\t\texpect: elm$http$Http$expectWhatever(author$project$Pages$Upload$Response),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', token)\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'POST',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Nothing,\n\t\t\t\turl: author$project$Server$url + '/upload/metadata'\n\t\t\t});\n\t});\nvar author$project$Pages$Upload$UploadResponse = function (a) {\n\treturn {$: 'UploadResponse', a: a};\n};\nvar author$project$Pages$Upload$put = F3(\n\tfunction (model, file, token) {\n\t\treturn elm$http$Http$request(\n\t\t\t{\n\t\t\t\tbody: elm$http$Http$fileBody(file),\n\t\t\t\texpect: A2(\n\t\t\t\t\telm$http$Http$expectJson,\n\t\t\t\t\tauthor$project$Pages$Upload$UploadResponse,\n\t\t\t\t\tA2(elm$json$Json$Decode$field, 'response', elm$json$Json$Decode$string)),\n\t\t\t\theaders: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$http$Http$header,\n\t\t\t\t\t\t'name',\n\t\t\t\t\t\telm$file$File$name(file)),\n\t\t\t\t\t\tA2(elm$http$Http$header, 'auth', token)\n\t\t\t\t\t]),\n\t\t\t\tmethod: 'PUT',\n\t\t\t\ttimeout: elm$core$Maybe$Nothing,\n\t\t\t\ttracker: elm$core$Maybe$Just('upload'),\n\t\t\t\turl: author$project$Server$url + '/upload/image'\n\t\t\t});\n\t});\nvar elm$file$File$mime = _File_mime;\nvar elm$file$File$size = _File_size;\nvar elm$file$File$toUrl = _File_toUrl;\nvar elm$core$Basics$clamp = F3(\n\tfunction (low, high, number) {\n\t\treturn (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);\n\t});\nvar elm$http$Http$fractionSent = function (p) {\n\treturn (!p.size) ? 1 : A3(elm$core$Basics$clamp, 0, 1, p.sent / p.size);\n};\nvar author$project$Pages$Upload$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Empty':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Pick':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$file$File$Select$file,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t['image/*', 'application/pdf']),\n\t\t\t\t\t\tauthor$project$Pages$Upload$GotFiles));\n\t\t\tcase 'Title':\n\t\t\t\tvar title = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{title: title}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Description':\n\t\t\t\tvar desc = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{description: desc}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'GotFiles':\n\t\t\t\tvar file = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfileSize: elm$file$File$size(file),\n\t\t\t\t\t\t\tfileStatus: author$project$Pages$Upload$Loaded(file),\n\t\t\t\t\t\t\tfraction: 0.0,\n\t\t\t\t\t\t\tmime: elm$file$File$mime(file)\n\t\t\t\t\t\t}),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\tauthor$project$Pages$Upload$GetPreview,\n\t\t\t\t\t\telm$file$File$toUrl(file)));\n\t\t\tcase 'Progress':\n\t\t\t\tvar progress = msg.a;\n\t\t\t\tif (progress.$ === 'Sending') {\n\t\t\t\t\tvar f = progress.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfraction: elm$http$Http$fractionSent(f)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'GetPreview':\n\t\t\t\tvar url = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{preview: url}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tcase 'Upload':\n\t\t\t\tif (model.title === '') {\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{warning: 'You need to choose a title for your image'}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar _n2 = model.fileStatus;\n\t\t\t\t\tif (_n2.$ === 'Loaded') {\n\t\t\t\t\t\tvar img = _n2.a;\n\t\t\t\t\t\tvar _n3 = model.user;\n\t\t\t\t\t\tif (_n3.$ === 'Just') {\n\t\t\t\t\t\t\tvar user = _n3.a;\n\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t{warning: 'Loading'}),\n\t\t\t\t\t\t\t\tA3(author$project$Pages$Upload$put, model, img, user.token));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{warning: 'Choose an image to upload'}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase 'UploadResponse':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar id = response.a;\n\t\t\t\t\tvar _n5 = model.user;\n\t\t\t\t\tif (_n5.$ === 'Just') {\n\t\t\t\t\t\tvar user = _n5.a;\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{id: id}),\n\t\t\t\t\t\t\tA3(author$project$Pages$Upload$postMetatada, model, user.token, id));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{warning: 'Connection error, please try again later'}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar string = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(elm$browser$Browser$Navigation$pushUrl, model.key, '/post/' + model.id));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{warning: 'Connection error, please try again later'}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'KeyHandler':\n\t\t\t\tvar keyCode = msg.a;\n\t\t\t\tif (keyCode === 13) {\n\t\t\t\t\treturn (model.tag !== '') ? _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttag: '',\n\t\t\t\t\t\t\t\ttags: A2(elm$core$List$cons, model.tag, model.tags)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none) : _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Tag':\n\t\t\t\tvar tag = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{tag: tag}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\tdefault:\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{fileSize: 0, fileStatus: author$project$Pages$Upload$NotLoaded}),\n\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t}\n\t});\nvar author$project$Pages$Users$Empty = {$: 'Empty'};\nvar author$project$Pages$Users$Failure = function (a) {\n\treturn {$: 'Failure', a: a};\n};\nvar author$project$Pages$Users$Success = function (a) {\n\treturn {$: 'Success', a: a};\n};\nvar author$project$Pages$Users$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'Test':\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\tcase 'Jump':\n\t\t\t\tvar _int = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: _int}),\n\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(author$project$Pages$Users$getUsers, model.query, _int),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$Task$perform,\n\t\t\t\t\t\t\t\tfunction (_n1) {\n\t\t\t\t\t\t\t\t\treturn author$project$Pages$Users$Empty;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tA2(elm$browser$Browser$Dom$setViewport, 0, 0))\n\t\t\t\t\t\t\t])));\n\t\t\tcase 'Response':\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar container = response.a;\n\t\t\t\t\tvar users = container.users;\n\t\t\t\t\treturn elm$core$List$isEmpty(users) ? _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Users$Failure('Query returned no results')\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none) : _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Users$Success(container)\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatus: author$project$Pages$Users$Failure('Connection error')\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'Query':\n\t\t\t\tvar query = msg.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{page: 1, query: query, status: author$project$Pages$Users$Loading}),\n\t\t\t\t\tA2(author$project$Pages$Users$getUsers, query, 1));\n\t\t\tdefault:\n\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t}\n\t});\nvar author$project$Session$set = function (model) {\n\treturn author$project$Session$Session(\n\t\telm$core$Maybe$Just(model));\n};\nvar elm$browser$Browser$Navigation$load = _Browser_load;\nvar elm$url$Url$addPort = F2(\n\tfunction (maybePort, starter) {\n\t\tif (maybePort.$ === 'Nothing') {\n\t\t\treturn starter;\n\t\t} else {\n\t\t\tvar port_ = maybePort.a;\n\t\t\treturn starter + (':' + elm$core$String$fromInt(port_));\n\t\t}\n\t});\nvar elm$url$Url$addPrefixed = F3(\n\tfunction (prefix, maybeSegment, starter) {\n\t\tif (maybeSegment.$ === 'Nothing') {\n\t\t\treturn starter;\n\t\t} else {\n\t\t\tvar segment = maybeSegment.a;\n\t\t\treturn _Utils_ap(\n\t\t\t\tstarter,\n\t\t\t\t_Utils_ap(prefix, segment));\n\t\t}\n\t});\nvar elm$url$Url$toString = function (url) {\n\tvar http = function () {\n\t\tvar _n0 = url.protocol;\n\t\tif (_n0.$ === 'Http') {\n\t\t\treturn 'http://';\n\t\t} else {\n\t\t\treturn 'https://';\n\t\t}\n\t}();\n\treturn A3(\n\t\telm$url$Url$addPrefixed,\n\t\t'#',\n\t\turl.fragment,\n\t\tA3(\n\t\t\telm$url$Url$addPrefixed,\n\t\t\t'?',\n\t\t\turl.query,\n\t\t\t_Utils_ap(\n\t\t\t\tA2(\n\t\t\t\t\telm$url$Url$addPort,\n\t\t\t\t\turl.port_,\n\t\t\t\t\t_Utils_ap(http, url.host)),\n\t\t\t\turl.path)));\n};\nvar author$project$Main$update = F2(\n\tfunction (msg, model) {\n\t\tswitch (msg.$) {\n\t\t\tcase 'UrlRequest':\n\t\t\t\tvar urlRequest = msg.a;\n\t\t\t\tif (urlRequest.$ === 'Internal') {\n\t\t\t\t\tvar url = urlRequest.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t\telm$url$Url$toString(url)));\n\t\t\t\t} else {\n\t\t\t\t\tvar url = urlRequest.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\telm$browser$Browser$Navigation$load(url));\n\t\t\t\t}\n\t\t\tcase 'UrlChange':\n\t\t\t\tvar url = msg.a;\n\t\t\t\treturn A2(author$project$Main$routeUrl, url, model);\n\t\t\tcase 'LogOut':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate: author$project$Main$Ready(author$project$Session$init)\n\t\t\t\t\t\t}),\n\t\t\t\t\tauthor$project$User$logout);\n\t\t\tcase 'UpdateSearch':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\treturn A2(\n\t\t\t\t\tauthor$project$Main$stepSearch,\n\t\t\t\t\tmodel,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tauthor$project$Components$SearchBar$update,\n\t\t\t\t\t\tmesg,\n\t\t\t\t\t\tauthor$project$Components$SearchBar$getModel(model.search)));\n\t\t\tcase 'SignUpMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n2 = model.page;\n\t\t\t\tif (_n2.$ === 'SignUp') {\n\t\t\t\t\tvar signup = _n2.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepSignUp,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$SignUp$update, mesg, signup));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'SignInMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n3 = model.page;\n\t\t\t\tif (_n3.$ === 'SignIn') {\n\t\t\t\t\tvar signin = _n3.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepSignIn,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$SignIn$update, mesg, signin));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'GalleryMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n4 = model.page;\n\t\t\t\tif (_n4.$ === 'Gallery') {\n\t\t\t\t\tvar gallery = _n4.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepGallery,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Gallery$update, mesg, gallery));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'UploadMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n5 = model.page;\n\t\t\t\tif (_n5.$ === 'Upload') {\n\t\t\t\t\tvar upload = _n5.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepUpload,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Upload$update, mesg, upload));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'HomeMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n6 = model.page;\n\t\t\t\tif (_n6.$ === 'Home') {\n\t\t\t\t\tvar home = _n6.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepHome,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Home$update, mesg, home));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'ProfileMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n7 = model.page;\n\t\t\t\tif (_n7.$ === 'Profile') {\n\t\t\t\t\tvar profile = _n7.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepProfile,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Profile$update, mesg, profile));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'UsersMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n8 = model.page;\n\t\t\t\tif (_n8.$ === 'Users') {\n\t\t\t\t\tvar users = _n8.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepUsers,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Users$update, mesg, users));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'PostMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n9 = model.page;\n\t\t\t\tif (_n9.$ === 'Post') {\n\t\t\t\t\tvar post = _n9.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepPost,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Post$update, mesg, post));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'ResultsMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n10 = model.page;\n\t\t\t\tif (_n10.$ === 'Results') {\n\t\t\t\t\tvar results = _n10.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepResults,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Results$update, mesg, results));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tcase 'TagsMsg':\n\t\t\t\tvar mesg = msg.a;\n\t\t\t\tvar _n11 = model.page;\n\t\t\t\tif (_n11.$ === 'Tags') {\n\t\t\t\t\tvar tags = _n11.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\tauthor$project$Main$stepTags,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tA2(author$project$Pages$Tags$update, mesg, tags));\n\t\t\t\t} else {\n\t\t\t\t\treturn _Utils_Tuple2(model, elm$core$Platform$Cmd$none);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tvar response = msg.a;\n\t\t\t\tif (response.$ === 'Ok') {\n\t\t\t\t\tvar user = response.a;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate: author$project$Main$Ready(\n\t\t\t\t\t\t\t\t\tauthor$project$Session$set(user))\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$browser$Browser$Navigation$pushUrl,\n\t\t\t\t\t\t\tmodel.key,\n\t\t\t\t\t\t\telm$url$Url$toString(model.url)));\n\t\t\t\t} else {\n\t\t\t\t\tvar log = response.a;\n\t\t\t\t\tif (log.$ === 'BadStatus') {\n\t\t\t\t\t\tvar code = log.a;\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstate: author$project$Main$Ready(author$project$Session$init)\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$batch(\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[author$project$User$logout, elm$browser$Browser$Navigation$reload])));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t{state: author$project$Main$Failure}),\n\t\t\t\t\t\t\telm$core$Platform$Cmd$none);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t});\nvar elm$html$Html$div = _VirtualDom_node('div');\nvar elm$html$Html$h2 = _VirtualDom_node('h2');\nvar elm$virtual_dom$VirtualDom$text = _VirtualDom_text;\nvar elm$html$Html$text = elm$virtual_dom$VirtualDom$text;\nvar elm$virtual_dom$VirtualDom$style = _VirtualDom_style;\nvar elm$html$Html$Attributes$style = elm$virtual_dom$VirtualDom$style;\nvar author$project$Main$viewBody = F2(\n\tfunction (model, error) {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '800px'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '25%'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text(error)\n\t\t\t\t\t\t]))\n\t\t\t\t]));\n\t});\nvar elm$html$Html$a = _VirtualDom_node('a');\nvar elm$html$Html$li = _VirtualDom_node('li');\nvar elm$html$Html$ul = _VirtualDom_node('ul');\nvar elm$html$Html$Attributes$stringProperty = F2(\n\tfunction (key, string) {\n\t\treturn A2(\n\t\t\t_VirtualDom_property,\n\t\t\tkey,\n\t\t\telm$json$Json$Encode$string(string));\n\t});\nvar elm$html$Html$Attributes$class = elm$html$Html$Attributes$stringProperty('className');\nvar elm$html$Html$Attributes$href = function (url) {\n\treturn A2(\n\t\telm$html$Html$Attributes$stringProperty,\n\t\t'href',\n\t\t_VirtualDom_noJavaScriptUri(url));\n};\nvar author$project$Main$viewFooter = A2(\n\telm$html$Html$div,\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(elm$html$Html$Attributes$style, 'bottom', '0%'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'height', '100px'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'padding-top', '25px'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', '#222'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.98'),\n\t\t\telm$html$Html$Attributes$class('container-fluid text-center'),\n\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t]),\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$html$Html$ul,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('https://github.com/jaruji/Elm_project'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('© 2020 Juraj Bedej')\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t]))\n\t\t\t\t]))\n\t\t]));\nvar akoppela$elm_logo$ElmLogo$size = 100;\nvar elm$core$String$fromFloat = _String_fromNumber;\nvar elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');\nvar elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');\nvar akoppela$elm_logo$ElmLogo$attrs = function (width) {\n\treturn _List_fromArray(\n\t\t[\n\t\t\telm$svg$Svg$Attributes$width(\n\t\t\telm$core$String$fromInt(width)),\n\t\t\telm$svg$Svg$Attributes$viewBox(\n\t\t\t'0 0 ' + (elm$core$String$fromFloat(akoppela$elm_logo$ElmLogo$size) + (' ' + elm$core$String$fromFloat(akoppela$elm_logo$ElmLogo$size))))\n\t\t]);\n};\nvar elm$core$Basics$sqrt = _Basics_sqrt;\nvar akoppela$elm_logo$ElmLogo$distance = elm$core$Basics$sqrt(2);\nvar akoppela$elm_logo$ElmLogo$points = function (list) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t' ',\n\t\tA2(\n\t\t\telm$core$List$map,\n\t\t\tfunction (_n0) {\n\t\t\t\tvar fst = _n0.a;\n\t\t\t\tvar snd = _n0.b;\n\t\t\t\treturn elm$core$String$fromFloat(fst) + (',' + elm$core$String$fromFloat(snd));\n\t\t\t},\n\t\t\tlist));\n};\nvar akoppela$elm_logo$ElmLogo$shift = (2 * akoppela$elm_logo$ElmLogo$distance) / elm$core$Basics$sqrt(2);\nvar elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');\nvar elm$svg$Svg$polygon = elm$svg$Svg$trustedNode('polygon');\nvar elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');\nvar elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');\nvar akoppela$elm_logo$ElmLogo$group = _List_fromArray(\n\t[\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#5A6378'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2(0, akoppela$elm_logo$ElmLogo$shift),\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size / 2) - akoppela$elm_logo$ElmLogo$shift, akoppela$elm_logo$ElmLogo$size / 2),\n\t\t\t\t\t\t\t_Utils_Tuple2(0, akoppela$elm_logo$ElmLogo$size - akoppela$elm_logo$ElmLogo$shift)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#7FD13B'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$shift, 0),\n\t\t\t\t\t\t\t_Utils_Tuple2(((akoppela$elm_logo$ElmLogo$size / 4) + akoppela$elm_logo$ElmLogo$shift) - akoppela$elm_logo$ElmLogo$distance, (akoppela$elm_logo$ElmLogo$size / 4) - akoppela$elm_logo$ElmLogo$distance),\n\t\t\t\t\t\t\t_Utils_Tuple2((((akoppela$elm_logo$ElmLogo$size * 3) / 4) - akoppela$elm_logo$ElmLogo$shift) - akoppela$elm_logo$ElmLogo$distance, (akoppela$elm_logo$ElmLogo$size / 4) - akoppela$elm_logo$ElmLogo$distance),\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size / 2) - akoppela$elm_logo$ElmLogo$shift, 0)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#F0AD00'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2(((akoppela$elm_logo$ElmLogo$size / 4) + akoppela$elm_logo$ElmLogo$shift) + akoppela$elm_logo$ElmLogo$distance, (akoppela$elm_logo$ElmLogo$size / 4) + akoppela$elm_logo$ElmLogo$distance),\n\t\t\t\t\t\t\t_Utils_Tuple2((((akoppela$elm_logo$ElmLogo$size * 3) / 4) - akoppela$elm_logo$ElmLogo$shift) - akoppela$elm_logo$ElmLogo$distance, (akoppela$elm_logo$ElmLogo$size / 4) + akoppela$elm_logo$ElmLogo$distance),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size / 2, (akoppela$elm_logo$ElmLogo$size / 2) - akoppela$elm_logo$ElmLogo$shift)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#60B5CC'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size / 2) + akoppela$elm_logo$ElmLogo$shift, 0),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size, 0),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size, (akoppela$elm_logo$ElmLogo$size / 2) - akoppela$elm_logo$ElmLogo$shift)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#F0AD00'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size, (akoppela$elm_logo$ElmLogo$size / 2) + akoppela$elm_logo$ElmLogo$shift),\n\t\t\t\t\t\t\t_Utils_Tuple2(((akoppela$elm_logo$ElmLogo$size * 3) / 4) + akoppela$elm_logo$ElmLogo$shift, (akoppela$elm_logo$ElmLogo$size * 3) / 4),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size, akoppela$elm_logo$ElmLogo$size - akoppela$elm_logo$ElmLogo$shift)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#60B5CC'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$shift, akoppela$elm_logo$ElmLogo$size),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size / 2, (akoppela$elm_logo$ElmLogo$size / 2) + akoppela$elm_logo$ElmLogo$shift),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size - akoppela$elm_logo$ElmLogo$shift, akoppela$elm_logo$ElmLogo$size)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil),\n\t\tA2(\n\t\telm$svg$Svg$polygon,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('#7FD13B'),\n\t\t\t\telm$svg$Svg$Attributes$points(\n\t\t\t\takoppela$elm_logo$ElmLogo$points(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size / 2) + akoppela$elm_logo$ElmLogo$shift, akoppela$elm_logo$ElmLogo$size / 2),\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size * 3) / 4, (akoppela$elm_logo$ElmLogo$size / 4) + akoppela$elm_logo$ElmLogo$shift),\n\t\t\t\t\t\t\t_Utils_Tuple2(akoppela$elm_logo$ElmLogo$size - akoppela$elm_logo$ElmLogo$shift, akoppela$elm_logo$ElmLogo$size / 2),\n\t\t\t\t\t\t\t_Utils_Tuple2((akoppela$elm_logo$ElmLogo$size * 3) / 4, ((akoppela$elm_logo$ElmLogo$size * 3) / 4) - akoppela$elm_logo$ElmLogo$shift)\n\t\t\t\t\t\t])))\n\t\t\t]),\n\t\t_List_Nil)\n\t]);\nvar elm$virtual_dom$VirtualDom$nodeNS = function (tag) {\n\treturn _VirtualDom_nodeNS(\n\t\t_VirtualDom_noScript(tag));\n};\nvar elm$svg$Svg$node = elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');\nvar akoppela$elm_logo$ElmLogo$svg = function (width) {\n\treturn A3(\n\t\telm$svg$Svg$node,\n\t\t'svg',\n\t\takoppela$elm_logo$ElmLogo$attrs(width),\n\t\takoppela$elm_logo$ElmLogo$group);\n};\nvar author$project$Components$SearchBar$KeyHandler = function (a) {\n\treturn {$: 'KeyHandler', a: a};\n};\nvar author$project$Components$SearchBar$UpdateValue = function (a) {\n\treturn {$: 'UpdateValue', a: a};\n};\nvar elm$html$Html$Events$keyCode = A2(elm$json$Json$Decode$field, 'keyCode', elm$json$Json$Decode$int);\nvar elm$virtual_dom$VirtualDom$Normal = function (a) {\n\treturn {$: 'Normal', a: a};\n};\nvar elm$virtual_dom$VirtualDom$on = _VirtualDom_on;\nvar elm$html$Html$Events$on = F2(\n\tfunction (event, decoder) {\n\t\treturn A2(\n\t\t\telm$virtual_dom$VirtualDom$on,\n\t\t\tevent,\n\t\t\telm$virtual_dom$VirtualDom$Normal(decoder));\n\t});\nvar author$project$Components$SearchBar$keyPress = function (tagger) {\n\treturn A2(\n\t\telm$html$Html$Events$on,\n\t\t'keydown',\n\t\tA2(elm$json$Json$Decode$map, tagger, elm$html$Html$Events$keyCode));\n};\nvar elm$html$Html$input = _VirtualDom_node('input');\nvar elm$html$Html$span = _VirtualDom_node('span');\nvar elm$html$Html$Attributes$placeholder = elm$html$Html$Attributes$stringProperty('placeholder');\nvar elm$html$Html$Attributes$type_ = elm$html$Html$Attributes$stringProperty('type');\nvar elm$html$Html$Attributes$value = elm$html$Html$Attributes$stringProperty('value');\nvar elm$html$Html$Events$alwaysStop = function (x) {\n\treturn _Utils_Tuple2(x, true);\n};\nvar elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {\n\treturn {$: 'MayStopPropagation', a: a};\n};\nvar elm$html$Html$Events$stopPropagationOn = F2(\n\tfunction (event, decoder) {\n\t\treturn A2(\n\t\t\telm$virtual_dom$VirtualDom$on,\n\t\t\tevent,\n\t\t\telm$virtual_dom$VirtualDom$MayStopPropagation(decoder));\n\t});\nvar elm$html$Html$Events$targetValue = A2(\n\telm$json$Json$Decode$at,\n\t_List_fromArray(\n\t\t['target', 'value']),\n\telm$json$Json$Decode$string);\nvar elm$html$Html$Events$onInput = function (tagger) {\n\treturn A2(\n\t\telm$html$Html$Events$stopPropagationOn,\n\t\t'input',\n\t\tA2(\n\t\t\telm$json$Json$Decode$map,\n\t\t\telm$html$Html$Events$alwaysStop,\n\t\t\tA2(elm$json$Json$Decode$map, tagger, elm$html$Html$Events$targetValue)));\n};\nvar author$project$Components$SearchBar$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('form-inline'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$input,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Search'),\n\t\t\t\t\t\telm$html$Html$Attributes$value(model.searchValue),\n\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Components$SearchBar$UpdateValue),\n\t\t\t\t\t\tauthor$project$Components$SearchBar$keyPress(author$project$Components$SearchBar$KeyHandler)\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$span,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'grey'),\n\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-search form-control-feedback')\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar author$project$Main$LogOut = {$: 'LogOut'};\nvar elm$html$Html$img = _VirtualDom_node('img');\nvar elm$virtual_dom$VirtualDom$map = _VirtualDom_map;\nvar elm$html$Html$map = elm$virtual_dom$VirtualDom$map;\nvar elm$virtual_dom$VirtualDom$attribute = F2(\n\tfunction (key, value) {\n\t\treturn A2(\n\t\t\t_VirtualDom_attribute,\n\t\t\t_VirtualDom_noOnOrFormAction(key),\n\t\t\t_VirtualDom_noJavaScriptOrHtmlUri(value));\n\t});\nvar elm$html$Html$Attributes$attribute = elm$virtual_dom$VirtualDom$attribute;\nvar elm$html$Html$Attributes$height = function (n) {\n\treturn A2(\n\t\t_VirtualDom_attribute,\n\t\t'height',\n\t\telm$core$String$fromInt(n));\n};\nvar elm$html$Html$Attributes$src = function (url) {\n\treturn A2(\n\t\telm$html$Html$Attributes$stringProperty,\n\t\t'src',\n\t\t_VirtualDom_noJavaScriptOrHtmlUri(url));\n};\nvar elm$html$Html$Attributes$width = function (n) {\n\treturn A2(\n\t\t_VirtualDom_attribute,\n\t\t'width',\n\t\telm$core$String$fromInt(n));\n};\nvar elm$html$Html$Events$onClick = function (msg) {\n\treturn A2(\n\t\telm$html$Html$Events$on,\n\t\t'click',\n\t\telm$json$Json$Decode$succeed(msg));\n};\nvar elm$svg$Svg$svg = elm$svg$Svg$trustedNode('svg');\nvar author$project$Main$viewHeader = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('navbar navbar-inverse navbar-fixed-top'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.95')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('container-fluid')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('navbar-header')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('navbar-brand')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$svg$Svg$svg,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$svg$Svg$Attributes$width('35'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$svg$Svg$Attributes$viewBox('0 0 35 35')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\takoppela$elm_logo$ElmLogo$svg(35)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$ul,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav navbar-nav')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/'),\n\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _n0 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\tif (_n0.$ === 'Home') {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Home')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/gallery?page=1&sort=newest'),\n\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _n1 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\tif (_n1.$ === 'Gallery') {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Gallery')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/upload'),\n\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _n2 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\tif (_n2.$ === 'Upload') {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Upload')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/users'),\n\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _n3 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\tif (_n3.$ === 'Users') {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Users')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/tags'),\n\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\tvar _n4 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\tif (_n4.$ === 'Tags') {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Tags')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\t\t\tauthor$project$Main$UpdateSearch,\n\t\t\t\t\t\t\t\t\t\tauthor$project$Components$SearchBar$view(\n\t\t\t\t\t\t\t\t\t\t\tauthor$project$Components$SearchBar$getModel(model.search)))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n5 = author$project$Main$getUser(model.state);\n\t\t\t\t\t\tif (_n5.$ === 'Nothing') {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$ul,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav navbar-nav navbar-right')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_in'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n6 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n6.$ === 'SignIn') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-user')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(' Sign In')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_up'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n7 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n7.$ === 'SignUp') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-user')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(' Sign Up')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar user = _n5.a;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$ul,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav navbar-nav navbar-right')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('avatar'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(user.avatar),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(40),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(40)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + user.username),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n8 = model.page;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n8.$ === 'Profile') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'white');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(user.username)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Main$LogOut)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-log-out'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '2px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Log Out')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}()\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar perzanko$elm_loading$Loading$Circle = {$: 'Circle'};\nvar perzanko$elm_loading$Loading$On = {$: 'On'};\nvar perzanko$elm_loading$Loading$defaultConfig = {className: '', color: '#74b4c9', size: 30, speed: 1};\nvar elm$core$List$head = function (list) {\n\tif (list.b) {\n\t\tvar x = list.a;\n\t\tvar xs = list.b;\n\t\treturn elm$core$Maybe$Just(x);\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$AppendProperty = function (a) {\n\treturn {$: 'AppendProperty', a: a};\n};\nvar rtfeldman$elm_css$Css$Internal$property = F2(\n\tfunction (key, value) {\n\t\treturn rtfeldman$elm_css$Css$Preprocess$AppendProperty(key + (':' + value));\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$ApplyStyles = function (a) {\n\treturn {$: 'ApplyStyles', a: a};\n};\nvar rtfeldman$elm_css$Css$Internal$getOverloadedProperty = F3(\n\tfunction (functionName, desiredKey, style) {\n\t\tgetOverloadedProperty:\n\t\twhile (true) {\n\t\t\tswitch (style.$) {\n\t\t\t\tcase 'AppendProperty':\n\t\t\t\t\tvar str = style.a;\n\t\t\t\t\tvar key = A2(\n\t\t\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t\t\t'',\n\t\t\t\t\t\telm$core$List$head(\n\t\t\t\t\t\t\tA2(elm$core$String$split, ':', str)));\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, key);\n\t\t\t\tcase 'ExtendSelector':\n\t\t\t\t\tvar selector = style.a;\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-selector'));\n\t\t\t\tcase 'NestSnippet':\n\t\t\t\t\tvar combinator = style.a;\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-combinator'));\n\t\t\t\tcase 'WithPseudoElement':\n\t\t\t\t\tvar pseudoElement = style.a;\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-pseudo-element setter'));\n\t\t\t\tcase 'WithMedia':\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-media-query'));\n\t\t\t\tcase 'WithKeyframes':\n\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-keyframes'));\n\t\t\t\tdefault:\n\t\t\t\t\tif (!style.a.b) {\n\t\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-empty-Style'));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!style.a.b.b) {\n\t\t\t\t\t\t\tvar _n1 = style.a;\n\t\t\t\t\t\t\tvar only = _n1.a;\n\t\t\t\t\t\t\tvar $temp$functionName = functionName,\n\t\t\t\t\t\t\t\t$temp$desiredKey = desiredKey,\n\t\t\t\t\t\t\t\t$temp$style = only;\n\t\t\t\t\t\t\tfunctionName = $temp$functionName;\n\t\t\t\t\t\t\tdesiredKey = $temp$desiredKey;\n\t\t\t\t\t\t\tstyle = $temp$style;\n\t\t\t\t\t\t\tcontinue getOverloadedProperty;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n2 = style.a;\n\t\t\t\t\t\t\tvar first = _n2.a;\n\t\t\t\t\t\t\tvar rest = _n2.b;\n\t\t\t\t\t\t\tvar $temp$functionName = functionName,\n\t\t\t\t\t\t\t\t$temp$desiredKey = desiredKey,\n\t\t\t\t\t\t\t\t$temp$style = rtfeldman$elm_css$Css$Preprocess$ApplyStyles(rest);\n\t\t\t\t\t\t\tfunctionName = $temp$functionName;\n\t\t\t\t\t\t\tdesiredKey = $temp$desiredKey;\n\t\t\t\t\t\t\tstyle = $temp$style;\n\t\t\t\t\t\t\tcontinue getOverloadedProperty;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Internal$IncompatibleUnits = {$: 'IncompatibleUnits'};\nvar rtfeldman$elm_css$Css$Structure$Compatible = {$: 'Compatible'};\nvar rtfeldman$elm_css$Css$Internal$lengthConverter = F3(\n\tfunction (units, unitLabel, numericValue) {\n\t\treturn {\n\t\t\tabsoluteLength: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tcalc: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tflexBasis: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tfontSize: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlength: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrAuto: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrAutoOrCoverOrContain: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrMinMaxDimension: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrNone: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrNoneOrMinMaxDimension: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrNumber: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tlengthOrNumberOrAutoOrNoneOrContent: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tnumericValue: numericValue,\n\t\t\ttextIndent: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\tunitLabel: unitLabel,\n\t\t\tunits: units,\n\t\t\tvalue: _Utils_ap(\n\t\t\t\telm$core$String$fromFloat(numericValue),\n\t\t\t\tunitLabel)\n\t\t};\n\t});\nvar rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty = A3(rtfeldman$elm_css$Css$Internal$lengthConverter, rtfeldman$elm_css$Css$Internal$IncompatibleUnits, '', 0);\nvar rtfeldman$elm_css$Css$alignItems = function (fn) {\n\treturn A3(\n\t\trtfeldman$elm_css$Css$Internal$getOverloadedProperty,\n\t\t'alignItems',\n\t\t'align-items',\n\t\tfn(rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));\n};\nvar rtfeldman$elm_css$Css$property = F2(\n\tfunction (key, value) {\n\t\treturn rtfeldman$elm_css$Css$Preprocess$AppendProperty(key + (':' + value));\n\t});\nvar rtfeldman$elm_css$Css$prop1 = F2(\n\tfunction (key, arg) {\n\t\treturn A2(rtfeldman$elm_css$Css$property, key, arg.value);\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$WithKeyframes = function (a) {\n\treturn {$: 'WithKeyframes', a: a};\n};\nvar rtfeldman$elm_css$Css$animationName = function (arg) {\n\treturn ((arg.value === 'none') || ((arg.value === 'inherit') || ((arg.value === 'unset') || (arg.value === 'initial')))) ? A2(rtfeldman$elm_css$Css$prop1, 'animation-name', arg) : rtfeldman$elm_css$Css$Preprocess$WithKeyframes(arg.value);\n};\nvar rtfeldman$elm_css$Css$auto = {alignItemsOrAuto: rtfeldman$elm_css$Css$Structure$Compatible, cursor: rtfeldman$elm_css$Css$Structure$Compatible, flexBasis: rtfeldman$elm_css$Css$Structure$Compatible, intOrAuto: rtfeldman$elm_css$Css$Structure$Compatible, justifyContentOrAuto: rtfeldman$elm_css$Css$Structure$Compatible, lengthOrAuto: rtfeldman$elm_css$Css$Structure$Compatible, lengthOrAutoOrCoverOrContain: rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNumberOrAutoOrNoneOrContent: rtfeldman$elm_css$Css$Structure$Compatible, overflow: rtfeldman$elm_css$Css$Structure$Compatible, pointerEvents: rtfeldman$elm_css$Css$Structure$Compatible, tableLayout: rtfeldman$elm_css$Css$Structure$Compatible, textRendering: rtfeldman$elm_css$Css$Structure$Compatible, touchAction: rtfeldman$elm_css$Css$Structure$Compatible, value: 'auto'};\nvar rtfeldman$elm_css$Css$backgroundColor = function (c) {\n\treturn A2(rtfeldman$elm_css$Css$property, 'background-color', c.value);\n};\nvar rtfeldman$elm_css$Css$borderRadius = rtfeldman$elm_css$Css$prop1('border-radius');\nvar rtfeldman$elm_css$Css$flexEnd = rtfeldman$elm_css$Css$prop1('flex-end');\nvar rtfeldman$elm_css$Css$height = rtfeldman$elm_css$Css$prop1('height');\nvar rtfeldman$elm_css$Css$withPrecedingHash = function (str) {\n\treturn A2(elm$core$String$startsWith, '#', str) ? str : A2(\n\t\telm$core$String$cons,\n\t\t_Utils_chr('#'),\n\t\tstr);\n};\nvar rtfeldman$elm_css$Css$erroneousHex = function (str) {\n\treturn {\n\t\talpha: 1,\n\t\tblue: 0,\n\t\tcolor: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tgreen: 0,\n\t\tred: 0,\n\t\tvalue: rtfeldman$elm_css$Css$withPrecedingHash(str)\n\t};\n};\nvar elm$core$String$fromList = _String_fromList;\nvar elm$core$String$toLower = _String_toLower;\nvar elm$core$List$tail = function (list) {\n\tif (list.b) {\n\t\tvar x = list.a;\n\t\tvar xs = list.b;\n\t\treturn elm$core$Maybe$Just(xs);\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar rtfeldman$elm_hex$Hex$fromStringHelp = F3(\n\tfunction (position, chars, accumulated) {\n\t\tfromStringHelp:\n\t\twhile (true) {\n\t\t\tif (!chars.b) {\n\t\t\t\treturn elm$core$Result$Ok(accumulated);\n\t\t\t} else {\n\t\t\t\tvar _char = chars.a;\n\t\t\t\tvar rest = chars.b;\n\t\t\t\tswitch (_char.valueOf()) {\n\t\t\t\t\tcase '0':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated;\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '1':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + A2(elm$core$Basics$pow, 16, position);\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '2':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (2 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '3':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (3 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '4':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (4 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '5':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (5 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '6':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (6 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '7':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (7 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '8':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (8 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase '9':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (9 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'a':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (10 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (11 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (12 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (13 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'e':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (14 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tcase 'f':\n\t\t\t\t\t\tvar $temp$position = position - 1,\n\t\t\t\t\t\t\t$temp$chars = rest,\n\t\t\t\t\t\t\t$temp$accumulated = accumulated + (15 * A2(elm$core$Basics$pow, 16, position));\n\t\t\t\t\t\tposition = $temp$position;\n\t\t\t\t\t\tchars = $temp$chars;\n\t\t\t\t\t\taccumulated = $temp$accumulated;\n\t\t\t\t\t\tcontinue fromStringHelp;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar nonHex = _char;\n\t\t\t\t\t\treturn elm$core$Result$Err(\n\t\t\t\t\t\t\telm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_hex$Hex$fromString = function (str) {\n\tif (elm$core$String$isEmpty(str)) {\n\t\treturn elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');\n\t} else {\n\t\tvar result = function () {\n\t\t\tif (A2(elm$core$String$startsWith, '-', str)) {\n\t\t\t\tvar list = A2(\n\t\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\telm$core$List$tail(\n\t\t\t\t\t\telm$core$String$toList(str)));\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$Result$map,\n\t\t\t\t\telm$core$Basics$negate,\n\t\t\t\t\tA3(\n\t\t\t\t\t\trtfeldman$elm_hex$Hex$fromStringHelp,\n\t\t\t\t\t\telm$core$List$length(list) - 1,\n\t\t\t\t\t\tlist,\n\t\t\t\t\t\t0));\n\t\t\t} else {\n\t\t\t\treturn A3(\n\t\t\t\t\trtfeldman$elm_hex$Hex$fromStringHelp,\n\t\t\t\t\telm$core$String$length(str) - 1,\n\t\t\t\t\telm$core$String$toList(str),\n\t\t\t\t\t0);\n\t\t\t}\n\t\t}();\n\t\tvar formatError = function (err) {\n\t\t\treturn A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t' ',\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t['\\\"' + (str + '\\\"'), 'is not a valid hexadecimal string because', err]));\n\t\t};\n\t\treturn A2(elm$core$Result$mapError, formatError, result);\n\t}\n};\nvar rtfeldman$elm_css$Css$validHex = F5(\n\tfunction (str, _n0, _n1, _n2, _n3) {\n\t\tvar r1 = _n0.a;\n\t\tvar r2 = _n0.b;\n\t\tvar g1 = _n1.a;\n\t\tvar g2 = _n1.b;\n\t\tvar b1 = _n2.a;\n\t\tvar b2 = _n2.b;\n\t\tvar a1 = _n3.a;\n\t\tvar a2 = _n3.b;\n\t\tvar toResult = A2(\n\t\t\telm$core$Basics$composeR,\n\t\t\telm$core$String$fromList,\n\t\t\tA2(elm$core$Basics$composeR, elm$core$String$toLower, rtfeldman$elm_hex$Hex$fromString));\n\t\tvar results = _Utils_Tuple2(\n\t\t\t_Utils_Tuple2(\n\t\t\t\ttoResult(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[r1, r2])),\n\t\t\t\ttoResult(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[g1, g2]))),\n\t\t\t_Utils_Tuple2(\n\t\t\t\ttoResult(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[b1, b2])),\n\t\t\t\ttoResult(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[a1, a2]))));\n\t\tif ((((results.a.a.$ === 'Ok') && (results.a.b.$ === 'Ok')) && (results.b.a.$ === 'Ok')) && (results.b.b.$ === 'Ok')) {\n\t\t\tvar _n5 = results.a;\n\t\t\tvar red = _n5.a.a;\n\t\t\tvar green = _n5.b.a;\n\t\t\tvar _n6 = results.b;\n\t\t\tvar blue = _n6.a.a;\n\t\t\tvar alpha = _n6.b.a;\n\t\t\treturn {\n\t\t\t\talpha: alpha / 255,\n\t\t\t\tblue: blue,\n\t\t\t\tcolor: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\t\t\tgreen: green,\n\t\t\t\tred: red,\n\t\t\t\tvalue: rtfeldman$elm_css$Css$withPrecedingHash(str)\n\t\t\t};\n\t\t} else {\n\t\t\treturn rtfeldman$elm_css$Css$erroneousHex(str);\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$hex = function (str) {\n\tvar withoutHash = A2(elm$core$String$startsWith, '#', str) ? A2(elm$core$String$dropLeft, 1, str) : str;\n\tvar _n0 = elm$core$String$toList(withoutHash);\n\t_n0$4:\n\twhile (true) {\n\t\tif ((_n0.b && _n0.b.b) && _n0.b.b.b) {\n\t\t\tif (!_n0.b.b.b.b) {\n\t\t\t\tvar r = _n0.a;\n\t\t\t\tvar _n1 = _n0.b;\n\t\t\t\tvar g = _n1.a;\n\t\t\t\tvar _n2 = _n1.b;\n\t\t\t\tvar b = _n2.a;\n\t\t\t\treturn A5(\n\t\t\t\t\trtfeldman$elm_css$Css$validHex,\n\t\t\t\t\tstr,\n\t\t\t\t\t_Utils_Tuple2(r, r),\n\t\t\t\t\t_Utils_Tuple2(g, g),\n\t\t\t\t\t_Utils_Tuple2(b, b),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t_Utils_chr('f'),\n\t\t\t\t\t\t_Utils_chr('f')));\n\t\t\t} else {\n\t\t\t\tif (!_n0.b.b.b.b.b) {\n\t\t\t\t\tvar r = _n0.a;\n\t\t\t\t\tvar _n3 = _n0.b;\n\t\t\t\t\tvar g = _n3.a;\n\t\t\t\t\tvar _n4 = _n3.b;\n\t\t\t\t\tvar b = _n4.a;\n\t\t\t\t\tvar _n5 = _n4.b;\n\t\t\t\t\tvar a = _n5.a;\n\t\t\t\t\treturn A5(\n\t\t\t\t\t\trtfeldman$elm_css$Css$validHex,\n\t\t\t\t\t\tstr,\n\t\t\t\t\t\t_Utils_Tuple2(r, r),\n\t\t\t\t\t\t_Utils_Tuple2(g, g),\n\t\t\t\t\t\t_Utils_Tuple2(b, b),\n\t\t\t\t\t\t_Utils_Tuple2(a, a));\n\t\t\t\t} else {\n\t\t\t\t\tif (_n0.b.b.b.b.b.b) {\n\t\t\t\t\t\tif (!_n0.b.b.b.b.b.b.b) {\n\t\t\t\t\t\t\tvar r1 = _n0.a;\n\t\t\t\t\t\t\tvar _n6 = _n0.b;\n\t\t\t\t\t\t\tvar r2 = _n6.a;\n\t\t\t\t\t\t\tvar _n7 = _n6.b;\n\t\t\t\t\t\t\tvar g1 = _n7.a;\n\t\t\t\t\t\t\tvar _n8 = _n7.b;\n\t\t\t\t\t\t\tvar g2 = _n8.a;\n\t\t\t\t\t\t\tvar _n9 = _n8.b;\n\t\t\t\t\t\t\tvar b1 = _n9.a;\n\t\t\t\t\t\t\tvar _n10 = _n9.b;\n\t\t\t\t\t\t\tvar b2 = _n10.a;\n\t\t\t\t\t\t\treturn A5(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$validHex,\n\t\t\t\t\t\t\t\tstr,\n\t\t\t\t\t\t\t\t_Utils_Tuple2(r1, r2),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(g1, g2),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(b1, b2),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t_Utils_chr('f'),\n\t\t\t\t\t\t\t\t\t_Utils_chr('f')));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_n0.b.b.b.b.b.b.b.b && (!_n0.b.b.b.b.b.b.b.b.b)) {\n\t\t\t\t\t\t\t\tvar r1 = _n0.a;\n\t\t\t\t\t\t\t\tvar _n11 = _n0.b;\n\t\t\t\t\t\t\t\tvar r2 = _n11.a;\n\t\t\t\t\t\t\t\tvar _n12 = _n11.b;\n\t\t\t\t\t\t\t\tvar g1 = _n12.a;\n\t\t\t\t\t\t\t\tvar _n13 = _n12.b;\n\t\t\t\t\t\t\t\tvar g2 = _n13.a;\n\t\t\t\t\t\t\t\tvar _n14 = _n13.b;\n\t\t\t\t\t\t\t\tvar b1 = _n14.a;\n\t\t\t\t\t\t\t\tvar _n15 = _n14.b;\n\t\t\t\t\t\t\t\tvar b2 = _n15.a;\n\t\t\t\t\t\t\t\tvar _n16 = _n15.b;\n\t\t\t\t\t\t\t\tvar a1 = _n16.a;\n\t\t\t\t\t\t\t\tvar _n17 = _n16.b;\n\t\t\t\t\t\t\t\tvar a2 = _n17.a;\n\t\t\t\t\t\t\t\treturn A5(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$validHex,\n\t\t\t\t\t\t\t\t\tstr,\n\t\t\t\t\t\t\t\t\t_Utils_Tuple2(r1, r2),\n\t\t\t\t\t\t\t\t\t_Utils_Tuple2(g1, g2),\n\t\t\t\t\t\t\t\t\t_Utils_Tuple2(b1, b2),\n\t\t\t\t\t\t\t\t\t_Utils_Tuple2(a1, a2));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak _n0$4;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _n0$4;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tbreak _n0$4;\n\t\t}\n\t}\n\treturn rtfeldman$elm_css$Css$erroneousHex(str);\n};\nvar rtfeldman$elm_css$Css$justifyContent = function (fn) {\n\treturn A3(\n\t\trtfeldman$elm_css$Css$Internal$getOverloadedProperty,\n\t\t'justifyContent',\n\t\t'justify-content',\n\t\tfn(rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));\n};\nvar rtfeldman$elm_css$Css$prop2 = F3(\n\tfunction (key, argA, argB) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\tkey,\n\t\t\tA2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t' ',\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[argA.value, argB.value])));\n\t});\nvar rtfeldman$elm_css$Css$margin2 = rtfeldman$elm_css$Css$prop2('margin');\nvar rtfeldman$elm_css$Css$position = rtfeldman$elm_css$Css$prop1('position');\nvar rtfeldman$elm_css$Css$PxUnits = {$: 'PxUnits'};\nvar rtfeldman$elm_css$Css$px = A2(rtfeldman$elm_css$Css$Internal$lengthConverter, rtfeldman$elm_css$Css$PxUnits, 'px');\nvar rtfeldman$elm_css$Css$relative = {position: rtfeldman$elm_css$Css$Structure$Compatible, value: 'relative'};\nvar rtfeldman$elm_css$Css$spaceBetween = rtfeldman$elm_css$Css$prop1('space-between');\nvar rtfeldman$elm_css$Css$width = rtfeldman$elm_css$Css$prop1('width');\nvar rtfeldman$elm_css$Css$Internal$printKeyframeSelector = function (_n0) {\n\tvar percentage = _n0.a;\n\tvar properties = _n0.b;\n\tvar propertiesStr = A2(\n\t\telm$core$String$join,\n\t\t'',\n\t\tA2(\n\t\t\telm$core$List$map,\n\t\t\tfunction (_n1) {\n\t\t\t\tvar prop = _n1.a;\n\t\t\t\treturn prop + ';';\n\t\t\t},\n\t\t\tproperties));\n\tvar percentageStr = elm$core$String$fromInt(percentage) + '%';\n\treturn percentageStr + (' {' + (propertiesStr + '}'));\n};\nvar rtfeldman$elm_css$Css$Internal$compileKeyframes = function (tuples) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n\\n',\n\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Internal$printKeyframeSelector, tuples));\n};\nvar rtfeldman$elm_css$Css$Animations$keyframes = function (tuples) {\n\treturn elm$core$List$isEmpty(tuples) ? {keyframes: rtfeldman$elm_css$Css$Structure$Compatible, none: rtfeldman$elm_css$Css$Structure$Compatible, value: 'none'} : {\n\t\tkeyframes: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tnone: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tvalue: rtfeldman$elm_css$Css$Internal$compileKeyframes(tuples)\n\t};\n};\nvar rtfeldman$elm_css$Css$Internal$Property = function (a) {\n\treturn {$: 'Property', a: a};\n};\nvar rtfeldman$elm_css$Css$Animations$property = F2(\n\tfunction (key, value) {\n\t\treturn rtfeldman$elm_css$Css$Internal$Property(key + (':' + value));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$Node = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'Node', a: a, b: b, c: c};\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$node = rtfeldman$elm_css$VirtualDom$Styled$Node;\nvar rtfeldman$elm_css$Html$Styled$node = rtfeldman$elm_css$VirtualDom$Styled$node;\nvar rtfeldman$elm_css$Html$Styled$div = rtfeldman$elm_css$Html$Styled$node('div');\nvar elm$virtual_dom$VirtualDom$property = F2(\n\tfunction (key, value) {\n\t\treturn A2(\n\t\t\t_VirtualDom_property,\n\t\t\t_VirtualDom_noInnerHtmlOrFormAction(key),\n\t\t\t_VirtualDom_noJavaScriptOrHtmlUri(value));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$Attribute = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'Attribute', a: a, b: b, c: c};\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$property = F2(\n\tfunction (key, value) {\n\t\treturn A3(\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$Attribute,\n\t\t\tA2(elm$virtual_dom$VirtualDom$property, key, value),\n\t\t\t_List_Nil,\n\t\t\t'');\n\t});\nvar rtfeldman$elm_css$Html$Styled$Attributes$stringProperty = F2(\n\tfunction (key, string) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$property,\n\t\t\tkey,\n\t\t\telm$json$Json$Encode$string(string));\n\t});\nvar rtfeldman$elm_css$Html$Styled$Attributes$class = rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('className');\nvar elm$core$List$singleton = function (value) {\n\treturn _List_fromArray(\n\t\t[value]);\n};\nvar rtfeldman$elm_css$Css$Preprocess$stylesheet = function (snippets) {\n\treturn {charset: elm$core$Maybe$Nothing, imports: _List_Nil, namespaces: _List_Nil, snippets: snippets};\n};\nvar rtfeldman$elm_css$Css$Preprocess$unwrapSnippet = function (_n0) {\n\tvar declarations = _n0.a;\n\treturn declarations;\n};\nvar elm$core$Maybe$map = F2(\n\tfunction (f, maybe) {\n\t\tif (maybe.$ === 'Just') {\n\t\t\tvar value = maybe.a;\n\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\tf(value));\n\t\t} else {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors = function (declarations) {\n\tcollectSelectors:\n\twhile (true) {\n\t\tif (!declarations.b) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tif (declarations.a.$ === 'StyleBlockDeclaration') {\n\t\t\t\tvar _n1 = declarations.a.a;\n\t\t\t\tvar firstSelector = _n1.a;\n\t\t\t\tvar otherSelectors = _n1.b;\n\t\t\t\tvar rest = declarations.b;\n\t\t\t\treturn _Utils_ap(\n\t\t\t\t\tA2(elm$core$List$cons, firstSelector, otherSelectors),\n\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(rest));\n\t\t\t} else {\n\t\t\t\tvar rest = declarations.b;\n\t\t\t\tvar $temp$declarations = rest;\n\t\t\t\tdeclarations = $temp$declarations;\n\t\t\t\tcontinue collectSelectors;\n\t\t\t}\n\t\t}\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$last = function (list) {\n\tlast:\n\twhile (true) {\n\t\tif (!list.b) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tif (!list.b.b) {\n\t\t\t\tvar singleton = list.a;\n\t\t\t\treturn elm$core$Maybe$Just(singleton);\n\t\t\t} else {\n\t\t\t\tvar rest = list.b;\n\t\t\t\tvar $temp$list = rest;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tcontinue last;\n\t\t\t}\n\t\t}\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration = function (declarations) {\n\tlastDeclaration:\n\twhile (true) {\n\t\tif (!declarations.b) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tif (!declarations.b.b) {\n\t\t\t\tvar x = declarations.a;\n\t\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[x]));\n\t\t\t} else {\n\t\t\t\tvar xs = declarations.b;\n\t\t\t\tvar $temp$declarations = xs;\n\t\t\t\tdeclarations = $temp$declarations;\n\t\t\t\tcontinue lastDeclaration;\n\t\t\t}\n\t\t}\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$oneOf = function (maybes) {\n\toneOf:\n\twhile (true) {\n\t\tif (!maybes.b) {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t} else {\n\t\t\tvar maybe = maybes.a;\n\t\t\tvar rest = maybes.b;\n\t\t\tif (maybe.$ === 'Nothing') {\n\t\t\t\tvar $temp$maybes = rest;\n\t\t\t\tmaybes = $temp$maybes;\n\t\t\t\tcontinue oneOf;\n\t\t\t} else {\n\t\t\t\treturn maybe;\n\t\t\t}\n\t\t}\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$FontFeatureValues = function (a) {\n\treturn {$: 'FontFeatureValues', a: a};\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues = function (tuples) {\n\tvar expandTuples = function (tuplesToExpand) {\n\t\tif (!tuplesToExpand.b) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tvar properties = tuplesToExpand.a;\n\t\t\tvar rest = tuplesToExpand.b;\n\t\t\treturn A2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tproperties,\n\t\t\t\texpandTuples(rest));\n\t\t}\n\t};\n\tvar newTuples = expandTuples(tuples);\n\treturn _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$Structure$FontFeatureValues(newTuples)\n\t\t]);\n};\nvar rtfeldman$elm_css$Css$Structure$DocumentRule = F5(\n\tfunction (a, b, c, d, e) {\n\t\treturn {$: 'DocumentRule', a: a, b: b, c: c, d: d, e: e};\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule = F5(\n\tfunction (str1, str2, str3, str4, declaration) {\n\t\tif (declaration.$ === 'StyleBlockDeclaration') {\n\t\t\tvar structureStyleBlock = declaration.a;\n\t\t\treturn A5(rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4, structureStyleBlock);\n\t\t} else {\n\t\t\treturn declaration;\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$MediaRule = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'MediaRule', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Structure$SupportsRule = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'SupportsRule', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule = F2(\n\tfunction (mediaQueries, declaration) {\n\t\tswitch (declaration.$) {\n\t\t\tcase 'StyleBlockDeclaration':\n\t\t\t\tvar structureStyleBlock = declaration.a;\n\t\t\t\treturn A2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\t\tmediaQueries,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[structureStyleBlock]));\n\t\t\tcase 'MediaRule':\n\t\t\t\tvar newMediaQueries = declaration.a;\n\t\t\t\tvar structureStyleBlocks = declaration.b;\n\t\t\t\treturn A2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\t\t_Utils_ap(mediaQueries, newMediaQueries),\n\t\t\t\t\tstructureStyleBlocks);\n\t\t\tcase 'SupportsRule':\n\t\t\t\tvar str = declaration.a;\n\t\t\t\tvar declarations = declaration.b;\n\t\t\t\treturn A2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$SupportsRule,\n\t\t\t\t\tstr,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule(mediaQueries),\n\t\t\t\t\t\tdeclarations));\n\t\t\tcase 'DocumentRule':\n\t\t\t\tvar str1 = declaration.a;\n\t\t\t\tvar str2 = declaration.b;\n\t\t\t\tvar str3 = declaration.c;\n\t\t\t\tvar str4 = declaration.d;\n\t\t\t\tvar structureStyleBlock = declaration.e;\n\t\t\t\treturn A5(rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4, structureStyleBlock);\n\t\t\tcase 'PageRule':\n\t\t\t\treturn declaration;\n\t\t\tcase 'FontFace':\n\t\t\t\treturn declaration;\n\t\t\tcase 'Keyframes':\n\t\t\t\treturn declaration;\n\t\t\tcase 'Viewport':\n\t\t\t\treturn declaration;\n\t\t\tcase 'CounterStyle':\n\t\t\t\treturn declaration;\n\t\t\tdefault:\n\t\t\t\treturn declaration;\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$CounterStyle = function (a) {\n\treturn {$: 'CounterStyle', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$FontFace = function (a) {\n\treturn {$: 'FontFace', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$Keyframes = function (a) {\n\treturn {$: 'Keyframes', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$PageRule = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'PageRule', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Structure$Selector = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'Selector', a: a, b: b, c: c};\n\t});\nvar rtfeldman$elm_css$Css$Structure$StyleBlock = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'StyleBlock', a: a, b: b, c: c};\n\t});\nvar rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration = function (a) {\n\treturn {$: 'StyleBlockDeclaration', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$Viewport = function (a) {\n\treturn {$: 'Viewport', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$mapLast = F2(\n\tfunction (update, list) {\n\t\tif (!list.b) {\n\t\t\treturn list;\n\t\t} else {\n\t\t\tif (!list.b.b) {\n\t\t\t\tvar only = list.a;\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tupdate(only)\n\t\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tvar first = list.a;\n\t\t\t\tvar rest = list.b;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\tfirst,\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$mapLast, update, rest));\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$withPropertyAppended = F2(\n\tfunction (property, _n0) {\n\t\tvar firstSelector = _n0.a;\n\t\tvar otherSelectors = _n0.b;\n\t\tvar properties = _n0.c;\n\t\treturn A3(\n\t\t\trtfeldman$elm_css$Css$Structure$StyleBlock,\n\t\t\tfirstSelector,\n\t\t\totherSelectors,\n\t\t\t_Utils_ap(\n\t\t\t\tproperties,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[property])));\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendProperty = F2(\n\tfunction (property, declarations) {\n\t\tif (!declarations.b) {\n\t\t\treturn declarations;\n\t\t} else {\n\t\t\tif (!declarations.b.b) {\n\t\t\t\tswitch (declarations.a.$) {\n\t\t\t\t\tcase 'StyleBlockDeclaration':\n\t\t\t\t\t\tvar styleBlock = declarations.a.a;\n\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$withPropertyAppended, property, styleBlock))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\tcase 'MediaRule':\n\t\t\t\t\t\tvar _n1 = declarations.a;\n\t\t\t\t\t\tvar mediaQueries = _n1.a;\n\t\t\t\t\t\tvar styleBlocks = _n1.b;\n\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\t\t\t\t\tmediaQueries,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$mapLast,\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$withPropertyAppended(property),\n\t\t\t\t\t\t\t\t\tstyleBlocks))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn declarations;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar first = declarations.a;\n\t\t\t\tvar rest = declarations.b;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\tfirst,\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendProperty, property, rest));\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendToLastSelector = F2(\n\tfunction (f, styleBlock) {\n\t\tif (!styleBlock.b.b) {\n\t\t\tvar only = styleBlock.a;\n\t\t\tvar properties = styleBlock.c;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, only, _List_Nil, properties),\n\t\t\t\t\tA3(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlock,\n\t\t\t\t\tf(only),\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_Nil)\n\t\t\t\t]);\n\t\t} else {\n\t\t\tvar first = styleBlock.a;\n\t\t\tvar rest = styleBlock.b;\n\t\t\tvar properties = styleBlock.c;\n\t\t\tvar newRest = A2(elm$core$List$map, f, rest);\n\t\t\tvar newFirst = f(first);\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, first, rest, properties),\n\t\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, newFirst, newRest, _List_Nil)\n\t\t\t\t]);\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$applyPseudoElement = F2(\n\tfunction (pseudo, _n0) {\n\t\tvar sequence = _n0.a;\n\t\tvar selectors = _n0.b;\n\t\treturn A3(\n\t\t\trtfeldman$elm_css$Css$Structure$Selector,\n\t\t\tsequence,\n\t\t\tselectors,\n\t\t\telm$core$Maybe$Just(pseudo));\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendPseudoElementToLastSelector = F2(\n\tfunction (pseudo, styleBlock) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$Css$Structure$appendToLastSelector,\n\t\t\trtfeldman$elm_css$Css$Structure$applyPseudoElement(pseudo),\n\t\t\tstyleBlock);\n\t});\nvar rtfeldman$elm_css$Css$Structure$CustomSelector = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'CustomSelector', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Structure$TypeSelectorSequence = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'TypeSelectorSequence', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence = function (a) {\n\treturn {$: 'UniversalSelectorSequence', a: a};\n};\nvar rtfeldman$elm_css$Css$Structure$appendRepeatable = F2(\n\tfunction (selector, sequence) {\n\t\tswitch (sequence.$) {\n\t\t\tcase 'TypeSelectorSequence':\n\t\t\t\tvar typeSelector = sequence.a;\n\t\t\t\tvar list = sequence.b;\n\t\t\t\treturn A2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$TypeSelectorSequence,\n\t\t\t\t\ttypeSelector,\n\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\tlist,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[selector])));\n\t\t\tcase 'UniversalSelectorSequence':\n\t\t\t\tvar list = sequence.a;\n\t\t\t\treturn rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(\n\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\tlist,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[selector])));\n\t\t\tdefault:\n\t\t\t\tvar str = sequence.a;\n\t\t\t\tvar list = sequence.b;\n\t\t\t\treturn A2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$CustomSelector,\n\t\t\t\t\tstr,\n\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\tlist,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[selector])));\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator = F2(\n\tfunction (selector, list) {\n\t\tif (!list.b) {\n\t\t\treturn _List_Nil;\n\t\t} else {\n\t\t\tif (!list.b.b) {\n\t\t\t\tvar _n1 = list.a;\n\t\t\t\tvar combinator = _n1.a;\n\t\t\t\tvar sequence = _n1.b;\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\tcombinator,\n\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendRepeatable, selector, sequence))\n\t\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tvar first = list.a;\n\t\t\t\tvar rest = list.b;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\tfirst,\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator, selector, rest));\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendRepeatableSelector = F2(\n\tfunction (repeatableSimpleSelector, selector) {\n\t\tif (!selector.b.b) {\n\t\t\tvar sequence = selector.a;\n\t\t\tvar pseudoElement = selector.c;\n\t\t\treturn A3(\n\t\t\t\trtfeldman$elm_css$Css$Structure$Selector,\n\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendRepeatable, repeatableSimpleSelector, sequence),\n\t\t\t\t_List_Nil,\n\t\t\t\tpseudoElement);\n\t\t} else {\n\t\t\tvar firstSelector = selector.a;\n\t\t\tvar tuples = selector.b;\n\t\t\tvar pseudoElement = selector.c;\n\t\t\treturn A3(\n\t\t\t\trtfeldman$elm_css$Css$Structure$Selector,\n\t\t\t\tfirstSelector,\n\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator, repeatableSimpleSelector, tuples),\n\t\t\t\tpseudoElement);\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$appendRepeatableToLastSelector = F2(\n\tfunction (selector, styleBlock) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$Css$Structure$appendToLastSelector,\n\t\t\trtfeldman$elm_css$Css$Structure$appendRepeatableSelector(selector),\n\t\t\tstyleBlock);\n\t});\nvar rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock = F2(\n\tfunction (update, declarations) {\n\t\t_n0$12:\n\t\twhile (true) {\n\t\t\tif (!declarations.b) {\n\t\t\t\treturn declarations;\n\t\t\t} else {\n\t\t\t\tif (!declarations.b.b) {\n\t\t\t\t\tswitch (declarations.a.$) {\n\t\t\t\t\t\tcase 'StyleBlockDeclaration':\n\t\t\t\t\t\t\tvar styleBlock = declarations.a.a;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlockDeclaration,\n\t\t\t\t\t\t\t\tupdate(styleBlock));\n\t\t\t\t\t\tcase 'MediaRule':\n\t\t\t\t\t\t\tif (declarations.a.b.b) {\n\t\t\t\t\t\t\t\tif (!declarations.a.b.b.b) {\n\t\t\t\t\t\t\t\t\tvar _n1 = declarations.a;\n\t\t\t\t\t\t\t\t\tvar mediaQueries = _n1.a;\n\t\t\t\t\t\t\t\t\tvar _n2 = _n1.b;\n\t\t\t\t\t\t\t\t\tvar styleBlock = _n2.a;\n\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\t\t\t\t\t\t\t\tmediaQueries,\n\t\t\t\t\t\t\t\t\t\t\tupdate(styleBlock))\n\t\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar _n3 = declarations.a;\n\t\t\t\t\t\t\t\t\tvar mediaQueries = _n3.a;\n\t\t\t\t\t\t\t\t\tvar _n4 = _n3.b;\n\t\t\t\t\t\t\t\t\tvar first = _n4.a;\n\t\t\t\t\t\t\t\t\tvar rest = _n4.b;\n\t\t\t\t\t\t\t\t\tvar _n5 = A2(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock,\n\t\t\t\t\t\t\t\t\t\tupdate,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$MediaRule, mediaQueries, rest)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\tif ((_n5.b && (_n5.a.$ === 'MediaRule')) && (!_n5.b.b)) {\n\t\t\t\t\t\t\t\t\t\tvar _n6 = _n5.a;\n\t\t\t\t\t\t\t\t\t\tvar newMediaQueries = _n6.a;\n\t\t\t\t\t\t\t\t\t\tvar newStyleBlocks = _n6.b;\n\t\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\t\t\t\t\t\t\t\t\tnewMediaQueries,\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$cons, first, newStyleBlocks))\n\t\t\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tvar newDeclarations = _n5;\n\t\t\t\t\t\t\t\t\t\treturn newDeclarations;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak _n0$12;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 'SupportsRule':\n\t\t\t\t\t\t\tvar _n7 = declarations.a;\n\t\t\t\t\t\t\tvar str = _n7.a;\n\t\t\t\t\t\t\tvar nestedDeclarations = _n7.b;\n\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$SupportsRule,\n\t\t\t\t\t\t\t\t\tstr,\n\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, update, nestedDeclarations))\n\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\tcase 'DocumentRule':\n\t\t\t\t\t\t\tvar _n8 = declarations.a;\n\t\t\t\t\t\t\tvar str1 = _n8.a;\n\t\t\t\t\t\t\tvar str2 = _n8.b;\n\t\t\t\t\t\t\tvar str3 = _n8.c;\n\t\t\t\t\t\t\tvar str4 = _n8.d;\n\t\t\t\t\t\t\tvar styleBlock = _n8.e;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\tA4(rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4),\n\t\t\t\t\t\t\t\tupdate(styleBlock));\n\t\t\t\t\t\tcase 'PageRule':\n\t\t\t\t\t\t\tvar _n9 = declarations.a;\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t\tcase 'FontFace':\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t\tcase 'Keyframes':\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t\tcase 'Viewport':\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t\tcase 'CounterStyle':\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn declarations;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak _n0$12;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar first = declarations.a;\n\t\tvar rest = declarations.b;\n\t\treturn A2(\n\t\t\telm$core$List$cons,\n\t\t\tfirst,\n\t\t\tA2(rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, update, rest));\n\t});\nvar rtfeldman$elm_css$Css$Structure$styleBlockToMediaRule = F2(\n\tfunction (mediaQueries, declaration) {\n\t\tif (declaration.$ === 'StyleBlockDeclaration') {\n\t\t\tvar styleBlock = declaration.a;\n\t\t\treturn A2(\n\t\t\t\trtfeldman$elm_css$Css$Structure$MediaRule,\n\t\t\t\tmediaQueries,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[styleBlock]));\n\t\t} else {\n\t\t\treturn declaration;\n\t\t}\n\t});\nvar elm$core$String$foldl = _String_foldl;\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$HashData = F4(\n\tfunction (shift, seed, hash, charsProcessed) {\n\t\treturn {charsProcessed: charsProcessed, hash: hash, seed: seed, shift: shift};\n\t});\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$c1 = 3432918353;\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$c2 = 461845907;\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy = F2(\n\tfunction (b, a) {\n\t\treturn ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);\n\t});\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy = F2(\n\tfunction (b, a) {\n\t\treturn (a << b) | (a >>> (32 - b));\n\t});\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$finalize = function (data) {\n\tvar acc = data.hash ? (data.seed ^ A2(\n\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,\n\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$c2,\n\t\tA2(\n\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,\n\t\t\t15,\n\t\t\tA2(rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, rtfeldman$elm_css$ElmCssVendor$Murmur3$c1, data.hash)))) : data.seed;\n\tvar h0 = acc ^ data.charsProcessed;\n\tvar h1 = A2(rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));\n\tvar h2 = A2(rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));\n\treturn (h2 ^ (h2 >>> 16)) >>> 0;\n};\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$mix = F2(\n\tfunction (h1, k1) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,\n\t\t\t5,\n\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,\n\t\t\t\t13,\n\t\t\t\th1 ^ A2(\n\t\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,\n\t\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$c2,\n\t\t\t\t\tA2(\n\t\t\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,\n\t\t\t\t\t\t15,\n\t\t\t\t\t\tA2(rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, rtfeldman$elm_css$ElmCssVendor$Murmur3$c1, k1))))) + 3864292196;\n\t});\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$hashFold = F2(\n\tfunction (c, data) {\n\t\tvar res = data.hash | ((255 & elm$core$Char$toCode(c)) << data.shift);\n\t\tvar _n0 = data.shift;\n\t\tif (_n0 === 24) {\n\t\t\treturn {\n\t\t\t\tcharsProcessed: data.charsProcessed + 1,\n\t\t\t\thash: 0,\n\t\t\t\tseed: A2(rtfeldman$elm_css$ElmCssVendor$Murmur3$mix, data.seed, res),\n\t\t\t\tshift: 0\n\t\t\t};\n\t\t} else {\n\t\t\treturn {charsProcessed: data.charsProcessed + 1, hash: res, seed: data.seed, shift: data.shift + 8};\n\t\t}\n\t});\nvar rtfeldman$elm_css$ElmCssVendor$Murmur3$hashString = F2(\n\tfunction (seed, str) {\n\t\treturn rtfeldman$elm_css$ElmCssVendor$Murmur3$finalize(\n\t\t\tA3(\n\t\t\t\telm$core$String$foldl,\n\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$hashFold,\n\t\t\t\tA4(rtfeldman$elm_css$ElmCssVendor$Murmur3$HashData, 0, seed, 0, 0),\n\t\t\t\tstr));\n\t});\nvar rtfeldman$elm_css$Hash$murmurSeed = 15739;\nvar rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {\n\tunsafeToDigit:\n\twhile (true) {\n\t\tswitch (num) {\n\t\t\tcase 0:\n\t\t\t\treturn _Utils_chr('0');\n\t\t\tcase 1:\n\t\t\t\treturn _Utils_chr('1');\n\t\t\tcase 2:\n\t\t\t\treturn _Utils_chr('2');\n\t\t\tcase 3:\n\t\t\t\treturn _Utils_chr('3');\n\t\t\tcase 4:\n\t\t\t\treturn _Utils_chr('4');\n\t\t\tcase 5:\n\t\t\t\treturn _Utils_chr('5');\n\t\t\tcase 6:\n\t\t\t\treturn _Utils_chr('6');\n\t\t\tcase 7:\n\t\t\t\treturn _Utils_chr('7');\n\t\t\tcase 8:\n\t\t\t\treturn _Utils_chr('8');\n\t\t\tcase 9:\n\t\t\t\treturn _Utils_chr('9');\n\t\t\tcase 10:\n\t\t\t\treturn _Utils_chr('a');\n\t\t\tcase 11:\n\t\t\t\treturn _Utils_chr('b');\n\t\t\tcase 12:\n\t\t\t\treturn _Utils_chr('c');\n\t\t\tcase 13:\n\t\t\t\treturn _Utils_chr('d');\n\t\t\tcase 14:\n\t\t\t\treturn _Utils_chr('e');\n\t\t\tcase 15:\n\t\t\t\treturn _Utils_chr('f');\n\t\t\tdefault:\n\t\t\t\tvar $temp$num = num;\n\t\t\t\tnum = $temp$num;\n\t\t\t\tcontinue unsafeToDigit;\n\t\t}\n\t}\n};\nvar rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(\n\tfunction (digits, num) {\n\t\tunsafePositiveToDigits:\n\t\twhile (true) {\n\t\t\tif (num < 16) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\trtfeldman$elm_hex$Hex$unsafeToDigit(num),\n\t\t\t\t\tdigits);\n\t\t\t} else {\n\t\t\t\tvar $temp$digits = A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\trtfeldman$elm_hex$Hex$unsafeToDigit(\n\t\t\t\t\t\tA2(elm$core$Basics$modBy, 16, num)),\n\t\t\t\t\tdigits),\n\t\t\t\t\t$temp$num = (num / 16) | 0;\n\t\t\t\tdigits = $temp$digits;\n\t\t\t\tnum = $temp$num;\n\t\t\t\tcontinue unsafePositiveToDigits;\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_hex$Hex$toString = function (num) {\n\treturn elm$core$String$fromList(\n\t\t(num < 0) ? A2(\n\t\t\telm$core$List$cons,\n\t\t\t_Utils_chr('-'),\n\t\t\tA2(rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2(rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));\n};\nvar rtfeldman$elm_css$Hash$fromString = function (str) {\n\treturn A2(\n\t\telm$core$String$cons,\n\t\t_Utils_chr('_'),\n\t\trtfeldman$elm_hex$Hex$toString(\n\t\t\tA2(rtfeldman$elm_css$ElmCssVendor$Murmur3$hashString, rtfeldman$elm_css$Hash$murmurSeed, str)));\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast = F4(\n\tfunction (nestedStyles, rest, f, declarations) {\n\t\tvar withoutParent = function (decls) {\n\t\t\treturn A2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t_List_Nil,\n\t\t\t\telm$core$List$tail(decls));\n\t\t};\n\t\tvar nextResult = A2(\n\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\t\trest,\n\t\t\tA2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t_List_Nil,\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration(declarations)));\n\t\tvar newDeclarations = function () {\n\t\t\tvar _n14 = _Utils_Tuple2(\n\t\t\t\telm$core$List$head(nextResult),\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$last(declarations));\n\t\t\tif ((_n14.a.$ === 'Just') && (_n14.b.$ === 'Just')) {\n\t\t\t\tvar nextResultParent = _n14.a.a;\n\t\t\t\tvar originalParent = _n14.b.a;\n\t\t\t\treturn _Utils_ap(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$take,\n\t\t\t\t\t\telm$core$List$length(declarations) - 1,\n\t\t\t\t\t\tdeclarations),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t(!_Utils_eq(originalParent, nextResultParent)) ? nextResultParent : originalParent\n\t\t\t\t\t\t]));\n\t\t\t} else {\n\t\t\t\treturn declarations;\n\t\t\t}\n\t\t}();\n\t\tvar insertStylesToNestedDecl = function (lastDecl) {\n\t\t\treturn elm$core$List$concat(\n\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$mapLast,\n\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles(nestedStyles),\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\telm$core$List$singleton,\n\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, f, lastDecl))));\n\t\t};\n\t\tvar initialResult = A2(\n\t\t\telm$core$Maybe$withDefault,\n\t\t\t_List_Nil,\n\t\t\tA2(\n\t\t\t\telm$core$Maybe$map,\n\t\t\t\tinsertStylesToNestedDecl,\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration(declarations)));\n\t\treturn _Utils_ap(\n\t\t\tnewDeclarations,\n\t\t\t_Utils_ap(\n\t\t\t\twithoutParent(initialResult),\n\t\t\t\twithoutParent(nextResult)));\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles = F2(\n\tfunction (styles, declarations) {\n\t\tif (!styles.b) {\n\t\t\treturn declarations;\n\t\t} else {\n\t\t\tswitch (styles.a.$) {\n\t\t\t\tcase 'AppendProperty':\n\t\t\t\t\tvar property = styles.a.a;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\t\t\t\t\trest,\n\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendProperty, property, declarations));\n\t\t\t\tcase 'ExtendSelector':\n\t\t\t\t\tvar _n4 = styles.a;\n\t\t\t\t\tvar selector = _n4.a;\n\t\t\t\t\tvar nestedStyles = _n4.b;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\treturn A4(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast,\n\t\t\t\t\t\tnestedStyles,\n\t\t\t\t\t\trest,\n\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$appendRepeatableToLastSelector(selector),\n\t\t\t\t\t\tdeclarations);\n\t\t\t\tcase 'NestSnippet':\n\t\t\t\t\tvar _n5 = styles.a;\n\t\t\t\t\tvar selectorCombinator = _n5.a;\n\t\t\t\t\tvar snippets = _n5.b;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\tvar chain = F2(\n\t\t\t\t\t\tfunction (_n9, _n10) {\n\t\t\t\t\t\t\tvar originalSequence = _n9.a;\n\t\t\t\t\t\t\tvar originalTuples = _n9.b;\n\t\t\t\t\t\t\tvar originalPseudoElement = _n9.c;\n\t\t\t\t\t\t\tvar newSequence = _n10.a;\n\t\t\t\t\t\t\tvar newTuples = _n10.b;\n\t\t\t\t\t\t\tvar newPseudoElement = _n10.c;\n\t\t\t\t\t\t\treturn A3(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$Selector,\n\t\t\t\t\t\t\t\toriginalSequence,\n\t\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\t\toriginalTuples,\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(selectorCombinator, newSequence),\n\t\t\t\t\t\t\t\t\t\tnewTuples)),\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$oneOf(\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[newPseudoElement, originalPseudoElement])));\n\t\t\t\t\t\t});\n\t\t\t\t\tvar expandDeclaration = function (declaration) {\n\t\t\t\t\t\tswitch (declaration.$) {\n\t\t\t\t\t\t\tcase 'StyleBlockDeclaration':\n\t\t\t\t\t\t\t\tvar _n7 = declaration.a;\n\t\t\t\t\t\t\t\tvar firstSelector = _n7.a;\n\t\t\t\t\t\t\t\tvar otherSelectors = _n7.b;\n\t\t\t\t\t\t\t\tvar nestedStyles = _n7.c;\n\t\t\t\t\t\t\t\tvar newSelectors = A2(\n\t\t\t\t\t\t\t\t\telm$core$List$concatMap,\n\t\t\t\t\t\t\t\t\tfunction (originalSelector) {\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\t\tchain(originalSelector),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$cons, firstSelector, otherSelectors));\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(declarations));\n\t\t\t\t\t\t\t\tvar newDeclarations = function () {\n\t\t\t\t\t\t\t\t\tif (!newSelectors.b) {\n\t\t\t\t\t\t\t\t\t\treturn _List_Nil;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tvar first = newSelectors.a;\n\t\t\t\t\t\t\t\t\t\tvar remainder = newSelectors.b;\n\t\t\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(\n\t\t\t\t\t\t\t\t\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, first, remainder, _List_Nil))\n\t\t\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}();\n\t\t\t\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, nestedStyles, newDeclarations);\n\t\t\t\t\t\t\tcase 'MediaRule':\n\t\t\t\t\t\t\t\tvar mediaQueries = declaration.a;\n\t\t\t\t\t\t\t\tvar styleBlocks = declaration.b;\n\t\t\t\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule, mediaQueries, styleBlocks);\n\t\t\t\t\t\t\tcase 'SupportsRule':\n\t\t\t\t\t\t\t\tvar str = declaration.a;\n\t\t\t\t\t\t\t\tvar otherSnippets = declaration.b;\n\t\t\t\t\t\t\t\treturn A2(rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule, str, otherSnippets);\n\t\t\t\t\t\t\tcase 'DocumentRule':\n\t\t\t\t\t\t\t\tvar str1 = declaration.a;\n\t\t\t\t\t\t\t\tvar str2 = declaration.b;\n\t\t\t\t\t\t\t\tvar str3 = declaration.c;\n\t\t\t\t\t\t\t\tvar str4 = declaration.d;\n\t\t\t\t\t\t\t\tvar styleBlock = declaration.e;\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\tA4(rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule, str1, str2, str3, str4),\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));\n\t\t\t\t\t\t\tcase 'PageRule':\n\t\t\t\t\t\t\t\tvar str = declaration.a;\n\t\t\t\t\t\t\t\tvar properties = declaration.b;\n\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$PageRule, str, properties)\n\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tcase 'FontFace':\n\t\t\t\t\t\t\t\tvar properties = declaration.a;\n\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$FontFace(properties)\n\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tcase 'Viewport':\n\t\t\t\t\t\t\t\tvar properties = declaration.a;\n\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$Viewport(properties)\n\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tcase 'CounterStyle':\n\t\t\t\t\t\t\t\tvar properties = declaration.a;\n\t\t\t\t\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$CounterStyle(properties)\n\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tvar tuples = declaration.a;\n\t\t\t\t\t\t\t\treturn rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues(tuples);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\treturn elm$core$List$concat(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, rest, declarations)\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\texpandDeclaration,\n\t\t\t\t\t\t\t\tA2(elm$core$List$concatMap, rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets))));\n\t\t\t\tcase 'WithPseudoElement':\n\t\t\t\t\tvar _n11 = styles.a;\n\t\t\t\t\tvar pseudoElement = _n11.a;\n\t\t\t\t\tvar nestedStyles = _n11.b;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\treturn A4(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast,\n\t\t\t\t\t\tnestedStyles,\n\t\t\t\t\t\trest,\n\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$appendPseudoElementToLastSelector(pseudoElement),\n\t\t\t\t\t\tdeclarations);\n\t\t\t\tcase 'WithKeyframes':\n\t\t\t\t\tvar str = styles.a.a;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\tvar name = rtfeldman$elm_css$Hash$fromString(str);\n\t\t\t\t\tvar newProperty = 'animation-name:' + name;\n\t\t\t\t\tvar newDeclarations = A2(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\t\t\t\t\trest,\n\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$appendProperty, newProperty, declarations));\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$List$append,\n\t\t\t\t\t\tnewDeclarations,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$Keyframes(\n\t\t\t\t\t\t\t\t{declaration: str, name: name})\n\t\t\t\t\t\t\t]));\n\t\t\t\tcase 'WithMedia':\n\t\t\t\t\tvar _n12 = styles.a;\n\t\t\t\t\tvar mediaQueries = _n12.a;\n\t\t\t\t\tvar nestedStyles = _n12.b;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\tvar extraDeclarations = function () {\n\t\t\t\t\t\tvar _n13 = rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(declarations);\n\t\t\t\t\t\tif (!_n13.b) {\n\t\t\t\t\t\t\treturn _List_Nil;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar firstSelector = _n13.a;\n\t\t\t\t\t\t\tvar otherSelectors = _n13.b;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$styleBlockToMediaRule(mediaQueries),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\t\t\t\t\t\t\t\tnestedStyles,\n\t\t\t\t\t\t\t\t\telm$core$List$singleton(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(\n\t\t\t\t\t\t\t\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, firstSelector, otherSelectors, _List_Nil)))));\n\t\t\t\t\t\t}\n\t\t\t\t\t}();\n\t\t\t\t\treturn _Utils_ap(\n\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, rest, declarations),\n\t\t\t\t\t\textraDeclarations);\n\t\t\t\tdefault:\n\t\t\t\t\tvar otherStyles = styles.a.a;\n\t\t\t\t\tvar rest = styles.b;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\t\t\t\t\t_Utils_ap(otherStyles, rest),\n\t\t\t\t\t\tdeclarations);\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock = function (_n2) {\n\tvar firstSelector = _n2.a;\n\tvar otherSelectors = _n2.b;\n\tvar styles = _n2.c;\n\treturn A2(\n\t\trtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,\n\t\tstyles,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(\n\t\t\t\tA3(rtfeldman$elm_css$Css$Structure$StyleBlock, firstSelector, otherSelectors, _List_Nil))\n\t\t\t]));\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$extract = function (snippetDeclarations) {\n\tif (!snippetDeclarations.b) {\n\t\treturn _List_Nil;\n\t} else {\n\t\tvar first = snippetDeclarations.a;\n\t\tvar rest = snippetDeclarations.b;\n\t\treturn _Utils_ap(\n\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$toDeclarations(first),\n\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$extract(rest));\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule = F2(\n\tfunction (mediaQueries, styleBlocks) {\n\t\tvar handleStyleBlock = function (styleBlock) {\n\t\t\treturn A2(\n\t\t\t\telm$core$List$map,\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule(mediaQueries),\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));\n\t\t};\n\t\treturn A2(elm$core$List$concatMap, handleStyleBlock, styleBlocks);\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule = F2(\n\tfunction (str, snippets) {\n\t\tvar declarations = rtfeldman$elm_css$Css$Preprocess$Resolve$extract(\n\t\t\tA2(elm$core$List$concatMap, rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets));\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$SupportsRule, str, declarations)\n\t\t\t]);\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$toDeclarations = function (snippetDeclaration) {\n\tswitch (snippetDeclaration.$) {\n\t\tcase 'StyleBlockDeclaration':\n\t\t\tvar styleBlock = snippetDeclaration.a;\n\t\t\treturn rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock);\n\t\tcase 'MediaRule':\n\t\t\tvar mediaQueries = snippetDeclaration.a;\n\t\t\tvar styleBlocks = snippetDeclaration.b;\n\t\t\treturn A2(rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule, mediaQueries, styleBlocks);\n\t\tcase 'SupportsRule':\n\t\t\tvar str = snippetDeclaration.a;\n\t\t\tvar snippets = snippetDeclaration.b;\n\t\t\treturn A2(rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule, str, snippets);\n\t\tcase 'DocumentRule':\n\t\t\tvar str1 = snippetDeclaration.a;\n\t\t\tvar str2 = snippetDeclaration.b;\n\t\t\tvar str3 = snippetDeclaration.c;\n\t\t\tvar str4 = snippetDeclaration.d;\n\t\t\tvar styleBlock = snippetDeclaration.e;\n\t\t\treturn A2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tA4(rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule, str1, str2, str3, str4),\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));\n\t\tcase 'PageRule':\n\t\t\tvar str = snippetDeclaration.a;\n\t\t\tvar properties = snippetDeclaration.b;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$Structure$PageRule, str, properties)\n\t\t\t\t]);\n\t\tcase 'FontFace':\n\t\t\tvar properties = snippetDeclaration.a;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$FontFace(properties)\n\t\t\t\t]);\n\t\tcase 'Viewport':\n\t\t\tvar properties = snippetDeclaration.a;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$Viewport(properties)\n\t\t\t\t]);\n\t\tcase 'CounterStyle':\n\t\t\tvar properties = snippetDeclaration.a;\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$CounterStyle(properties)\n\t\t\t\t]);\n\t\tdefault:\n\t\t\tvar tuples = snippetDeclaration.a;\n\t\t\treturn rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues(tuples);\n\t}\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$toStructure = function (_n0) {\n\tvar charset = _n0.charset;\n\tvar imports = _n0.imports;\n\tvar namespaces = _n0.namespaces;\n\tvar snippets = _n0.snippets;\n\tvar declarations = rtfeldman$elm_css$Css$Preprocess$Resolve$extract(\n\t\tA2(elm$core$List$concatMap, rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets));\n\treturn {charset: charset, declarations: declarations, imports: imports, namespaces: namespaces};\n};\nvar elm$core$List$any = F2(\n\tfunction (isOkay, list) {\n\t\tany:\n\t\twhile (true) {\n\t\t\tif (!list.b) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tvar x = list.a;\n\t\t\t\tvar xs = list.b;\n\t\t\t\tif (isOkay(x)) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$isOkay = isOkay,\n\t\t\t\t\t\t$temp$list = xs;\n\t\t\t\t\tisOkay = $temp$isOkay;\n\t\t\t\t\tlist = $temp$list;\n\t\t\t\t\tcontinue any;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$core$List$all = F2(\n\tfunction (isOkay, list) {\n\t\treturn !A2(\n\t\t\telm$core$List$any,\n\t\t\tA2(elm$core$Basics$composeL, elm$core$Basics$not, isOkay),\n\t\t\tlist);\n\t});\nvar rtfeldman$elm_css$Css$Structure$compactHelp = F2(\n\tfunction (declaration, _n0) {\n\t\tvar keyframesByName = _n0.a;\n\t\tvar declarations = _n0.b;\n\t\tswitch (declaration.$) {\n\t\t\tcase 'StyleBlockDeclaration':\n\t\t\t\tvar _n2 = declaration.a;\n\t\t\t\tvar properties = _n2.c;\n\t\t\t\treturn elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'MediaRule':\n\t\t\t\tvar styleBlocks = declaration.b;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$all,\n\t\t\t\t\tfunction (_n3) {\n\t\t\t\t\t\tvar properties = _n3.c;\n\t\t\t\t\t\treturn elm$core$List$isEmpty(properties);\n\t\t\t\t\t},\n\t\t\t\t\tstyleBlocks) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'SupportsRule':\n\t\t\t\tvar otherDeclarations = declaration.b;\n\t\t\t\treturn elm$core$List$isEmpty(otherDeclarations) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'DocumentRule':\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'PageRule':\n\t\t\t\tvar properties = declaration.b;\n\t\t\t\treturn elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'FontFace':\n\t\t\t\tvar properties = declaration.a;\n\t\t\t\treturn elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'Keyframes':\n\t\t\t\tvar record = declaration.a;\n\t\t\t\treturn elm$core$String$isEmpty(record.declaration) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tA3(elm$core$Dict$insert, record.name, record.declaration, keyframesByName),\n\t\t\t\t\tdeclarations);\n\t\t\tcase 'Viewport':\n\t\t\t\tvar properties = declaration.a;\n\t\t\t\treturn elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tcase 'CounterStyle':\n\t\t\t\tvar properties = declaration.a;\n\t\t\t\treturn elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t\tdefault:\n\t\t\t\tvar tuples = declaration.a;\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$all,\n\t\t\t\t\tfunction (_n4) {\n\t\t\t\t\t\tvar properties = _n4.b;\n\t\t\t\t\t\treturn elm$core$List$isEmpty(properties);\n\t\t\t\t\t},\n\t\t\t\t\ttuples) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(\n\t\t\t\t\tkeyframesByName,\n\t\t\t\t\tA2(elm$core$List$cons, declaration, declarations));\n\t\t}\n\t});\nvar rtfeldman$elm_css$Css$Structure$withKeyframeDeclarations = F2(\n\tfunction (keyframesByName, compactedDeclarations) {\n\t\treturn A2(\n\t\t\telm$core$List$append,\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tfunction (_n0) {\n\t\t\t\t\tvar name = _n0.a;\n\t\t\t\t\tvar decl = _n0.b;\n\t\t\t\t\treturn rtfeldman$elm_css$Css$Structure$Keyframes(\n\t\t\t\t\t\t{declaration: decl, name: name});\n\t\t\t\t},\n\t\t\t\telm$core$Dict$toList(keyframesByName)),\n\t\t\tcompactedDeclarations);\n\t});\nvar rtfeldman$elm_css$Css$Structure$compactStylesheet = function (_n0) {\n\tvar charset = _n0.charset;\n\tvar imports = _n0.imports;\n\tvar namespaces = _n0.namespaces;\n\tvar declarations = _n0.declarations;\n\tvar _n1 = A3(\n\t\telm$core$List$foldr,\n\t\trtfeldman$elm_css$Css$Structure$compactHelp,\n\t\t_Utils_Tuple2(elm$core$Dict$empty, _List_Nil),\n\t\tdeclarations);\n\tvar keyframesByName = _n1.a;\n\tvar compactedDeclarations = _n1.b;\n\tvar finalDeclarations = A2(rtfeldman$elm_css$Css$Structure$withKeyframeDeclarations, keyframesByName, compactedDeclarations);\n\treturn {charset: charset, declarations: finalDeclarations, imports: imports, namespaces: namespaces};\n};\nvar elm$core$List$filter = F2(\n\tfunction (isGood, list) {\n\t\treturn A3(\n\t\t\telm$core$List$foldr,\n\t\t\tF2(\n\t\t\t\tfunction (x, xs) {\n\t\t\t\t\treturn isGood(x) ? A2(elm$core$List$cons, x, xs) : xs;\n\t\t\t\t}),\n\t\t\t_List_Nil,\n\t\t\tlist);\n\t});\nvar rtfeldman$elm_css$Css$Structure$Output$charsetToString = function (charset) {\n\treturn A2(\n\t\telm$core$Maybe$withDefault,\n\t\t'',\n\t\tA2(\n\t\t\telm$core$Maybe$map,\n\t\t\tfunction (str) {\n\t\t\t\treturn '@charset \\\"' + (str + '\\\"');\n\t\t\t},\n\t\t\tcharset));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString = function (expression) {\n\treturn '(' + (expression.feature + (A2(\n\t\telm$core$Maybe$withDefault,\n\t\t'',\n\t\tA2(\n\t\t\telm$core$Maybe$map,\n\t\t\telm$core$Basics$append(': '),\n\t\t\texpression.value)) + ')'));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$mediaTypeToString = function (mediaType) {\n\tswitch (mediaType.$) {\n\t\tcase 'Print':\n\t\t\treturn 'print';\n\t\tcase 'Screen':\n\t\t\treturn 'screen';\n\t\tdefault:\n\t\t\treturn 'speech';\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString = function (mediaQuery) {\n\tvar prefixWith = F3(\n\t\tfunction (str, mediaType, expressions) {\n\t\t\treturn str + (' ' + A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t' and ',\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$Output$mediaTypeToString(mediaType),\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString, expressions))));\n\t\t});\n\tswitch (mediaQuery.$) {\n\t\tcase 'AllQuery':\n\t\t\tvar expressions = mediaQuery.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t' and ',\n\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString, expressions));\n\t\tcase 'OnlyQuery':\n\t\t\tvar mediaType = mediaQuery.a;\n\t\t\tvar expressions = mediaQuery.b;\n\t\t\treturn A3(prefixWith, 'only', mediaType, expressions);\n\t\tcase 'NotQuery':\n\t\t\tvar mediaType = mediaQuery.a;\n\t\t\tvar expressions = mediaQuery.b;\n\t\t\treturn A3(prefixWith, 'not', mediaType, expressions);\n\t\tdefault:\n\t\t\tvar str = mediaQuery.a;\n\t\t\treturn str;\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$importMediaQueryToString = F2(\n\tfunction (name, mediaQuery) {\n\t\treturn '@import \\\"' + (name + (rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString(mediaQuery) + '\\\"'));\n\t});\nvar rtfeldman$elm_css$Css$Structure$Output$importToString = function (_n0) {\n\tvar name = _n0.a;\n\tvar mediaQueries = _n0.b;\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n',\n\t\tA2(\n\t\t\telm$core$List$map,\n\t\t\trtfeldman$elm_css$Css$Structure$Output$importMediaQueryToString(name),\n\t\t\tmediaQueries));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$namespaceToString = function (_n0) {\n\tvar prefix = _n0.a;\n\tvar str = _n0.b;\n\treturn '@namespace ' + (prefix + ('\\\"' + (str + '\\\"')));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$spaceIndent = '    ';\nvar rtfeldman$elm_css$Css$Structure$Output$indent = function (str) {\n\treturn _Utils_ap(rtfeldman$elm_css$Css$Structure$Output$spaceIndent, str);\n};\nvar rtfeldman$elm_css$Css$Structure$Output$noIndent = '';\nvar rtfeldman$elm_css$Css$Structure$Output$emitProperty = function (str) {\n\treturn str + ';';\n};\nvar rtfeldman$elm_css$Css$Structure$Output$emitProperties = function (properties) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n',\n\t\tA2(\n\t\t\telm$core$List$map,\n\t\t\tA2(elm$core$Basics$composeL, rtfeldman$elm_css$Css$Structure$Output$indent, rtfeldman$elm_css$Css$Structure$Output$emitProperty),\n\t\t\tproperties));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$pseudoElementToString = function (_n0) {\n\tvar str = _n0.a;\n\treturn '::' + str;\n};\nvar rtfeldman$elm_css$Css$Structure$Output$combinatorToString = function (combinator) {\n\tswitch (combinator.$) {\n\t\tcase 'AdjacentSibling':\n\t\t\treturn '+';\n\t\tcase 'GeneralSibling':\n\t\t\treturn '~';\n\t\tcase 'Child':\n\t\t\treturn '>';\n\t\tdefault:\n\t\t\treturn '';\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString = function (repeatableSimpleSelector) {\n\tswitch (repeatableSimpleSelector.$) {\n\t\tcase 'ClassSelector':\n\t\t\tvar str = repeatableSimpleSelector.a;\n\t\t\treturn '.' + str;\n\t\tcase 'IdSelector':\n\t\t\tvar str = repeatableSimpleSelector.a;\n\t\t\treturn '#' + str;\n\t\tcase 'PseudoClassSelector':\n\t\t\tvar str = repeatableSimpleSelector.a;\n\t\t\treturn ':' + str;\n\t\tdefault:\n\t\t\tvar str = repeatableSimpleSelector.a;\n\t\t\treturn '[' + (str + ']');\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString = function (simpleSelectorSequence) {\n\tswitch (simpleSelectorSequence.$) {\n\t\tcase 'TypeSelectorSequence':\n\t\t\tvar str = simpleSelectorSequence.a.a;\n\t\t\tvar repeatableSimpleSelectors = simpleSelectorSequence.b;\n\t\t\treturn A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t'',\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\tstr,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors)));\n\t\tcase 'UniversalSelectorSequence':\n\t\t\tvar repeatableSimpleSelectors = simpleSelectorSequence.a;\n\t\t\treturn elm$core$List$isEmpty(repeatableSimpleSelectors) ? '*' : A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t'',\n\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors));\n\t\tdefault:\n\t\t\tvar str = simpleSelectorSequence.a;\n\t\t\tvar repeatableSimpleSelectors = simpleSelectorSequence.b;\n\t\t\treturn A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t'',\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\tstr,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors)));\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$selectorChainToString = function (_n0) {\n\tvar combinator = _n0.a;\n\tvar sequence = _n0.b;\n\treturn A2(\n\t\telm$core$String$join,\n\t\t' ',\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Css$Structure$Output$combinatorToString(combinator),\n\t\t\t\trtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString(sequence)\n\t\t\t]));\n};\nvar rtfeldman$elm_css$Css$Structure$Output$selectorToString = function (_n0) {\n\tvar simpleSelectorSequence = _n0.a;\n\tvar chain = _n0.b;\n\tvar pseudoElement = _n0.c;\n\tvar segments = A2(\n\t\telm$core$List$cons,\n\t\trtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString(simpleSelectorSequence),\n\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$selectorChainToString, chain));\n\tvar pseudoElementsString = A2(\n\t\telm$core$String$join,\n\t\t'',\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t'',\n\t\t\t\tA2(elm$core$Maybe$map, rtfeldman$elm_css$Css$Structure$Output$pseudoElementToString, pseudoElement))\n\t\t\t]));\n\treturn A2(\n\t\telm$core$String$append,\n\t\tA2(\n\t\t\telm$core$String$join,\n\t\t\t' ',\n\t\t\tA2(\n\t\t\t\telm$core$List$filter,\n\t\t\t\tA2(elm$core$Basics$composeL, elm$core$Basics$not, elm$core$String$isEmpty),\n\t\t\t\tsegments)),\n\t\tpseudoElementsString);\n};\nvar rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock = F2(\n\tfunction (indentLevel, _n0) {\n\t\tvar firstSelector = _n0.a;\n\t\tvar otherSelectors = _n0.b;\n\t\tvar properties = _n0.c;\n\t\tvar selectorStr = A2(\n\t\t\telm$core$String$join,\n\t\t\t', ',\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\trtfeldman$elm_css$Css$Structure$Output$selectorToString,\n\t\t\t\tA2(elm$core$List$cons, firstSelector, otherSelectors)));\n\t\treturn A2(\n\t\t\telm$core$String$join,\n\t\t\t'',\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tselectorStr,\n\t\t\t\t\t' {\\n',\n\t\t\t\t\tindentLevel,\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$Output$emitProperties(properties),\n\t\t\t\t\t'\\n',\n\t\t\t\t\tindentLevel,\n\t\t\t\t\t'}'\n\t\t\t\t]));\n\t});\nvar rtfeldman$elm_css$Css$Structure$Output$prettyPrintDeclaration = function (decl) {\n\tswitch (decl.$) {\n\t\tcase 'StyleBlockDeclaration':\n\t\t\tvar styleBlock = decl.a;\n\t\t\treturn A2(rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock, rtfeldman$elm_css$Css$Structure$Output$noIndent, styleBlock);\n\t\tcase 'MediaRule':\n\t\t\tvar mediaQueries = decl.a;\n\t\t\tvar styleBlocks = decl.b;\n\t\t\tvar query = A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t',\\n',\n\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString, mediaQueries));\n\t\t\tvar blocks = A2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t'\\n\\n',\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Basics$composeL,\n\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$Output$indent,\n\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock(rtfeldman$elm_css$Css$Structure$Output$spaceIndent)),\n\t\t\t\t\tstyleBlocks));\n\t\t\treturn '@media ' + (query + (' {\\n' + (blocks + '\\n}')));\n\t\tcase 'SupportsRule':\n\t\t\treturn 'TODO';\n\t\tcase 'DocumentRule':\n\t\t\treturn 'TODO';\n\t\tcase 'PageRule':\n\t\t\treturn 'TODO';\n\t\tcase 'FontFace':\n\t\t\treturn 'TODO';\n\t\tcase 'Keyframes':\n\t\t\tvar name = decl.a.name;\n\t\t\tvar declaration = decl.a.declaration;\n\t\t\treturn '@keyframes ' + (name + (' {\\n' + (declaration + '\\n}')));\n\t\tcase 'Viewport':\n\t\t\treturn 'TODO';\n\t\tcase 'CounterStyle':\n\t\t\treturn 'TODO';\n\t\tdefault:\n\t\t\treturn 'TODO';\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$Output$prettyPrint = function (_n0) {\n\tvar charset = _n0.charset;\n\tvar imports = _n0.imports;\n\tvar namespaces = _n0.namespaces;\n\tvar declarations = _n0.declarations;\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n\\n',\n\t\tA2(\n\t\t\telm$core$List$filter,\n\t\t\tA2(elm$core$Basics$composeL, elm$core$Basics$not, elm$core$String$isEmpty),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$Output$charsetToString(charset),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t'\\n',\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$importToString, imports)),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t'\\n',\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$namespaceToString, namespaces)),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t'\\n\\n',\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Structure$Output$prettyPrintDeclaration, declarations))\n\t\t\t\t])));\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$compileHelp = function (sheet) {\n\treturn rtfeldman$elm_css$Css$Structure$Output$prettyPrint(\n\t\trtfeldman$elm_css$Css$Structure$compactStylesheet(\n\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$toStructure(sheet)));\n};\nvar rtfeldman$elm_css$Css$Preprocess$Resolve$compile = function (styles) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t'\\n\\n',\n\t\tA2(elm$core$List$map, rtfeldman$elm_css$Css$Preprocess$Resolve$compileHelp, styles));\n};\nvar rtfeldman$elm_css$Css$Preprocess$Snippet = function (a) {\n\treturn {$: 'Snippet', a: a};\n};\nvar rtfeldman$elm_css$Css$Preprocess$StyleBlock = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'StyleBlock', a: a, b: b, c: c};\n\t});\nvar rtfeldman$elm_css$Css$Preprocess$StyleBlockDeclaration = function (a) {\n\treturn {$: 'StyleBlockDeclaration', a: a};\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$makeSnippet = F2(\n\tfunction (styles, sequence) {\n\t\tvar selector = A3(rtfeldman$elm_css$Css$Structure$Selector, sequence, _List_Nil, elm$core$Maybe$Nothing);\n\t\treturn rtfeldman$elm_css$Css$Preprocess$Snippet(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$StyleBlockDeclaration(\n\t\t\t\t\tA3(rtfeldman$elm_css$Css$Preprocess$StyleBlock, selector, _List_Nil, styles))\n\t\t\t\t]));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$murmurSeed = 15739;\nvar rtfeldman$elm_css$VirtualDom$Styled$getClassname = function (styles) {\n\treturn elm$core$List$isEmpty(styles) ? 'unstyled' : A2(\n\t\telm$core$String$cons,\n\t\t_Utils_chr('_'),\n\t\trtfeldman$elm_hex$Hex$toString(\n\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$ElmCssVendor$Murmur3$hashString,\n\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$murmurSeed,\n\t\t\t\trtfeldman$elm_css$Css$Preprocess$Resolve$compile(\n\t\t\t\t\telm$core$List$singleton(\n\t\t\t\t\t\trtfeldman$elm_css$Css$Preprocess$stylesheet(\n\t\t\t\t\t\t\telm$core$List$singleton(\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$makeSnippet,\n\t\t\t\t\t\t\t\t\tstyles,\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(_List_Nil)))))))));\n};\nvar rtfeldman$elm_css$Html$Styled$Internal$css = function (styles) {\n\tvar classname = rtfeldman$elm_css$VirtualDom$Styled$getClassname(styles);\n\tvar classProperty = A2(\n\t\telm$virtual_dom$VirtualDom$property,\n\t\t'className',\n\t\telm$json$Json$Encode$string(classname));\n\treturn A3(rtfeldman$elm_css$VirtualDom$Styled$Attribute, classProperty, styles, classname);\n};\nvar rtfeldman$elm_css$Html$Styled$Attributes$css = rtfeldman$elm_css$Html$Styled$Internal$css;\nvar perzanko$elm_loading$Loading$Bars$view = function (config) {\n\tvar withSpeed = function (x) {\n\t\treturn elm$core$String$fromFloat(x / config.speed);\n\t};\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'display', 'flex'),\n\t\t\trtfeldman$elm_css$Css$justifyContent(rtfeldman$elm_css$Css$spaceBetween),\n\t\t\trtfeldman$elm_css$Css$alignItems(rtfeldman$elm_css$Css$flexEnd)\n\t\t]);\n\tvar childStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size / 3.5)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size / 3.5)),\n\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\trtfeldman$elm_css$Css$px(5)),\n\t\t\trtfeldman$elm_css$Css$backgroundColor(\n\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t'animation-duration',\n\t\t\twithSpeed(1.5) + 's'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-function', 'ease-in-out'),\n\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$property,\n\t\t\t\t\t\t\t\t'height',\n\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size / 3.5) + 'px'),\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t50,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$property,\n\t\t\t\t\t\t\t\t'height',\n\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size) + 'px'),\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t100,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$property,\n\t\t\t\t\t\t\t\t'height',\n\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size / 3.5) + 'px'),\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0)')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])))\n\t\t]);\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(1) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(0.5) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(1.0e-7) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar rtfeldman$elm_css$Css$block = {display: rtfeldman$elm_css$Css$Structure$Compatible, value: 'block'};\nvar rtfeldman$elm_css$Css$center = rtfeldman$elm_css$Css$prop1('center');\nvar rtfeldman$elm_css$Css$display = rtfeldman$elm_css$Css$prop1('display');\nvar rtfeldman$elm_css$Css$PercentageUnits = {$: 'PercentageUnits'};\nvar rtfeldman$elm_css$Css$pct = A2(rtfeldman$elm_css$Css$Internal$lengthConverter, rtfeldman$elm_css$Css$PercentageUnits, '%');\nvar perzanko$elm_loading$Loading$BouncingBalls$view = function (config) {\n\tvar withSpeed = function (x) {\n\t\treturn elm$core$String$fromFloat(x / config.speed);\n\t};\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'display', 'flex'),\n\t\t\trtfeldman$elm_css$Css$justifyContent(rtfeldman$elm_css$Css$spaceBetween),\n\t\t\trtfeldman$elm_css$Css$alignItems(rtfeldman$elm_css$Css$center)\n\t\t]);\n\tvar childStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$display(rtfeldman$elm_css$Css$block),\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size / 3.5)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size / 3.5)),\n\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\trtfeldman$elm_css$Css$backgroundColor(\n\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t'animation-duration',\n\t\t\twithSpeed(0.6) + 's'),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t'animation-delay',\n\t\t\twithSpeed(0.1) + 's'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-function', 'linear'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0) translateZ(0) translate(0,0)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t50,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$property,\n\t\t\t\t\t\t\t\t'transform',\n\t\t\t\t\t\t\t\t'translate3d(0,0,0) translateZ(0) translate(0,' + (elm$core$String$fromFloat(config.size / 3.5) + 'px)'))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t100,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0) translateZ(0) translate(0,0)')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])))\n\t\t]);\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(0.1) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(0.2) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\twithSpeed(0.3) + 's')\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar rtfeldman$elm_css$Css$absolute = {position: rtfeldman$elm_css$Css$Structure$Compatible, value: 'absolute'};\nvar rtfeldman$elm_css$Css$left = rtfeldman$elm_css$Css$prop1('left');\nvar rtfeldman$elm_css$Css$UnitlessFloat = {$: 'UnitlessFloat'};\nvar rtfeldman$elm_css$Css$num = function (val) {\n\treturn {\n\t\tlengthOrNumber: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tlengthOrNumberOrAutoOrNoneOrContent: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tnumber: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tnumberOrInfinite: rtfeldman$elm_css$Css$Structure$Compatible,\n\t\tnumericValue: val,\n\t\tunitLabel: '',\n\t\tunits: rtfeldman$elm_css$Css$UnitlessFloat,\n\t\tvalue: elm$core$String$fromFloat(val)\n\t};\n};\nvar rtfeldman$elm_css$Css$opacity = rtfeldman$elm_css$Css$prop1('opacity');\nvar rtfeldman$elm_css$Css$top = rtfeldman$elm_css$Css$prop1('top');\nvar perzanko$elm_loading$Loading$Circle$view = function (config) {\n\tvar withSpeed = function (x) {\n\t\treturn elm$core$String$fromFloat(x / config.speed);\n\t};\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size * 0.95)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto)\n\t\t]);\n\tvar childStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size - (2 * (config.size * 0.17)))),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size - (2 * (config.size * 0.17)))),\n\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\trtfeldman$elm_css$Css$pct(50)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$absolute),\n\t\t\trtfeldman$elm_css$Css$top(\n\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\trtfeldman$elm_css$Css$left(\n\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t'animation-duration',\n\t\t\twithSpeed(1.33) + 's'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-function', 'cubic-bezier(.51,.92,.24,1.15)'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0) rotate(0deg)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t100,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'translate3d(0,0,0) rotate(720deg)')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])))\n\t\t]);\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\telm$core$List$concat(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t'border',\n\t\t\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size * 0.17) + ('px ' + (config.color + ' solid'))),\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0.25))\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\telm$core$List$concat(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tchildStyle,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t'border',\n\t\t\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size * 0.17) + 'px transparent solid'),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t'border-top',\n\t\t\t\t\t\t\t\t\t\telm$core$String$fromFloat(config.size * 0.17) + ('px ' + (config.color + ' solid'))),\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0.8))\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar perzanko$elm_loading$Loading$DoubleBounce$view = function (config) {\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto)\n\t\t]);\n\tvar innerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\trtfeldman$elm_css$Css$pct(50)),\n\t\t\trtfeldman$elm_css$Css$backgroundColor(\n\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\trtfeldman$elm_css$Css$opacity(\n\t\t\trtfeldman$elm_css$Css$num(0.6)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$absolute),\n\t\t\trtfeldman$elm_css$Css$top(\n\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\trtfeldman$elm_css$Css$left(\n\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.0)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t50,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(1.0)')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t100,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.0)')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t'animation-duration',\n\t\t\telm$core$String$fromFloat(2 / config.speed) + 's'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-function', 'ease-in-out'),\n\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite')\n\t\t]);\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(innerStyle)\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\telm$core$List$concat(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tinnerStyle,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\t\t'-' + (elm$core$String$fromFloat(1 / config.speed) + 's'))\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar rtfeldman$elm_css$Css$Preprocess$WithPseudoElement = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'WithPseudoElement', a: a, b: b};\n\t});\nvar rtfeldman$elm_css$Css$Structure$PseudoElement = function (a) {\n\treturn {$: 'PseudoElement', a: a};\n};\nvar rtfeldman$elm_css$Css$pseudoElement = function (element) {\n\treturn rtfeldman$elm_css$Css$Preprocess$WithPseudoElement(\n\t\trtfeldman$elm_css$Css$Structure$PseudoElement(element));\n};\nvar rtfeldman$elm_css$Css$after = rtfeldman$elm_css$Css$pseudoElement('after');\nvar rtfeldman$elm_css$Css$before = rtfeldman$elm_css$Css$pseudoElement('before');\nvar rtfeldman$elm_css$Css$prop3 = F4(\n\tfunction (key, argA, argB, argC) {\n\t\treturn A2(\n\t\t\trtfeldman$elm_css$Css$property,\n\t\t\tkey,\n\t\t\tA2(\n\t\t\t\telm$core$String$join,\n\t\t\t\t' ',\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[argA.value, argB.value, argC.value])));\n\t});\nvar rtfeldman$elm_css$Css$border3 = rtfeldman$elm_css$Css$prop3('border');\nvar rtfeldman$elm_css$Css$solid = {borderStyle: rtfeldman$elm_css$Css$Structure$Compatible, textDecorationStyle: rtfeldman$elm_css$Css$Structure$Compatible, value: 'solid'};\nvar rtfeldman$elm_css$Css$Animations$opacity = function (_n0) {\n\tvar value = _n0.value;\n\treturn rtfeldman$elm_css$Css$Internal$Property('opacity:' + value);\n};\nvar perzanko$elm_loading$Loading$Sonar$view = function (config) {\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto),\n\t\t\trtfeldman$elm_css$Css$before(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'content', '\\' \\''),\n\t\t\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$absolute),\n\t\t\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\t\t\trtfeldman$elm_css$Css$pct(50)),\n\t\t\t\t\trtfeldman$elm_css$Css$width(\n\t\t\t\t\trtfeldman$elm_css$Css$px(config.size / 3)),\n\t\t\t\t\trtfeldman$elm_css$Css$height(\n\t\t\t\t\trtfeldman$elm_css$Css$px(config.size / 3)),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'top',\n\t\t\t\t\t'calc(50% - ' + (elm$core$String$fromFloat(config.size / 6) + 'px)')),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'left',\n\t\t\t\t\t'calc(50% - ' + (elm$core$String$fromFloat(config.size / 6) + 'px)')),\n\t\t\t\t\trtfeldman$elm_css$Css$backgroundColor(\n\t\t\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'animation-duration',\n\t\t\t\t\telm$core$String$fromFloat(3 / config.speed) + 's'),\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-funtion', 'linear'),\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(1))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t15,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(1)),\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.5)')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t60,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(4)'),\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t90,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0)),\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(3)')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t95,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(1))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t100,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(1)),\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(1)')\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])))\n\t\t\t\t])),\n\t\t\trtfeldman$elm_css$Css$after(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'content', '\\' \\''),\n\t\t\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$absolute),\n\t\t\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\t\t\trtfeldman$elm_css$Css$pct(50)),\n\t\t\t\t\trtfeldman$elm_css$Css$width(\n\t\t\t\t\trtfeldman$elm_css$Css$px(config.size / 3)),\n\t\t\t\t\trtfeldman$elm_css$Css$height(\n\t\t\t\t\trtfeldman$elm_css$Css$px(config.size / 3)),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'top',\n\t\t\t\t\t'calc(50% - ' + (elm$core$String$fromFloat(config.size / 6) + 'px)')),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'left',\n\t\t\t\t\t'calc(50% - ' + (elm$core$String$fromFloat(config.size / 6) + 'px)')),\n\t\t\t\t\tA3(\n\t\t\t\t\trtfeldman$elm_css$Css$border3,\n\t\t\t\t\trtfeldman$elm_css$Css$px(1),\n\t\t\t\t\trtfeldman$elm_css$Css$solid,\n\t\t\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\t\t\trtfeldman$elm_css$Css$opacity(\n\t\t\t\t\trtfeldman$elm_css$Css$num(0)),\n\t\t\t\t\tA2(\n\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t'animation-duration',\n\t\t\t\t\telm$core$String$fromFloat(3 / config.speed) + 's'),\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-timing-funtion', 'linear'),\n\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0)),\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(1)')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t30,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0)),\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(1)')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t60,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0.3))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t90,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(3)')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t100,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$opacity(\n\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$num(0))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])))\n\t\t\t\t]))\n\t\t]);\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_Nil);\n};\nvar perzanko$elm_loading$Loading$Spinner$view = function (config) {\n\tvar outerStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$px(config.size)),\n\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$relative),\n\t\t\tA2(\n\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\trtfeldman$elm_css$Css$auto)\n\t\t]);\n\tvar childs = A2(elm$core$List$range, 1, 12);\n\tvar childStyle = _List_fromArray(\n\t\t[\n\t\t\trtfeldman$elm_css$Css$width(\n\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\trtfeldman$elm_css$Css$height(\n\t\t\trtfeldman$elm_css$Css$pct(100))\n\t\t]);\n\tvar calcAnimationDelay = function (x) {\n\t\treturn (x === 1) ? '0s' : (elm$core$String$fromFloat(-((1.1 - (x / 10)) / config.speed)) + 's');\n\t};\n\treturn A2(\n\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(outerStyle),\n\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$class(config.className)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)\n\t\t\t\t\t]),\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\tfunction (x) {\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Html$Styled$Attributes$css(\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$width(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$height(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$position(rtfeldman$elm_css$Css$absolute),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$left(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$top(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$px(0)),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t\t'transform',\n\t\t\t\t\t\t\t\t\t\t\t'rotate(' + (elm$core$String$fromInt((30 * x) - 30) + 'deg)')),\n\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$before(\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'animation-delay',\n\t\t\t\t\t\t\t\t\t\t\t\t\tcalcAnimationDelay(x)),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'content', '\\' \\''),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$display(rtfeldman$elm_css$Css$block),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$margin2,\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$px(0),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$auto),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$width(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$pct(15)),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$height(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$pct(15)),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$backgroundColor(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$hex(config.color)),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$borderRadius(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$pct(100)),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$property,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'animation-duration',\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromFloat(1.2 / config.speed) + 's'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-iteration-count', 'infinite'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$property, 'animation-fill-mode', 'both'),\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$animationName(\n\t\t\t\t\t\t\t\t\t\t\t\t\trtfeldman$elm_css$Css$Animations$keyframes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.0)')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t40,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(1.0)')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t80,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.0)')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t100,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(rtfeldman$elm_css$Css$Animations$property, 'transform', 'scale(0.0)')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t},\n\t\t\t\t\tchilds))\n\t\t\t]));\n};\nvar elm$virtual_dom$VirtualDom$node = function (tag) {\n\treturn _VirtualDom_node(\n\t\t_VirtualDom_noScript(tag));\n};\nvar elm$virtual_dom$VirtualDom$keyedNode = function (tag) {\n\treturn _VirtualDom_keyedNode(\n\t\t_VirtualDom_noScript(tag));\n};\nvar elm$virtual_dom$VirtualDom$keyedNodeNS = F2(\n\tfunction (namespace, tag) {\n\t\treturn A2(\n\t\t\t_VirtualDom_keyedNodeNS,\n\t\t\tnamespace,\n\t\t\t_VirtualDom_noScript(tag));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles = F2(\n\tfunction (_n0, styles) {\n\t\tvar newStyles = _n0.b;\n\t\tvar classname = _n0.c;\n\t\treturn elm$core$List$isEmpty(newStyles) ? styles : A3(elm$core$Dict$insert, classname, newStyles, styles);\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute = function (_n0) {\n\tvar val = _n0.a;\n\treturn val;\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml = F2(\n\tfunction (_n6, _n7) {\n\t\tvar key = _n6.a;\n\t\tvar html = _n6.b;\n\t\tvar pairs = _n7.a;\n\t\tvar styles = _n7.b;\n\t\tswitch (html.$) {\n\t\t\tcase 'Unstyled':\n\t\t\t\tvar vdom = html.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(key, vdom),\n\t\t\t\t\t\tpairs),\n\t\t\t\t\tstyles);\n\t\t\tcase 'Node':\n\t\t\t\tvar elemType = html.a;\n\t\t\t\tvar properties = html.b;\n\t\t\t\tvar children = html.c;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n9 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n9.a;\n\t\t\t\tvar finalStyles = _n9.b;\n\t\t\t\tvar vdom = A3(\n\t\t\t\t\telm$virtual_dom$VirtualDom$node,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(key, vdom),\n\t\t\t\t\t\tpairs),\n\t\t\t\t\tfinalStyles);\n\t\t\tcase 'NodeNS':\n\t\t\t\tvar ns = html.a;\n\t\t\t\tvar elemType = html.b;\n\t\t\t\tvar properties = html.c;\n\t\t\t\tvar children = html.d;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n10 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n10.a;\n\t\t\t\tvar finalStyles = _n10.b;\n\t\t\t\tvar vdom = A4(\n\t\t\t\t\telm$virtual_dom$VirtualDom$nodeNS,\n\t\t\t\t\tns,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(key, vdom),\n\t\t\t\t\t\tpairs),\n\t\t\t\t\tfinalStyles);\n\t\t\tcase 'KeyedNode':\n\t\t\t\tvar elemType = html.a;\n\t\t\t\tvar properties = html.b;\n\t\t\t\tvar children = html.c;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n11 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n11.a;\n\t\t\t\tvar finalStyles = _n11.b;\n\t\t\t\tvar vdom = A3(\n\t\t\t\t\telm$virtual_dom$VirtualDom$keyedNode,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(key, vdom),\n\t\t\t\t\t\tpairs),\n\t\t\t\t\tfinalStyles);\n\t\t\tdefault:\n\t\t\t\tvar ns = html.a;\n\t\t\t\tvar elemType = html.b;\n\t\t\t\tvar properties = html.c;\n\t\t\t\tvar children = html.d;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n12 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n12.a;\n\t\t\t\tvar finalStyles = _n12.b;\n\t\t\t\tvar vdom = A4(\n\t\t\t\t\telm$virtual_dom$VirtualDom$keyedNodeNS,\n\t\t\t\t\tns,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(key, vdom),\n\t\t\t\t\t\tpairs),\n\t\t\t\t\tfinalStyles);\n\t\t}\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml = F2(\n\tfunction (html, _n0) {\n\t\tvar nodes = _n0.a;\n\t\tvar styles = _n0.b;\n\t\tswitch (html.$) {\n\t\t\tcase 'Unstyled':\n\t\t\t\tvar vdomNode = html.a;\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(elm$core$List$cons, vdomNode, nodes),\n\t\t\t\t\tstyles);\n\t\t\tcase 'Node':\n\t\t\t\tvar elemType = html.a;\n\t\t\t\tvar properties = html.b;\n\t\t\t\tvar children = html.c;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n2 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n2.a;\n\t\t\t\tvar finalStyles = _n2.b;\n\t\t\t\tvar vdomNode = A3(\n\t\t\t\t\telm$virtual_dom$VirtualDom$node,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(elm$core$List$cons, vdomNode, nodes),\n\t\t\t\t\tfinalStyles);\n\t\t\tcase 'NodeNS':\n\t\t\t\tvar ns = html.a;\n\t\t\t\tvar elemType = html.b;\n\t\t\t\tvar properties = html.c;\n\t\t\t\tvar children = html.d;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n3 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n3.a;\n\t\t\t\tvar finalStyles = _n3.b;\n\t\t\t\tvar vdomNode = A4(\n\t\t\t\t\telm$virtual_dom$VirtualDom$nodeNS,\n\t\t\t\t\tns,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(elm$core$List$cons, vdomNode, nodes),\n\t\t\t\t\tfinalStyles);\n\t\t\tcase 'KeyedNode':\n\t\t\t\tvar elemType = html.a;\n\t\t\t\tvar properties = html.b;\n\t\t\t\tvar children = html.c;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n4 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n4.a;\n\t\t\t\tvar finalStyles = _n4.b;\n\t\t\t\tvar vdomNode = A3(\n\t\t\t\t\telm$virtual_dom$VirtualDom$keyedNode,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(elm$core$List$cons, vdomNode, nodes),\n\t\t\t\t\tfinalStyles);\n\t\t\tdefault:\n\t\t\t\tvar ns = html.a;\n\t\t\t\tvar elemType = html.b;\n\t\t\t\tvar properties = html.c;\n\t\t\t\tvar children = html.d;\n\t\t\t\tvar combinedStyles = A3(elm$core$List$foldl, rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);\n\t\t\t\tvar _n5 = A3(\n\t\t\t\t\telm$core$List$foldl,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t\t\t_Utils_Tuple2(_List_Nil, combinedStyles),\n\t\t\t\t\tchildren);\n\t\t\t\tvar childNodes = _n5.a;\n\t\t\t\tvar finalStyles = _n5.b;\n\t\t\t\tvar vdomNode = A4(\n\t\t\t\t\telm$virtual_dom$VirtualDom$keyedNodeNS,\n\t\t\t\t\tns,\n\t\t\t\t\telemType,\n\t\t\t\t\tA2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),\n\t\t\t\t\telm$core$List$reverse(childNodes));\n\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\tA2(elm$core$List$cons, vdomNode, nodes),\n\t\t\t\t\tfinalStyles);\n\t\t}\n\t});\nvar elm$core$Dict$singleton = F2(\n\tfunction (key, value) {\n\t\treturn A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, key, value, elm$core$Dict$RBEmpty_elm_builtin, elm$core$Dict$RBEmpty_elm_builtin);\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$stylesFromPropertiesHelp = F2(\n\tfunction (candidate, properties) {\n\t\tstylesFromPropertiesHelp:\n\t\twhile (true) {\n\t\t\tif (!properties.b) {\n\t\t\t\treturn candidate;\n\t\t\t} else {\n\t\t\t\tvar _n1 = properties.a;\n\t\t\t\tvar styles = _n1.b;\n\t\t\t\tvar classname = _n1.c;\n\t\t\t\tvar rest = properties.b;\n\t\t\t\tif (elm$core$String$isEmpty(classname)) {\n\t\t\t\t\tvar $temp$candidate = candidate,\n\t\t\t\t\t\t$temp$properties = rest;\n\t\t\t\t\tcandidate = $temp$candidate;\n\t\t\t\t\tproperties = $temp$properties;\n\t\t\t\t\tcontinue stylesFromPropertiesHelp;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$candidate = elm$core$Maybe$Just(\n\t\t\t\t\t\t_Utils_Tuple2(classname, styles)),\n\t\t\t\t\t\t$temp$properties = rest;\n\t\t\t\t\tcandidate = $temp$candidate;\n\t\t\t\t\tproperties = $temp$properties;\n\t\t\t\t\tcontinue stylesFromPropertiesHelp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties = function (properties) {\n\tvar _n0 = A2(rtfeldman$elm_css$VirtualDom$Styled$stylesFromPropertiesHelp, elm$core$Maybe$Nothing, properties);\n\tif (_n0.$ === 'Nothing') {\n\t\treturn elm$core$Dict$empty;\n\t} else {\n\t\tvar _n1 = _n0.a;\n\t\tvar classname = _n1.a;\n\t\tvar styles = _n1.b;\n\t\treturn A2(elm$core$Dict$singleton, classname, styles);\n\t}\n};\nvar rtfeldman$elm_css$Css$Structure$ClassSelector = function (a) {\n\treturn {$: 'ClassSelector', a: a};\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$snippetFromPair = function (_n0) {\n\tvar classname = _n0.a;\n\tvar styles = _n0.b;\n\treturn A2(\n\t\trtfeldman$elm_css$VirtualDom$Styled$makeSnippet,\n\t\tstyles,\n\t\trtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\trtfeldman$elm_css$Css$Structure$ClassSelector(classname)\n\t\t\t\t])));\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$toDeclaration = function (dict) {\n\treturn rtfeldman$elm_css$Css$Preprocess$Resolve$compile(\n\t\telm$core$List$singleton(\n\t\t\trtfeldman$elm_css$Css$Preprocess$stylesheet(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$snippetFromPair,\n\t\t\t\t\telm$core$Dict$toList(dict)))));\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$toStyleNode = function (styles) {\n\treturn A3(\n\t\telm$virtual_dom$VirtualDom$node,\n\t\t'style',\n\t\t_List_Nil,\n\t\telm$core$List$singleton(\n\t\t\telm$virtual_dom$VirtualDom$text(\n\t\t\t\trtfeldman$elm_css$VirtualDom$Styled$toDeclaration(styles))));\n};\nvar rtfeldman$elm_css$VirtualDom$Styled$unstyle = F3(\n\tfunction (elemType, properties, children) {\n\t\tvar unstyledProperties = A2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);\n\t\tvar initialStyles = rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t_Utils_Tuple2(_List_Nil, initialStyles),\n\t\t\tchildren);\n\t\tvar childNodes = _n0.a;\n\t\tvar styles = _n0.b;\n\t\tvar styleNode = rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(styles);\n\t\treturn A3(\n\t\t\telm$virtual_dom$VirtualDom$node,\n\t\t\telemType,\n\t\t\tunstyledProperties,\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tstyleNode,\n\t\t\t\telm$core$List$reverse(childNodes)));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$containsKey = F2(\n\tfunction (key, pairs) {\n\t\tcontainsKey:\n\t\twhile (true) {\n\t\t\tif (!pairs.b) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tvar _n1 = pairs.a;\n\t\t\t\tvar str = _n1.a;\n\t\t\t\tvar rest = pairs.b;\n\t\t\t\tif (_Utils_eq(key, str)) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$key = key,\n\t\t\t\t\t\t$temp$pairs = rest;\n\t\t\t\t\tkey = $temp$key;\n\t\t\t\t\tpairs = $temp$pairs;\n\t\t\t\t\tcontinue containsKey;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$getUnusedKey = F2(\n\tfunction (_default, pairs) {\n\t\tgetUnusedKey:\n\t\twhile (true) {\n\t\t\tif (!pairs.b) {\n\t\t\t\treturn _default;\n\t\t\t} else {\n\t\t\t\tvar _n1 = pairs.a;\n\t\t\t\tvar firstKey = _n1.a;\n\t\t\t\tvar rest = pairs.b;\n\t\t\t\tvar newKey = '_' + firstKey;\n\t\t\t\tif (A2(rtfeldman$elm_css$VirtualDom$Styled$containsKey, newKey, rest)) {\n\t\t\t\t\tvar $temp$default = newKey,\n\t\t\t\t\t\t$temp$pairs = rest;\n\t\t\t\t\t_default = $temp$default;\n\t\t\t\t\tpairs = $temp$pairs;\n\t\t\t\t\tcontinue getUnusedKey;\n\t\t\t\t} else {\n\t\t\t\t\treturn newKey;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode = F2(\n\tfunction (allStyles, keyedChildNodes) {\n\t\tvar styleNodeKey = A2(rtfeldman$elm_css$VirtualDom$Styled$getUnusedKey, '_', keyedChildNodes);\n\t\tvar finalNode = rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(allStyles);\n\t\treturn _Utils_Tuple2(styleNodeKey, finalNode);\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyed = F3(\n\tfunction (elemType, properties, keyedChildren) {\n\t\tvar unstyledProperties = A2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);\n\t\tvar initialStyles = rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t_Utils_Tuple2(_List_Nil, initialStyles),\n\t\t\tkeyedChildren);\n\t\tvar keyedChildNodes = _n0.a;\n\t\tvar styles = _n0.b;\n\t\tvar keyedStyleNode = A2(rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode, styles, keyedChildNodes);\n\t\treturn A3(\n\t\t\telm$virtual_dom$VirtualDom$keyedNode,\n\t\t\telemType,\n\t\t\tunstyledProperties,\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tkeyedStyleNode,\n\t\t\t\telm$core$List$reverse(keyedChildNodes)));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyedNS = F4(\n\tfunction (ns, elemType, properties, keyedChildren) {\n\t\tvar unstyledProperties = A2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);\n\t\tvar initialStyles = rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,\n\t\t\t_Utils_Tuple2(_List_Nil, initialStyles),\n\t\t\tkeyedChildren);\n\t\tvar keyedChildNodes = _n0.a;\n\t\tvar styles = _n0.b;\n\t\tvar keyedStyleNode = A2(rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode, styles, keyedChildNodes);\n\t\treturn A4(\n\t\t\telm$virtual_dom$VirtualDom$keyedNodeNS,\n\t\t\tns,\n\t\t\telemType,\n\t\t\tunstyledProperties,\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tkeyedStyleNode,\n\t\t\t\telm$core$List$reverse(keyedChildNodes)));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$unstyleNS = F4(\n\tfunction (ns, elemType, properties, children) {\n\t\tvar unstyledProperties = A2(elm$core$List$map, rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);\n\t\tvar initialStyles = rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\trtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,\n\t\t\t_Utils_Tuple2(_List_Nil, initialStyles),\n\t\t\tchildren);\n\t\tvar childNodes = _n0.a;\n\t\tvar styles = _n0.b;\n\t\tvar styleNode = rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(styles);\n\t\treturn A4(\n\t\t\telm$virtual_dom$VirtualDom$nodeNS,\n\t\t\tns,\n\t\t\telemType,\n\t\t\tunstyledProperties,\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\tstyleNode,\n\t\t\t\telm$core$List$reverse(childNodes)));\n\t});\nvar rtfeldman$elm_css$VirtualDom$Styled$toUnstyled = function (vdom) {\n\tswitch (vdom.$) {\n\t\tcase 'Unstyled':\n\t\t\tvar plainNode = vdom.a;\n\t\t\treturn plainNode;\n\t\tcase 'Node':\n\t\t\tvar elemType = vdom.a;\n\t\t\tvar properties = vdom.b;\n\t\t\tvar children = vdom.c;\n\t\t\treturn A3(rtfeldman$elm_css$VirtualDom$Styled$unstyle, elemType, properties, children);\n\t\tcase 'NodeNS':\n\t\t\tvar ns = vdom.a;\n\t\t\tvar elemType = vdom.b;\n\t\t\tvar properties = vdom.c;\n\t\t\tvar children = vdom.d;\n\t\t\treturn A4(rtfeldman$elm_css$VirtualDom$Styled$unstyleNS, ns, elemType, properties, children);\n\t\tcase 'KeyedNode':\n\t\t\tvar elemType = vdom.a;\n\t\t\tvar properties = vdom.b;\n\t\t\tvar children = vdom.c;\n\t\t\treturn A3(rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyed, elemType, properties, children);\n\t\tdefault:\n\t\t\tvar ns = vdom.a;\n\t\t\tvar elemType = vdom.b;\n\t\t\tvar properties = vdom.c;\n\t\t\tvar children = vdom.d;\n\t\t\treturn A4(rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyedNS, ns, elemType, properties, children);\n\t}\n};\nvar rtfeldman$elm_css$Html$Styled$toUnstyled = rtfeldman$elm_css$VirtualDom$Styled$toUnstyled;\nvar perzanko$elm_loading$Loading$render = F3(\n\tfunction (loaderType, config, loadingState) {\n\t\tvar loader = function () {\n\t\t\tswitch (loaderType.$) {\n\t\t\t\tcase 'DoubleBounce':\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$DoubleBounce$view(config));\n\t\t\t\tcase 'Spinner':\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$Spinner$view(config));\n\t\t\t\tcase 'BouncingBalls':\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$BouncingBalls$view(config));\n\t\t\t\tcase 'Bars':\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$Bars$view(config));\n\t\t\t\tcase 'Circle':\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle$view(config));\n\t\t\t\tdefault:\n\t\t\t\t\treturn rtfeldman$elm_css$Html$Styled$toUnstyled(\n\t\t\t\t\t\tperzanko$elm_loading$Loading$Sonar$view(config));\n\t\t\t}\n\t\t}();\n\t\tif (loadingState.$ === 'On') {\n\t\t\treturn A2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('loading')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[loader]));\n\t\t} else {\n\t\t\treturn elm$html$Html$text(' ');\n\t\t}\n\t});\nvar author$project$Main$viewLoading = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '800px'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '25%'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h2,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Fetching data from the server')\n\t\t\t\t\t])),\n\t\t\t\tA3(\n\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t_Utils_update(\n\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t{size: 60}),\n\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t]));\n};\nvar author$project$Image$trimString = function (string) {\n\treturn (elm$core$String$length(string) > 25) ? A2(\n\t\telm$core$String$append,\n\t\tA3(elm$core$String$slice, 0, 25, string),\n\t\t'...') : string;\n};\nvar elm$html$Html$b = _VirtualDom_node('b');\nvar elm$html$Html$h3 = _VirtualDom_node('h3');\nvar elm$html$Html$hr = _VirtualDom_node('hr');\nvar elm$html$Html$Attributes$title = elm$html$Html$Attributes$stringProperty('title');\nvar elm$svg$Svg$circle = elm$svg$Svg$trustedNode('circle');\nvar elm$svg$Svg$polyline = elm$svg$Svg$trustedNode('polyline');\nvar elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');\nvar elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');\nvar elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');\nvar feathericons$elm_feather$FeatherIcons$Icon = function (a) {\n\treturn {$: 'Icon', a: a};\n};\nvar feathericons$elm_feather$FeatherIcons$defaultAttributes = function (name) {\n\treturn {\n\t\t_class: elm$core$Maybe$Just('feather feather-' + name),\n\t\tsize: 24,\n\t\tsizeUnit: '',\n\t\tstrokeWidth: 2,\n\t\tviewBox: '0 0 24 24'\n\t};\n};\nvar feathericons$elm_feather$FeatherIcons$makeBuilder = F2(\n\tfunction (name, src) {\n\t\treturn feathericons$elm_feather$FeatherIcons$Icon(\n\t\t\t{\n\t\t\t\tattrs: feathericons$elm_feather$FeatherIcons$defaultAttributes(name),\n\t\t\t\tsrc: src\n\t\t\t});\n\t});\nvar feathericons$elm_feather$FeatherIcons$award = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'award',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('8'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('7')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$polyline,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$points('8.21 13.89 7 23 12 20 17 23 15.79 13.88')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar elm$svg$Svg$path = elm$svg$Svg$trustedNode('path');\nvar elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');\nvar feathericons$elm_feather$FeatherIcons$eye = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'eye',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$d('M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('3')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar feathericons$elm_feather$FeatherIcons$heart = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'heart',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$d('M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar elm$svg$Svg$map = elm$virtual_dom$VirtualDom$map;\nvar elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');\nvar elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');\nvar elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');\nvar elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');\nvar elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');\nvar elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');\nvar feathericons$elm_feather$FeatherIcons$toHtml = F2(\n\tfunction (attributes, _n0) {\n\t\tvar src = _n0.a.src;\n\t\tvar attrs = _n0.a.attrs;\n\t\tvar strSize = elm$core$String$fromFloat(attrs.size);\n\t\tvar baseAttributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$fill('none'),\n\t\t\t\telm$svg$Svg$Attributes$height(\n\t\t\t\t_Utils_ap(strSize, attrs.sizeUnit)),\n\t\t\t\telm$svg$Svg$Attributes$width(\n\t\t\t\t_Utils_ap(strSize, attrs.sizeUnit)),\n\t\t\t\telm$svg$Svg$Attributes$stroke('currentColor'),\n\t\t\t\telm$svg$Svg$Attributes$strokeLinecap('round'),\n\t\t\t\telm$svg$Svg$Attributes$strokeLinejoin('round'),\n\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\telm$core$String$fromFloat(attrs.strokeWidth)),\n\t\t\t\telm$svg$Svg$Attributes$viewBox(attrs.viewBox)\n\t\t\t]);\n\t\tvar combinedAttributes = _Utils_ap(\n\t\t\tfunction () {\n\t\t\t\tvar _n1 = attrs._class;\n\t\t\t\tif (_n1.$ === 'Just') {\n\t\t\t\t\tvar c = _n1.a;\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\telm$svg$Svg$Attributes$class(c),\n\t\t\t\t\t\tbaseAttributes);\n\t\t\t\t} else {\n\t\t\t\t\treturn baseAttributes;\n\t\t\t\t}\n\t\t\t}(),\n\t\t\tattributes);\n\t\treturn A2(\n\t\t\telm$svg$Svg$svg,\n\t\t\tcombinedAttributes,\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\telm$svg$Svg$map(elm$core$Basics$never),\n\t\t\t\tsrc));\n\t});\nvar feathericons$elm_feather$FeatherIcons$withSize = F2(\n\tfunction (size, _n0) {\n\t\tvar attrs = _n0.a.attrs;\n\t\tvar src = _n0.a.src;\n\t\treturn feathericons$elm_feather$FeatherIcons$Icon(\n\t\t\t{\n\t\t\t\tattrs: _Utils_update(\n\t\t\t\t\tattrs,\n\t\t\t\t\t{size: size}),\n\t\t\t\tsrc: src\n\t\t\t});\n\t});\nvar feathericons$elm_feather$FeatherIcons$withStrokeWidth = F2(\n\tfunction (strokeWidth, _n0) {\n\t\tvar attrs = _n0.a.attrs;\n\t\tvar src = _n0.a.src;\n\t\treturn feathericons$elm_feather$FeatherIcons$Icon(\n\t\t\t{\n\t\t\t\tattrs: _Utils_update(\n\t\t\t\t\tattrs,\n\t\t\t\t\t{strokeWidth: strokeWidth}),\n\t\t\t\tsrc: src\n\t\t\t});\n\t});\nvar author$project$Image$showPreview = function (image) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'display', 'inline-block'),\n\t\t\t\telm$html$Html$Attributes$class('jumbotron'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', 'white')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-40px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + image.id)\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(image.url),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(400),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(400),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'object-fit', 'cover'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto 10px')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Could not display image')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('caption'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '400px'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '0.5px solid #F5F5F5'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '150px'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + image.id)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Image$trimString(image.title))\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-10px')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('by '),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + image.author),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(image.author)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.3')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Views')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 15, feathericons$elm_feather$FeatherIcons$eye))),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(image.views))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Points')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 15, feathericons$elm_feather$FeatherIcons$award))),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(image.points))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Favourites')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 15, feathericons$elm_feather$FeatherIcons$heart))),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(image.favorites))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Gallery$SortNewest = {$: 'SortNewest'};\nvar author$project$Pages$Gallery$SortPopular = {$: 'SortPopular'};\nvar author$project$Pages$Gallery$SortTop = {$: 'SortTop'};\nvar author$project$Pages$Gallery$pageSize = 9;\nvar author$project$Pages$Gallery$Jump = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Jump', a: a, b: b};\n\t});\nvar elm$html$Html$button = _VirtualDom_node('button');\nvar author$project$Pages$Gallery$viewButton = F2(\n\tfunction (model, num) {\n\t\treturn A2(\n\t\t\telm$html$Html$button,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$Attributes$class('btn btn-default'),\n\t\t\t\t\t_Utils_eq(model.page, num) ? A2(elm$html$Html$Attributes$style, 'opacity', '0.3') : A2(elm$html$Html$Attributes$style, '', ''),\n\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\tA2(author$project$Pages$Gallery$Jump, model.sort, num))\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\telm$core$String$fromInt(num))\n\t\t\t\t]));\n\t});\nvar elm$html$Html$h1 = _VirtualDom_node('h1');\nvar elm$html$Html$h4 = _VirtualDom_node('h4');\nvar author$project$Pages$Gallery$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h1,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Image Gallery')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Browse images uploaded by our users')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$hr,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '80%')\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-info'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '80%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Sort by: '),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Gallery$SortNewest),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '10px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t(model.sort === 'newest') ? A2(elm$html$Html$Attributes$style, 'text-decoration', 'underline') : A2(elm$html$Html$Attributes$style, '', '')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Newest')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Gallery$SortPopular),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '10px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t(model.sort === 'popular') ? A2(elm$html$Html$Attributes$style, 'text-decoration', 'underline') : A2(elm$html$Html$Attributes$style, '', '')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Most Popular')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Gallery$SortTop),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t(model.sort === 'rating') ? A2(elm$html$Html$Attributes$style, 'text-decoration', 'underline') : A2(elm$html$Html$Attributes$style, '', '')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Top Rated')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Currently sorting by: '),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n0 = model.sort;\n\t\t\t\t\t\tswitch (_n0) {\n\t\t\t\t\t\t\tcase 'rating':\n\t\t\t\t\t\t\t\treturn elm$html$Html$text('Top rated first');\n\t\t\t\t\t\t\tcase 'popular':\n\t\t\t\t\t\t\t\treturn elm$html$Html$text('Most popular first');\n\t\t\t\t\t\t\tcase 'newest':\n\t\t\t\t\t\t\t\treturn elm$html$Html$text('Newest first');\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn elm$html$Html$text('Invalid sort method');\n\t\t\t\t\t\t}\n\t\t\t\t\t}()\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n1 = model.status;\n\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '50px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Fetching data from the server')\n\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-danger'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '50px'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '50px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Gallery failed to load')\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar container = _n1.a;\n\t\t\t\t\t\tvar images = container.images;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$core$List$isEmpty(images) ? A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '50px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('There are no images in the gallery')\n\t\t\t\t\t\t\t\t\t\t])) : A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel panel-default'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Image$showPreview, images)),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Gallery$viewButton(model),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$range,\n\t\t\t\t\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Gallery$pageSize)))),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(model.page) + ('/' + elm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Gallery$pageSize))))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Components$Carousel$Jump = function (a) {\n\treturn {$: 'Jump', a: a};\n};\nvar feathericons$elm_feather$FeatherIcons$circle = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'circle',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('10')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar elm$svg$Svg$line = elm$svg$Svg$trustedNode('line');\nvar elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');\nvar elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');\nvar elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');\nvar elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');\nvar feathericons$elm_feather$FeatherIcons$xCircle = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'x-circle',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('10')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$line,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1('15'),\n\t\t\t\t\telm$svg$Svg$Attributes$y1('9'),\n\t\t\t\t\telm$svg$Svg$Attributes$x2('9'),\n\t\t\t\t\telm$svg$Svg$Attributes$y2('15')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$line,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1('9'),\n\t\t\t\t\telm$svg$Svg$Attributes$y1('9'),\n\t\t\t\t\telm$svg$Svg$Attributes$x2('15'),\n\t\t\t\t\telm$svg$Svg$Attributes$y2('15')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Components$Carousel$viewBullet = F3(\n\tfunction (model, index, string) {\n\t\treturn A2(\n\t\t\telm$html$Html$button,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.7'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'position', 'relative'),\n\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\tauthor$project$Components$Carousel$Jump(index))\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_eq(model.current, index) ? A2(\n\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 20, feathericons$elm_feather$FeatherIcons$xCircle))) : A2(\n\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 20, feathericons$elm_feather$FeatherIcons$circle)))\n\t\t\t\t]));\n\t});\nvar elm$core$Elm$JsArray$indexedMap = _JsArray_indexedMap;\nvar elm$core$Array$indexedMap = F2(\n\tfunction (func, _n0) {\n\t\tvar len = _n0.a;\n\t\tvar tree = _n0.c;\n\t\tvar tail = _n0.d;\n\t\tvar initialBuilder = {\n\t\t\tnodeList: _List_Nil,\n\t\t\tnodeListSize: 0,\n\t\t\ttail: A3(\n\t\t\t\telm$core$Elm$JsArray$indexedMap,\n\t\t\t\tfunc,\n\t\t\t\telm$core$Array$tailIndex(len),\n\t\t\t\ttail)\n\t\t};\n\t\tvar helper = F2(\n\t\t\tfunction (node, builder) {\n\t\t\t\tif (node.$ === 'SubTree') {\n\t\t\t\t\tvar subTree = node.a;\n\t\t\t\t\treturn A3(elm$core$Elm$JsArray$foldl, helper, builder, subTree);\n\t\t\t\t} else {\n\t\t\t\t\tvar leaf = node.a;\n\t\t\t\t\tvar offset = builder.nodeListSize * elm$core$Array$branchFactor;\n\t\t\t\t\tvar mappedLeaf = elm$core$Array$Leaf(\n\t\t\t\t\t\tA3(elm$core$Elm$JsArray$indexedMap, func, offset, leaf));\n\t\t\t\t\treturn {\n\t\t\t\t\t\tnodeList: A2(elm$core$List$cons, mappedLeaf, builder.nodeList),\n\t\t\t\t\t\tnodeListSize: builder.nodeListSize + 1,\n\t\t\t\t\t\ttail: builder.tail\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\treturn A2(\n\t\t\telm$core$Array$builderToArray,\n\t\t\ttrue,\n\t\t\tA3(elm$core$Elm$JsArray$foldl, helper, initialBuilder, tree));\n\t});\nvar feathericons$elm_feather$FeatherIcons$chevronLeft = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'chevron-left',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$polyline,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$points('15 18 9 12 15 6')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar feathericons$elm_feather$FeatherIcons$chevronRight = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'chevron-right',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$polyline,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$points('9 18 15 12 9 6')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Components$Carousel$view = function (model) {\n\tvar _n0 = A2(elm$core$Array$get, model.current, model.source);\n\tif (_n0.$ === 'Just') {\n\t\tvar img = _n0.a;\n\t\tvar url = 'url(' + (img + ')');\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$Attributes$class('container-fluid text-center image'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '1000px'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-image', url),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', 'gray'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-size', 'cover'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'overflow', 'hidden'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all .5s ease-in-out')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '450px')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'position', 'absolute'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'left', '0px'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.7'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\t\t\t\t\tauthor$project$Components$Carousel$SwitchLeft(model.current))\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t3,\n\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 80, feathericons$elm_feather$FeatherIcons$chevronLeft)))\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'position', 'absolute'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'right', '0px'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.7'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\t\t\t\t\tauthor$project$Components$Carousel$SwitchRight(model.current))\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t3,\n\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 80, feathericons$elm_feather$FeatherIcons$chevronRight)))\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '900px')\n\t\t\t\t\t\t]),\n\t\t\t\t\telm$core$Array$toList(\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$Array$indexedMap,\n\t\t\t\t\t\t\tauthor$project$Components$Carousel$viewBullet(model),\n\t\t\t\t\t\t\tmodel.source)))\n\t\t\t\t]));\n\t} else {\n\t\treturn A2(elm$html$Html$div, _List_Nil, _List_Nil);\n\t}\n};\nvar author$project$TimeFormat$monthToString = function (month) {\n\tswitch (month.$) {\n\t\tcase 'Jan':\n\t\t\treturn 'January';\n\t\tcase 'Feb':\n\t\t\treturn 'February';\n\t\tcase 'Mar':\n\t\t\treturn 'March';\n\t\tcase 'Apr':\n\t\t\treturn 'April';\n\t\tcase 'May':\n\t\t\treturn 'May';\n\t\tcase 'Jun':\n\t\t\treturn 'June';\n\t\tcase 'Jul':\n\t\t\treturn 'July';\n\t\tcase 'Aug':\n\t\t\treturn 'August';\n\t\tcase 'Sep':\n\t\t\treturn 'September';\n\t\tcase 'Oct':\n\t\t\treturn 'October';\n\t\tcase 'Nov':\n\t\t\treturn 'November';\n\t\tdefault:\n\t\t\treturn 'December';\n\t}\n};\nvar elm$time$Time$flooredDiv = F2(\n\tfunction (numerator, denominator) {\n\t\treturn elm$core$Basics$floor(numerator / denominator);\n\t});\nvar elm$time$Time$posixToMillis = function (_n0) {\n\tvar millis = _n0.a;\n\treturn millis;\n};\nvar elm$time$Time$toAdjustedMinutesHelp = F3(\n\tfunction (defaultOffset, posixMinutes, eras) {\n\t\ttoAdjustedMinutesHelp:\n\t\twhile (true) {\n\t\t\tif (!eras.b) {\n\t\t\t\treturn posixMinutes + defaultOffset;\n\t\t\t} else {\n\t\t\t\tvar era = eras.a;\n\t\t\t\tvar olderEras = eras.b;\n\t\t\t\tif (_Utils_cmp(era.start, posixMinutes) < 0) {\n\t\t\t\t\treturn posixMinutes + era.offset;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$defaultOffset = defaultOffset,\n\t\t\t\t\t\t$temp$posixMinutes = posixMinutes,\n\t\t\t\t\t\t$temp$eras = olderEras;\n\t\t\t\t\tdefaultOffset = $temp$defaultOffset;\n\t\t\t\t\tposixMinutes = $temp$posixMinutes;\n\t\t\t\t\teras = $temp$eras;\n\t\t\t\t\tcontinue toAdjustedMinutesHelp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\nvar elm$time$Time$toAdjustedMinutes = F2(\n\tfunction (_n0, time) {\n\t\tvar defaultOffset = _n0.a;\n\t\tvar eras = _n0.b;\n\t\treturn A3(\n\t\t\telm$time$Time$toAdjustedMinutesHelp,\n\t\t\tdefaultOffset,\n\t\t\tA2(\n\t\t\t\telm$time$Time$flooredDiv,\n\t\t\t\telm$time$Time$posixToMillis(time),\n\t\t\t\t60000),\n\t\t\teras);\n\t});\nvar elm$time$Time$toCivil = function (minutes) {\n\tvar rawDay = A2(elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;\n\tvar era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;\n\tvar dayOfEra = rawDay - (era * 146097);\n\tvar yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;\n\tvar dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));\n\tvar mp = (((5 * dayOfYear) + 2) / 153) | 0;\n\tvar month = mp + ((mp < 10) ? 3 : (-9));\n\tvar year = yearOfEra + (era * 400);\n\treturn {\n\t\tday: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,\n\t\tmonth: month,\n\t\tyear: year + ((month <= 2) ? 1 : 0)\n\t};\n};\nvar elm$time$Time$toDay = F2(\n\tfunction (zone, time) {\n\t\treturn elm$time$Time$toCivil(\n\t\t\tA2(elm$time$Time$toAdjustedMinutes, zone, time)).day;\n\t});\nvar elm$time$Time$Apr = {$: 'Apr'};\nvar elm$time$Time$Aug = {$: 'Aug'};\nvar elm$time$Time$Dec = {$: 'Dec'};\nvar elm$time$Time$Feb = {$: 'Feb'};\nvar elm$time$Time$Jan = {$: 'Jan'};\nvar elm$time$Time$Jul = {$: 'Jul'};\nvar elm$time$Time$Jun = {$: 'Jun'};\nvar elm$time$Time$Mar = {$: 'Mar'};\nvar elm$time$Time$May = {$: 'May'};\nvar elm$time$Time$Nov = {$: 'Nov'};\nvar elm$time$Time$Oct = {$: 'Oct'};\nvar elm$time$Time$Sep = {$: 'Sep'};\nvar elm$time$Time$toMonth = F2(\n\tfunction (zone, time) {\n\t\tvar _n0 = elm$time$Time$toCivil(\n\t\t\tA2(elm$time$Time$toAdjustedMinutes, zone, time)).month;\n\t\tswitch (_n0) {\n\t\t\tcase 1:\n\t\t\t\treturn elm$time$Time$Jan;\n\t\t\tcase 2:\n\t\t\t\treturn elm$time$Time$Feb;\n\t\t\tcase 3:\n\t\t\t\treturn elm$time$Time$Mar;\n\t\t\tcase 4:\n\t\t\t\treturn elm$time$Time$Apr;\n\t\t\tcase 5:\n\t\t\t\treturn elm$time$Time$May;\n\t\t\tcase 6:\n\t\t\t\treturn elm$time$Time$Jun;\n\t\t\tcase 7:\n\t\t\t\treturn elm$time$Time$Jul;\n\t\t\tcase 8:\n\t\t\t\treturn elm$time$Time$Aug;\n\t\t\tcase 9:\n\t\t\t\treturn elm$time$Time$Sep;\n\t\t\tcase 10:\n\t\t\t\treturn elm$time$Time$Oct;\n\t\t\tcase 11:\n\t\t\t\treturn elm$time$Time$Nov;\n\t\t\tdefault:\n\t\t\t\treturn elm$time$Time$Dec;\n\t\t}\n\t});\nvar elm$time$Time$toYear = F2(\n\tfunction (zone, time) {\n\t\treturn elm$time$Time$toCivil(\n\t\t\tA2(elm$time$Time$toAdjustedMinutes, zone, time)).year;\n\t});\nvar justinmimbs$timezone_data$TimeZone$maxYear = 2037;\nvar justinmimbs$timezone_data$TimeZone$minYear = 1970;\nvar elm$core$Tuple$second = function (_n0) {\n\tvar y = _n0.b;\n\treturn y;\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$DateTime = F5(\n\tfunction (year, month, day, time, clock) {\n\t\treturn {clock: clock, day: day, month: month, time: time, year: year};\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$Universal = {$: 'Universal'};\nvar justinmimbs$timezone_data$TimeZone$Specification$dropChangesBeforeEpoch = function (_n0) {\n\tdropChangesBeforeEpoch:\n\twhile (true) {\n\t\tvar initial = _n0.a;\n\t\tvar changes = _n0.b;\n\t\tif (changes.b) {\n\t\t\tvar change = changes.a;\n\t\t\tvar rest = changes.b;\n\t\t\tif (change.start <= 0) {\n\t\t\t\tvar $temp$_n0 = _Utils_Tuple2(change.offset, rest);\n\t\t\t\t_n0 = $temp$_n0;\n\t\t\t\tcontinue dropChangesBeforeEpoch;\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(initial, changes);\n\t\t\t}\n\t\t} else {\n\t\t\treturn _Utils_Tuple2(initial, _List_Nil);\n\t\t}\n\t}\n};\nvar elm$core$List$sortBy = _List_sortBy;\nvar justinmimbs$timezone_data$RataDie$weekdayNumber = function (rd) {\n\tvar _n0 = A2(elm$core$Basics$modBy, 7, rd);\n\tif (!_n0) {\n\t\treturn 7;\n\t} else {\n\t\tvar n = _n0;\n\t\treturn n;\n\t}\n};\nvar justinmimbs$timezone_data$RataDie$weekdayToNumber = function (wd) {\n\tswitch (wd.$) {\n\t\tcase 'Mon':\n\t\t\treturn 1;\n\t\tcase 'Tue':\n\t\t\treturn 2;\n\t\tcase 'Wed':\n\t\t\treturn 3;\n\t\tcase 'Thu':\n\t\t\treturn 4;\n\t\tcase 'Fri':\n\t\t\treturn 5;\n\t\tcase 'Sat':\n\t\t\treturn 6;\n\t\tdefault:\n\t\t\treturn 7;\n\t}\n};\nvar justinmimbs$timezone_data$RataDie$floorWeekday = F2(\n\tfunction (weekday, rd) {\n\t\tvar daysSincePreviousWeekday = A2(\n\t\t\telm$core$Basics$modBy,\n\t\t\t7,\n\t\t\t(justinmimbs$timezone_data$RataDie$weekdayNumber(rd) + 7) - justinmimbs$timezone_data$RataDie$weekdayToNumber(weekday));\n\t\treturn rd - daysSincePreviousWeekday;\n\t});\nvar justinmimbs$timezone_data$RataDie$ceilingWeekday = F2(\n\tfunction (weekday, rd) {\n\t\tvar floored = A2(justinmimbs$timezone_data$RataDie$floorWeekday, weekday, rd);\n\t\treturn _Utils_eq(rd, floored) ? rd : (floored + 7);\n\t});\nvar justinmimbs$timezone_data$RataDie$isLeapYear = function (y) {\n\treturn ((!A2(elm$core$Basics$modBy, 4, y)) && A2(elm$core$Basics$modBy, 100, y)) || (!A2(elm$core$Basics$modBy, 400, y));\n};\nvar justinmimbs$timezone_data$RataDie$daysBeforeMonth = F2(\n\tfunction (y, m) {\n\t\tvar leapDays = justinmimbs$timezone_data$RataDie$isLeapYear(y) ? 1 : 0;\n\t\tswitch (m.$) {\n\t\t\tcase 'Jan':\n\t\t\t\treturn 0;\n\t\t\tcase 'Feb':\n\t\t\t\treturn 31;\n\t\t\tcase 'Mar':\n\t\t\t\treturn 59 + leapDays;\n\t\t\tcase 'Apr':\n\t\t\t\treturn 90 + leapDays;\n\t\t\tcase 'May':\n\t\t\t\treturn 120 + leapDays;\n\t\t\tcase 'Jun':\n\t\t\t\treturn 151 + leapDays;\n\t\t\tcase 'Jul':\n\t\t\t\treturn 181 + leapDays;\n\t\t\tcase 'Aug':\n\t\t\t\treturn 212 + leapDays;\n\t\t\tcase 'Sep':\n\t\t\t\treturn 243 + leapDays;\n\t\t\tcase 'Oct':\n\t\t\t\treturn 273 + leapDays;\n\t\t\tcase 'Nov':\n\t\t\t\treturn 304 + leapDays;\n\t\t\tdefault:\n\t\t\t\treturn 334 + leapDays;\n\t\t}\n\t});\nvar justinmimbs$timezone_data$RataDie$daysBeforeYear = function (y1) {\n\tvar y = y1 - 1;\n\tvar leapYears = (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);\n\treturn (365 * y) + leapYears;\n};\nvar justinmimbs$timezone_data$RataDie$dayOfMonth = F3(\n\tfunction (y, m, d) {\n\t\treturn (justinmimbs$timezone_data$RataDie$daysBeforeYear(y) + A2(justinmimbs$timezone_data$RataDie$daysBeforeMonth, y, m)) + d;\n\t});\nvar justinmimbs$timezone_data$RataDie$daysInMonth = F2(\n\tfunction (y, m) {\n\t\tswitch (m.$) {\n\t\t\tcase 'Jan':\n\t\t\t\treturn 31;\n\t\t\tcase 'Feb':\n\t\t\t\treturn justinmimbs$timezone_data$RataDie$isLeapYear(y) ? 29 : 28;\n\t\t\tcase 'Mar':\n\t\t\t\treturn 31;\n\t\t\tcase 'Apr':\n\t\t\t\treturn 30;\n\t\t\tcase 'May':\n\t\t\t\treturn 31;\n\t\t\tcase 'Jun':\n\t\t\t\treturn 30;\n\t\t\tcase 'Jul':\n\t\t\t\treturn 31;\n\t\t\tcase 'Aug':\n\t\t\t\treturn 31;\n\t\t\tcase 'Sep':\n\t\t\t\treturn 30;\n\t\t\tcase 'Oct':\n\t\t\t\treturn 31;\n\t\t\tcase 'Nov':\n\t\t\t\treturn 30;\n\t\t\tdefault:\n\t\t\t\treturn 31;\n\t\t}\n\t});\nvar justinmimbs$timezone_data$RataDie$lastOfMonth = F2(\n\tfunction (y, m) {\n\t\treturn (justinmimbs$timezone_data$RataDie$daysBeforeYear(y) + A2(justinmimbs$timezone_data$RataDie$daysBeforeMonth, y, m)) + A2(justinmimbs$timezone_data$RataDie$daysInMonth, y, m);\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$minutesFromRataDie = function (rd) {\n\treturn (rd - 719163) * 1440;\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$utcAdjustment = F2(\n\tfunction (clock, _n0) {\n\t\tvar standard = _n0.standard;\n\t\tvar save = _n0.save;\n\t\tswitch (clock.$) {\n\t\t\tcase 'Universal':\n\t\t\t\treturn 0;\n\t\t\tcase 'Standard':\n\t\t\t\treturn 0 - standard;\n\t\t\tdefault:\n\t\t\t\treturn 0 - (standard + save);\n\t\t}\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$minutesFromDateTime = function (_n0) {\n\tvar year = _n0.year;\n\tvar month = _n0.month;\n\tvar day = _n0.day;\n\tvar time = _n0.time;\n\treturn justinmimbs$timezone_data$TimeZone$Specification$minutesFromRataDie(\n\t\tA3(justinmimbs$timezone_data$RataDie$dayOfMonth, year, month, day)) + time;\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$utcMinutesFromDateTime = F2(\n\tfunction (offset, datetime) {\n\t\treturn justinmimbs$timezone_data$TimeZone$Specification$minutesFromDateTime(datetime) + A2(justinmimbs$timezone_data$TimeZone$Specification$utcAdjustment, datetime.clock, offset);\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$rulesToOffsetChanges = F5(\n\tfunction (previousOffset, start, until, standardOffset, rules) {\n\t\tvar transitions = A2(\n\t\t\telm$core$List$concatMap,\n\t\t\tfunction (year) {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$sortBy,\n\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\treturn $.start;\n\t\t\t\t\t},\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\tfunction (rule) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tclock: rule.clock,\n\t\t\t\t\t\t\t\tsave: rule.save,\n\t\t\t\t\t\t\t\tstart: justinmimbs$timezone_data$TimeZone$Specification$minutesFromRataDie(\n\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\tvar _n2 = rule.day;\n\t\t\t\t\t\t\t\t\t\tswitch (_n2.$) {\n\t\t\t\t\t\t\t\t\t\t\tcase 'Day':\n\t\t\t\t\t\t\t\t\t\t\t\tvar day = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn A3(justinmimbs$timezone_data$RataDie$dayOfMonth, year, rule.month, day);\n\t\t\t\t\t\t\t\t\t\t\tcase 'Next':\n\t\t\t\t\t\t\t\t\t\t\t\tvar weekday = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\tvar after = _n2.b;\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\tjustinmimbs$timezone_data$RataDie$ceilingWeekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tweekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA3(justinmimbs$timezone_data$RataDie$dayOfMonth, year, rule.month, after));\n\t\t\t\t\t\t\t\t\t\t\tcase 'Prev':\n\t\t\t\t\t\t\t\t\t\t\t\tvar weekday = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\tvar before = _n2.b;\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\tjustinmimbs$timezone_data$RataDie$floorWeekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tweekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA3(justinmimbs$timezone_data$RataDie$dayOfMonth, year, rule.month, before));\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tvar weekday = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\tjustinmimbs$timezone_data$RataDie$floorWeekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tweekday,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(justinmimbs$timezone_data$RataDie$lastOfMonth, year, rule.month));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}()) + rule.time\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$List$filter,\n\t\t\t\t\t\t\tfunction (rule) {\n\t\t\t\t\t\t\t\treturn (_Utils_cmp(rule.from, year) < 1) && (_Utils_cmp(year, rule.to) < 1);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trules)));\n\t\t\t},\n\t\t\tA2(elm$core$List$range, start.year - 1, until.year));\n\t\tvar initialOffset = {save: 0, standard: standardOffset};\n\t\tvar initialChange = {\n\t\t\toffset: standardOffset,\n\t\t\tstart: A2(justinmimbs$timezone_data$TimeZone$Specification$utcMinutesFromDateTime, previousOffset, start)\n\t\t};\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\tF2(\n\t\t\t\tfunction (transition, _n1) {\n\t\t\t\t\tvar currentOffset = _n1.a;\n\t\t\t\t\tvar changes = _n1.b;\n\t\t\t\t\tvar newOffset = {save: transition.save, standard: standardOffset};\n\t\t\t\t\tif (_Utils_cmp(\n\t\t\t\t\t\ttransition.start + A2(justinmimbs$timezone_data$TimeZone$Specification$utcAdjustment, transition.clock, previousOffset),\n\t\t\t\t\t\tinitialChange.start) < 1) {\n\t\t\t\t\t\tvar updatedInitialChange = {offset: standardOffset + transition.save, start: initialChange.start};\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\tnewOffset,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[updatedInitialChange]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_Utils_cmp(\n\t\t\t\t\t\t\ttransition.start + A2(justinmimbs$timezone_data$TimeZone$Specification$utcAdjustment, transition.clock, currentOffset),\n\t\t\t\t\t\t\tA2(justinmimbs$timezone_data$TimeZone$Specification$utcMinutesFromDateTime, currentOffset, until)) < 0) {\n\t\t\t\t\t\t\tvar change = {\n\t\t\t\t\t\t\t\toffset: standardOffset + transition.save,\n\t\t\t\t\t\t\t\tstart: transition.start + A2(justinmimbs$timezone_data$TimeZone$Specification$utcAdjustment, transition.clock, currentOffset)\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\t\tnewOffset,\n\t\t\t\t\t\t\t\tA2(elm$core$List$cons, change, changes));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn _Utils_Tuple2(currentOffset, changes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t_Utils_Tuple2(\n\t\t\t\tinitialOffset,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[initialChange])),\n\t\t\ttransitions);\n\t\tvar nextOffset = _n0.a;\n\t\tvar descendingChanges = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\telm$core$List$reverse(descendingChanges),\n\t\t\tnextOffset);\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$stateToOffsetChanges = F4(\n\tfunction (previousOffset, start, until, _n0) {\n\t\tvar standardOffset = _n0.standardOffset;\n\t\tvar zoneRules = _n0.zoneRules;\n\t\tif (zoneRules.$ === 'Save') {\n\t\t\tvar save = zoneRules.a;\n\t\t\treturn _Utils_Tuple2(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\toffset: standardOffset + save,\n\t\t\t\t\t\tstart: A2(justinmimbs$timezone_data$TimeZone$Specification$utcMinutesFromDateTime, previousOffset, start)\n\t\t\t\t\t}\n\t\t\t\t\t]),\n\t\t\t\t{save: save, standard: standardOffset});\n\t\t} else {\n\t\t\tvar rules = zoneRules.a;\n\t\t\treturn A5(justinmimbs$timezone_data$TimeZone$Specification$rulesToOffsetChanges, previousOffset, start, until, standardOffset, rules);\n\t\t}\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$stripDuplicatesByHelp = F4(\n\tfunction (f, a, rev, list) {\n\t\tstripDuplicatesByHelp:\n\t\twhile (true) {\n\t\t\tif (!list.b) {\n\t\t\t\treturn elm$core$List$reverse(rev);\n\t\t\t} else {\n\t\t\t\tvar x = list.a;\n\t\t\t\tvar xs = list.b;\n\t\t\t\tvar b = f(x);\n\t\t\t\tvar rev_ = (!_Utils_eq(a, b)) ? A2(elm$core$List$cons, x, rev) : rev;\n\t\t\t\tvar $temp$f = f,\n\t\t\t\t\t$temp$a = b,\n\t\t\t\t\t$temp$rev = rev_,\n\t\t\t\t\t$temp$list = xs;\n\t\t\t\tf = $temp$f;\n\t\t\t\ta = $temp$a;\n\t\t\t\trev = $temp$rev;\n\t\t\t\tlist = $temp$list;\n\t\t\t\tcontinue stripDuplicatesByHelp;\n\t\t\t}\n\t\t}\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$zoneToRanges = F3(\n\tfunction (zoneStart, zoneUntil, zone) {\n\t\tvar _n0 = A3(\n\t\t\telm$core$List$foldl,\n\t\t\tF2(\n\t\t\t\tfunction (_n1, _n2) {\n\t\t\t\t\tvar state = _n1.a;\n\t\t\t\t\tvar nextStart = _n1.b;\n\t\t\t\t\tvar start = _n2.a;\n\t\t\t\t\tvar ranges = _n2.b;\n\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\tnextStart,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t_Utils_Tuple3(start, state, nextStart),\n\t\t\t\t\t\t\tranges));\n\t\t\t\t}),\n\t\t\t_Utils_Tuple2(zoneStart, _List_Nil),\n\t\t\tzone.history);\n\t\tvar currentStart = _n0.a;\n\t\tvar historyRanges = _n0.b;\n\t\treturn elm$core$List$reverse(\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\t_Utils_Tuple3(currentStart, zone.current, zoneUntil),\n\t\t\t\thistoryRanges));\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$toOffsets = F3(\n\tfunction (minYear, maxYear, zone) {\n\t\tvar initialState = function () {\n\t\t\tvar _n5 = zone.history;\n\t\t\tif (_n5.b) {\n\t\t\t\tvar _n6 = _n5.a;\n\t\t\t\tvar earliest = _n6.a;\n\t\t\t\treturn earliest;\n\t\t\t} else {\n\t\t\t\treturn zone.current;\n\t\t\t}\n\t\t}();\n\t\tvar initialOffset = {\n\t\t\tsave: function () {\n\t\t\t\tvar _n4 = initialState.zoneRules;\n\t\t\t\tif (_n4.$ === 'Save') {\n\t\t\t\t\tvar save = _n4.a;\n\t\t\t\t\treturn save;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}(),\n\t\t\tstandard: initialState.standardOffset\n\t\t};\n\t\tvar ascendingChanges = A4(\n\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$stripDuplicatesByHelp,\n\t\t\tfunction ($) {\n\t\t\t\treturn $.offset;\n\t\t\t},\n\t\t\tinitialOffset.standard + initialOffset.save,\n\t\t\t_List_Nil,\n\t\t\tA3(\n\t\t\t\telm$core$List$foldl,\n\t\t\t\tF2(\n\t\t\t\t\tfunction (_n1, _n2) {\n\t\t\t\t\t\tvar start = _n1.a;\n\t\t\t\t\t\tvar state = _n1.b;\n\t\t\t\t\t\tvar until = _n1.c;\n\t\t\t\t\t\tvar prevOffset = _n2.a;\n\t\t\t\t\t\tvar prevChanges = _n2.b;\n\t\t\t\t\t\tvar _n3 = A4(justinmimbs$timezone_data$TimeZone$Specification$stateToOffsetChanges, prevOffset, start, until, state);\n\t\t\t\t\t\tvar nextChanges = _n3.a;\n\t\t\t\t\t\tvar nextOffset = _n3.b;\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\tnextOffset,\n\t\t\t\t\t\t\t_Utils_ap(prevChanges, nextChanges));\n\t\t\t\t\t}),\n\t\t\t\t_Utils_Tuple2(initialOffset, _List_Nil),\n\t\t\t\tA3(\n\t\t\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$zoneToRanges,\n\t\t\t\t\tA5(justinmimbs$timezone_data$TimeZone$Specification$DateTime, minYear, elm$time$Time$Jan, 1, 0, justinmimbs$timezone_data$TimeZone$Specification$Universal),\n\t\t\t\t\tA5(justinmimbs$timezone_data$TimeZone$Specification$DateTime, maxYear + 1, elm$time$Time$Jan, 1, 0, justinmimbs$timezone_data$TimeZone$Specification$Universal),\n\t\t\t\t\tzone)).b);\n\t\tvar _n0 = justinmimbs$timezone_data$TimeZone$Specification$dropChangesBeforeEpoch(\n\t\t\t_Utils_Tuple2(initialOffset.standard + initialOffset.save, ascendingChanges));\n\t\tvar initial = _n0.a;\n\t\tvar ascending = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\telm$core$List$reverse(ascending),\n\t\t\tinitial);\n\t});\nvar justinmimbs$timezone_data$TimeZone$fromSpecification = function (zone) {\n\tvar _n0 = A3(justinmimbs$timezone_data$TimeZone$Specification$toOffsets, justinmimbs$timezone_data$TimeZone$minYear, justinmimbs$timezone_data$TimeZone$maxYear, zone);\n\tvar descending = _n0.a;\n\tvar bottom = _n0.b;\n\treturn A2(elm$time$Time$customZone, bottom, descending);\n};\nvar elm$time$Time$Sun = {$: 'Sun'};\nvar justinmimbs$timezone_data$TimeZone$Specification$Day = function (a) {\n\treturn {$: 'Day', a: a};\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$Last = function (a) {\n\treturn {$: 'Last', a: a};\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$Next = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Next', a: a, b: b};\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$Rule = F7(\n\tfunction (from, to, month, day, time, clock, save) {\n\t\treturn {clock: clock, day: day, from: from, month: month, save: save, time: time, to: to};\n\t});\nvar justinmimbs$timezone_data$TimeZone$rules_EU = _List_fromArray(\n\t[\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1977,\n\t\t1980,\n\t\telm$time$Time$Apr,\n\t\tA2(justinmimbs$timezone_data$TimeZone$Specification$Next, elm$time$Time$Sun, 1),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t60),\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1977,\n\t\t1977,\n\t\telm$time$Time$Sep,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Last(elm$time$Time$Sun),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t0),\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1978,\n\t\t1978,\n\t\telm$time$Time$Oct,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Day(1),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t0),\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1979,\n\t\t1995,\n\t\telm$time$Time$Sep,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Last(elm$time$Time$Sun),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t0),\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1981,\n\t\tjustinmimbs$timezone_data$TimeZone$maxYear,\n\t\telm$time$Time$Mar,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Last(elm$time$Time$Sun),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t60),\n\t\tA7(\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rule,\n\t\t1996,\n\t\tjustinmimbs$timezone_data$TimeZone$maxYear,\n\t\telm$time$Time$Oct,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Last(elm$time$Time$Sun),\n\t\t60,\n\t\tjustinmimbs$timezone_data$TimeZone$Specification$Universal,\n\t\t0)\n\t]);\nvar justinmimbs$timezone_data$TimeZone$Specification$Rules = function (a) {\n\treturn {$: 'Rules', a: a};\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$Save = function (a) {\n\treturn {$: 'Save', a: a};\n};\nvar justinmimbs$timezone_data$TimeZone$Specification$WallClock = {$: 'WallClock'};\nvar justinmimbs$timezone_data$TimeZone$Specification$Zone = F2(\n\tfunction (history, current) {\n\t\treturn {current: current, history: history};\n\t});\nvar justinmimbs$timezone_data$TimeZone$Specification$ZoneState = F2(\n\tfunction (standardOffset, zoneRules) {\n\t\treturn {standardOffset: standardOffset, zoneRules: zoneRules};\n\t});\nvar justinmimbs$timezone_data$TimeZone$europe__prague = function (_n0) {\n\treturn justinmimbs$timezone_data$TimeZone$fromSpecification(\n\t\tA2(\n\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$Zone,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\tA2(\n\t\t\t\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$ZoneState,\n\t\t\t\t\t\t60,\n\t\t\t\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$Save(0)),\n\t\t\t\t\tA5(justinmimbs$timezone_data$TimeZone$Specification$DateTime, 1979, elm$time$Time$Jan, 1, 0, justinmimbs$timezone_data$TimeZone$Specification$WallClock))\n\t\t\t\t]),\n\t\t\tA2(\n\t\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$ZoneState,\n\t\t\t\t60,\n\t\t\t\tjustinmimbs$timezone_data$TimeZone$Specification$Rules(justinmimbs$timezone_data$TimeZone$rules_EU))));\n};\nvar justinmimbs$timezone_data$TimeZone$europe__bratislava = justinmimbs$timezone_data$TimeZone$europe__prague;\nvar author$project$TimeFormat$formatDate = function (time) {\n\tvar zone = justinmimbs$timezone_data$TimeZone$europe__bratislava(_Utils_Tuple0);\n\treturn author$project$TimeFormat$monthToString(\n\t\tA2(elm$time$Time$toMonth, zone, time)) + (' ' + (elm$core$String$fromInt(\n\t\tA2(elm$time$Time$toDay, zone, time)) + (' ' + elm$core$String$fromInt(\n\t\tA2(elm$time$Time$toYear, zone, time)))));\n};\nvar elm$html$Html$h5 = _VirtualDom_node('h5');\nvar elm$html$Html$h6 = _VirtualDom_node('h6');\nvar author$project$Pages$Home$showPost = function (post) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('media'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '70%'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('media-left')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + post.id)\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(post.url),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('avatar'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(170),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(170)\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('media-body well'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-heading')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + post.id),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(post.title)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h5,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t'Uploaded on ' + author$project$TimeFormat$formatDate(post.uploaded))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h6,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('by '),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + post.author),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(post.author)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h5,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(post.views) + ' views')\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Tag$view = function (value) {\n\treturn A2(\n\t\telm$html$Html$a,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('badge preview'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', '#3b5998'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', '1px'),\n\t\t\t\telm$html$Html$Attributes$href('/tags?q=' + value)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$text(value)\n\t\t\t]));\n};\nvar author$project$Pages$Home$view = function (model) {\n\tvar url = 'url(' + (author$project$Server$url + ('/img/background.jpg' + ')'));\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\tauthor$project$Pages$Home$UpdateCarousel,\n\t\t\t\t\t\tauthor$project$Components$Carousel$view(model.carousel))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-600px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '25%')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$h1,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('lead'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '60px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.9')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Get Creative.')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('lead'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'white'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '30px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.9'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-25px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Website created for sharing images - powered by Elm.')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n0 = model.user;\n\t\t\t\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\t\t\t\tvar user = _n0.a;\n\t\t\t\t\t\t\treturn A2(elm$html$Html$div, _List_Nil, _List_Nil);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_up')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-lg btn-default')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Get started')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}()\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '470px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Trending tags')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Overview of trending tags')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n1 = model.tagStatus;\n\t\t\t\t\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\t\t\t\t\tcase 'LoadingTags':\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\tcase 'FailureTags':\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Connection error')\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tvar tags = _n1.a;\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('well'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Tag$view, tags));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Latest posts')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Overview of latest images posted to the site')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '70%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n2 = model.status;\n\t\t\t\t\t\t\t\tswitch (_n2.$) {\n\t\t\t\t\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Connection error')\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tvar images = _n2.a;\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Pages$Home$showPost, images))\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Image$Stats$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$span,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\telm$html$Html$Attributes$title('Views')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 20, feathericons$elm_feather$FeatherIcons$eye))),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\telm$core$String$fromInt(model.views))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$span,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\telm$html$Html$Attributes$title('Points')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 20, feathericons$elm_feather$FeatherIcons$award))),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\telm$core$String$fromInt(model.points))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$span,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('col-sm-4'),\n\t\t\t\t\t\telm$html$Html$Attributes$title('Favourites')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 20, feathericons$elm_feather$FeatherIcons$heart))),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$b,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\telm$core$String$fromInt(model.favorites))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Post$Comment = function (a) {\n\treturn {$: 'Comment', a: a};\n};\nvar author$project$Pages$Post$DeletePost = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'DeletePost', a: a, b: b};\n\t});\nvar author$project$Pages$Post$Downvote = {$: 'Downvote'};\nvar author$project$Pages$Post$Favorite = {$: 'Favorite'};\nvar author$project$Pages$Post$Submit = {$: 'Submit'};\nvar author$project$Pages$Post$Upvote = {$: 'Upvote'};\nvar author$project$Pages$Post$Veto = {$: 'Veto'};\nvar author$project$Pages$Post$DeleteComment = function (a) {\n\treturn {$: 'DeleteComment', a: a};\n};\nvar author$project$Pages$Post$DeleteCommentCancel = {$: 'DeleteCommentCancel'};\nvar author$project$Pages$Post$DeleteCommentConfirm = {$: 'DeleteCommentConfirm'};\nvar author$project$Pages$Post$Edit = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Edit', a: a, b: b};\n\t});\nvar author$project$Pages$Post$EditCancel = {$: 'EditCancel'};\nvar author$project$Pages$Post$EditComment = function (a) {\n\treturn {$: 'EditComment', a: a};\n};\nvar author$project$Pages$Post$EditConfirm = {$: 'EditConfirm'};\nvar author$project$TimeFormat$minuteToString = function (min) {\n\treturn (min < 10) ? ('0' + elm$core$String$fromInt(min)) : elm$core$String$fromInt(min);\n};\nvar elm$time$Time$toHour = F2(\n\tfunction (zone, time) {\n\t\treturn A2(\n\t\t\telm$core$Basics$modBy,\n\t\t\t24,\n\t\t\tA2(\n\t\t\t\telm$time$Time$flooredDiv,\n\t\t\t\tA2(elm$time$Time$toAdjustedMinutes, zone, time),\n\t\t\t\t60));\n\t});\nvar elm$time$Time$toMinute = F2(\n\tfunction (zone, time) {\n\t\treturn A2(\n\t\t\telm$core$Basics$modBy,\n\t\t\t60,\n\t\t\tA2(elm$time$Time$toAdjustedMinutes, zone, time));\n\t});\nvar author$project$TimeFormat$formatTime = function (time) {\n\tvar zone = justinmimbs$timezone_data$TimeZone$europe__bratislava(_Utils_Tuple0);\n\treturn author$project$TimeFormat$formatDate(time) + (', ' + (elm$core$String$fromInt(\n\t\tA2(elm$time$Time$toHour, zone, time)) + (':' + author$project$TimeFormat$minuteToString(\n\t\tA2(elm$time$Time$toMinute, zone, time)))));\n};\nvar elm$html$Html$textarea = _VirtualDom_node('textarea');\nvar elm$html$Html$Attributes$id = elm$html$Html$Attributes$stringProperty('id');\nvar elm_explorations$markdown$Markdown$defaultOptions = {\n\tdefaultHighlighting: elm$core$Maybe$Nothing,\n\tgithubFlavored: elm$core$Maybe$Just(\n\t\t{breaks: false, tables: false}),\n\tsanitize: true,\n\tsmartypants: false\n};\nvar elm_explorations$markdown$Markdown$toHtmlWith = _Markdown_toHtml;\nvar elm_explorations$markdown$Markdown$toHtml = elm_explorations$markdown$Markdown$toHtmlWith(elm_explorations$markdown$Markdown$defaultOptions);\nvar author$project$Pages$Post$viewComment = F2(\n\tfunction (model, comment) {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$Attributes$class('media'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-left')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + comment.username)\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(comment.url),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('avatar'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(80),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(80),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-body well'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'left')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-heading')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + comment.username)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(comment.username)\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t' on ' + author$project$TimeFormat$formatTime(comment.date)),\n\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\tvar _n0 = comment.edited;\n\t\t\t\t\t\t\t\t\t\t\tif (_n0.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\t\t\tvar date = _n0.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t' • Edited on ' + author$project$TimeFormat$formatTime(date));\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\tvar _n1 = model.user;\n\t\t\t\t\t\t\t\t\t\t\tif (_n1.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\t\t\tvar user = _n1.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn _Utils_eq(user.username, comment.username) ? A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'red'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right social'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '20px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '20px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Delete'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Post$DeleteComment(comment.id)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-trash')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', '#3b5998'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right social'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '20px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '20px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Post$Edit, comment.id, comment.content)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Edit'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-pencil')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])) : elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t_Utils_eq(\n\t\t\t\t\t\t\t\t\tmodel.editing,\n\t\t\t\t\t\t\t\t\telm$core$Maybe$Just(comment.id)) ? A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$textarea,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('edit'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder(comment.content),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'min-height', '100px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'resize', 'vertical'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Post$EditComment),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.edit)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-success btn-sm'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$EditConfirm),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Confirm')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-default btn-sm'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$EditCancel),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Cancel')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t])) : A2(\n\t\t\t\t\t\t\t\t\telm_explorations$markdown$Markdown$toHtml,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('content')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\tcomment.content),\n\t\t\t\t\t\t\t\t\t_Utils_eq(\n\t\t\t\t\t\t\t\t\tmodel.deleting,\n\t\t\t\t\t\t\t\t\telm$core$Maybe$Just(comment.id)) ? A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-danger btn-sm'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$DeleteCommentConfirm),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Confirm')\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-default btn-sm'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$DeleteCommentCancel),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('pull-right')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Cancel')\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t])) : elm$html$Html$text('')\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t]))\n\t\t\t\t]));\n\t});\nvar elm$html$Html$i = _VirtualDom_node('i');\nvar elm$html$Html$Attributes$cols = function (n) {\n\treturn A2(\n\t\t_VirtualDom_attribute,\n\t\t'cols',\n\t\telm$core$String$fromInt(n));\n};\nvar elm$json$Json$Encode$bool = _Json_wrap;\nvar elm$html$Html$Attributes$boolProperty = F2(\n\tfunction (key, bool) {\n\t\treturn A2(\n\t\t\t_VirtualDom_property,\n\t\t\tkey,\n\t\t\telm$json$Json$Encode$bool(bool));\n\t});\nvar elm$html$Html$Attributes$disabled = elm$html$Html$Attributes$boolProperty('disabled');\nvar elm$html$Html$Attributes$rows = function (n) {\n\treturn A2(\n\t\t_VirtualDom_attribute,\n\t\t'rows',\n\t\telm$core$String$fromInt(n));\n};\nvar feathericons$elm_feather$FeatherIcons$arrowDownCircle = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'arrow-down-circle',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('10')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$polyline,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$points('8 12 12 16 16 12')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$line,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$y1('8'),\n\t\t\t\t\telm$svg$Svg$Attributes$x2('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$y2('16')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar feathericons$elm_feather$FeatherIcons$arrowUpCircle = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'arrow-up-circle',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$cy('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$r('10')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$polyline,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$points('16 12 12 8 8 12')\n\t\t\t\t]),\n\t\t\t_List_Nil),\n\t\t\tA2(\n\t\t\telm$svg$Svg$line,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$y1('16'),\n\t\t\t\t\telm$svg$Svg$Attributes$x2('12'),\n\t\t\t\t\telm$svg$Svg$Attributes$y2('8')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Pages$Post$view = function (model) {\n\tvar _n0 = model.status;\n\tswitch (_n0.$) {\n\t\tcase 'Loading':\n\t\t\treturn A2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Loading...')\n\t\t\t\t\t]));\n\t\tcase 'Failure':\n\t\t\treturn A2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Image failed to load...')\n\t\t\t\t\t]));\n\t\tdefault:\n\t\t\tvar image = _n0.a;\n\t\t\treturn A2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-40px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('jumbotron')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h1,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'max-width', '1000px'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(image.title)\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('float-right')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Uploaded by '),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/profile/' + image.author)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(image.author)\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t' on ' + author$project$TimeFormat$formatTime(image.uploaded))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(image.url),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'max-width', '90%')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Stats')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('well'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '60px'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\tvar _n1 = model.stats;\n\t\t\t\t\t\t\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\t\t\t\t\t\t\tcase 'LoadingStats':\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('Loading...');\n\t\t\t\t\t\t\t\t\t\t\tcase 'FailureStats':\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('Failed to load stats');\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tvar stats = _n1.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn author$project$Image$Stats$view(stats);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\tvar _n2 = model.vote;\n\t\t\t\t\t\t\t\t\t\tswitch (_n2.$) {\n\t\t\t\t\t\t\t\t\t\t\tcase 'LoadingInfo':\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('Loading vote');\n\t\t\t\t\t\t\t\t\t\t\tcase 'FailureInfo':\n\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('Failed to load vote');\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tvar info = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'darkgrey'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('social'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n3 = info.vote;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (_n3) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'upvote':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'lime');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'invalid':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Attributes$disabled(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Events$onClick(author$project$Pages$Post$Upvote);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'downvote':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Events$onClick(author$project$Pages$Post$Veto);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 30, feathericons$elm_feather$FeatherIcons$arrowUpCircle)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'darkgrey'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('social'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n4 = info.vote;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (_n4) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'downvote':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'red');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'invalid':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Attributes$disabled(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Events$onClick(author$project$Pages$Post$Downvote);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'upvote':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Events$onClick(author$project$Pages$Post$Veto);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 30, feathericons$elm_feather$FeatherIcons$arrowDownCircle)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'darkgrey'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('social'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n5 = model.user;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n5.$ === 'Nothing') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Attributes$disabled(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$Attributes$class('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n6 = info.favorite;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n6) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, 'color', 'red');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(elm$html$Html$Attributes$style, '', '');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$Favorite)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$withStrokeWidth,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 30, feathericons$elm_feather$FeatherIcons$heart)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Description')\n\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n7 = image.description;\n\t\t\t\t\t\t\t\tif (_n7 === '') {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-style', 'italic')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('No description')\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'max-width', '50%')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-body well')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$i,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '14px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(image.description)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n8 = elm$core$List$isEmpty(image.tags);\n\t\t\t\t\t\t\t\tif (_n8) {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Tags')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-style', 'italic')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('No tags')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Tags')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'max-width', '600px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Tag$view, image.tags))\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n9 = model.user;\n\t\t\t\t\t\tif (_n9.$ === 'Just') {\n\t\t\t\t\t\t\tvar user = _n9.a;\n\t\t\t\t\t\t\treturn _Utils_eq(user.username, image.author) ? A2(\n\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-danger'),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Post$DeletePost, image.id, user.token))\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Remove post')\n\t\t\t\t\t\t\t\t\t])) : elm$html$Html$text('');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}(),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n10 = model.comments;\n\t\t\t\t\t\tswitch (_n10.$) {\n\t\t\t\t\t\t\tcase 'LoadingComments':\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Comments')\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA3(perzanko$elm_loading$Loading$render, perzanko$elm_loading$Loading$Circle, perzanko$elm_loading$Loading$defaultConfig, perzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tcase 'FailureComments':\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Comments')\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Comment section failed to load')\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tvar comments = _n10.a;\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Comments (' + (elm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$length(comments)) + ')'))\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\tvar _n11 = elm$core$List$isEmpty(comments);\n\t\t\t\t\t\t\t\t\t\t\tif (_n11) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-style', 'italic')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('No comments')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Post$viewComment(model),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomments));\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}(),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Leave a comment on this post')\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar _n12 = model.user;\n\t\t\t\t\t\tif (_n12.$ === 'Just') {\n\t\t\t\t\t\t\tvar user = _n12.a;\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$textarea,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$cols(100),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$rows(7),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'resize', 'vertical'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Enter your comment'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Post$Comment),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.comment)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Post$Submit)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Comment')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('You must be '),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_in')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('signed in')\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text(' to comment')\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}(),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('row'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '100px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t]));\n\t}\n};\nvar author$project$Image$showTab = function (post) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('media'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '70%'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('media-left')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + post.id)\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(post.url),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('avatar'),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(100),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(100)\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('media-body well'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'left')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-heading')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\tauthor$project$TimeFormat$formatTime(post.uploaded))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('media-body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/post/' + post.id),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text(post.title)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Profile$LoadMore = {$: 'LoadMore'};\nvar author$project$Pages$Profile$Select = {$: 'Select'};\nvar author$project$Pages$Profile$SwitchFavorites = {$: 'SwitchFavorites'};\nvar author$project$Pages$Profile$SwitchHistory = {$: 'SwitchHistory'};\nvar author$project$Pages$Profile$SwitchInformation = {$: 'SwitchInformation'};\nvar author$project$Pages$Profile$SwitchSecurity = {$: 'SwitchSecurity'};\nvar author$project$Pages$Profile$SwitchSettings = {$: 'SwitchSettings'};\nvar author$project$Pages$Profile$Favorites$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('container'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'min-height', '500px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('My Favorites')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Here is the list of posts you favorited')\n\t\t\t\t\t])),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.status;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA3(perzanko$elm_loading$Loading$render, perzanko$elm_loading$Loading$Circle, perzanko$elm_loading$Loading$defaultConfig, perzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Connection error')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar images = _n0.a;\n\t\t\t\t\t\treturn (!elm$core$List$length(images)) ? A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('You have no favorites')\n\t\t\t\t\t\t\t\t])) : A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Image$showTab, images));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$Profile$History$toPoint = function (act) {\n\treturn {x: act.day, y: act.count};\n};\nvar terezka$line_charts$Internal$Axis$Ticks$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Ticks$custom = terezka$line_charts$Internal$Axis$Ticks$Config;\nvar terezka$line_charts$Internal$Axis$Values$Around = function (a) {\n\treturn {$: 'Around', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Values$around = terezka$line_charts$Internal$Axis$Values$Around;\nvar terezka$line_charts$Internal$Axis$Values$ceilingTo = F2(\n\tfunction (prec, number) {\n\t\treturn prec * elm$core$Basics$ceiling(number / prec);\n\t});\nvar terezka$line_charts$Internal$Axis$Values$getBeginning = F2(\n\tfunction (min, interval) {\n\t\tvar multiple = min / interval;\n\t\treturn _Utils_eq(\n\t\t\tmultiple,\n\t\t\telm$core$Basics$round(multiple)) ? min : A2(terezka$line_charts$Internal$Axis$Values$ceilingTo, interval, min);\n\t});\nvar elm$core$Basics$abs = function (n) {\n\treturn (n < 0) ? (-n) : n;\n};\nvar elm$core$Basics$isInfinite = _Basics_isInfinite;\nvar elm$core$Basics$isNaN = _Basics_isNaN;\nvar elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;\nvar elm$core$String$repeatHelp = F3(\n\tfunction (n, chunk, result) {\n\t\treturn (n <= 0) ? result : A3(\n\t\t\telm$core$String$repeatHelp,\n\t\t\tn >> 1,\n\t\t\t_Utils_ap(chunk, chunk),\n\t\t\t(!(n & 1)) ? result : _Utils_ap(result, chunk));\n\t});\nvar elm$core$String$repeat = F2(\n\tfunction (n, chunk) {\n\t\treturn A3(elm$core$String$repeatHelp, n, chunk, '');\n\t});\nvar elm$core$String$padRight = F3(\n\tfunction (n, _char, string) {\n\t\treturn _Utils_ap(\n\t\t\tstring,\n\t\t\tA2(\n\t\t\t\telm$core$String$repeat,\n\t\t\t\tn - elm$core$String$length(string),\n\t\t\t\telm$core$String$fromChar(_char)));\n\t});\nvar elm$core$String$reverse = _String_reverse;\nvar myrho$elm_round$Round$addSign = F2(\n\tfunction (signed, str) {\n\t\tvar isNotZero = A2(\n\t\t\telm$core$List$any,\n\t\t\tfunction (c) {\n\t\t\t\treturn (!_Utils_eq(\n\t\t\t\t\tc,\n\t\t\t\t\t_Utils_chr('0'))) && (!_Utils_eq(\n\t\t\t\t\tc,\n\t\t\t\t\t_Utils_chr('.')));\n\t\t\t},\n\t\t\telm$core$String$toList(str));\n\t\treturn _Utils_ap(\n\t\t\t(signed && isNotZero) ? '-' : '',\n\t\t\tstr);\n\t});\nvar myrho$elm_round$Round$increaseNum = function (_n0) {\n\tvar head = _n0.a;\n\tvar tail = _n0.b;\n\tif (_Utils_eq(\n\t\thead,\n\t\t_Utils_chr('9'))) {\n\t\tvar _n1 = elm$core$String$uncons(tail);\n\t\tif (_n1.$ === 'Nothing') {\n\t\t\treturn '01';\n\t\t} else {\n\t\t\tvar headtail = _n1.a;\n\t\t\treturn A2(\n\t\t\t\telm$core$String$cons,\n\t\t\t\t_Utils_chr('0'),\n\t\t\t\tmyrho$elm_round$Round$increaseNum(headtail));\n\t\t}\n\t} else {\n\t\tvar c = elm$core$Char$toCode(head);\n\t\treturn ((c >= 48) && (c < 57)) ? A2(\n\t\t\telm$core$String$cons,\n\t\t\telm$core$Char$fromCode(c + 1),\n\t\t\ttail) : '0';\n\t}\n};\nvar myrho$elm_round$Round$splitComma = function (str) {\n\tvar _n0 = A2(elm$core$String$split, '.', str);\n\tif (_n0.b) {\n\t\tif (_n0.b.b) {\n\t\t\tvar before = _n0.a;\n\t\t\tvar _n1 = _n0.b;\n\t\t\tvar after = _n1.a;\n\t\t\treturn _Utils_Tuple2(before, after);\n\t\t} else {\n\t\t\tvar before = _n0.a;\n\t\t\treturn _Utils_Tuple2(before, '0');\n\t\t}\n\t} else {\n\t\treturn _Utils_Tuple2('0', '0');\n\t}\n};\nvar elm$core$Tuple$mapFirst = F2(\n\tfunction (func, _n0) {\n\t\tvar x = _n0.a;\n\t\tvar y = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\tfunc(x),\n\t\t\ty);\n\t});\nvar myrho$elm_round$Round$toDecimal = function (fl) {\n\tvar _n0 = A2(\n\t\telm$core$String$split,\n\t\t'e',\n\t\telm$core$String$fromFloat(\n\t\t\telm$core$Basics$abs(fl)));\n\tif (_n0.b) {\n\t\tif (_n0.b.b) {\n\t\t\tvar num = _n0.a;\n\t\t\tvar _n1 = _n0.b;\n\t\t\tvar exp = _n1.a;\n\t\t\tvar e = A2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t0,\n\t\t\t\telm$core$String$toInt(\n\t\t\t\t\tA2(elm$core$String$startsWith, '+', exp) ? A2(elm$core$String$dropLeft, 1, exp) : exp));\n\t\t\tvar _n2 = myrho$elm_round$Round$splitComma(num);\n\t\t\tvar before = _n2.a;\n\t\t\tvar after = _n2.b;\n\t\t\tvar total = _Utils_ap(before, after);\n\t\t\tvar zeroed = (e < 0) ? A2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t'0',\n\t\t\t\tA2(\n\t\t\t\t\telm$core$Maybe$map,\n\t\t\t\t\tfunction (_n3) {\n\t\t\t\t\t\tvar a = _n3.a;\n\t\t\t\t\t\tvar b = _n3.b;\n\t\t\t\t\t\treturn a + ('.' + b);\n\t\t\t\t\t},\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Maybe$map,\n\t\t\t\t\t\telm$core$Tuple$mapFirst(elm$core$String$fromChar),\n\t\t\t\t\t\telm$core$String$uncons(\n\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$core$String$repeat,\n\t\t\t\t\t\t\t\t\telm$core$Basics$abs(e),\n\t\t\t\t\t\t\t\t\t'0'),\n\t\t\t\t\t\t\t\ttotal))))) : A3(\n\t\t\t\telm$core$String$padRight,\n\t\t\t\te + 1,\n\t\t\t\t_Utils_chr('0'),\n\t\t\t\ttotal);\n\t\t\treturn _Utils_ap(\n\t\t\t\t(fl < 0) ? '-' : '',\n\t\t\t\tzeroed);\n\t\t} else {\n\t\t\tvar num = _n0.a;\n\t\t\treturn _Utils_ap(\n\t\t\t\t(fl < 0) ? '-' : '',\n\t\t\t\tnum);\n\t\t}\n\t} else {\n\t\treturn '';\n\t}\n};\nvar myrho$elm_round$Round$roundFun = F3(\n\tfunction (functor, s, fl) {\n\t\tif (elm$core$Basics$isInfinite(fl) || elm$core$Basics$isNaN(fl)) {\n\t\t\treturn elm$core$String$fromFloat(fl);\n\t\t} else {\n\t\t\tvar signed = fl < 0;\n\t\t\tvar _n0 = myrho$elm_round$Round$splitComma(\n\t\t\t\tmyrho$elm_round$Round$toDecimal(\n\t\t\t\t\telm$core$Basics$abs(fl)));\n\t\t\tvar before = _n0.a;\n\t\t\tvar after = _n0.b;\n\t\t\tvar r = elm$core$String$length(before) + s;\n\t\t\tvar normalized = _Utils_ap(\n\t\t\t\tA2(elm$core$String$repeat, (-r) + 1, '0'),\n\t\t\t\tA3(\n\t\t\t\t\telm$core$String$padRight,\n\t\t\t\t\tr,\n\t\t\t\t\t_Utils_chr('0'),\n\t\t\t\t\t_Utils_ap(before, after)));\n\t\t\tvar totalLen = elm$core$String$length(normalized);\n\t\t\tvar roundDigitIndex = A2(elm$core$Basics$max, 1, r);\n\t\t\tvar increase = A2(\n\t\t\t\tfunctor,\n\t\t\t\tsigned,\n\t\t\t\tA3(elm$core$String$slice, roundDigitIndex, totalLen, normalized));\n\t\t\tvar remains = A3(elm$core$String$slice, 0, roundDigitIndex, normalized);\n\t\t\tvar num = increase ? elm$core$String$reverse(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t\t'1',\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Maybe$map,\n\t\t\t\t\t\tmyrho$elm_round$Round$increaseNum,\n\t\t\t\t\t\telm$core$String$uncons(\n\t\t\t\t\t\t\telm$core$String$reverse(remains))))) : remains;\n\t\t\tvar numLen = elm$core$String$length(num);\n\t\t\tvar numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(\n\t\t\t\tnum,\n\t\t\t\tA2(\n\t\t\t\t\telm$core$String$repeat,\n\t\t\t\t\telm$core$Basics$abs(s),\n\t\t\t\t\t'0')) : ((_Utils_cmp(\n\t\t\t\ts,\n\t\t\t\telm$core$String$length(after)) < 0) ? (A3(elm$core$String$slice, 0, numLen - s, num) + ('.' + A3(elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(\n\t\t\t\tbefore + '.',\n\t\t\t\tA3(\n\t\t\t\t\telm$core$String$padRight,\n\t\t\t\t\ts,\n\t\t\t\t\t_Utils_chr('0'),\n\t\t\t\t\tafter))));\n\t\t\treturn A2(myrho$elm_round$Round$addSign, signed, numZeroed);\n\t\t}\n\t});\nvar myrho$elm_round$Round$round = myrho$elm_round$Round$roundFun(\n\tF2(\n\t\tfunction (signed, str) {\n\t\t\tvar _n0 = elm$core$String$uncons(str);\n\t\t\tif (_n0.$ === 'Nothing') {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tif ('5' === _n0.a.a.valueOf()) {\n\t\t\t\t\tif (_n0.a.b === '') {\n\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\treturn !signed;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _n2 = _n0.a;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar _n3 = _n0.a;\n\t\t\t\t\tvar _int = _n3.a;\n\t\t\t\t\treturn function (i) {\n\t\t\t\t\t\treturn ((i > 53) && signed) || ((i >= 53) && (!signed));\n\t\t\t\t\t}(\n\t\t\t\t\t\telm$core$Char$toCode(_int));\n\t\t\t\t}\n\t\t\t}\n\t\t}));\nvar terezka$line_charts$Internal$Axis$Values$correctFloat = function (prec) {\n\treturn A2(\n\t\telm$core$Basics$composeR,\n\t\tmyrho$elm_round$Round$round(prec),\n\t\tA2(\n\t\t\telm$core$Basics$composeR,\n\t\t\telm$core$String$toFloat,\n\t\t\telm$core$Maybe$withDefault(0)));\n};\nvar terezka$line_charts$Internal$Axis$Values$getMultiples = F3(\n\tfunction (magnitude, allowDecimals, hasTickAmount) {\n\t\tvar defaults = hasTickAmount ? _List_fromArray(\n\t\t\t[1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10]) : _List_fromArray(\n\t\t\t[1, 2, 2.5, 5, 10]);\n\t\treturn allowDecimals ? defaults : ((magnitude === 1) ? A2(\n\t\t\telm$core$List$filter,\n\t\t\tfunction (n) {\n\t\t\t\treturn _Utils_eq(\n\t\t\t\t\telm$core$Basics$round(n),\n\t\t\t\t\tn);\n\t\t\t},\n\t\t\tdefaults) : ((magnitude <= 0.1) ? _List_fromArray(\n\t\t\t[1 / magnitude]) : defaults));\n\t});\nvar terezka$line_charts$Internal$Axis$Values$getPrecision = function (number) {\n\tvar _n0 = A2(\n\t\telm$core$String$split,\n\t\t'e',\n\t\telm$core$String$fromFloat(number));\n\tif ((_n0.b && _n0.b.b) && (!_n0.b.b.b)) {\n\t\tvar before = _n0.a;\n\t\tvar _n1 = _n0.b;\n\t\tvar after = _n1.a;\n\t\treturn elm$core$Basics$abs(\n\t\t\tA2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t0,\n\t\t\t\telm$core$String$toInt(after)));\n\t} else {\n\t\tvar _n2 = A2(\n\t\t\telm$core$String$split,\n\t\t\t'.',\n\t\t\telm$core$String$fromFloat(number));\n\t\tif ((_n2.b && _n2.b.b) && (!_n2.b.b.b)) {\n\t\t\tvar before = _n2.a;\n\t\t\tvar _n3 = _n2.b;\n\t\t\tvar after = _n3.a;\n\t\t\treturn elm$core$String$length(after);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n};\nvar elm$core$Basics$e = _Basics_e;\nvar terezka$line_charts$Internal$Utils$magnitude = function (num) {\n\treturn A2(\n\t\telm$core$Basics$pow,\n\t\t10,\n\t\telm$core$Basics$floor(\n\t\t\tA2(elm$core$Basics$logBase, elm$core$Basics$e, num) / A2(elm$core$Basics$logBase, elm$core$Basics$e, 10)));\n};\nvar terezka$line_charts$Internal$Axis$Values$getInterval = F3(\n\tfunction (intervalRaw, allowDecimals, hasTickAmount) {\n\t\tvar magnitude = terezka$line_charts$Internal$Utils$magnitude(intervalRaw);\n\t\tvar multiples = A3(terezka$line_charts$Internal$Axis$Values$getMultiples, magnitude, allowDecimals, hasTickAmount);\n\t\tvar normalized = intervalRaw / magnitude;\n\t\tvar findMultipleExact = function (multiples_) {\n\t\t\tfindMultipleExact:\n\t\t\twhile (true) {\n\t\t\t\tif (multiples_.b) {\n\t\t\t\t\tvar m1 = multiples_.a;\n\t\t\t\t\tvar rest = multiples_.b;\n\t\t\t\t\tif (_Utils_cmp(m1 * magnitude, intervalRaw) > -1) {\n\t\t\t\t\t\treturn m1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar $temp$multiples_ = rest;\n\t\t\t\t\t\tmultiples_ = $temp$multiples_;\n\t\t\t\t\t\tcontinue findMultipleExact;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tvar findMultiple = function (multiples_) {\n\t\t\tfindMultiple:\n\t\t\twhile (true) {\n\t\t\t\tif (multiples_.b) {\n\t\t\t\t\tif (multiples_.b.b) {\n\t\t\t\t\t\tvar m1 = multiples_.a;\n\t\t\t\t\t\tvar _n2 = multiples_.b;\n\t\t\t\t\t\tvar m2 = _n2.a;\n\t\t\t\t\t\tvar rest = _n2.b;\n\t\t\t\t\t\tif (_Utils_cmp(normalized, (m1 + m2) / 2) < 1) {\n\t\t\t\t\t\t\treturn m1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar $temp$multiples_ = A2(elm$core$List$cons, m2, rest);\n\t\t\t\t\t\t\tmultiples_ = $temp$multiples_;\n\t\t\t\t\t\t\tcontinue findMultiple;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar m1 = multiples_.a;\n\t\t\t\t\t\tvar rest = multiples_.b;\n\t\t\t\t\t\tif (_Utils_cmp(normalized, m1) < 1) {\n\t\t\t\t\t\t\treturn m1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar $temp$multiples_ = rest;\n\t\t\t\t\t\t\tmultiples_ = $temp$multiples_;\n\t\t\t\t\t\t\tcontinue findMultiple;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tvar multiple = hasTickAmount ? findMultipleExact(multiples) : findMultiple(multiples);\n\t\tvar precision = terezka$line_charts$Internal$Axis$Values$getPrecision(magnitude) + terezka$line_charts$Internal$Axis$Values$getPrecision(multiple);\n\t\treturn A2(terezka$line_charts$Internal$Axis$Values$correctFloat, precision, multiple * magnitude);\n\t});\nvar terezka$line_charts$Internal$Axis$Values$positions = F5(\n\tfunction (range, beginning, interval, m, acc) {\n\t\tpositions:\n\t\twhile (true) {\n\t\t\tvar next = A2(\n\t\t\t\tterezka$line_charts$Internal$Axis$Values$correctFloat,\n\t\t\t\tterezka$line_charts$Internal$Axis$Values$getPrecision(interval),\n\t\t\t\tbeginning + (m * interval));\n\t\t\tif (_Utils_cmp(next, range.max) > 0) {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar $temp$range = range,\n\t\t\t\t\t$temp$beginning = beginning,\n\t\t\t\t\t$temp$interval = interval,\n\t\t\t\t\t$temp$m = m + 1,\n\t\t\t\t\t$temp$acc = _Utils_ap(\n\t\t\t\t\tacc,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[next]));\n\t\t\t\trange = $temp$range;\n\t\t\t\tbeginning = $temp$beginning;\n\t\t\t\tinterval = $temp$interval;\n\t\t\t\tm = $temp$m;\n\t\t\t\tacc = $temp$acc;\n\t\t\t\tcontinue positions;\n\t\t\t}\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Axis$Values$values = F4(\n\tfunction (allowDecimals, exact, amountRough, range) {\n\t\tvar intervalRough = (range.max - range.min) / amountRough;\n\t\tvar interval = A3(terezka$line_charts$Internal$Axis$Values$getInterval, intervalRough, allowDecimals, exact);\n\t\tvar intervalSafe = (!interval) ? 1 : interval;\n\t\tvar beginning = A2(terezka$line_charts$Internal$Axis$Values$getBeginning, range.min, intervalSafe);\n\t\tvar amountRoughSafe = (!amountRough) ? 1 : amountRough;\n\t\treturn A5(terezka$line_charts$Internal$Axis$Values$positions, range, beginning, intervalSafe, 0, _List_Nil);\n\t});\nvar terezka$line_charts$Internal$Axis$Values$int = function (amount) {\n\tif (amount.$ === 'Exactly') {\n\t\tvar amount_ = amount.a;\n\t\treturn A2(\n\t\t\telm$core$Basics$composeL,\n\t\t\telm$core$List$map(elm$core$Basics$round),\n\t\t\tA3(terezka$line_charts$Internal$Axis$Values$values, false, true, amount_));\n\t} else {\n\t\tvar amount_ = amount.a;\n\t\treturn A2(\n\t\t\telm$core$Basics$composeL,\n\t\t\telm$core$List$map(elm$core$Basics$round),\n\t\t\tA3(terezka$line_charts$Internal$Axis$Values$values, false, false, amount_));\n\t}\n};\nvar elm$core$Basics$min = F2(\n\tfunction (x, y) {\n\t\treturn (_Utils_cmp(x, y) < 0) ? x : y;\n\t});\nvar terezka$line_charts$Internal$Coordinate$smallestRange = F2(\n\tfunction (data, range_) {\n\t\treturn {\n\t\t\tmax: A2(elm$core$Basics$min, data.max, range_.max),\n\t\t\tmin: A2(elm$core$Basics$max, data.min, range_.min)\n\t\t};\n\t});\nvar terezka$line_charts$Internal$Axis$Ticks$intCustom = F2(\n\tfunction (amount, tick) {\n\t\treturn terezka$line_charts$Internal$Axis$Ticks$custom(\n\t\t\tF2(\n\t\t\t\tfunction (data, range) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\ttick,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Axis$Values$int,\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Axis$Values$around(amount),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Coordinate$smallestRange, data, range)));\n\t\t\t\t}));\n\t});\nvar terezka$line_charts$Internal$Axis$Tick$Negative = {$: 'Negative'};\nvar terezka$line_charts$Internal$Axis$Tick$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Tick$custom = terezka$line_charts$Internal$Axis$Tick$Config;\nvar elm$svg$Svg$text = elm$virtual_dom$VirtualDom$text;\nvar elm$svg$Svg$text_ = elm$svg$Svg$trustedNode('text');\nvar elm$svg$Svg$tspan = elm$svg$Svg$trustedNode('tspan');\nvar elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');\nvar terezka$line_charts$Internal$Svg$label = F2(\n\tfunction (color, string) {\n\t\treturn A2(\n\t\t\telm$svg$Svg$text_,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$fill(color),\n\t\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$svg$Svg$tspan,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$svg$Svg$text(string)\n\t\t\t\t\t\t]))\n\t\t\t\t]));\n\t});\nvar avh4$elm_color$Color$RgbaSpace = F4(\n\tfunction (a, b, c, d) {\n\t\treturn {$: 'RgbaSpace', a: a, b: b, c: c, d: d};\n\t});\nvar avh4$elm_color$Color$scaleFrom255 = function (c) {\n\treturn c / 255;\n};\nvar avh4$elm_color$Color$rgb255 = F3(\n\tfunction (r, g, b) {\n\t\treturn A4(\n\t\t\tavh4$elm_color$Color$RgbaSpace,\n\t\t\tavh4$elm_color$Color$scaleFrom255(r),\n\t\t\tavh4$elm_color$Color$scaleFrom255(g),\n\t\t\tavh4$elm_color$Color$scaleFrom255(b),\n\t\t\t1.0);\n\t});\nvar terezka$line_charts$LineChart$Colors$gray = A3(avh4$elm_color$Color$rgb255, 163, 163, 163);\nvar terezka$line_charts$Internal$Axis$Tick$int = function (n) {\n\treturn terezka$line_charts$Internal$Axis$Tick$custom(\n\t\t{\n\t\t\tcolor: terezka$line_charts$LineChart$Colors$gray,\n\t\t\tdirection: terezka$line_charts$Internal$Axis$Tick$Negative,\n\t\t\tgrid: true,\n\t\t\tlabel: elm$core$Maybe$Just(\n\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Svg$label,\n\t\t\t\t\t'inherit',\n\t\t\t\t\telm$core$String$fromInt(n))),\n\t\t\tlength: 5,\n\t\t\tposition: n,\n\t\t\twidth: 1\n\t\t});\n};\nvar terezka$line_charts$LineChart$Axis$Tick$int = terezka$line_charts$Internal$Axis$Tick$int;\nvar terezka$line_charts$Internal$Axis$Ticks$int = function (amount) {\n\treturn A2(terezka$line_charts$Internal$Axis$Ticks$intCustom, amount, terezka$line_charts$LineChart$Axis$Tick$int);\n};\nvar terezka$line_charts$LineChart$Axis$Ticks$int = terezka$line_charts$Internal$Axis$Ticks$int;\nvar author$project$Pages$Profile$History$ticksConfig = function (ticks) {\n\treturn terezka$line_charts$LineChart$Axis$Ticks$int(ticks);\n};\nvar terezka$line_charts$Internal$Axis$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$custom = terezka$line_charts$Internal$Axis$Config;\nvar terezka$line_charts$LineChart$Axis$custom = terezka$line_charts$Internal$Axis$custom;\nvar terezka$line_charts$Internal$Axis$Line$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Line$custom = terezka$line_charts$Internal$Axis$Line$Config;\nvar terezka$line_charts$Internal$Axis$Line$rangeFrame = function (color) {\n\treturn terezka$line_charts$Internal$Axis$Line$custom(\n\t\tF2(\n\t\t\tfunction (data, range) {\n\t\t\t\tvar smallest = A2(terezka$line_charts$Internal$Coordinate$smallestRange, data, range);\n\t\t\t\treturn {color: color, end: smallest.max, events: _List_Nil, start: smallest.min, width: 1};\n\t\t\t}));\n};\nvar terezka$line_charts$LineChart$Axis$Line$rangeFrame = terezka$line_charts$Internal$Axis$Line$rangeFrame;\nvar terezka$line_charts$Internal$Axis$Range$Padded = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Padded', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Axis$Range$padded = terezka$line_charts$Internal$Axis$Range$Padded;\nvar terezka$line_charts$Internal$Axis$Range$default = A2(terezka$line_charts$Internal$Axis$Range$padded, 0, 0);\nvar terezka$line_charts$LineChart$Axis$Range$default = terezka$line_charts$Internal$Axis$Range$default;\nvar terezka$line_charts$Internal$Axis$Title$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Title$custom = F4(\n\tfunction (position, x, y, title) {\n\t\treturn terezka$line_charts$Internal$Axis$Title$Config(\n\t\t\t{\n\t\t\t\toffset: _Utils_Tuple2(x, y),\n\t\t\t\tposition: position,\n\t\t\t\tview: title\n\t\t\t});\n\t});\nvar terezka$line_charts$Internal$Axis$Title$atPosition = F3(\n\tfunction (position, x, y) {\n\t\treturn A2(\n\t\t\telm$core$Basics$composeL,\n\t\t\tA3(terezka$line_charts$Internal$Axis$Title$custom, position, x, y),\n\t\t\tterezka$line_charts$Internal$Svg$label('inherit'));\n\t});\nvar terezka$line_charts$Internal$Axis$Title$atAxisMax = function () {\n\tvar position = F2(\n\t\tfunction (data, range) {\n\t\t\treturn range.max;\n\t\t});\n\treturn terezka$line_charts$Internal$Axis$Title$atPosition(position);\n}();\nvar terezka$line_charts$Internal$Axis$Title$default = A2(terezka$line_charts$Internal$Axis$Title$atAxisMax, 0, 0);\nvar terezka$line_charts$LineChart$Axis$Title$default = terezka$line_charts$Internal$Axis$Title$default;\nvar author$project$Pages$Profile$History$xConfig = function (tickCount) {\n\treturn terezka$line_charts$LineChart$Axis$custom(\n\t\t{\n\t\t\taxisLine: terezka$line_charts$LineChart$Axis$Line$rangeFrame(terezka$line_charts$LineChart$Colors$gray),\n\t\t\tpixels: 1000,\n\t\t\trange: terezka$line_charts$LineChart$Axis$Range$default,\n\t\t\tticks: author$project$Pages$Profile$History$ticksConfig(tickCount),\n\t\t\ttitle: terezka$line_charts$LineChart$Axis$Title$default('Day'),\n\t\t\tvariable: A2(\n\t\t\t\telm$core$Basics$composeL,\n\t\t\t\telm$core$Maybe$Just,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.x;\n\t\t\t\t})\n\t\t});\n};\nvar terezka$line_charts$Internal$Line$Series = function (a) {\n\treturn {$: 'Series', a: a};\n};\nvar terezka$line_charts$Internal$Line$SeriesConfig = F5(\n\tfunction (color, shape, dashing, label, data) {\n\t\treturn {color: color, dashing: dashing, data: data, label: label, shape: shape};\n\t});\nvar terezka$line_charts$Internal$Line$line = F4(\n\tfunction (color_, shape_, label_, data_) {\n\t\treturn terezka$line_charts$Internal$Line$Series(\n\t\t\tA5(terezka$line_charts$Internal$Line$SeriesConfig, color_, shape_, _List_Nil, label_, data_));\n\t});\nvar terezka$line_charts$LineChart$line = terezka$line_charts$Internal$Line$line;\nvar elm$svg$Svg$defs = elm$svg$Svg$trustedNode('defs');\nvar elm$svg$Svg$g = elm$svg$Svg$trustedNode('g');\nvar terezka$line_charts$Internal$Axis$variable = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.variable;\n};\nvar elm$core$String$concat = function (strings) {\n\treturn A2(elm$core$String$join, '', strings);\n};\nvar avh4$elm_color$Color$toCssString = function (_n0) {\n\tvar r = _n0.a;\n\tvar g = _n0.b;\n\tvar b = _n0.c;\n\tvar a = _n0.d;\n\tvar roundTo = function (x) {\n\t\treturn elm$core$Basics$round(x * 1000) / 1000;\n\t};\n\tvar pct = function (x) {\n\t\treturn elm$core$Basics$round(x * 10000) / 100;\n\t};\n\treturn elm$core$String$concat(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\t'rgba(',\n\t\t\t\telm$core$String$fromFloat(\n\t\t\t\tpct(r)),\n\t\t\t\t'%,',\n\t\t\t\telm$core$String$fromFloat(\n\t\t\t\tpct(g)),\n\t\t\t\t'%,',\n\t\t\t\telm$core$String$fromFloat(\n\t\t\t\tpct(b)),\n\t\t\t\t'%,',\n\t\t\t\telm$core$String$fromFloat(\n\t\t\t\troundTo(a)),\n\t\t\t\t')'\n\t\t\t]));\n};\nvar elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');\nvar terezka$line_charts$Internal$Utils$toChartAreaId = function (id) {\n\treturn 'chart__chart-area--' + id;\n};\nvar terezka$line_charts$Internal$Svg$withinChartArea = function (_n0) {\n\tvar id = _n0.id;\n\treturn elm$svg$Svg$Attributes$clipPath(\n\t\t'url(#' + (terezka$line_charts$Internal$Utils$toChartAreaId(id) + ')'));\n};\nvar terezka$line_charts$Internal$Axis$attributesLine = F2(\n\tfunction (system, _n0) {\n\t\tvar events = _n0.events;\n\t\tvar width = _n0.width;\n\t\tvar color = _n0.color;\n\t\treturn _Utils_ap(\n\t\t\tevents,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\t\telm$core$String$fromFloat(width)),\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(color)),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$withinChartArea(system)\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Path$Line = function (a) {\n\treturn {$: 'Line', a: a};\n};\nvar terezka$line_charts$Internal$Path$Move = function (a) {\n\treturn {$: 'Move', a: a};\n};\nvar terezka$line_charts$Internal$Path$join = function (commands) {\n\treturn A2(elm$core$String$join, ' ', commands);\n};\nvar terezka$line_charts$Internal$Path$bool = function (bool_) {\n\treturn bool_ ? '1' : '0';\n};\nvar terezka$line_charts$Internal$Path$point = function (point_) {\n\treturn elm$core$String$fromFloat(point_.x) + (' ' + elm$core$String$fromFloat(point_.y));\n};\nvar terezka$line_charts$Internal$Path$points = function (points_) {\n\treturn A2(\n\t\telm$core$String$join,\n\t\t',',\n\t\tA2(elm$core$List$map, terezka$line_charts$Internal$Path$point, points_));\n};\nvar terezka$line_charts$Internal$Path$toString = function (command) {\n\tswitch (command.$) {\n\t\tcase 'Close':\n\t\t\treturn 'Z';\n\t\tcase 'Move':\n\t\t\tvar p = command.a;\n\t\t\treturn 'M' + terezka$line_charts$Internal$Path$point(p);\n\t\tcase 'Line':\n\t\t\tvar p = command.a;\n\t\t\treturn 'L' + terezka$line_charts$Internal$Path$point(p);\n\t\tcase 'Horizontal':\n\t\t\tvar x = command.a;\n\t\t\treturn 'H' + elm$core$String$fromFloat(x);\n\t\tcase 'Vertical':\n\t\t\tvar y = command.a;\n\t\t\treturn 'V' + elm$core$String$fromFloat(y);\n\t\tcase 'CubicBeziers':\n\t\t\tvar c1 = command.a;\n\t\t\tvar c2 = command.b;\n\t\t\tvar p = command.c;\n\t\t\treturn 'C' + terezka$line_charts$Internal$Path$points(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[c1, c2, p]));\n\t\tcase 'CubicBeziersShort':\n\t\t\tvar c1 = command.a;\n\t\t\tvar p = command.b;\n\t\t\treturn 'Q' + terezka$line_charts$Internal$Path$points(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[c1, p]));\n\t\tcase 'QuadraticBeziers':\n\t\t\tvar c1 = command.a;\n\t\t\tvar p = command.b;\n\t\t\treturn 'Q' + terezka$line_charts$Internal$Path$points(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[c1, p]));\n\t\tcase 'QuadraticBeziersShort':\n\t\t\tvar p = command.a;\n\t\t\treturn 'T' + terezka$line_charts$Internal$Path$point(p);\n\t\tdefault:\n\t\t\tvar rx = command.a;\n\t\t\tvar ry = command.b;\n\t\t\tvar xAxisRotation = command.c;\n\t\t\tvar largeArcFlag = command.d;\n\t\t\tvar sweepFlag = command.e;\n\t\t\tvar p = command.f;\n\t\t\treturn 'A' + terezka$line_charts$Internal$Path$join(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$core$String$fromFloat(rx),\n\t\t\t\t\t\telm$core$String$fromFloat(ry),\n\t\t\t\t\t\telm$core$String$fromInt(xAxisRotation),\n\t\t\t\t\t\tterezka$line_charts$Internal$Path$bool(largeArcFlag),\n\t\t\t\t\t\tterezka$line_charts$Internal$Path$bool(sweepFlag),\n\t\t\t\t\t\tterezka$line_charts$Internal$Path$point(p)\n\t\t\t\t\t]));\n\t}\n};\nvar terezka$line_charts$Internal$Path$Arc = F6(\n\tfunction (a, b, c, d, e, f) {\n\t\treturn {$: 'Arc', a: a, b: b, c: c, d: d, e: e, f: f};\n\t});\nvar terezka$line_charts$Internal$Path$Close = {$: 'Close'};\nvar terezka$line_charts$Internal$Path$CubicBeziers = F3(\n\tfunction (a, b, c) {\n\t\treturn {$: 'CubicBeziers', a: a, b: b, c: c};\n\t});\nvar terezka$line_charts$Internal$Path$CubicBeziersShort = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'CubicBeziersShort', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Path$Horizontal = function (a) {\n\treturn {$: 'Horizontal', a: a};\n};\nvar terezka$line_charts$Internal$Path$QuadraticBeziers = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'QuadraticBeziers', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Path$QuadraticBeziersShort = function (a) {\n\treturn {$: 'QuadraticBeziersShort', a: a};\n};\nvar terezka$line_charts$Internal$Path$Vertical = function (a) {\n\treturn {$: 'Vertical', a: a};\n};\nvar terezka$line_charts$Internal$Coordinate$lengthX = function (system) {\n\treturn A2(elm$core$Basics$max, 1, (system.frame.size.width - system.frame.margin.left) - system.frame.margin.right);\n};\nvar terezka$line_charts$Internal$Coordinate$reachX = function (system) {\n\tvar diff = system.x.max - system.x.min;\n\treturn (diff > 0) ? diff : 1;\n};\nvar terezka$line_charts$LineChart$Coordinate$scaleSvgX = F2(\n\tfunction (system, value) {\n\t\treturn (value * terezka$line_charts$Internal$Coordinate$lengthX(system)) / terezka$line_charts$Internal$Coordinate$reachX(system);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toSvgX = F2(\n\tfunction (system, value) {\n\t\treturn A2(terezka$line_charts$LineChart$Coordinate$scaleSvgX, system, value - system.x.min) + system.frame.margin.left;\n\t});\nvar terezka$line_charts$Internal$Coordinate$lengthY = function (system) {\n\treturn A2(elm$core$Basics$max, 1, (system.frame.size.height - system.frame.margin.bottom) - system.frame.margin.top);\n};\nvar terezka$line_charts$Internal$Coordinate$reachY = function (system) {\n\tvar diff = system.y.max - system.y.min;\n\treturn (diff > 0) ? diff : 1;\n};\nvar terezka$line_charts$LineChart$Coordinate$scaleSvgY = F2(\n\tfunction (system, value) {\n\t\treturn (value * terezka$line_charts$Internal$Coordinate$lengthY(system)) / terezka$line_charts$Internal$Coordinate$reachY(system);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toSvgY = F2(\n\tfunction (system, value) {\n\t\treturn A2(terezka$line_charts$LineChart$Coordinate$scaleSvgY, system, system.y.max - value) + system.frame.margin.top;\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toSvg = F2(\n\tfunction (system, point) {\n\t\treturn {\n\t\t\tx: A2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, point.x),\n\t\t\ty: A2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, point.y)\n\t\t};\n\t});\nvar terezka$line_charts$Internal$Path$translate = F2(\n\tfunction (system, command) {\n\t\tswitch (command.$) {\n\t\t\tcase 'Move':\n\t\t\t\tvar p = command.a;\n\t\t\t\treturn terezka$line_charts$Internal$Path$Move(\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'Line':\n\t\t\t\tvar p = command.a;\n\t\t\t\treturn terezka$line_charts$Internal$Path$Line(\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'Horizontal':\n\t\t\t\tvar x = command.a;\n\t\t\t\treturn terezka$line_charts$Internal$Path$Horizontal(\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x));\n\t\t\tcase 'Vertical':\n\t\t\t\tvar y = command.a;\n\t\t\t\treturn terezka$line_charts$Internal$Path$Vertical(\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y));\n\t\t\tcase 'CubicBeziers':\n\t\t\t\tvar c1 = command.a;\n\t\t\t\tvar c2 = command.b;\n\t\t\t\tvar p = command.c;\n\t\t\t\treturn A3(\n\t\t\t\t\tterezka$line_charts$Internal$Path$CubicBeziers,\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c1),\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c2),\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'CubicBeziersShort':\n\t\t\t\tvar c1 = command.a;\n\t\t\t\tvar p = command.b;\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$Internal$Path$CubicBeziersShort,\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c1),\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'QuadraticBeziers':\n\t\t\t\tvar c1 = command.a;\n\t\t\t\tvar p = command.b;\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$Internal$Path$QuadraticBeziers,\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, c1),\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'QuadraticBeziersShort':\n\t\t\t\tvar p = command.a;\n\t\t\t\treturn terezka$line_charts$Internal$Path$QuadraticBeziersShort(\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tcase 'Arc':\n\t\t\t\tvar rx = command.a;\n\t\t\t\tvar ry = command.b;\n\t\t\t\tvar xAxisRotation = command.c;\n\t\t\t\tvar largeArcFlag = command.d;\n\t\t\t\tvar sweepFlag = command.e;\n\t\t\t\tvar p = command.f;\n\t\t\t\treturn A6(\n\t\t\t\t\tterezka$line_charts$Internal$Path$Arc,\n\t\t\t\t\trx,\n\t\t\t\t\try,\n\t\t\t\t\txAxisRotation,\n\t\t\t\t\tlargeArcFlag,\n\t\t\t\t\tsweepFlag,\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvg, system, p));\n\t\t\tdefault:\n\t\t\t\treturn terezka$line_charts$Internal$Path$Close;\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Path$description = F2(\n\tfunction (system, commands) {\n\t\treturn terezka$line_charts$Internal$Path$join(\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tA2(\n\t\t\t\t\telm$core$Basics$composeR,\n\t\t\t\t\tterezka$line_charts$Internal$Path$translate(system),\n\t\t\t\t\tterezka$line_charts$Internal$Path$toString),\n\t\t\t\tcommands));\n\t});\nvar terezka$line_charts$Internal$Path$viewPath = function (attributes) {\n\treturn A2(elm$svg$Svg$path, attributes, _List_Nil);\n};\nvar terezka$line_charts$Internal$Path$view = F3(\n\tfunction (system, attributes, commands) {\n\t\treturn terezka$line_charts$Internal$Path$viewPath(\n\t\t\t_Utils_ap(\n\t\t\t\tattributes,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$d(\n\t\t\t\t\t\tA2(terezka$line_charts$Internal$Path$description, system, commands))\n\t\t\t\t\t])));\n\t});\nvar terezka$line_charts$Internal$Utils$concat = F3(\n\tfunction (first, second, third) {\n\t\treturn _Utils_ap(\n\t\t\tfirst,\n\t\t\t_Utils_ap(second, third));\n\t});\nvar terezka$line_charts$Internal$Svg$horizontal = F5(\n\tfunction (system, userAttributes, y, x1, x2) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),\n\t\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;')\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_Nil);\n\t\treturn A3(\n\t\t\tterezka$line_charts$Internal$Path$view,\n\t\t\tsystem,\n\t\t\tattributes,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tterezka$line_charts$Internal$Path$Move(\n\t\t\t\t\t{x: x1, y: y}),\n\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t{x: x1, y: y}),\n\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t{x: x2, y: y})\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Axis$viewHorizontalAxisLine = F3(\n\tfunction (system, axisPosition, config) {\n\t\treturn A5(\n\t\t\tterezka$line_charts$Internal$Svg$horizontal,\n\t\t\tsystem,\n\t\t\tA2(terezka$line_charts$Internal$Axis$attributesLine, system, config),\n\t\t\taxisPosition,\n\t\t\tconfig.start,\n\t\t\tconfig.end);\n\t});\nvar terezka$line_charts$Internal$Axis$attributesTick = function (_n0) {\n\tvar width = _n0.width;\n\tvar color = _n0.color;\n\treturn _List_fromArray(\n\t\t[\n\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\telm$core$String$fromFloat(width)),\n\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t]);\n};\nvar terezka$line_charts$Internal$Axis$Tick$isPositive = function (direction) {\n\tif (direction.$ === 'Positive') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\nvar terezka$line_charts$Internal$Axis$lengthOfTick = function (_n0) {\n\tvar length = _n0.length;\n\tvar direction = _n0.direction;\n\treturn terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? (-length) : length;\n};\nvar terezka$line_charts$Internal$Svg$Middle = {$: 'Middle'};\nvar terezka$line_charts$Internal$Svg$anchorStyle = function (anchor) {\n\tvar anchorString = function () {\n\t\tswitch (anchor.$) {\n\t\t\tcase 'Start':\n\t\t\t\treturn 'start';\n\t\t\tcase 'Middle':\n\t\t\t\treturn 'middle';\n\t\t\tdefault:\n\t\t\t\treturn 'end';\n\t\t}\n\t}();\n\treturn elm$svg$Svg$Attributes$style('text-anchor: ' + (anchorString + ';'));\n};\nvar terezka$line_charts$Internal$Svg$Transfrom = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Transfrom', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Svg$move = F3(\n\tfunction (system, x, y) {\n\t\treturn A2(\n\t\t\tterezka$line_charts$Internal$Svg$Transfrom,\n\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x),\n\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y));\n\t});\nvar terezka$line_charts$Internal$Svg$offset = F2(\n\tfunction (x, y) {\n\t\treturn A2(terezka$line_charts$Internal$Svg$Transfrom, x, y);\n\t});\nvar elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');\nvar terezka$line_charts$Internal$Svg$addPosition = F2(\n\tfunction (_n0, _n1) {\n\t\tvar x = _n0.a;\n\t\tvar y = _n0.b;\n\t\tvar xf = _n1.a;\n\t\tvar yf = _n1.b;\n\t\treturn A2(terezka$line_charts$Internal$Svg$Transfrom, xf + x, yf + y);\n\t});\nvar terezka$line_charts$Internal$Svg$toPosition = A2(\n\telm$core$List$foldr,\n\tterezka$line_charts$Internal$Svg$addPosition,\n\tA2(terezka$line_charts$Internal$Svg$Transfrom, 0, 0));\nvar terezka$line_charts$Internal$Svg$transform = function (translations) {\n\tvar _n0 = terezka$line_charts$Internal$Svg$toPosition(translations);\n\tvar x = _n0.a;\n\tvar y = _n0.b;\n\treturn elm$svg$Svg$Attributes$transform(\n\t\t'translate(' + (elm$core$String$fromFloat(x) + (', ' + (elm$core$String$fromFloat(y) + ')'))));\n};\nvar terezka$line_charts$Internal$Axis$viewHorizontalLabel = F4(\n\tfunction (system, _n0, position, view) {\n\t\tvar direction = _n0.direction;\n\t\tvar length = _n0.length;\n\t\tvar yOffset = terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? ((-5) - length) : (15 + length);\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, 0, yOffset)\n\t\t\t\t\t\t])),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$anchorStyle(terezka$line_charts$Internal$Svg$Middle)\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[view]));\n\t});\nvar terezka$line_charts$Internal$Svg$xTick = F5(\n\tfunction (system, height, userAttributes, y, x) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray))\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x))),\n\t\t\t\t\telm$svg$Svg$Attributes$x2(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x))),\n\t\t\t\t\telm$svg$Svg$Attributes$y1(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y))),\n\t\t\t\t\telm$svg$Svg$Attributes$y2(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y) + height))\n\t\t\t\t]));\n\t\treturn A2(elm$svg$Svg$line, attributes, _List_Nil);\n\t});\nvar terezka$line_charts$Internal$Utils$viewMaybe = F2(\n\tfunction (a, view) {\n\t\treturn A2(\n\t\t\telm$core$Maybe$withDefault,\n\t\t\telm$svg$Svg$text(''),\n\t\t\tA2(elm$core$Maybe$map, view, a));\n\t});\nvar terezka$line_charts$Internal$Axis$viewHorizontalTick = F3(\n\tfunction (system, point, tick) {\n\t\tvar x = point.x;\n\t\tvar y = point.y;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__tick')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA5(\n\t\t\t\t\tterezka$line_charts$Internal$Svg$xTick,\n\t\t\t\t\tsystem,\n\t\t\t\t\tterezka$line_charts$Internal$Axis$lengthOfTick(tick),\n\t\t\t\t\tterezka$line_charts$Internal$Axis$attributesTick(tick),\n\t\t\t\t\ty,\n\t\t\t\t\tx),\n\t\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Utils$viewMaybe,\n\t\t\t\t\ttick.label,\n\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewHorizontalLabel, system, tick, point))\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Svg$Start = {$: 'Start'};\nvar terezka$line_charts$Internal$Axis$viewHorizontalTitle = F3(\n\tfunction (system, at, _n0) {\n\t\tvar title = _n0.title;\n\t\tvar position = at(\n\t\t\tA2(title.position, system.xData, system.x));\n\t\tvar _n1 = title.offset;\n\t\tvar xOffset = _n1.a;\n\t\tvar yOffset = _n1.b;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__title'),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, xOffset + 15, yOffset + 5)\n\t\t\t\t\t\t])),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$anchorStyle(terezka$line_charts$Internal$Svg$Start)\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[title.view]));\n\t});\nvar terezka$line_charts$Internal$Axis$Intersection$getY = function (_n0) {\n\tvar func = _n0.a;\n\treturn A2(\n\t\telm$core$Basics$composeL,\n\t\tfunction ($) {\n\t\t\treturn $.y;\n\t\t},\n\t\tfunc);\n};\nvar terezka$line_charts$Internal$Axis$Line$config = function (_n0) {\n\tvar config_ = _n0.a;\n\treturn config_;\n};\nvar terezka$line_charts$Internal$Axis$Tick$properties = function (_n0) {\n\tvar properties_ = _n0.a;\n\treturn properties_;\n};\nvar terezka$line_charts$Internal$Axis$Ticks$ticks = F3(\n\tfunction (dataRange, range, _n0) {\n\t\tvar values = _n0.a;\n\t\treturn A2(\n\t\t\telm$core$List$map,\n\t\t\tterezka$line_charts$Internal$Axis$Tick$properties,\n\t\t\tA2(values, dataRange, range));\n\t});\nvar terezka$line_charts$Internal$Axis$Title$config = function (_n0) {\n\tvar title = _n0.a;\n\treturn title;\n};\nvar terezka$line_charts$Internal$Axis$viewHorizontal = F3(\n\tfunction (system, intersection, _n0) {\n\t\tvar config = _n0.a;\n\t\tvar viewConfig = {\n\t\t\tintersection: A2(terezka$line_charts$Internal$Axis$Intersection$getY, intersection, system),\n\t\t\tline: A3(terezka$line_charts$Internal$Axis$Line$config, config.axisLine, system.xData, system.x),\n\t\t\tticks: A3(terezka$line_charts$Internal$Axis$Ticks$ticks, system.xData, system.x, config.ticks),\n\t\t\ttitle: terezka$line_charts$Internal$Axis$Title$config(config.title)\n\t\t};\n\t\tvar viewAxisLine = A2(terezka$line_charts$Internal$Axis$viewHorizontalAxisLine, system, viewConfig.intersection);\n\t\tvar at = function (x) {\n\t\t\treturn {x: x, y: viewConfig.intersection};\n\t\t};\n\t\tvar viewTick = function (tick) {\n\t\t\treturn A3(\n\t\t\t\tterezka$line_charts$Internal$Axis$viewHorizontalTick,\n\t\t\t\tsystem,\n\t\t\t\tat(tick.position),\n\t\t\t\ttick);\n\t\t};\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__axis--horizontal')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewHorizontalTitle, system, at, viewConfig),\n\t\t\t\t\tviewAxisLine(viewConfig.line),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$svg$Svg$g,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__ticks')\n\t\t\t\t\t\t]),\n\t\t\t\t\tA2(elm$core$List$map, viewTick, viewConfig.ticks))\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Svg$vertical = F5(\n\tfunction (system, userAttributes, x, y1, y2) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),\n\t\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;')\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_Nil);\n\t\treturn A3(\n\t\t\tterezka$line_charts$Internal$Path$view,\n\t\t\tsystem,\n\t\t\tattributes,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tterezka$line_charts$Internal$Path$Move(\n\t\t\t\t\t{x: x, y: y1}),\n\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t{x: x, y: y1}),\n\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t{x: x, y: y2})\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Axis$viewVerticalAxisLine = F3(\n\tfunction (system, axisPosition, config) {\n\t\treturn A5(\n\t\t\tterezka$line_charts$Internal$Svg$vertical,\n\t\t\tsystem,\n\t\t\tA2(terezka$line_charts$Internal$Axis$attributesLine, system, config),\n\t\t\taxisPosition,\n\t\t\tconfig.start,\n\t\t\tconfig.end);\n\t});\nvar terezka$line_charts$Internal$Svg$End = {$: 'End'};\nvar terezka$line_charts$Internal$Axis$viewVerticalLabel = F4(\n\tfunction (system, _n0, position, view) {\n\t\tvar direction = _n0.direction;\n\t\tvar length = _n0.length;\n\t\tvar xOffset = terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? (5 + length) : ((-5) - length);\n\t\tvar anchor = terezka$line_charts$Internal$Axis$Tick$isPositive(direction) ? terezka$line_charts$Internal$Svg$Start : terezka$line_charts$Internal$Svg$End;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, xOffset, 5)\n\t\t\t\t\t\t])),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$anchorStyle(anchor)\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[view]));\n\t});\nvar terezka$line_charts$Internal$Svg$yTick = F5(\n\tfunction (system, width, userAttributes, x, y) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__tick'),\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray))\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$x1(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x))),\n\t\t\t\t\telm$svg$Svg$Attributes$x2(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgX, system, x) - width)),\n\t\t\t\t\telm$svg$Svg$Attributes$y1(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y))),\n\t\t\t\t\telm$svg$Svg$Attributes$y2(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$toSvgY, system, y)))\n\t\t\t\t]));\n\t\treturn A2(elm$svg$Svg$line, attributes, _List_Nil);\n\t});\nvar terezka$line_charts$Internal$Axis$viewVerticalTick = F3(\n\tfunction (system, point, tick) {\n\t\tvar x = point.x;\n\t\tvar y = point.y;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__tick')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA5(\n\t\t\t\t\tterezka$line_charts$Internal$Svg$yTick,\n\t\t\t\t\tsystem,\n\t\t\t\t\tterezka$line_charts$Internal$Axis$lengthOfTick(tick),\n\t\t\t\t\tterezka$line_charts$Internal$Axis$attributesTick(tick),\n\t\t\t\t\tx,\n\t\t\t\t\ty),\n\t\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Utils$viewMaybe,\n\t\t\t\t\ttick.label,\n\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewVerticalLabel, system, tick, point))\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Axis$viewVerticalTitle = F3(\n\tfunction (system, at, _n0) {\n\t\tvar title = _n0.title;\n\t\tvar position = at(\n\t\t\tA2(title.position, system.yData, system.y));\n\t\tvar _n1 = title.offset;\n\t\tvar xOffset = _n1.a;\n\t\tvar yOffset = _n1.b;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__title'),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3(terezka$line_charts$Internal$Svg$move, system, position.x, position.y),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, xOffset + 2, yOffset - 10)\n\t\t\t\t\t\t])),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$anchorStyle(terezka$line_charts$Internal$Svg$End)\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[title.view]));\n\t});\nvar terezka$line_charts$Internal$Axis$Intersection$getX = function (_n0) {\n\tvar func = _n0.a;\n\treturn A2(\n\t\telm$core$Basics$composeL,\n\t\tfunction ($) {\n\t\t\treturn $.x;\n\t\t},\n\t\tfunc);\n};\nvar terezka$line_charts$Internal$Axis$viewVertical = F3(\n\tfunction (system, intersection, _n0) {\n\t\tvar config = _n0.a;\n\t\tvar viewConfig = {\n\t\t\tintersection: A2(terezka$line_charts$Internal$Axis$Intersection$getX, intersection, system),\n\t\t\tline: A3(terezka$line_charts$Internal$Axis$Line$config, config.axisLine, system.yData, system.y),\n\t\t\tticks: A3(terezka$line_charts$Internal$Axis$Ticks$ticks, system.yData, system.y, config.ticks),\n\t\t\ttitle: terezka$line_charts$Internal$Axis$Title$config(config.title)\n\t\t};\n\t\tvar viewAxisLine = A2(terezka$line_charts$Internal$Axis$viewVerticalAxisLine, system, viewConfig.intersection);\n\t\tvar at = function (y) {\n\t\t\treturn {x: viewConfig.intersection, y: y};\n\t\t};\n\t\tvar viewTick = function (tick) {\n\t\t\treturn A3(\n\t\t\t\tterezka$line_charts$Internal$Axis$viewVerticalTick,\n\t\t\t\tsystem,\n\t\t\t\tat(tick.position),\n\t\t\t\ttick);\n\t\t};\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__axis--vertical')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewVerticalTitle, system, at, viewConfig),\n\t\t\t\t\tviewAxisLine(viewConfig.line),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$svg$Svg$g,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__ticks')\n\t\t\t\t\t\t]),\n\t\t\t\t\tA2(elm$core$List$map, viewTick, viewConfig.ticks))\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Container$properties = F2(\n\tfunction (f, _n0) {\n\t\tvar properties_ = _n0.a;\n\t\treturn f(properties_);\n\t});\nvar terezka$line_charts$Internal$Events$toContainerAttributes = F3(\n\tfunction (data, system, _n0) {\n\t\tvar events = _n0.a;\n\t\tvar order = function (_n1) {\n\t\t\tvar outside = _n1.a;\n\t\t\tvar event = _n1.b;\n\t\t\treturn outside ? elm$core$Maybe$Just(\n\t\t\t\tA2(event, data, system)) : elm$core$Maybe$Nothing;\n\t\t};\n\t\treturn A2(elm$core$List$filterMap, order, events);\n\t});\nvar terezka$line_charts$Internal$Axis$ticks = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.ticks;\n};\nvar terezka$line_charts$Internal$Svg$gridDot = F3(\n\tfunction (radius, color, point) {\n\t\treturn A2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$cx(\n\t\t\t\t\telm$core$String$fromFloat(point.x)),\n\t\t\t\t\telm$svg$Svg$Attributes$cy(\n\t\t\t\t\telm$core$String$fromFloat(point.y)),\n\t\t\t\t\telm$svg$Svg$Attributes$r(\n\t\t\t\t\telm$core$String$fromFloat(radius)),\n\t\t\t\t\telm$svg$Svg$Attributes$fill(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t\t\t]),\n\t\t\t_List_Nil);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$Point = F2(\n\tfunction (x, y) {\n\t\treturn {x: x, y: y};\n\t});\nvar terezka$line_charts$Internal$Grid$viewDots = F5(\n\tfunction (system, verticals, horizontals, radius, color) {\n\t\tvar dot = F2(\n\t\t\tfunction (x, y) {\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$LineChart$Coordinate$toSvg,\n\t\t\t\t\tsystem,\n\t\t\t\t\tA2(terezka$line_charts$LineChart$Coordinate$Point, x, y));\n\t\t\t});\n\t\tvar dots_ = function (g) {\n\t\t\treturn A2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tdot(g),\n\t\t\t\thorizontals);\n\t\t};\n\t\tvar alldots = A2(elm$core$List$concatMap, dots_, verticals);\n\t\treturn A2(\n\t\t\telm$core$List$map,\n\t\t\tA2(terezka$line_charts$Internal$Svg$gridDot, radius, color),\n\t\t\talldots);\n\t});\nvar terezka$line_charts$Internal$Svg$horizontalGrid = F3(\n\tfunction (system, userAttributes, y) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),\n\t\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;')\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_Nil);\n\t\treturn A5(terezka$line_charts$Internal$Svg$horizontal, system, attributes, y, system.x.min, system.x.max);\n\t});\nvar terezka$line_charts$Internal$Svg$verticalGrid = F3(\n\tfunction (system, userAttributes, x) {\n\t\tvar attributes = A3(\n\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\tavh4$elm_color$Color$toCssString(terezka$line_charts$LineChart$Colors$gray)),\n\t\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;')\n\t\t\t\t]),\n\t\t\tuserAttributes,\n\t\t\t_List_Nil);\n\t\treturn A5(terezka$line_charts$Internal$Svg$vertical, system, attributes, x, system.y.min, system.y.max);\n\t});\nvar terezka$line_charts$Internal$Grid$viewLines = F5(\n\tfunction (system, verticals, horizontals, width, color) {\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\telm$core$String$fromFloat(width)),\n\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t\t]);\n\t\treturn _Utils_ap(\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tA2(terezka$line_charts$Internal$Svg$horizontalGrid, system, attributes),\n\t\t\t\thorizontals),\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tA2(terezka$line_charts$Internal$Svg$verticalGrid, system, attributes),\n\t\t\t\tverticals));\n\t});\nvar terezka$line_charts$Internal$Grid$view = F4(\n\tfunction (system, xAxis, yAxis, grid) {\n\t\tvar hasGrid = function (tick) {\n\t\t\treturn tick.grid ? elm$core$Maybe$Just(tick.position) : elm$core$Maybe$Nothing;\n\t\t};\n\t\tvar horizontals = A2(\n\t\t\telm$core$List$filterMap,\n\t\t\thasGrid,\n\t\t\tA3(\n\t\t\t\tterezka$line_charts$Internal$Axis$Ticks$ticks,\n\t\t\t\tsystem.yData,\n\t\t\t\tsystem.y,\n\t\t\t\tterezka$line_charts$Internal$Axis$ticks(yAxis)));\n\t\tvar verticals = A2(\n\t\t\telm$core$List$filterMap,\n\t\t\thasGrid,\n\t\t\tA3(\n\t\t\t\tterezka$line_charts$Internal$Axis$Ticks$ticks,\n\t\t\t\tsystem.xData,\n\t\t\t\tsystem.x,\n\t\t\t\tterezka$line_charts$Internal$Axis$ticks(xAxis)));\n\t\tif (grid.$ === 'Dots') {\n\t\t\tvar radius = grid.a;\n\t\t\tvar color = grid.b;\n\t\t\treturn A5(terezka$line_charts$Internal$Grid$viewDots, system, verticals, horizontals, radius, color);\n\t\t} else {\n\t\t\tvar width = grid.a;\n\t\t\tvar color = grid.b;\n\t\t\treturn A5(terezka$line_charts$Internal$Grid$viewLines, system, verticals, horizontals, width, color);\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Junk$addBelow = F2(\n\tfunction (below, layers) {\n\t\treturn _Utils_update(\n\t\t\tlayers,\n\t\t\t{\n\t\t\t\tbelow: _Utils_ap(below, layers.below)\n\t\t\t});\n\t});\nvar terezka$line_charts$Internal$Junk$getLayers = F5(\n\tfunction (series, toX, toY, system, _n0) {\n\t\tvar toLayers = _n0.a;\n\t\treturn A4(toLayers, series, toX, toY, system);\n\t});\nvar terezka$line_charts$Internal$Line$label = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.label;\n};\nvar terezka$line_charts$Internal$Legends$viewFree = F5(\n\tfunction (system, placement, viewLabel, line, data) {\n\t\tvar _n0 = function () {\n\t\t\tif (placement.$ === 'Beginning') {\n\t\t\t\treturn _Utils_Tuple3(data, terezka$line_charts$Internal$Svg$End, -10);\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple3(\n\t\t\t\t\telm$core$List$reverse(data),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$Start,\n\t\t\t\t\t10);\n\t\t\t}\n\t\t}();\n\t\tvar orderedPoints = _n0.a;\n\t\tvar anchor = _n0.b;\n\t\tvar xOffset = _n0.c;\n\t\tvar transform = function (_n3) {\n\t\t\tvar x = _n3.x;\n\t\t\tvar y = _n3.y;\n\t\t\treturn terezka$line_charts$Internal$Svg$transform(\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA3(terezka$line_charts$Internal$Svg$move, system, x, y),\n\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, xOffset, 3)\n\t\t\t\t\t]));\n\t\t};\n\t\tvar viewLegend = function (_n2) {\n\t\t\tvar point = _n2.point;\n\t\t\treturn A2(\n\t\t\t\telm$svg$Svg$g,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\ttransform(point),\n\t\t\t\t\t\tterezka$line_charts$Internal$Svg$anchorStyle(anchor)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tviewLabel(\n\t\t\t\t\t\tterezka$line_charts$Internal$Line$label(line))\n\t\t\t\t\t]));\n\t\t};\n\t\treturn A2(\n\t\t\tterezka$line_charts$Internal$Utils$viewMaybe,\n\t\t\telm$core$List$head(orderedPoints),\n\t\t\tviewLegend);\n\t});\nvar terezka$line_charts$Internal$Legends$viewFrees = F3(\n\tfunction (_n0, placement, view_) {\n\t\tvar system = _n0.system;\n\t\tvar lines = _n0.lines;\n\t\tvar data = _n0.data;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__legends')\n\t\t\t\t]),\n\t\t\tA3(\n\t\t\t\telm$core$List$map2,\n\t\t\t\tA3(terezka$line_charts$Internal$Legends$viewFree, system, placement, view_),\n\t\t\t\tlines,\n\t\t\t\tdata));\n\t});\nvar terezka$line_charts$Internal$Data$Point = F2(\n\tfunction (x, y) {\n\t\treturn {x: x, y: y};\n\t});\nvar elm$core$Basics$pi = _Basics_pi;\nvar elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');\nvar terezka$line_charts$Internal$Dots$varietyAttributes = F2(\n\tfunction (color, variety) {\n\t\tswitch (variety.$) {\n\t\t\tcase 'Empty':\n\t\t\t\tvar width = variety.a;\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\t\tavh4$elm_color$Color$toCssString(color)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\t\t\telm$core$String$fromInt(width)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$fill('white')\n\t\t\t\t\t]);\n\t\t\tcase 'Aura':\n\t\t\t\tvar width = variety.a;\n\t\t\t\tvar opacity = variety.b;\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\t\t\tavh4$elm_color$Color$toCssString(color)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\t\t\telm$core$String$fromInt(width)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$strokeOpacity(\n\t\t\t\t\t\telm$core$String$fromFloat(opacity)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$fill(\n\t\t\t\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t\t\t\t]);\n\t\t\tcase 'Disconnected':\n\t\t\t\tvar width = variety.a;\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$stroke('white'),\n\t\t\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\t\t\telm$core$String$fromInt(width)),\n\t\t\t\t\t\telm$svg$Svg$Attributes$fill(\n\t\t\t\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t\t\t\t]);\n\t\t\tdefault:\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$fill(\n\t\t\t\t\t\tavh4$elm_color$Color$toCssString(color))\n\t\t\t\t\t]);\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Dots$viewCircle = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar radius = elm$core$Basics$sqrt(area / elm$core$Basics$pi);\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$cx(\n\t\t\t\telm$core$String$fromFloat(point.x)),\n\t\t\t\telm$svg$Svg$Attributes$cy(\n\t\t\t\telm$core$String$fromFloat(point.y)),\n\t\t\t\telm$svg$Svg$Attributes$r(\n\t\t\t\telm$core$String$fromFloat(radius))\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$circle,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar terezka$line_charts$Internal$Dots$pathPlus = F2(\n\tfunction (area, point) {\n\t\tvar side = elm$core$Basics$sqrt(area / 5);\n\t\tvar r6 = side / 2;\n\t\tvar r3 = side;\n\t\tvar commands = _List_fromArray(\n\t\t\t[\n\t\t\t\t'M' + (elm$core$String$fromFloat(point.x - r6) + (' ' + elm$core$String$fromFloat((point.y - r3) - r6))),\n\t\t\t\t'v' + elm$core$String$fromFloat(r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'h' + elm$core$String$fromFloat(-r3),\n\t\t\t\t'v' + elm$core$String$fromFloat(r3)\n\t\t\t]);\n\t\treturn A2(elm$core$String$join, ' ', commands);\n\t});\nvar terezka$line_charts$Internal$Dots$viewCross = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar rotation = 'rotate(45 ' + (elm$core$String$fromFloat(point.x) + (' ' + (elm$core$String$fromFloat(point.y) + ')')));\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$d(\n\t\t\t\tA2(terezka$line_charts$Internal$Dots$pathPlus, area, point)),\n\t\t\t\telm$svg$Svg$Attributes$transform(rotation)\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar elm$svg$Svg$rect = elm$svg$Svg$trustedNode('rect');\nvar elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');\nvar elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');\nvar terezka$line_charts$Internal$Dots$viewDiamond = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar side = elm$core$Basics$sqrt(area);\n\t\tvar rotation = 'rotate(45 ' + (elm$core$String$fromFloat(point.x) + (' ' + (elm$core$String$fromFloat(point.y) + ')')));\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$x(\n\t\t\t\telm$core$String$fromFloat(point.x - (side / 2))),\n\t\t\t\telm$svg$Svg$Attributes$y(\n\t\t\t\telm$core$String$fromFloat(point.y - (side / 2))),\n\t\t\t\telm$svg$Svg$Attributes$width(\n\t\t\t\telm$core$String$fromFloat(side)),\n\t\t\t\telm$svg$Svg$Attributes$height(\n\t\t\t\telm$core$String$fromFloat(side)),\n\t\t\t\telm$svg$Svg$Attributes$transform(rotation)\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$rect,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar terezka$line_charts$Internal$Dots$viewPlus = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$d(\n\t\t\t\tA2(terezka$line_charts$Internal$Dots$pathPlus, area, point))\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar terezka$line_charts$Internal$Dots$viewSquare = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar side = elm$core$Basics$sqrt(area);\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$x(\n\t\t\t\telm$core$String$fromFloat(point.x - (side / 2))),\n\t\t\t\telm$svg$Svg$Attributes$y(\n\t\t\t\telm$core$String$fromFloat(point.y - (side / 2))),\n\t\t\t\telm$svg$Svg$Attributes$width(\n\t\t\t\telm$core$String$fromFloat(side)),\n\t\t\t\telm$svg$Svg$Attributes$height(\n\t\t\t\telm$core$String$fromFloat(side))\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$rect,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar elm$core$Basics$degrees = function (angleInDegrees) {\n\treturn (angleInDegrees * elm$core$Basics$pi) / 180;\n};\nvar elm$core$Basics$tan = _Basics_tan;\nvar terezka$line_charts$Internal$Dots$pathTriangle = F2(\n\tfunction (area, point) {\n\t\tvar side = elm$core$Basics$sqrt(\n\t\t\t(area * 4) / elm$core$Basics$sqrt(3));\n\t\tvar height = (elm$core$Basics$sqrt(3) * side) / 2;\n\t\tvar fromMiddle = height - ((elm$core$Basics$tan(\n\t\t\telm$core$Basics$degrees(30)) * side) / 2);\n\t\tvar commands = _List_fromArray(\n\t\t\t[\n\t\t\t\t'M' + (elm$core$String$fromFloat(point.x) + (' ' + elm$core$String$fromFloat(point.y - fromMiddle))),\n\t\t\t\t'l' + (elm$core$String$fromFloat((-side) / 2) + (' ' + elm$core$String$fromFloat(height))),\n\t\t\t\t'h' + elm$core$String$fromFloat(side),\n\t\t\t\t'z'\n\t\t\t]);\n\t\treturn A2(elm$core$String$join, ' ', commands);\n\t});\nvar terezka$line_charts$Internal$Dots$viewTriangle = F5(\n\tfunction (events, variety, color, area, point) {\n\t\tvar attributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$d(\n\t\t\t\tA2(terezka$line_charts$Internal$Dots$pathTriangle, area, point))\n\t\t\t]);\n\t\treturn A2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_Utils_ap(\n\t\t\t\tevents,\n\t\t\t\t_Utils_ap(\n\t\t\t\t\tattributes,\n\t\t\t\t\tA2(terezka$line_charts$Internal$Dots$varietyAttributes, color, variety))),\n\t\t\t_List_Nil);\n\t});\nvar terezka$line_charts$Internal$Dots$viewShape = F5(\n\tfunction (system, _n0, shape, color, point) {\n\t\tvar radius = _n0.radius;\n\t\tvar variety = _n0.variety;\n\t\tvar view_ = function () {\n\t\t\tswitch (shape.$) {\n\t\t\t\tcase 'Circle':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewCircle;\n\t\t\t\tcase 'Triangle':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewTriangle;\n\t\t\t\tcase 'Square':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewSquare;\n\t\t\t\tcase 'Diamond':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewDiamond;\n\t\t\t\tcase 'Cross':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewCross;\n\t\t\t\tcase 'Plus':\n\t\t\t\t\treturn terezka$line_charts$Internal$Dots$viewPlus;\n\t\t\t\tdefault:\n\t\t\t\t\treturn F5(\n\t\t\t\t\t\tfunction (_n2, _n3, _n4, _n5, _n6) {\n\t\t\t\t\t\t\treturn elm$svg$Svg$text('');\n\t\t\t\t\t\t});\n\t\t\t}\n\t\t}();\n\t\tvar size = (2 * elm$core$Basics$pi) * radius;\n\t\tvar pointSvg = A2(terezka$line_charts$LineChart$Coordinate$toSvg, system, point);\n\t\treturn A5(view_, _List_Nil, variety, color, size, pointSvg);\n\t});\nvar terezka$line_charts$Internal$Dots$viewSample = F5(\n\tfunction (_n0, shape, color, system, data) {\n\t\tvar config = _n0.a;\n\t\tvar _n1 = config.legend(\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.user;\n\t\t\t\t},\n\t\t\t\tdata));\n\t\tvar style_ = _n1.a;\n\t\treturn A4(terezka$line_charts$Internal$Dots$viewShape, system, style_, shape, color);\n\t});\nvar terezka$line_charts$Internal$Line$color = F3(\n\tfunction (_n0, _n1, data_) {\n\t\tvar config = _n0.a;\n\t\tvar line_ = _n1.a;\n\t\tvar _n2 = config(\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.user;\n\t\t\t\t},\n\t\t\t\tdata_));\n\t\tvar style_ = _n2.a;\n\t\treturn style_.color(line_.color);\n\t});\nvar terezka$line_charts$Internal$Line$shape = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.shape;\n};\nvar elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');\nvar terezka$line_charts$Internal$Area$hasArea = function (config) {\n\tswitch (config.$) {\n\t\tcase 'None':\n\t\t\treturn false;\n\t\tcase 'Normal':\n\t\t\treturn true;\n\t\tcase 'Stacked':\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn true;\n\t}\n};\nvar terezka$line_charts$Internal$Area$opacity = function (config) {\n\tswitch (config.$) {\n\t\tcase 'None':\n\t\t\treturn 0;\n\t\tcase 'Normal':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t\tcase 'Stacked':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t\tdefault:\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t}\n};\nvar terezka$line_charts$Internal$Line$toAreaAttributes = F3(\n\tfunction (_n0, _n1, area) {\n\t\tvar serie = _n0.a;\n\t\tvar style_ = _n1.a;\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$class('chart__interpolation__area__fragment'),\n\t\t\t\telm$svg$Svg$Attributes$fill(\n\t\t\t\tavh4$elm_color$Color$toCssString(\n\t\t\t\t\tstyle_.color(serie.color)))\n\t\t\t]);\n\t});\nvar elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');\nvar terezka$line_charts$Internal$Line$toSeriesAttributes = F2(\n\tfunction (_n0, _n1) {\n\t\tvar serie = _n0.a;\n\t\tvar style_ = _n1.a;\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$style('pointer-events: none;'),\n\t\t\t\telm$svg$Svg$Attributes$class('chart__interpolation__line__fragment'),\n\t\t\t\telm$svg$Svg$Attributes$stroke(\n\t\t\t\tavh4$elm_color$Color$toCssString(\n\t\t\t\t\tstyle_.color(serie.color))),\n\t\t\t\telm$svg$Svg$Attributes$strokeWidth(\n\t\t\t\telm$core$String$fromFloat(style_.width)),\n\t\t\t\telm$svg$Svg$Attributes$strokeDasharray(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$String$join,\n\t\t\t\t\t' ',\n\t\t\t\t\tA2(elm$core$List$map, elm$core$String$fromFloat, serie.dashing))),\n\t\t\t\telm$svg$Svg$Attributes$fill('transparent')\n\t\t\t]);\n\t});\nvar terezka$line_charts$Internal$Utils$viewIf = F2(\n\tfunction (condition, view) {\n\t\treturn condition ? view(_Utils_Tuple0) : elm$svg$Svg$text('');\n\t});\nvar terezka$line_charts$Internal$Line$viewSample = F5(\n\tfunction (_n0, line_, area, data_, sampleWidth) {\n\t\tvar look = _n0.a;\n\t\tvar style_ = look(\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.user;\n\t\t\t\t},\n\t\t\t\tdata_));\n\t\tvar sizeAttributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$x1('0'),\n\t\t\t\telm$svg$Svg$Attributes$y1('0'),\n\t\t\t\telm$svg$Svg$Attributes$x2(\n\t\t\t\telm$core$String$fromFloat(sampleWidth)),\n\t\t\t\telm$svg$Svg$Attributes$y2('0')\n\t\t\t]);\n\t\tvar rectangleAttributes = _List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$x('0'),\n\t\t\t\telm$svg$Svg$Attributes$y('0'),\n\t\t\t\telm$svg$Svg$Attributes$height('9'),\n\t\t\t\telm$svg$Svg$Attributes$width(\n\t\t\t\telm$core$String$fromFloat(sampleWidth))\n\t\t\t]);\n\t\tvar lineAttributes = A2(terezka$line_charts$Internal$Line$toSeriesAttributes, line_, style_);\n\t\tvar areaAttributes = A2(\n\t\t\telm$core$List$cons,\n\t\t\telm$svg$Svg$Attributes$fillOpacity(\n\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\tterezka$line_charts$Internal$Area$opacity(area))),\n\t\t\tA3(terezka$line_charts$Internal$Line$toAreaAttributes, line_, style_, area));\n\t\tvar viewRectangle = function (_n1) {\n\t\t\treturn A2(\n\t\t\t\telm$svg$Svg$rect,\n\t\t\t\t_Utils_ap(areaAttributes, rectangleAttributes),\n\t\t\t\t_List_Nil);\n\t\t};\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_Nil,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$svg$Svg$line,\n\t\t\t\t\t_Utils_ap(lineAttributes, sizeAttributes),\n\t\t\t\t\t_List_Nil),\n\t\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Utils$viewIf,\n\t\t\t\t\tterezka$line_charts$Internal$Area$hasArea(area),\n\t\t\t\t\tviewRectangle)\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$LineChart$Coordinate$scaleDataX = F2(\n\tfunction (system, value) {\n\t\treturn (value * terezka$line_charts$Internal$Coordinate$reachX(system)) / terezka$line_charts$Internal$Coordinate$lengthX(system);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toDataX = F2(\n\tfunction (system, value) {\n\t\treturn system.x.min + A2(terezka$line_charts$LineChart$Coordinate$scaleDataX, system, value - system.frame.margin.left);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$scaleDataY = F2(\n\tfunction (system, value) {\n\t\treturn (value * terezka$line_charts$Internal$Coordinate$reachY(system)) / terezka$line_charts$Internal$Coordinate$lengthY(system);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toDataY = F2(\n\tfunction (system, value) {\n\t\treturn system.y.max - A2(terezka$line_charts$LineChart$Coordinate$scaleDataY, system, value - system.frame.margin.top);\n\t});\nvar terezka$line_charts$LineChart$Coordinate$toData = F2(\n\tfunction (system, point) {\n\t\treturn {\n\t\t\tx: A2(terezka$line_charts$LineChart$Coordinate$toDataX, system, point.x),\n\t\t\ty: A2(terezka$line_charts$LineChart$Coordinate$toDataY, system, point.y)\n\t\t};\n\t});\nvar terezka$line_charts$Internal$Legends$viewSample = F4(\n\tfunction (_n0, sampleWidth, line, data) {\n\t\tvar system = _n0.system;\n\t\tvar lineConfig = _n0.lineConfig;\n\t\tvar dotsConfig = _n0.dotsConfig;\n\t\tvar area = _n0.area;\n\t\tvar shape = terezka$line_charts$Internal$Line$shape(line);\n\t\tvar dotPosition = A2(\n\t\t\tterezka$line_charts$LineChart$Coordinate$toData,\n\t\t\tsystem,\n\t\t\tA2(terezka$line_charts$Internal$Data$Point, sampleWidth / 2, 0));\n\t\tvar color = A3(terezka$line_charts$Internal$Line$color, lineConfig, line, data);\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__sample')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA5(terezka$line_charts$Internal$Line$viewSample, lineConfig, line, area, data, sampleWidth),\n\t\t\t\t\tA6(terezka$line_charts$Internal$Dots$viewSample, dotsConfig, shape, color, system, data, dotPosition)\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Legends$viewGrouped = F3(\n\tfunction (_arguments, sampleWidth, container) {\n\t\tvar toLegend = F2(\n\t\t\tfunction (line, data) {\n\t\t\t\treturn {\n\t\t\t\t\tlabel: terezka$line_charts$Internal$Line$label(line),\n\t\t\t\t\tsample: A4(terezka$line_charts$Internal$Legends$viewSample, _arguments, sampleWidth, line, data)\n\t\t\t\t};\n\t\t\t});\n\t\tvar legends = A3(elm$core$List$map2, toLegend, _arguments.lines, _arguments.data);\n\t\treturn A2(container, _arguments.system, legends);\n\t});\nvar terezka$line_charts$Internal$Legends$view = function (_arguments) {\n\tvar _n0 = _arguments.legends;\n\tswitch (_n0.$) {\n\t\tcase 'Free':\n\t\t\tvar placement = _n0.a;\n\t\t\tvar view_ = _n0.b;\n\t\t\treturn A3(terezka$line_charts$Internal$Legends$viewFrees, _arguments, placement, view_);\n\t\tcase 'Grouped':\n\t\t\tvar sampleWidth = _n0.a;\n\t\t\tvar container = _n0.b;\n\t\t\treturn A3(\n\t\t\t\tterezka$line_charts$Internal$Legends$viewGrouped,\n\t\t\t\t_arguments,\n\t\t\t\tsampleWidth,\n\t\t\t\tcontainer(_arguments));\n\t\tdefault:\n\t\t\treturn elm$svg$Svg$text('');\n\t}\n};\nvar terezka$line_charts$Internal$Line$data = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.data;\n};\nvar terezka$line_charts$Internal$Area$opacityContainer = function (config) {\n\tswitch (config.$) {\n\t\tcase 'None':\n\t\t\treturn 1;\n\t\tcase 'Normal':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn 1;\n\t\tcase 'Stacked':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t\tdefault:\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t}\n};\nvar elm$core$List$map3 = _List_map3;\nvar terezka$line_charts$Internal$Line$viewNormal = function (_n0) {\n\tvar areas = _n0.a;\n\tvar lines = _n0.b;\n\tvar dots = _n0.c;\n\tvar view_ = F3(\n\t\tfunction (area_, line_, dots_) {\n\t\t\treturn A2(\n\t\t\t\telm$svg$Svg$g,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__line')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[area_, line_, dots_]));\n\t\t});\n\treturn A4(elm$core$List$map3, view_, areas, lines, dots);\n};\nvar terezka$line_charts$Internal$Data$isWithinRange = F2(\n\tfunction (system, point) {\n\t\treturn _Utils_eq(\n\t\t\tA3(elm$core$Basics$clamp, system.x.min, system.x.max, point.x),\n\t\t\tpoint.x) && _Utils_eq(\n\t\t\tA3(elm$core$Basics$clamp, system.y.min, system.y.max, point.y),\n\t\t\tpoint.y);\n\t});\nvar elm$core$Tuple$mapSecond = F2(\n\tfunction (func, _n0) {\n\t\tvar x = _n0.a;\n\t\tvar y = _n0.b;\n\t\treturn _Utils_Tuple2(\n\t\t\tx,\n\t\t\tfunc(y));\n\t});\nvar terezka$line_charts$Internal$Interpolation$linear = elm$core$List$map(\n\telm$core$List$map(terezka$line_charts$Internal$Path$Line));\nvar terezka$line_charts$Internal$Interpolation$First = {$: 'First'};\nvar terezka$line_charts$Internal$Interpolation$Previous = function (a) {\n\treturn {$: 'Previous', a: a};\n};\nvar terezka$line_charts$Internal$Interpolation$monotoneCurve = F4(\n\tfunction (point0, point1, tangent0, tangent1) {\n\t\tvar dx = (point1.x - point0.x) / 3;\n\t\treturn A3(\n\t\t\tterezka$line_charts$Internal$Path$CubicBeziers,\n\t\t\t{x: point0.x + dx, y: point0.y + (dx * tangent0)},\n\t\t\t{x: point1.x - dx, y: point1.y - (dx * tangent1)},\n\t\t\tpoint1);\n\t});\nvar terezka$line_charts$Internal$Interpolation$slope2 = F3(\n\tfunction (point0, point1, t) {\n\t\tvar h = point1.x - point0.x;\n\t\treturn h ? ((((3 * (point1.y - point0.y)) / h) - t) / 2) : t;\n\t});\nvar terezka$line_charts$Internal$Interpolation$sign = function (x) {\n\treturn (x < 0) ? (-1) : 1;\n};\nvar terezka$line_charts$Internal$Interpolation$toH = F2(\n\tfunction (h0, h1) {\n\t\treturn (!h0) ? ((h1 < 0) ? (0 * (-1)) : h1) : h0;\n\t});\nvar terezka$line_charts$Internal$Interpolation$slope3 = F3(\n\tfunction (point0, point1, point2) {\n\t\tvar h1 = point2.x - point1.x;\n\t\tvar h0 = point1.x - point0.x;\n\t\tvar s0h = A2(terezka$line_charts$Internal$Interpolation$toH, h0, h1);\n\t\tvar s0 = (point1.y - point0.y) / s0h;\n\t\tvar s1h = A2(terezka$line_charts$Internal$Interpolation$toH, h1, h0);\n\t\tvar s1 = (point2.y - point1.y) / s1h;\n\t\tvar p = ((s0 * h1) + (s1 * h0)) / (h0 + h1);\n\t\tvar slope = (terezka$line_charts$Internal$Interpolation$sign(s0) + terezka$line_charts$Internal$Interpolation$sign(s1)) * A2(\n\t\t\telm$core$Basics$min,\n\t\t\tA2(\n\t\t\t\telm$core$Basics$min,\n\t\t\t\telm$core$Basics$abs(s0),\n\t\t\t\telm$core$Basics$abs(s1)),\n\t\t\t0.5 * elm$core$Basics$abs(p));\n\t\treturn elm$core$Basics$isNaN(slope) ? 0 : slope;\n\t});\nvar terezka$line_charts$Internal$Interpolation$monotonePart = F2(\n\tfunction (points, _n0) {\n\t\tvar tangent = _n0.a;\n\t\tvar commands = _n0.b;\n\t\tvar _n1 = _Utils_Tuple2(tangent, points);\n\t\t_n1$4:\n\t\twhile (true) {\n\t\t\tif (_n1.a.$ === 'First') {\n\t\t\t\tif (_n1.b.b && _n1.b.b.b) {\n\t\t\t\t\tif (_n1.b.b.b.b) {\n\t\t\t\t\t\tvar _n2 = _n1.a;\n\t\t\t\t\t\tvar _n3 = _n1.b;\n\t\t\t\t\t\tvar p0 = _n3.a;\n\t\t\t\t\t\tvar _n4 = _n3.b;\n\t\t\t\t\t\tvar p1 = _n4.a;\n\t\t\t\t\t\tvar _n5 = _n4.b;\n\t\t\t\t\t\tvar p2 = _n5.a;\n\t\t\t\t\t\tvar rest = _n5.b;\n\t\t\t\t\t\tvar t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p2);\n\t\t\t\t\t\tvar t0 = A3(terezka$line_charts$Internal$Interpolation$slope2, p0, p1, t1);\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$monotonePart,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\tp1,\n\t\t\t\t\t\t\t\tA2(elm$core$List$cons, p2, rest)),\n\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$Previous(t1),\n\t\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\t\tcommands,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)\n\t\t\t\t\t\t\t\t\t\t]))));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _n9 = _n1.a;\n\t\t\t\t\t\tvar _n10 = _n1.b;\n\t\t\t\t\t\tvar p0 = _n10.a;\n\t\t\t\t\t\tvar _n11 = _n10.b;\n\t\t\t\t\t\tvar p1 = _n11.a;\n\t\t\t\t\t\tvar t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p1);\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$Previous(t1),\n\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\tcommands,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t1, t1),\n\t\t\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Line(p1)\n\t\t\t\t\t\t\t\t\t])));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak _n1$4;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (_n1.b.b && _n1.b.b.b) {\n\t\t\t\t\tif (_n1.b.b.b.b) {\n\t\t\t\t\t\tvar t0 = _n1.a.a;\n\t\t\t\t\t\tvar _n6 = _n1.b;\n\t\t\t\t\t\tvar p0 = _n6.a;\n\t\t\t\t\t\tvar _n7 = _n6.b;\n\t\t\t\t\t\tvar p1 = _n7.a;\n\t\t\t\t\t\tvar _n8 = _n7.b;\n\t\t\t\t\t\tvar p2 = _n8.a;\n\t\t\t\t\t\tvar rest = _n8.b;\n\t\t\t\t\t\tvar t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p2);\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$monotonePart,\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\tp1,\n\t\t\t\t\t\t\t\tA2(elm$core$List$cons, p2, rest)),\n\t\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$Previous(t1),\n\t\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\t\tcommands,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)\n\t\t\t\t\t\t\t\t\t\t]))));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar t0 = _n1.a.a;\n\t\t\t\t\t\tvar _n12 = _n1.b;\n\t\t\t\t\t\tvar p0 = _n12.a;\n\t\t\t\t\t\tvar _n13 = _n12.b;\n\t\t\t\t\t\tvar p1 = _n13.a;\n\t\t\t\t\t\tvar t1 = A3(terezka$line_charts$Internal$Interpolation$slope3, p0, p1, p1);\n\t\t\t\t\t\treturn _Utils_Tuple2(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Interpolation$Previous(t1),\n\t\t\t\t\t\t\t_Utils_ap(\n\t\t\t\t\t\t\t\tcommands,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA4(terezka$line_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1),\n\t\t\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Line(p1)\n\t\t\t\t\t\t\t\t\t])));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak _n1$4;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn _Utils_Tuple2(tangent, commands);\n\t});\nvar terezka$line_charts$Internal$Interpolation$monotoneSection = F2(\n\tfunction (points, _n0) {\n\t\tvar tangent = _n0.a;\n\t\tvar acc = _n0.b;\n\t\tvar _n1 = function () {\n\t\t\tif (points.b) {\n\t\t\t\tvar p0 = points.a;\n\t\t\t\tvar rest = points.b;\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$Internal$Interpolation$monotonePart,\n\t\t\t\t\tA2(elm$core$List$cons, p0, rest),\n\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\ttangent,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Line(p0)\n\t\t\t\t\t\t\t])));\n\t\t\t} else {\n\t\t\t\treturn _Utils_Tuple2(tangent, _List_Nil);\n\t\t\t}\n\t\t}();\n\t\tvar t0 = _n1.a;\n\t\tvar commands = _n1.b;\n\t\treturn _Utils_Tuple2(\n\t\t\tt0,\n\t\t\tA2(elm$core$List$cons, commands, acc));\n\t});\nvar terezka$line_charts$Internal$Interpolation$monotone = function (sections) {\n\treturn A3(\n\t\telm$core$List$foldr,\n\t\tterezka$line_charts$Internal$Interpolation$monotoneSection,\n\t\t_Utils_Tuple2(terezka$line_charts$Internal$Interpolation$First, _List_Nil),\n\t\tsections).b;\n};\nvar terezka$line_charts$Internal$Interpolation$after = F2(\n\tfunction (a, b) {\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\ta,\n\t\t\t\tA2(terezka$line_charts$Internal$Data$Point, b.x, a.y),\n\t\t\t\tb\n\t\t\t]);\n\t});\nvar terezka$line_charts$Internal$Interpolation$stepped = function (sections) {\n\tvar expand = F2(\n\t\tfunction (result, section) {\n\t\t\texpand:\n\t\t\twhile (true) {\n\t\t\t\tif (section.a.b) {\n\t\t\t\t\tif (section.a.b.b) {\n\t\t\t\t\t\tvar _n1 = section.a;\n\t\t\t\t\t\tvar a = _n1.a;\n\t\t\t\t\t\tvar _n2 = _n1.b;\n\t\t\t\t\t\tvar b = _n2.a;\n\t\t\t\t\t\tvar rest = _n2.b;\n\t\t\t\t\t\tvar broken = section.b;\n\t\t\t\t\t\tvar $temp$result = _Utils_ap(\n\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Interpolation$after, a, b)),\n\t\t\t\t\t\t\t$temp$section = _Utils_Tuple2(\n\t\t\t\t\t\t\tA2(elm$core$List$cons, b, rest),\n\t\t\t\t\t\t\tbroken);\n\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\tsection = $temp$section;\n\t\t\t\t\t\tcontinue expand;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (section.b.$ === 'Just') {\n\t\t\t\t\t\t\tvar _n3 = section.a;\n\t\t\t\t\t\t\tvar last = _n3.a;\n\t\t\t\t\t\t\tvar broken = section.b.a;\n\t\t\t\t\t\t\treturn _Utils_ap(\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Data$Point, broken.x, last.y)\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n4 = section.a;\n\t\t\t\t\t\t\tvar last = _n4.a;\n\t\t\t\t\t\t\tvar _n5 = section.b;\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\treturn A2(\n\t\telm$core$List$map,\n\t\tA2(\n\t\t\telm$core$Basics$composeR,\n\t\t\texpand(_List_Nil),\n\t\t\telm$core$List$map(terezka$line_charts$Internal$Path$Line)),\n\t\tsections);\n};\nvar terezka$line_charts$Internal$Interpolation$toCommands = F2(\n\tfunction (interpolation, data) {\n\t\tvar pointsSections = elm$core$List$map(\n\t\t\tA2(\n\t\t\t\telm$core$Basics$composeR,\n\t\t\t\telm$core$Tuple$mapFirst(\n\t\t\t\t\telm$core$List$map(\n\t\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\t\treturn $.point;\n\t\t\t\t\t\t})),\n\t\t\t\telm$core$Tuple$mapSecond(\n\t\t\t\t\telm$core$Maybe$map(\n\t\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\t\treturn $.point;\n\t\t\t\t\t\t}))));\n\t\tvar points = elm$core$List$map(\n\t\t\tA2(\n\t\t\t\telm$core$Basics$composeR,\n\t\t\t\telm$core$Tuple$first,\n\t\t\t\telm$core$List$map(\n\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\treturn $.point;\n\t\t\t\t\t})));\n\t\tswitch (interpolation.$) {\n\t\t\tcase 'Linear':\n\t\t\t\treturn terezka$line_charts$Internal$Interpolation$linear(\n\t\t\t\t\tpoints(data));\n\t\t\tcase 'Monotone':\n\t\t\t\treturn terezka$line_charts$Internal$Interpolation$monotone(\n\t\t\t\t\tpoints(data));\n\t\t\tdefault:\n\t\t\t\treturn terezka$line_charts$Internal$Interpolation$stepped(\n\t\t\t\t\tpointsSections(data));\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Area$opacitySingle = function (config) {\n\tswitch (config.$) {\n\t\tcase 'None':\n\t\t\treturn 0;\n\t\tcase 'Normal':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn opacity_;\n\t\tcase 'Stacked':\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn 1;\n\t\tdefault:\n\t\t\tvar opacity_ = config.a;\n\t\t\treturn 1;\n\t}\n};\nvar terezka$line_charts$Internal$Path$toPoint = function (command) {\n\tswitch (command.$) {\n\t\tcase 'Close':\n\t\t\treturn A2(terezka$line_charts$LineChart$Coordinate$Point, 0, 0);\n\t\tcase 'Move':\n\t\t\tvar p = command.a;\n\t\t\treturn p;\n\t\tcase 'Line':\n\t\t\tvar p = command.a;\n\t\t\treturn p;\n\t\tcase 'Horizontal':\n\t\t\tvar x = command.a;\n\t\t\treturn A2(terezka$line_charts$LineChart$Coordinate$Point, x, 0);\n\t\tcase 'Vertical':\n\t\t\tvar y = command.a;\n\t\t\treturn A2(terezka$line_charts$LineChart$Coordinate$Point, 0, y);\n\t\tcase 'CubicBeziers':\n\t\t\tvar c1 = command.a;\n\t\t\tvar c2 = command.b;\n\t\t\tvar p = command.c;\n\t\t\treturn p;\n\t\tcase 'CubicBeziersShort':\n\t\t\tvar c1 = command.a;\n\t\t\tvar p = command.b;\n\t\t\treturn p;\n\t\tcase 'QuadraticBeziers':\n\t\t\tvar c1 = command.a;\n\t\t\tvar p = command.b;\n\t\t\treturn p;\n\t\tcase 'QuadraticBeziersShort':\n\t\t\tvar p = command.a;\n\t\t\treturn p;\n\t\tdefault:\n\t\t\tvar rx = command.a;\n\t\t\tvar ry = command.b;\n\t\t\tvar xAxisRotation = command.c;\n\t\t\tvar largeArcFlag = command.d;\n\t\t\tvar sweepFlag = command.e;\n\t\t\tvar p = command.f;\n\t\t\treturn p;\n\t}\n};\nvar terezka$line_charts$Internal$Utils$towardsZero = function (_n0) {\n\tvar max = _n0.max;\n\tvar min = _n0.min;\n\treturn A3(elm$core$Basics$clamp, min, max, 0);\n};\nvar terezka$line_charts$Internal$Utils$last = function (list) {\n\treturn elm$core$List$head(\n\t\tA2(\n\t\t\telm$core$List$drop,\n\t\t\telm$core$List$length(list) - 1,\n\t\t\tlist));\n};\nvar terezka$line_charts$Internal$Utils$lastSafe = F2(\n\tfunction (first, rest) {\n\t\treturn A2(\n\t\t\telm$core$Maybe$withDefault,\n\t\t\tfirst,\n\t\t\tterezka$line_charts$Internal$Utils$last(rest));\n\t});\nvar terezka$line_charts$Internal$Utils$viewWithEdges = F2(\n\tfunction (stuff, view) {\n\t\tif (stuff.b) {\n\t\t\tvar first = stuff.a;\n\t\t\tvar rest = stuff.b;\n\t\t\treturn A3(\n\t\t\t\tview,\n\t\t\t\tfirst,\n\t\t\t\trest,\n\t\t\t\tA2(terezka$line_charts$Internal$Utils$lastSafe, first, rest));\n\t\t} else {\n\t\t\treturn elm$svg$Svg$text('');\n\t\t}\n\t});\nvar terezka$line_charts$LineChart$Junk$withinChartArea = terezka$line_charts$Internal$Svg$withinChartArea;\nvar terezka$line_charts$Internal$Line$viewArea = F5(\n\tfunction (_n0, line_, style_, interpolation, data_) {\n\t\tvar system = _n0.system;\n\t\tvar lineConfig = _n0.lineConfig;\n\t\tvar area = _n0.area;\n\t\tvar ground = function (point) {\n\t\t\treturn A2(\n\t\t\t\tterezka$line_charts$Internal$Data$Point,\n\t\t\t\tpoint.x,\n\t\t\t\tterezka$line_charts$Internal$Utils$towardsZero(system.y));\n\t\t};\n\t\tvar commands = F3(\n\t\t\tfunction (first, middle, last) {\n\t\t\t\treturn A3(\n\t\t\t\t\tterezka$line_charts$Internal$Utils$concat,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Move(\n\t\t\t\t\t\t\tground(\n\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$toPoint(first))),\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$toPoint(first))\n\t\t\t\t\t\t]),\n\t\t\t\t\tinterpolation,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Line(\n\t\t\t\t\t\t\tground(\n\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$toPoint(last)))\n\t\t\t\t\t\t]));\n\t\t\t});\n\t\tvar attributes = A2(\n\t\t\telm$core$List$cons,\n\t\t\tterezka$line_charts$LineChart$Junk$withinChartArea(system),\n\t\t\tA2(\n\t\t\t\telm$core$List$cons,\n\t\t\t\telm$svg$Svg$Attributes$fillOpacity(\n\t\t\t\t\telm$core$String$fromFloat(\n\t\t\t\t\t\tterezka$line_charts$Internal$Area$opacitySingle(area))),\n\t\t\t\tA3(terezka$line_charts$Internal$Line$toAreaAttributes, line_, style_, area)));\n\t\treturn A2(\n\t\t\tterezka$line_charts$Internal$Utils$viewWithEdges,\n\t\t\tinterpolation,\n\t\t\tF3(\n\t\t\t\tfunction (first, middle, last) {\n\t\t\t\t\treturn A3(\n\t\t\t\t\t\tterezka$line_charts$Internal$Path$view,\n\t\t\t\t\t\tsystem,\n\t\t\t\t\t\tattributes,\n\t\t\t\t\t\tA3(commands, first, middle, last));\n\t\t\t\t}));\n\t});\nvar terezka$line_charts$Internal$Dots$view = F2(\n\tfunction (_n0, data) {\n\t\tvar system = _n0.system;\n\t\tvar dotsConfig = _n0.dotsConfig;\n\t\tvar shape = _n0.shape;\n\t\tvar color = _n0.color;\n\t\tvar _n1 = dotsConfig;\n\t\tvar config = _n1.a;\n\t\tvar _n2 = config.individual(data.user);\n\t\tvar style_ = _n2.a;\n\t\treturn A5(terezka$line_charts$Internal$Dots$viewShape, system, style_, shape, color, data.point);\n\t});\nvar terezka$line_charts$Internal$Line$viewDot = F3(\n\tfunction (_arguments, _n0, _n1) {\n\t\tvar lineConfig = _n0.a;\n\t\tvar style_ = _n1.a;\n\t\treturn terezka$line_charts$Internal$Dots$view(\n\t\t\t{\n\t\t\t\tcolor: style_.color(lineConfig.color),\n\t\t\t\tdotsConfig: _arguments.dotsConfig,\n\t\t\t\tshape: lineConfig.shape,\n\t\t\t\tsystem: _arguments.system\n\t\t\t});\n\t});\nvar terezka$line_charts$Internal$Utils$viewWithFirst = F2(\n\tfunction (stuff, view) {\n\t\tif (stuff.b) {\n\t\t\tvar first = stuff.a;\n\t\t\tvar rest = stuff.b;\n\t\t\treturn A2(view, first, rest);\n\t\t} else {\n\t\t\treturn elm$svg$Svg$text('');\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Line$viewSeries = F5(\n\tfunction (_n0, line_, style_, interpolation, data_) {\n\t\tvar system = _n0.system;\n\t\tvar lineConfig = _n0.lineConfig;\n\t\tvar attributes = A2(\n\t\t\telm$core$List$cons,\n\t\t\tterezka$line_charts$LineChart$Junk$withinChartArea(system),\n\t\t\tA2(terezka$line_charts$Internal$Line$toSeriesAttributes, line_, style_));\n\t\treturn A2(\n\t\t\tterezka$line_charts$Internal$Utils$viewWithFirst,\n\t\t\tdata_,\n\t\t\tF2(\n\t\t\t\tfunction (first, _n1) {\n\t\t\t\t\treturn A3(\n\t\t\t\t\t\tterezka$line_charts$Internal$Path$view,\n\t\t\t\t\t\tsystem,\n\t\t\t\t\t\tattributes,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Path$Move(first.point),\n\t\t\t\t\t\t\tinterpolation));\n\t\t\t\t}));\n\t});\nvar terezka$line_charts$Internal$Utils$part = F4(\n\tfunction (isReal, points, current, parts) {\n\t\tpart:\n\t\twhile (true) {\n\t\t\tif (points.b) {\n\t\t\t\tvar first = points.a;\n\t\t\t\tvar rest = points.b;\n\t\t\t\tif (isReal(first)) {\n\t\t\t\t\tvar $temp$isReal = isReal,\n\t\t\t\t\t\t$temp$points = rest,\n\t\t\t\t\t\t$temp$current = _Utils_ap(\n\t\t\t\t\t\tcurrent,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[first])),\n\t\t\t\t\t\t$temp$parts = parts;\n\t\t\t\t\tisReal = $temp$isReal;\n\t\t\t\t\tpoints = $temp$points;\n\t\t\t\t\tcurrent = $temp$current;\n\t\t\t\t\tparts = $temp$parts;\n\t\t\t\t\tcontinue part;\n\t\t\t\t} else {\n\t\t\t\t\tvar $temp$isReal = isReal,\n\t\t\t\t\t\t$temp$points = rest,\n\t\t\t\t\t\t$temp$current = _List_Nil,\n\t\t\t\t\t\t$temp$parts = A2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t_Utils_Tuple2(\n\t\t\t\t\t\t\tcurrent,\n\t\t\t\t\t\t\telm$core$Maybe$Just(first)),\n\t\t\t\t\t\tparts);\n\t\t\t\t\tisReal = $temp$isReal;\n\t\t\t\t\tpoints = $temp$points;\n\t\t\t\t\tcurrent = $temp$current;\n\t\t\t\t\tparts = $temp$parts;\n\t\t\t\t\tcontinue part;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn A2(\n\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t_Utils_Tuple2(current, elm$core$Maybe$Nothing),\n\t\t\t\t\tparts);\n\t\t\t}\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Line$viewSingle = F3(\n\tfunction (_arguments, line_, data_) {\n\t\tvar style_ = function (_n1) {\n\t\t\tvar look = _n1.a;\n\t\t\treturn look(\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$map,\n\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\treturn $.user;\n\t\t\t\t\t},\n\t\t\t\t\tdata_));\n\t\t}(_arguments.lineConfig);\n\t\tvar sections = A4(\n\t\t\tterezka$line_charts$Internal$Utils$part,\n\t\t\tfunction ($) {\n\t\t\t\treturn $.isReal;\n\t\t\t},\n\t\t\tdata_,\n\t\t\t_List_Nil,\n\t\t\t_List_Nil);\n\t\tvar parts = A2(elm$core$List$map, elm$core$Tuple$first, sections);\n\t\tvar viewDots = A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__dots')\n\t\t\t\t]),\n\t\t\tA2(\n\t\t\t\telm$core$List$map,\n\t\t\t\tA3(terezka$line_charts$Internal$Line$viewDot, _arguments, line_, style_),\n\t\t\t\tA2(\n\t\t\t\t\telm$core$List$filter,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$Basics$composeL,\n\t\t\t\t\t\tterezka$line_charts$Internal$Data$isWithinRange(_arguments.system),\n\t\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\t\treturn $.point;\n\t\t\t\t\t\t}),\n\t\t\t\t\telm$core$List$concat(parts))));\n\t\tvar commands = A2(terezka$line_charts$Internal$Interpolation$toCommands, _arguments.interpolation, sections);\n\t\tvar viewAreas = function (_n0) {\n\t\t\treturn A2(\n\t\t\t\telm$svg$Svg$g,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__interpolation__area')\n\t\t\t\t\t]),\n\t\t\t\tA3(\n\t\t\t\t\telm$core$List$map2,\n\t\t\t\t\tA3(terezka$line_charts$Internal$Line$viewArea, _arguments, line_, style_),\n\t\t\t\t\tcommands,\n\t\t\t\t\tparts));\n\t\t};\n\t\tvar viewSeriess = A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__interpolation__line')\n\t\t\t\t]),\n\t\t\tA3(\n\t\t\t\telm$core$List$map2,\n\t\t\t\tA3(terezka$line_charts$Internal$Line$viewSeries, _arguments, line_, style_),\n\t\t\t\tcommands,\n\t\t\t\tparts));\n\t\treturn _Utils_Tuple3(\n\t\t\tA2(\n\t\t\t\tterezka$line_charts$Internal$Utils$viewIf,\n\t\t\t\tterezka$line_charts$Internal$Area$hasArea(_arguments.area),\n\t\t\t\tviewAreas),\n\t\t\tviewSeriess,\n\t\t\tviewDots);\n\t});\nvar terezka$line_charts$Internal$Line$viewStacked = F2(\n\tfunction (area, _n0) {\n\t\tvar areas = _n0.a;\n\t\tvar lines = _n0.b;\n\t\tvar dots = _n0.c;\n\t\tvar toList = F2(\n\t\t\tfunction (l, d) {\n\t\t\t\treturn _List_fromArray(\n\t\t\t\t\t[l, d]);\n\t\t\t});\n\t\tvar opacity = 'opacity: ' + elm$core$String$fromFloat(\n\t\t\tterezka$line_charts$Internal$Area$opacityContainer(area));\n\t\tvar bottoms = elm$core$List$concat(\n\t\t\tA3(elm$core$List$map2, toList, lines, dots));\n\t\treturn _List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$svg$Svg$g,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__bottoms'),\n\t\t\t\t\t\telm$svg$Svg$Attributes$style(opacity)\n\t\t\t\t\t]),\n\t\t\t\tareas),\n\t\t\t\tA2(\n\t\t\t\telm$svg$Svg$g,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__tops')\n\t\t\t\t\t]),\n\t\t\t\tbottoms)\n\t\t\t]);\n\t});\nvar terezka$line_charts$Internal$Utils$unzip3 = function (pairs) {\n\tvar step = F2(\n\t\tfunction (_n0, _n1) {\n\t\t\tvar a = _n0.a;\n\t\t\tvar b = _n0.b;\n\t\t\tvar c = _n0.c;\n\t\t\tvar aas = _n1.a;\n\t\t\tvar bs = _n1.b;\n\t\t\tvar cs = _n1.c;\n\t\t\treturn _Utils_Tuple3(\n\t\t\t\tA2(elm$core$List$cons, a, aas),\n\t\t\t\tA2(elm$core$List$cons, b, bs),\n\t\t\t\tA2(elm$core$List$cons, c, cs));\n\t\t});\n\treturn A3(\n\t\telm$core$List$foldr,\n\t\tstep,\n\t\t_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil),\n\t\tpairs);\n};\nvar terezka$line_charts$Internal$Line$view = F3(\n\tfunction (_arguments, lines, datas) {\n\t\tvar container = elm$svg$Svg$g(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__lines')\n\t\t\t\t]));\n\t\tvar buildSeriesViews = (terezka$line_charts$Internal$Area$opacityContainer(_arguments.area) < 1) ? terezka$line_charts$Internal$Line$viewStacked(_arguments.area) : terezka$line_charts$Internal$Line$viewNormal;\n\t\treturn container(\n\t\t\tbuildSeriesViews(\n\t\t\t\tterezka$line_charts$Internal$Utils$unzip3(\n\t\t\t\t\tA3(\n\t\t\t\t\t\telm$core$List$map2,\n\t\t\t\t\t\tterezka$line_charts$Internal$Line$viewSingle(_arguments),\n\t\t\t\t\t\tlines,\n\t\t\t\t\t\tdatas))));\n\t});\nvar terezka$line_charts$Internal$Events$toChartAttributes = F3(\n\tfunction (data, system, _n0) {\n\t\tvar events = _n0.a;\n\t\tvar order = function (_n1) {\n\t\t\tvar outside = _n1.a;\n\t\t\tvar event = _n1.b;\n\t\t\treturn outside ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(\n\t\t\t\tA2(event, data, system));\n\t\t};\n\t\treturn A2(elm$core$List$filterMap, order, events);\n\t});\nvar terezka$line_charts$LineChart$chartAreaAttributes = function (system) {\n\treturn _List_fromArray(\n\t\t[\n\t\t\telm$svg$Svg$Attributes$x(\n\t\t\telm$core$String$fromFloat(system.frame.margin.left)),\n\t\t\telm$svg$Svg$Attributes$y(\n\t\t\telm$core$String$fromFloat(system.frame.margin.top)),\n\t\t\telm$svg$Svg$Attributes$width(\n\t\t\telm$core$String$fromFloat(\n\t\t\t\tterezka$line_charts$Internal$Coordinate$lengthX(system))),\n\t\t\telm$svg$Svg$Attributes$height(\n\t\t\telm$core$String$fromFloat(\n\t\t\t\tterezka$line_charts$Internal$Coordinate$lengthY(system)))\n\t\t]);\n};\nvar terezka$line_charts$LineChart$chartAreaPlatform = F3(\n\tfunction (config, data, system) {\n\t\tvar attributes = elm$core$List$concat(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$svg$Svg$Attributes$fill('transparent')\n\t\t\t\t\t]),\n\t\t\t\t\tterezka$line_charts$LineChart$chartAreaAttributes(system),\n\t\t\t\t\tA3(terezka$line_charts$Internal$Events$toChartAttributes, data, system, config.events)\n\t\t\t\t]));\n\t\treturn A2(elm$svg$Svg$rect, attributes, _List_Nil);\n\t});\nvar elm$svg$Svg$clipPath = elm$svg$Svg$trustedNode('clipPath');\nvar elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');\nvar terezka$line_charts$LineChart$clipPath = function (system) {\n\treturn A2(\n\t\telm$svg$Svg$clipPath,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$svg$Svg$Attributes$id(\n\t\t\t\tterezka$line_charts$Internal$Utils$toChartAreaId(system.id))\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$svg$Svg$rect,\n\t\t\t\tterezka$line_charts$LineChart$chartAreaAttributes(system),\n\t\t\t\t_List_Nil)\n\t\t\t]));\n};\nvar terezka$line_charts$Internal$Container$sizeStyles = F3(\n\tfunction (_n0, width, height) {\n\t\tvar properties_ = _n0.a;\n\t\tvar _n1 = properties_.size;\n\t\tif (_n1.$ === 'Static') {\n\t\t\treturn _List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$Attributes$style,\n\t\t\t\t\t'height',\n\t\t\t\t\telm$core$String$fromFloat(height) + 'px'),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$Attributes$style,\n\t\t\t\t\t'width',\n\t\t\t\t\telm$core$String$fromFloat(width) + 'px')\n\t\t\t\t]);\n\t\t} else {\n\t\t\treturn _List_Nil;\n\t\t}\n\t});\nvar terezka$line_charts$LineChart$container = F4(\n\tfunction (config, _n0, junkHtml, plot) {\n\t\tvar frame = _n0.frame;\n\t\tvar userAttributes = A2(\n\t\t\tterezka$line_charts$Internal$Container$properties,\n\t\t\tfunction ($) {\n\t\t\t\treturn $.attributesHtml;\n\t\t\t},\n\t\t\tconfig.container);\n\t\tvar sizeStyles = A3(terezka$line_charts$Internal$Container$sizeStyles, config.container, frame.size.width, frame.size.height);\n\t\tvar styles = A2(\n\t\t\telm$core$List$cons,\n\t\t\tA2(elm$html$Html$Attributes$style, 'position', 'relative'),\n\t\t\tsizeStyles);\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_Utils_ap(styles, userAttributes),\n\t\t\tA2(elm$core$List$cons, plot, junkHtml));\n\t});\nvar terezka$line_charts$Internal$Data$Data = F3(\n\tfunction (user, point, isReal) {\n\t\treturn {isReal: isReal, point: point, user: user};\n\t});\nvar terezka$line_charts$LineChart$setY = F2(\n\tfunction (datum, y) {\n\t\treturn A3(\n\t\t\tterezka$line_charts$Internal$Data$Data,\n\t\t\tdatum.user,\n\t\t\tA2(terezka$line_charts$Internal$Data$Point, datum.point.x, y),\n\t\t\tdatum.isReal);\n\t});\nvar terezka$line_charts$LineChart$normalize = function (datasets) {\n\tif (datasets.b) {\n\t\tvar highest = datasets.a;\n\t\tvar belows = datasets.b;\n\t\tvar toPercentage = F2(\n\t\t\tfunction (highest_, datum) {\n\t\t\t\treturn A2(terezka$line_charts$LineChart$setY, datum, (100 * datum.point.y) / highest_.point.y);\n\t\t\t});\n\t\treturn A2(\n\t\t\telm$core$List$map,\n\t\t\tA2(elm$core$List$map2, toPercentage, highest),\n\t\t\tA2(elm$core$List$cons, highest, belows));\n\t} else {\n\t\treturn datasets;\n\t}\n};\nvar terezka$line_charts$Internal$Utils$withFirst = F2(\n\tfunction (stuff, process) {\n\t\tif (stuff.b) {\n\t\t\tvar first = stuff.a;\n\t\t\tvar rest = stuff.b;\n\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\tA2(process, first, rest));\n\t\t} else {\n\t\t\treturn elm$core$Maybe$Nothing;\n\t\t}\n\t});\nvar terezka$line_charts$LineChart$addBelows = F2(\n\tfunction (alldata, dataBelowAll) {\n\t\tvar add = F2(\n\t\t\tfunction (below, datum) {\n\t\t\t\treturn A2(terezka$line_charts$LineChart$setY, below, below.point.y + datum.point.y);\n\t\t\t});\n\t\tvar iterate = F4(\n\t\t\tfunction (datum0, dataTop, dataBelowTop, result) {\n\t\t\t\titerate:\n\t\t\t\twhile (true) {\n\t\t\t\t\tvar _n0 = _Utils_Tuple2(dataTop, dataBelowTop);\n\t\t\t\t\tif (_n0.a.b) {\n\t\t\t\t\t\tif (_n0.b.b) {\n\t\t\t\t\t\t\tvar _n1 = _n0.a;\n\t\t\t\t\t\t\tvar datum1 = _n1.a;\n\t\t\t\t\t\t\tvar data = _n1.b;\n\t\t\t\t\t\t\tvar _n2 = _n0.b;\n\t\t\t\t\t\t\tvar datumBelow = _n2.a;\n\t\t\t\t\t\t\tvar dataBelow = _n2.b;\n\t\t\t\t\t\t\tif (_Utils_cmp(datum1.point.x, datumBelow.point.x) > 0) {\n\t\t\t\t\t\t\t\tif (datumBelow.isReal) {\n\t\t\t\t\t\t\t\t\tvar $temp$datum0 = datum0,\n\t\t\t\t\t\t\t\t\t\t$temp$dataTop = A2(elm$core$List$cons, datum1, data),\n\t\t\t\t\t\t\t\t\t\t$temp$dataBelowTop = dataBelow,\n\t\t\t\t\t\t\t\t\t\t$temp$result = A2(\n\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\tA2(add, datumBelow, datum0),\n\t\t\t\t\t\t\t\t\t\tresult);\n\t\t\t\t\t\t\t\t\tdatum0 = $temp$datum0;\n\t\t\t\t\t\t\t\t\tdataTop = $temp$dataTop;\n\t\t\t\t\t\t\t\t\tdataBelowTop = $temp$dataBelowTop;\n\t\t\t\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\t\t\t\tcontinue iterate;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar breakdata = _Utils_update(\n\t\t\t\t\t\t\t\t\t\tdatum0,\n\t\t\t\t\t\t\t\t\t\t{isReal: false});\n\t\t\t\t\t\t\t\t\tvar $temp$datum0 = datum0,\n\t\t\t\t\t\t\t\t\t\t$temp$dataTop = A2(elm$core$List$cons, datum1, data),\n\t\t\t\t\t\t\t\t\t\t$temp$dataBelowTop = dataBelow,\n\t\t\t\t\t\t\t\t\t\t$temp$result = A2(\n\t\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\t\tA2(add, datumBelow, datum0),\n\t\t\t\t\t\t\t\t\t\tresult);\n\t\t\t\t\t\t\t\t\tdatum0 = $temp$datum0;\n\t\t\t\t\t\t\t\t\tdataTop = $temp$dataTop;\n\t\t\t\t\t\t\t\t\tdataBelowTop = $temp$dataBelowTop;\n\t\t\t\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\t\t\t\tcontinue iterate;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar $temp$datum0 = datum1,\n\t\t\t\t\t\t\t\t\t$temp$dataTop = data,\n\t\t\t\t\t\t\t\t\t$temp$dataBelowTop = A2(elm$core$List$cons, datumBelow, dataBelow),\n\t\t\t\t\t\t\t\t\t$temp$result = result;\n\t\t\t\t\t\t\t\tdatum0 = $temp$datum0;\n\t\t\t\t\t\t\t\tdataTop = $temp$dataTop;\n\t\t\t\t\t\t\t\tdataBelowTop = $temp$dataBelowTop;\n\t\t\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\t\t\tcontinue iterate;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _n4 = _n0.a;\n\t\t\t\t\t\t\tvar datum1 = _n4.a;\n\t\t\t\t\t\t\tvar data = _n4.b;\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_n0.b.b) {\n\t\t\t\t\t\t\tvar _n3 = _n0.b;\n\t\t\t\t\t\t\tvar datumBelow = _n3.a;\n\t\t\t\t\t\t\tvar dataBelow = _n3.b;\n\t\t\t\t\t\t\tif (_Utils_cmp(datum0.point.x, datumBelow.point.x) < 1) {\n\t\t\t\t\t\t\t\tvar $temp$datum0 = datum0,\n\t\t\t\t\t\t\t\t\t$temp$dataTop = _List_Nil,\n\t\t\t\t\t\t\t\t\t$temp$dataBelowTop = dataBelow,\n\t\t\t\t\t\t\t\t\t$temp$result = A2(\n\t\t\t\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\t\t\t\tA2(add, datumBelow, datum0),\n\t\t\t\t\t\t\t\t\tresult);\n\t\t\t\t\t\t\t\tdatum0 = $temp$datum0;\n\t\t\t\t\t\t\t\tdataTop = $temp$dataTop;\n\t\t\t\t\t\t\t\tdataBelowTop = $temp$dataBelowTop;\n\t\t\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\t\t\tcontinue iterate;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar $temp$datum0 = datum0,\n\t\t\t\t\t\t\t\t\t$temp$dataTop = _List_Nil,\n\t\t\t\t\t\t\t\t\t$temp$dataBelowTop = dataBelow,\n\t\t\t\t\t\t\t\t\t$temp$result = A2(elm$core$List$cons, datumBelow, result);\n\t\t\t\t\t\t\t\tdatum0 = $temp$datum0;\n\t\t\t\t\t\t\t\tdataTop = $temp$dataTop;\n\t\t\t\t\t\t\t\tdataBelowTop = $temp$dataBelowTop;\n\t\t\t\t\t\t\t\tresult = $temp$result;\n\t\t\t\t\t\t\t\tcontinue iterate;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\treturn elm$core$List$reverse(\n\t\t\tA2(\n\t\t\t\telm$core$Maybe$withDefault,\n\t\t\t\t_List_Nil,\n\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Utils$withFirst,\n\t\t\t\t\talldata,\n\t\t\t\t\tF2(\n\t\t\t\t\t\tfunction (first, rest) {\n\t\t\t\t\t\t\treturn A4(iterate, first, rest, dataBelowAll, _List_Nil);\n\t\t\t\t\t\t}))));\n\t});\nvar terezka$line_charts$LineChart$stack = function (dataset) {\n\tvar stackBelows = F2(\n\t\tfunction (dataset_, result) {\n\t\t\tif (dataset_.b) {\n\t\t\t\tvar data = dataset_.a;\n\t\t\t\tvar belows = dataset_.b;\n\t\t\t\treturn A2(\n\t\t\t\t\tstackBelows,\n\t\t\t\t\tbelows,\n\t\t\t\t\tA2(\n\t\t\t\t\t\telm$core$List$cons,\n\t\t\t\t\t\tA3(elm$core$List$foldl, terezka$line_charts$LineChart$addBelows, data, belows),\n\t\t\t\t\t\tresult));\n\t\t\t} else {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t});\n\treturn elm$core$List$reverse(\n\t\tA2(stackBelows, dataset, _List_Nil));\n};\nvar terezka$line_charts$LineChart$toDataPoints = F2(\n\tfunction (config, lines) {\n\t\tvar y = terezka$line_charts$Internal$Axis$variable(config.y);\n\t\tvar x = terezka$line_charts$Internal$Axis$variable(config.x);\n\t\tvar addPoint = function (datum) {\n\t\t\tvar _n1 = _Utils_Tuple2(\n\t\t\t\tx(datum),\n\t\t\t\ty(datum));\n\t\t\tif (_n1.a.$ === 'Just') {\n\t\t\t\tif (_n1.b.$ === 'Just') {\n\t\t\t\t\tvar x_ = _n1.a.a;\n\t\t\t\t\tvar y_ = _n1.b.a;\n\t\t\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Data$Data,\n\t\t\t\t\t\t\tdatum,\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Data$Point, x_, y_),\n\t\t\t\t\t\t\ttrue));\n\t\t\t\t} else {\n\t\t\t\t\tvar x_ = _n1.a.a;\n\t\t\t\t\tvar _n2 = _n1.b;\n\t\t\t\t\treturn elm$core$Maybe$Just(\n\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Data$Data,\n\t\t\t\t\t\t\tdatum,\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Data$Point, x_, 0),\n\t\t\t\t\t\t\tfalse));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (_n1.b.$ === 'Just') {\n\t\t\t\t\tvar _n3 = _n1.a;\n\t\t\t\t\tvar y_ = _n1.b.a;\n\t\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t\t} else {\n\t\t\t\t\tvar _n4 = _n1.a;\n\t\t\t\t\tvar _n5 = _n1.b;\n\t\t\t\t\treturn elm$core$Maybe$Nothing;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tvar data = A2(\n\t\t\telm$core$List$map,\n\t\t\tA2(\n\t\t\t\telm$core$Basics$composeR,\n\t\t\t\tterezka$line_charts$Internal$Line$data,\n\t\t\t\telm$core$List$filterMap(addPoint)),\n\t\t\tlines);\n\t\tvar _n0 = config.area;\n\t\tswitch (_n0.$) {\n\t\t\tcase 'None':\n\t\t\t\treturn data;\n\t\t\tcase 'Normal':\n\t\t\t\treturn data;\n\t\t\tcase 'Stacked':\n\t\t\t\treturn terezka$line_charts$LineChart$stack(data);\n\t\t\tdefault:\n\t\t\t\treturn terezka$line_charts$LineChart$normalize(\n\t\t\t\t\tterezka$line_charts$LineChart$stack(data));\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Axis$pixels = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.pixels;\n};\nvar terezka$line_charts$Internal$Axis$range = function (_n0) {\n\tvar config = _n0.a;\n\treturn config.range;\n};\nvar terezka$line_charts$LineChart$Coordinate$Range = F2(\n\tfunction (min, max) {\n\t\treturn {max: max, min: min};\n\t});\nvar terezka$line_charts$Internal$Axis$Range$applyX = F2(\n\tfunction (range, system) {\n\t\tswitch (range.$) {\n\t\t\tcase 'Padded':\n\t\t\t\tvar padMin = range.a;\n\t\t\t\tvar padMax = range.b;\n\t\t\t\tvar _n1 = system;\n\t\t\t\tvar frame = _n1.frame;\n\t\t\t\tvar _n2 = frame;\n\t\t\t\tvar size = _n2.size;\n\t\t\t\tvar system_ = _Utils_update(\n\t\t\t\t\tsystem,\n\t\t\t\t\t{\n\t\t\t\t\t\tframe: _Utils_update(\n\t\t\t\t\t\t\tframe,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsize: _Utils_update(\n\t\t\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\twidth: A2(elm$core$Basics$max, 1, (size.width - padMin) - padMax)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\tvar scale = terezka$line_charts$LineChart$Coordinate$scaleDataX(system_);\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$LineChart$Coordinate$Range,\n\t\t\t\t\tsystem.x.min - scale(padMin),\n\t\t\t\t\tsystem.x.max + scale(padMax));\n\t\t\tcase 'Window':\n\t\t\t\tvar min = range.a;\n\t\t\t\tvar max = range.b;\n\t\t\t\treturn A2(terezka$line_charts$LineChart$Coordinate$Range, min, max);\n\t\t\tdefault:\n\t\t\t\tvar toRange = range.a;\n\t\t\t\treturn toRange(system.x);\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Axis$Range$applyY = F2(\n\tfunction (range, system) {\n\t\tswitch (range.$) {\n\t\t\tcase 'Padded':\n\t\t\t\tvar padMin = range.a;\n\t\t\t\tvar padMax = range.b;\n\t\t\t\tvar _n1 = system;\n\t\t\t\tvar frame = _n1.frame;\n\t\t\t\tvar _n2 = frame;\n\t\t\t\tvar size = _n2.size;\n\t\t\t\tvar system_ = _Utils_update(\n\t\t\t\t\tsystem,\n\t\t\t\t\t{\n\t\t\t\t\t\tframe: _Utils_update(\n\t\t\t\t\t\t\tframe,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsize: _Utils_update(\n\t\t\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\theight: A2(elm$core$Basics$max, 1, (size.height - padMin) - padMax)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\tvar scale = terezka$line_charts$LineChart$Coordinate$scaleDataY(system_);\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$LineChart$Coordinate$Range,\n\t\t\t\t\tsystem.y.min - scale(padMin),\n\t\t\t\t\tsystem.y.max + scale(padMax));\n\t\t\tcase 'Window':\n\t\t\t\tvar min = range.a;\n\t\t\t\tvar max = range.b;\n\t\t\t\treturn A2(terezka$line_charts$LineChart$Coordinate$Range, min, max);\n\t\t\tdefault:\n\t\t\t\tvar toRange = range.a;\n\t\t\t\treturn toRange(system.y);\n\t\t}\n\t});\nvar terezka$line_charts$Internal$Coordinate$Frame = F2(\n\tfunction (margin, size) {\n\t\treturn {margin: margin, size: size};\n\t});\nvar terezka$line_charts$Internal$Coordinate$Size = F2(\n\tfunction (width, height) {\n\t\treturn {height: height, width: width};\n\t});\nvar terezka$line_charts$Internal$Coordinate$ground = function (range_) {\n\treturn _Utils_update(\n\t\trange_,\n\t\t{\n\t\t\tmin: A2(elm$core$Basics$min, range_.min, 0)\n\t\t});\n};\nvar elm$core$List$maximum = function (list) {\n\tif (list.b) {\n\t\tvar x = list.a;\n\t\tvar xs = list.b;\n\t\treturn elm$core$Maybe$Just(\n\t\t\tA3(elm$core$List$foldl, elm$core$Basics$max, x, xs));\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar terezka$line_charts$Internal$Coordinate$maximum = function (toValue) {\n\treturn A2(\n\t\telm$core$Basics$composeR,\n\t\telm$core$List$map(toValue),\n\t\tA2(\n\t\t\telm$core$Basics$composeR,\n\t\t\telm$core$List$maximum,\n\t\t\telm$core$Maybe$withDefault(1)));\n};\nvar elm$core$List$minimum = function (list) {\n\tif (list.b) {\n\t\tvar x = list.a;\n\t\tvar xs = list.b;\n\t\treturn elm$core$Maybe$Just(\n\t\t\tA3(elm$core$List$foldl, elm$core$Basics$min, x, xs));\n\t} else {\n\t\treturn elm$core$Maybe$Nothing;\n\t}\n};\nvar terezka$line_charts$Internal$Coordinate$minimum = function (toValue) {\n\treturn A2(\n\t\telm$core$Basics$composeR,\n\t\telm$core$List$map(toValue),\n\t\tA2(\n\t\t\telm$core$Basics$composeR,\n\t\t\telm$core$List$minimum,\n\t\t\telm$core$Maybe$withDefault(0)));\n};\nvar terezka$line_charts$Internal$Coordinate$range = F2(\n\tfunction (toValue, data) {\n\t\tvar range_ = {\n\t\t\tmax: A2(terezka$line_charts$Internal$Coordinate$maximum, toValue, data),\n\t\t\tmin: A2(terezka$line_charts$Internal$Coordinate$minimum, toValue, data)\n\t\t};\n\t\treturn _Utils_eq(range_.min, range_.max) ? _Utils_update(\n\t\t\trange_,\n\t\t\t{max: range_.max + 1}) : range_;\n\t});\nvar terezka$line_charts$LineChart$toSystem = F2(\n\tfunction (config, data) {\n\t\tvar yRange = A2(\n\t\t\tterezka$line_charts$Internal$Coordinate$range,\n\t\t\tA2(\n\t\t\t\telm$core$Basics$composeR,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.point;\n\t\t\t\t},\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.y;\n\t\t\t\t}),\n\t\t\tdata);\n\t\tvar xRange = A2(\n\t\t\tterezka$line_charts$Internal$Coordinate$range,\n\t\t\tA2(\n\t\t\t\telm$core$Basics$composeR,\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.point;\n\t\t\t\t},\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.x;\n\t\t\t\t}),\n\t\t\tdata);\n\t\tvar size = A2(\n\t\t\tterezka$line_charts$Internal$Coordinate$Size,\n\t\t\tterezka$line_charts$Internal$Axis$pixels(config.x),\n\t\t\tterezka$line_charts$Internal$Axis$pixels(config.y));\n\t\tvar hasArea = terezka$line_charts$Internal$Area$hasArea(config.area);\n\t\tvar container_ = A2(terezka$line_charts$Internal$Container$properties, elm$core$Basics$identity, config.container);\n\t\tvar frame = A2(terezka$line_charts$Internal$Coordinate$Frame, container_.margin, size);\n\t\tvar adjustDomainRange = function (domain) {\n\t\t\treturn hasArea ? terezka$line_charts$Internal$Coordinate$ground(domain) : domain;\n\t\t};\n\t\tvar system = {\n\t\t\tframe: frame,\n\t\t\tid: container_.id,\n\t\t\tx: xRange,\n\t\t\txData: xRange,\n\t\t\ty: adjustDomainRange(yRange),\n\t\t\tyData: yRange\n\t\t};\n\t\treturn _Utils_update(\n\t\t\tsystem,\n\t\t\t{\n\t\t\t\tx: A2(\n\t\t\t\t\tterezka$line_charts$Internal$Axis$Range$applyX,\n\t\t\t\t\tterezka$line_charts$Internal$Axis$range(config.x),\n\t\t\t\t\tsystem),\n\t\t\t\ty: A2(\n\t\t\t\t\tterezka$line_charts$Internal$Axis$Range$applyY,\n\t\t\t\t\tterezka$line_charts$Internal$Axis$range(config.y),\n\t\t\t\t\tsystem)\n\t\t\t});\n\t});\nvar terezka$line_charts$LineChart$viewBoxAttribute = function (_n0) {\n\tvar frame = _n0.frame;\n\treturn elm$svg$Svg$Attributes$viewBox(\n\t\t'0 0 ' + (elm$core$String$fromFloat(frame.size.width) + (' ' + elm$core$String$fromFloat(frame.size.height))));\n};\nvar terezka$line_charts$LineChart$viewCustom = F2(\n\tfunction (config, lines) {\n\t\tvar junkLineInfo = function (line_) {\n\t\t\treturn _Utils_Tuple3(\n\t\t\t\tA3(terezka$line_charts$Internal$Line$color, config.line, line_, _List_Nil),\n\t\t\t\tterezka$line_charts$Internal$Line$label(line_),\n\t\t\t\tterezka$line_charts$Internal$Line$data(line_));\n\t\t};\n\t\tvar getJunk = A3(\n\t\t\tterezka$line_charts$Internal$Junk$getLayers,\n\t\t\tA2(elm$core$List$map, junkLineInfo, lines),\n\t\t\tterezka$line_charts$Internal$Axis$variable(config.x),\n\t\t\tterezka$line_charts$Internal$Axis$variable(config.y));\n\t\tvar data = A2(terezka$line_charts$LineChart$toDataPoints, config, lines);\n\t\tvar dataAll = elm$core$List$concat(data);\n\t\tvar dataSafe = A2(\n\t\t\telm$core$List$map,\n\t\t\telm$core$List$filter(\n\t\t\t\tfunction ($) {\n\t\t\t\t\treturn $.isReal;\n\t\t\t\t}),\n\t\t\tdata);\n\t\tvar dataAllSafe = elm$core$List$concat(dataSafe);\n\t\tvar system = A2(terezka$line_charts$LineChart$toSystem, config, dataAllSafe);\n\t\tvar viewLines = terezka$line_charts$Internal$Line$view(\n\t\t\t{area: config.area, dotsConfig: config.dots, interpolation: config.interpolation, lineConfig: config.line, system: system});\n\t\tvar viewLegends = terezka$line_charts$Internal$Legends$view(\n\t\t\t{\n\t\t\t\tarea: config.area,\n\t\t\t\tdata: dataSafe,\n\t\t\t\tdotsConfig: config.dots,\n\t\t\t\tlegends: config.legends,\n\t\t\t\tlineConfig: config.line,\n\t\t\t\tlines: lines,\n\t\t\t\tsystem: system,\n\t\t\t\tx: terezka$line_charts$Internal$Axis$variable(config.x),\n\t\t\t\ty: terezka$line_charts$Internal$Axis$variable(config.y)\n\t\t\t});\n\t\tvar attributes = elm$core$List$concat(\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Container$properties,\n\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\treturn $.attributesSvg;\n\t\t\t\t\t},\n\t\t\t\t\tconfig.container),\n\t\t\t\t\tA3(terezka$line_charts$Internal$Events$toContainerAttributes, dataAll, system, config.events),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tterezka$line_charts$LineChart$viewBoxAttribute(system)\n\t\t\t\t\t])\n\t\t\t\t]));\n\t\tvar addGrid = terezka$line_charts$Internal$Junk$addBelow(\n\t\t\tA4(terezka$line_charts$Internal$Grid$view, system, config.x, config.y, config.grid));\n\t\tvar junk = addGrid(\n\t\t\tA2(getJunk, system, config.junk));\n\t\treturn A4(\n\t\t\tterezka$line_charts$LineChart$container,\n\t\t\tconfig,\n\t\t\tsystem,\n\t\t\tjunk.html,\n\t\t\tA2(\n\t\t\t\telm$svg$Svg$svg,\n\t\t\t\tattributes,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$svg$Svg$defs,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$clipPath(system)\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$svg$Svg$g,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__junk--below')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\tjunk.below),\n\t\t\t\t\t\tA2(viewLines, lines, data),\n\t\t\t\t\t\tA3(terezka$line_charts$LineChart$chartAreaPlatform, config, dataAll, system),\n\t\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewHorizontal, system, config.intersection, config.x),\n\t\t\t\t\t\tA3(terezka$line_charts$Internal$Axis$viewVertical, system, config.intersection, config.y),\n\t\t\t\t\t\tviewLegends,\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$svg$Svg$g,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$svg$Svg$Attributes$class('chart__junk--above')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\tjunk.above)\n\t\t\t\t\t])));\n\t});\nvar terezka$line_charts$Internal$Area$None = {$: 'None'};\nvar terezka$line_charts$Internal$Area$none = terezka$line_charts$Internal$Area$None;\nvar terezka$line_charts$LineChart$Area$default = terezka$line_charts$Internal$Area$none;\nvar terezka$line_charts$Internal$Axis$Title$atDataMax = function () {\n\tvar position = F2(\n\t\tfunction (data, range) {\n\t\t\treturn A2(elm$core$Basics$min, data.max, range.max);\n\t\t});\n\treturn terezka$line_charts$Internal$Axis$Title$atPosition(position);\n}();\nvar terezka$line_charts$Internal$Axis$Values$float = function (amount) {\n\tif (amount.$ === 'Exactly') {\n\t\tvar amount_ = amount.a;\n\t\treturn A3(terezka$line_charts$Internal$Axis$Values$values, true, true, amount_);\n\t} else {\n\t\tvar amount_ = amount.a;\n\t\treturn A3(terezka$line_charts$Internal$Axis$Values$values, true, false, amount_);\n\t}\n};\nvar terezka$line_charts$Internal$Axis$Tick$float = function (n) {\n\treturn terezka$line_charts$Internal$Axis$Tick$custom(\n\t\t{\n\t\t\tcolor: terezka$line_charts$LineChart$Colors$gray,\n\t\t\tdirection: terezka$line_charts$Internal$Axis$Tick$Negative,\n\t\t\tgrid: true,\n\t\t\tlabel: elm$core$Maybe$Just(\n\t\t\t\tA2(\n\t\t\t\t\tterezka$line_charts$Internal$Svg$label,\n\t\t\t\t\t'inherit',\n\t\t\t\t\telm$core$String$fromFloat(n))),\n\t\t\tlength: 5,\n\t\t\tposition: n,\n\t\t\twidth: 1\n\t\t});\n};\nvar terezka$line_charts$LineChart$Axis$Tick$float = terezka$line_charts$Internal$Axis$Tick$float;\nvar terezka$line_charts$Internal$Axis$default = F3(\n\tfunction (pixels_, title_, variable_) {\n\t\treturn terezka$line_charts$Internal$Axis$custom(\n\t\t\t{\n\t\t\t\taxisLine: terezka$line_charts$Internal$Axis$Line$rangeFrame(terezka$line_charts$LineChart$Colors$gray),\n\t\t\t\tpixels: pixels_,\n\t\t\t\trange: A2(terezka$line_charts$Internal$Axis$Range$padded, 20, 20),\n\t\t\t\tticks: terezka$line_charts$Internal$Axis$Ticks$custom(\n\t\t\t\t\tF2(\n\t\t\t\t\t\tfunction (data, range_) {\n\t\t\t\t\t\t\tvar smallest = A2(terezka$line_charts$Internal$Coordinate$smallestRange, data, range_);\n\t\t\t\t\t\t\tvar rangeSmall = smallest.max - smallest.min;\n\t\t\t\t\t\t\tvar rangeLong = range_.max - range_.min;\n\t\t\t\t\t\t\tvar diff = 1 - ((rangeLong - rangeSmall) / rangeLong);\n\t\t\t\t\t\t\tvar amount = elm$core$Basics$round((diff * pixels_) / 90);\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$Axis$Tick$float,\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Axis$Values$float,\n\t\t\t\t\t\t\t\t\tterezka$line_charts$Internal$Axis$Values$around(amount),\n\t\t\t\t\t\t\t\t\tsmallest));\n\t\t\t\t\t\t})),\n\t\t\t\ttitle: A3(terezka$line_charts$Internal$Axis$Title$atDataMax, 0, 0, title_),\n\t\t\t\tvariable: A2(elm$core$Basics$composeL, elm$core$Maybe$Just, variable_)\n\t\t\t});\n\t});\nvar terezka$line_charts$LineChart$Axis$default = terezka$line_charts$Internal$Axis$default;\nvar terezka$line_charts$Internal$Axis$Intersection$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Axis$Intersection$custom = F2(\n\tfunction (toX, toY) {\n\t\treturn terezka$line_charts$Internal$Axis$Intersection$Config(\n\t\t\tfunction (_n0) {\n\t\t\t\tvar x = _n0.x;\n\t\t\t\tvar y = _n0.y;\n\t\t\t\treturn A2(\n\t\t\t\t\tterezka$line_charts$Internal$Data$Point,\n\t\t\t\t\ttoX(x),\n\t\t\t\t\ttoY(y));\n\t\t\t});\n\t});\nvar terezka$line_charts$Internal$Axis$Intersection$default = A2(\n\tterezka$line_charts$Internal$Axis$Intersection$custom,\n\tfunction ($) {\n\t\treturn $.min;\n\t},\n\tfunction ($) {\n\t\treturn $.min;\n\t});\nvar terezka$line_charts$LineChart$Axis$Intersection$default = terezka$line_charts$Internal$Axis$Intersection$default;\nvar terezka$line_charts$LineChart$Colors$blue = A3(avh4$elm_color$Color$rgb255, 3, 169, 244);\nvar terezka$line_charts$Internal$Container$Margin = F4(\n\tfunction (top, right, bottom, left) {\n\t\treturn {bottom: bottom, left: left, right: right, top: top};\n\t});\nvar terezka$line_charts$Internal$Container$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Container$custom = terezka$line_charts$Internal$Container$Config;\nvar terezka$line_charts$Internal$Container$Relative = {$: 'Relative'};\nvar terezka$line_charts$Internal$Container$relative = terezka$line_charts$Internal$Container$Relative;\nvar terezka$line_charts$Internal$Container$responsive = function (id) {\n\treturn terezka$line_charts$Internal$Container$custom(\n\t\t{\n\t\t\tattributesHtml: _List_Nil,\n\t\t\tattributesSvg: _List_Nil,\n\t\t\tid: id,\n\t\t\tmargin: A4(terezka$line_charts$Internal$Container$Margin, 60, 140, 60, 80),\n\t\t\tsize: terezka$line_charts$Internal$Container$relative\n\t\t});\n};\nvar terezka$line_charts$LineChart$Container$responsive = terezka$line_charts$Internal$Container$responsive;\nvar terezka$line_charts$Internal$Dots$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Dots$Disconnected = function (a) {\n\treturn {$: 'Disconnected', a: a};\n};\nvar terezka$line_charts$Internal$Dots$Style = function (a) {\n\treturn {$: 'Style', a: a};\n};\nvar terezka$line_charts$Internal$Dots$style = F2(\n\tfunction (radius, variety) {\n\t\treturn terezka$line_charts$Internal$Dots$Style(\n\t\t\t{radius: radius, variety: variety});\n\t});\nvar terezka$line_charts$Internal$Dots$disconnected = F2(\n\tfunction (radius, border) {\n\t\treturn A2(\n\t\t\tterezka$line_charts$Internal$Dots$style,\n\t\t\tradius,\n\t\t\tterezka$line_charts$Internal$Dots$Disconnected(border));\n\t});\nvar terezka$line_charts$Internal$Dots$default = terezka$line_charts$Internal$Dots$Config(\n\t{\n\t\tindividual: function (_n0) {\n\t\t\treturn A2(terezka$line_charts$Internal$Dots$disconnected, 10, 2);\n\t\t},\n\t\tlegend: function (_n1) {\n\t\t\treturn A2(terezka$line_charts$Internal$Dots$disconnected, 10, 2);\n\t\t}\n\t});\nvar terezka$line_charts$LineChart$Dots$default = terezka$line_charts$Internal$Dots$default;\nvar terezka$line_charts$Internal$Dots$Square = {$: 'Square'};\nvar terezka$line_charts$LineChart$Dots$square = terezka$line_charts$Internal$Dots$Square;\nvar terezka$line_charts$Internal$Events$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Events$custom = terezka$line_charts$Internal$Events$Config;\nvar terezka$line_charts$Internal$Events$default = terezka$line_charts$Internal$Events$custom(_List_Nil);\nvar terezka$line_charts$LineChart$Events$default = terezka$line_charts$Internal$Events$default;\nvar terezka$line_charts$Internal$Grid$Dots = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Dots', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Grid$dots = terezka$line_charts$Internal$Grid$Dots;\nvar terezka$line_charts$LineChart$Grid$dots = terezka$line_charts$Internal$Grid$dots;\nvar terezka$line_charts$Internal$Interpolation$Linear = {$: 'Linear'};\nvar terezka$line_charts$LineChart$Interpolation$linear = terezka$line_charts$Internal$Interpolation$Linear;\nvar terezka$line_charts$LineChart$Interpolation$default = terezka$line_charts$LineChart$Interpolation$linear;\nvar terezka$line_charts$Internal$Junk$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Junk$Layers = F3(\n\tfunction (below, above, html) {\n\t\treturn {above: above, below: below, html: html};\n\t});\nvar terezka$line_charts$Internal$Junk$none = terezka$line_charts$Internal$Junk$Config(\n\tF4(\n\t\tfunction (_n0, _n1, _n2, _n3) {\n\t\t\treturn A3(terezka$line_charts$Internal$Junk$Layers, _List_Nil, _List_Nil, _List_Nil);\n\t\t}));\nvar terezka$line_charts$LineChart$Junk$default = terezka$line_charts$Internal$Junk$none;\nvar terezka$line_charts$Internal$Legends$Grouped = F2(\n\tfunction (a, b) {\n\t\treturn {$: 'Grouped', a: a, b: b};\n\t});\nvar terezka$line_charts$Internal$Legends$defaultLegend = F2(\n\tfunction (index, _n0) {\n\t\tvar sample = _n0.sample;\n\t\tvar label = _n0.label;\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__legend'),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, 20, index * 20)\n\t\t\t\t\t\t]))\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tsample,\n\t\t\t\t\tA2(\n\t\t\t\t\telm$svg$Svg$g,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, 40, 4)\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$label, 'inherit', label)\n\t\t\t\t\t\t]))\n\t\t\t\t]));\n\t});\nvar terezka$line_charts$Internal$Legends$defaultLegends = F8(\n\tfunction (toX, toY, offsetX, offsetY, hovered, _arguments, system, legends) {\n\t\treturn A2(\n\t\t\telm$svg$Svg$g,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$class('chart__legends'),\n\t\t\t\t\tterezka$line_charts$Internal$Svg$transform(\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\tterezka$line_charts$Internal$Svg$move,\n\t\t\t\t\t\t\tsystem,\n\t\t\t\t\t\t\ttoX(system.x),\n\t\t\t\t\t\t\ttoY(system.y)),\n\t\t\t\t\t\t\tA2(terezka$line_charts$Internal$Svg$offset, offsetX, offsetY)\n\t\t\t\t\t\t]))\n\t\t\t\t]),\n\t\t\tA2(elm$core$List$indexedMap, terezka$line_charts$Internal$Legends$defaultLegend, legends));\n\t});\nvar terezka$line_charts$Internal$Legends$hover = function (data) {\n\treturn A2(\n\t\tterezka$line_charts$Internal$Legends$Grouped,\n\t\t30,\n\t\tA5(\n\t\t\tterezka$line_charts$Internal$Legends$defaultLegends,\n\t\t\tfunction ($) {\n\t\t\t\treturn $.max;\n\t\t\t},\n\t\t\tfunction ($) {\n\t\t\t\treturn $.max;\n\t\t\t},\n\t\t\t0,\n\t\t\t10,\n\t\t\tdata));\n};\nvar terezka$line_charts$Internal$Legends$default = terezka$line_charts$Internal$Legends$hover(_List_Nil);\nvar terezka$line_charts$LineChart$Legends$default = terezka$line_charts$Internal$Legends$default;\nvar terezka$line_charts$Internal$Line$Config = function (a) {\n\treturn {$: 'Config', a: a};\n};\nvar terezka$line_charts$Internal$Line$Style = function (a) {\n\treturn {$: 'Style', a: a};\n};\nvar terezka$line_charts$Internal$Line$style = F2(\n\tfunction (width, color_) {\n\t\treturn terezka$line_charts$Internal$Line$Style(\n\t\t\t{color: color_, width: width});\n\t});\nvar terezka$line_charts$Internal$Line$default = terezka$line_charts$Internal$Line$Config(\n\tfunction (_n0) {\n\t\treturn A2(terezka$line_charts$Internal$Line$style, 1, elm$core$Basics$identity);\n\t});\nvar terezka$line_charts$LineChart$Line$default = terezka$line_charts$Internal$Line$default;\nvar author$project$Pages$Profile$History$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('container'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'min-height', '500px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Activity in the last month')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('This graph represents your image upload activity in the last month')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.status;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Failed to load activity data')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar activity = _n0.a;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5%')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$viewCustom,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tarea: terezka$line_charts$LineChart$Area$default,\n\t\t\t\t\t\t\t\t\t\tcontainer: terezka$line_charts$LineChart$Container$responsive('line-chart-1'),\n\t\t\t\t\t\t\t\t\t\tdots: terezka$line_charts$LineChart$Dots$default,\n\t\t\t\t\t\t\t\t\t\tevents: terezka$line_charts$LineChart$Events$default,\n\t\t\t\t\t\t\t\t\t\tgrid: A2(terezka$line_charts$LineChart$Grid$dots, 0.5, terezka$line_charts$LineChart$Colors$blue),\n\t\t\t\t\t\t\t\t\t\tinterpolation: terezka$line_charts$LineChart$Interpolation$default,\n\t\t\t\t\t\t\t\t\t\tintersection: terezka$line_charts$LineChart$Axis$Intersection$default,\n\t\t\t\t\t\t\t\t\t\tjunk: terezka$line_charts$LineChart$Junk$default,\n\t\t\t\t\t\t\t\t\t\tlegends: terezka$line_charts$LineChart$Legends$default,\n\t\t\t\t\t\t\t\t\t\tline: terezka$line_charts$LineChart$Line$default,\n\t\t\t\t\t\t\t\t\t\tx: author$project$Pages$Profile$History$xConfig(\n\t\t\t\t\t\t\t\t\t\t\telm$core$List$length(activity)),\n\t\t\t\t\t\t\t\t\t\ty: A3(\n\t\t\t\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$Axis$default,\n\t\t\t\t\t\t\t\t\t\t\t400,\n\t\t\t\t\t\t\t\t\t\t\t'Uploads',\n\t\t\t\t\t\t\t\t\t\t\tfunction ($) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn $.y;\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA4(\n\t\t\t\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$line,\n\t\t\t\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$Colors$blue,\n\t\t\t\t\t\t\t\t\t\t\tterezka$line_charts$LineChart$Dots$square,\n\t\t\t\t\t\t\t\t\t\t\t'Activity',\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Pages$Profile$History$toPoint, activity))\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('My activity')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('This sections contains logs of your activity')\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Profile$Security$ChangePassword = {$: 'ChangePassword'};\nvar author$project$Pages$Profile$Security$ConfirmDelete = {$: 'ConfirmDelete'};\nvar author$project$Pages$Profile$Security$Delete = {$: 'Delete'};\nvar author$project$Pages$Profile$Security$NewPassword = function (a) {\n\treturn {$: 'NewPassword', a: a};\n};\nvar author$project$Pages$Profile$Security$Password = function (a) {\n\treturn {$: 'Password', a: a};\n};\nvar author$project$Pages$Profile$Security$Code = function (a) {\n\treturn {$: 'Code', a: a};\n};\nvar author$project$Pages$Profile$Security$Request = {$: 'Request'};\nvar author$project$Pages$Profile$Security$Verify = {$: 'Verify'};\nvar elm$html$Html$label = _VirtualDom_node('label');\nvar elm$html$Html$Attributes$for = elm$html$Html$Attributes$stringProperty('htmlFor');\nvar author$project$Pages$Profile$Security$viewVerify = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('form-horizontal fade in alert alert-info'),\n\t\t\t\telm$html$Html$Attributes$id('form'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '75%')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h2,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('text-center')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Verify your e-mail address')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Your account is not verified. We will send a verification mail to ' + model.user.email)\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px'),\n\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Security$Request)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Send me the code')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.mailStatus;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Connection error')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Success':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Mail successfully sent')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('verify')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Enter the received code:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('verify'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('code'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.code),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Security$Code)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '10px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Security$Verify)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Verify')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\tvar _n1 = model.codeStatus;\n\t\t\t\t\t\t\t\t\t\tif (_n1.$ === 'Failure') {\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Invalid code')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Profile$Security$view = function (model) {\n\tvar user = model.user;\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Verify your account')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Verification is required for the completion of certain tasks')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = user.verif;\n\t\t\t\tif (!_n0) {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Security$viewVerify(model),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil)\n\t\t\t\t\t\t\t]));\n\t\t\t\t} else {\n\t\t\t\t\treturn A2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '20%'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Your account is verified')\n\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Want to change your password?')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Change your password by filling out the following form.')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-inline')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('old')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Old Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('old'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Security$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('new')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('New Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('new'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.newPassword),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Security$NewPassword)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px'),\n\t\t\t\t\t\t(!model.user.verif) ? elm$html$Html$Attributes$disabled(true) : A2(elm$html$Html$Attributes$style, '', ''),\n\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Security$ChangePassword)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Change Password')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n1 = model.passStatus;\n\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Password change failed')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Success':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Password successfully changed')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Delete my account')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Press the following button if you wish to permanently delete your account. This will also delete your posts and comments!')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n2 = model.delStatus;\n\t\t\t\tswitch (_n2.$) {\n\t\t\t\t\tcase 'None':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-danger'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '15px'),\n\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Security$Delete)\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Delete account')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-danger form-group row'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('del')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Enter your password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('del'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Security$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-danger'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Security$ConfirmDelete)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Confirm')\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Deleting account failed')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$Profile$Settings$Bio = function (a) {\n\treturn {$: 'Bio', a: a};\n};\nvar author$project$Pages$Profile$Settings$Facebook = function (a) {\n\treturn {$: 'Facebook', a: a};\n};\nvar author$project$Pages$Profile$Settings$Github = function (a) {\n\treturn {$: 'Github', a: a};\n};\nvar author$project$Pages$Profile$Settings$Twitter = function (a) {\n\treturn {$: 'Twitter', a: a};\n};\nvar author$project$Pages$Profile$Settings$UpdateSettings = {$: 'UpdateSettings'};\nvar author$project$Pages$Profile$Settings$view = function (model) {\n\tvar user = model.user;\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Update your bio')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Update the description others see on your profile')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$textarea,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$cols(100),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$rows(10),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('bio'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'resize', 'vertical'),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.bio),\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Settings$Bio)\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Link your social accounts')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Share your social accounts with our users!')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('fb')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Link your Facebook:')\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('fb'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.facebook),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Settings$Facebook)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('tw')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Link your Twitter:')\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('tw'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.twitter),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Settings$Twitter)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('git')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Link your Github:')\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('git'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.github),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Profile$Settings$Github)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h3,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Update')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Save all changes to your basic information')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px'),\n\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$Settings$UpdateSettings)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Update Settings')\n\t\t\t\t\t])),\n\t\t\t\t(elm$core$List$length(model.warning) > 0) ? A2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '40px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(elm$core$List$map, elm$html$Html$text, model.warning))\n\t\t\t\t\t])) : elm$html$Html$text('')\n\t\t\t]));\n};\nvar feathericons$elm_feather$FeatherIcons$facebook = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'facebook',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$d('M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Social$viewFacebook = function (url) {\n\treturn A2(\n\t\telm$html$Html$a,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$href(url)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary social'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', '#3b5998'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '0px solid'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'box-shadow', '0px 12px 15px rgba(0, 0, 0, 0.4)'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 25, feathericons$elm_feather$FeatherIcons$facebook))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar feathericons$elm_feather$FeatherIcons$github = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'github',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$d('M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Social$viewGithub = function (url) {\n\treturn A2(\n\t\telm$html$Html$a,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$href(url)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary social'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', '#211F1F'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '0px solid'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'box-shadow', '0px 12px 15px rgba(0, 0, 0, 0.4)'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 25, feathericons$elm_feather$FeatherIcons$github))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar feathericons$elm_feather$FeatherIcons$twitter = A2(\n\tfeathericons$elm_feather$FeatherIcons$makeBuilder,\n\t'twitter',\n\t_List_fromArray(\n\t\t[\n\t\t\tA2(\n\t\t\telm$svg$Svg$path,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$svg$Svg$Attributes$d('M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z')\n\t\t\t\t]),\n\t\t\t_List_Nil)\n\t\t]));\nvar author$project$Social$viewTwitter = function (url) {\n\treturn A2(\n\t\telm$html$Html$a,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$href(url)\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary social'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background-color', '#00acee'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-right', '5px'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '0px solid'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'box-shadow', '0px 12px 15px rgba(0, 0, 0, 0.4)'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'transition', 'all 0.3s ease 0s'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\tfeathericons$elm_feather$FeatherIcons$toHtml,\n\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\tA2(feathericons$elm_feather$FeatherIcons$withSize, 25, feathericons$elm_feather$FeatherIcons$twitter))\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar elm$html$Html$br = _VirtualDom_node('br');\nvar author$project$Pages$Profile$view = function (model) {\n\tvar user = model.user;\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.status;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '400px'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '25%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Fetching data from the server')\n\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '400px'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '25%'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$h2,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Profile failed to load')\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('jumbotron')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('avatar'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '10px solid white'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$src(user.avatar),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$height(300),\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$width(300),\n\t\t\t\t\t\t\t\t\t\t\t\t\t(user.token !== 'Hidden') ? elm$html$Html$Events$onClick(author$project$Pages$Profile$Select) : A2(elm$html$Html$Attributes$style, '', '')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$br, _List_Nil, _List_Nil),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(user.username),\n\t\t\t\t\t\t\t\t\t\t\t\t\tuser.verif ? A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok-circle'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'green'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Verified')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil) : A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove-circle'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'red'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$title('Not verified')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$ul,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n1 = user.facebook;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n1.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar url = _n1.a;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn author$project$Social$viewFacebook(url);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n2 = user.twitter;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n2.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar url = _n2.a;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn author$project$Social$viewTwitter(url);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n3 = user.github;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n3.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar url = _n3.a;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn author$project$Social$viewGithub(url);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$i,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(user.bio)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t(user.token !== 'Hidden') ? A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$ul,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('nav nav-pills'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-30px')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'black'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$SwitchInformation),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Information')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n4 = model.tab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n4.$ === 'Information') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '90%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '1.5px solid #00acee')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'black'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$SwitchFavorites),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Favorites')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n5 = model.tab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n5.$ === 'Favorites') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '90%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '1.5px solid #00acee')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'black'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$SwitchSettings),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Settings')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n6 = model.tab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n6.$ === 'Settings') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '90%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '1.5px solid #00acee')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'black'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$SwitchSecurity),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Security')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n7 = model.tab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n7.$ === 'Security') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '90%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '1.5px solid #00acee')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$li,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'black'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$SwitchHistory),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('History')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n8 = model.tab;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_n8.$ === 'History') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '90%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-5px'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '1.5px solid #00acee')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t])) : elm$html$Html$text(''),\n\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\tvar _n9 = model.tab;\n\t\t\t\t\t\t\t\t\tswitch (_n9.$) {\n\t\t\t\t\t\t\t\t\t\tcase 'Information':\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('list-group')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Account information')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Here are some information about ' + (user.username + '\\'s account'))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Registered at ' + author$project$TimeFormat$formatDate(user.registered)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$hr, _List_Nil, _List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$h3,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Post history')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Preview of ' + (user.username + '\\'s posts'))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar _n10 = model.postsStatus;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (_n10.$) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'LoadingPosts':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA3(perzanko$elm_loading$Loading$render, perzanko$elm_loading$Loading$Circle, perzanko$elm_loading$Loading$defaultConfig, perzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'FailurePosts':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Connection error')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar posts = _n10.a;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn elm$core$List$isEmpty(posts) ? A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-style', 'italic')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('This user has no posts')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])) : A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Image$showTab, posts)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_Utils_eq(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$length(posts),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$postCount) ? A2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Profile$LoadMore)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Load more')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])) : elm$html$Html$text('')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t\tcase 'Settings':\n\t\t\t\t\t\t\t\t\t\t\tvar tab = _n9.a;\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$SettingsMsg,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Settings$view(tab));\n\t\t\t\t\t\t\t\t\t\tcase 'Security':\n\t\t\t\t\t\t\t\t\t\t\tvar tab = _n9.a;\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$SecurityMsg,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Security$view(tab));\n\t\t\t\t\t\t\t\t\t\tcase 'History':\n\t\t\t\t\t\t\t\t\t\t\tvar tab = _n9.a;\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$HistoryMsg,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$History$view(tab));\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\tvar tab = _n9.a;\n\t\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$FavoritesMsg,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$Favorites$view(tab));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$Results$viewFailure = function (error) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '40%'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$text(error)\n\t\t\t]));\n};\nvar author$project$Pages$Results$viewHeading = F2(\n\tfunction (name, count) {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_Nil,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$h1,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\tname + (' (' + (elm$core$String$fromInt(count) + ')')))\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$hr,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_Nil)\n\t\t\t\t]));\n\t});\nvar author$project$User$showPreview = function (user) {\n\treturn A2(\n\t\telm$html$Html$a,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$href('profile/' + user.username),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'display', 'inline-block'),\n\t\t\t\telm$html$Html$Attributes$class('preview'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '250px'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '200px')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$img,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$src(user.avatar),\n\t\t\t\t\t\telm$html$Html$Attributes$class('previewAvatar'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'draggable', 'false'),\n\t\t\t\t\t\telm$html$Html$Attributes$height(200),\n\t\t\t\t\t\telm$html$Html$Attributes$width(200),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border-radius', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', '5px solid white'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'user-drag', 'none'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'user-select', 'none')\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text(user.username),\n\t\t\t\t\t\tuser.verif ? A2(\n\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok-circle'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'green'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_Nil) : A2(\n\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove-circle'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'red'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$Results$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-info'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Showing results for: \\\"' + (model.query + '\\\"'))\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.imageStatus;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'LoadingImage':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Results$viewHeading, 'Images', 0),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'FailureImage':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Results$viewHeading, 'Images', 0),\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Results$viewFailure('Connection error')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar container = _n0.a;\n\t\t\t\t\t\tvar images = container.images;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Results$viewHeading,\n\t\t\t\t\t\t\t\t\t'Images',\n\t\t\t\t\t\t\t\t\telm$core$List$length(images)),\n\t\t\t\t\t\t\t\t\telm$core$List$isEmpty(images) ? author$project$Pages$Results$viewFailure('No results matching query \\\"' + (model.query + '\\\"')) : A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Image$showPreview, images))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n1 = model.userStatus;\n\t\t\t\tswitch (_n1.$) {\n\t\t\t\t\tcase 'LoadingUser':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Results$viewHeading, 'Users', 0),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'FailureUser':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Results$viewHeading, 'Users', 0),\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Results$viewFailure('Connection error')\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar container = _n1.a;\n\t\t\t\t\t\tvar users = container.users;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\tauthor$project$Pages$Results$viewHeading,\n\t\t\t\t\t\t\t\t\t'Users',\n\t\t\t\t\t\t\t\t\telm$core$List$length(users)),\n\t\t\t\t\t\t\t\t\telm$core$List$isEmpty(users) ? author$project$Pages$Results$viewFailure('No results matching query \\\"' + (model.query + '\\\"')) : A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$User$showPreview, users))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}(),\n\t\t\t\tA2(author$project$Pages$Results$viewHeading, 'Tags', 0),\n\t\t\t\telm$html$Html$text('If you wanted to search for tags, click '),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$a,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$href('/tags?q=' + model.query),\n\t\t\t\t\t\telm$html$Html$Attributes$class('preview')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('here')\n\t\t\t\t\t]))\n\t\t\t]));\n};\nvar author$project$Pages$SignIn$Name = function (a) {\n\treturn {$: 'Name', a: a};\n};\nvar author$project$Pages$SignIn$Password = function (a) {\n\treturn {$: 'Password', a: a};\n};\nvar author$project$Pages$SignIn$Submit = {$: 'Submit'};\nvar author$project$Pages$SignIn$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('form-horizontal'),\n\t\t\t\telm$html$Html$Attributes$id('form'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '75%')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h2,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('text-center')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Log In with an existing account')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '10px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Don\\'t have an account?'),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_up'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Sign Up')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n0 = model.warning;\n\t\t\t\t\t\t\t\tif (_n0 === 'Enter your username') {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('username')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Username:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('username'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignIn$Name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('username')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Username:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('username'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignIn$Name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n1 = model.warning;\n\t\t\t\t\t\t\t\tif (_n1 === 'Enter your password') {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('password')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignIn$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('password')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignIn$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$SignIn$Submit)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Sign in')\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n2 = model.warning;\n\t\t\t\tswitch (_n2) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\tvar _n3 = model.status;\n\t\t\t\t\t\tswitch (_n3.$) {\n\t\t\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-info'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA3(perzanko$elm_loading$Loading$render, perzanko$elm_loading$Loading$Circle, perzanko$elm_loading$Loading$defaultConfig, perzanko$elm_loading$Loading$On),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(model.warning)\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\t\t\tvar err = _n3.a;\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Error')\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Incorrect username or password')\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\tcase '':\n\t\t\t\t\t\treturn A2(elm$html$Html$div, _List_Nil, _List_Nil);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text(model.warning)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$SignUp$Email = function (a) {\n\treturn {$: 'Email', a: a};\n};\nvar author$project$Pages$SignUp$Name = function (a) {\n\treturn {$: 'Name', a: a};\n};\nvar author$project$Pages$SignUp$Password = function (a) {\n\treturn {$: 'Password', a: a};\n};\nvar author$project$Pages$SignUp$PasswordAgain = function (a) {\n\treturn {$: 'PasswordAgain', a: a};\n};\nvar author$project$Pages$SignUp$Submit = {$: 'Submit'};\nvar author$project$Pages$SignUp$toString = function (err) {\n\tswitch (err.$) {\n\t\tcase 'Timeout':\n\t\t\treturn 'Timeout exceeded';\n\t\tcase 'NetworkError':\n\t\t\treturn 'Network error';\n\t\tcase 'BadUrl':\n\t\t\tvar url = err.a;\n\t\t\treturn 'Bad url';\n\t\tcase 'BadStatus':\n\t\t\tvar s = err.a;\n\t\t\treturn 'Bad status';\n\t\tdefault:\n\t\t\tvar s = err.a;\n\t\t\treturn 'Bad body : ' + s;\n\t}\n};\nvar author$project$Pages$SignUp$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('form-horizontal'),\n\t\t\t\telm$html$Html$Attributes$id('form'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '75%')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h2,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('text-center')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Create an Account')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '10px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Already have an account?'),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_in'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-left', '5px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$text('Sign In')\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n0 = model.errorUsername;\n\t\t\t\t\t\t\t\tif (_n0) {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('username')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Username:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('username'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar _n1 = author$project$Pages$SignUp$validateUsername(model.name);\n\t\t\t\t\t\t\t\t\tif (_n1) {\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-success has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('username')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Username:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('username'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('username')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Username:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('username'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n2 = model.errorEmail;\n\t\t\t\t\t\t\t\tif (_n2) {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('email')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('E-mail:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.email),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Email)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar _n3 = author$project$Pages$SignUp$validateEmail(model.email);\n\t\t\t\t\t\t\t\t\tif (_n3.$ === 'Just') {\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-success has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('email')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('E-mail:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.email),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Email)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('email')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('E-mail:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('email'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.email),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Email)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n4 = author$project$Pages$SignUp$len(model.password);\n\t\t\t\t\t\t\t\tif (!_n4) {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('password')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-success has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('password')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.password),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$Password)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\t\tvar _n5 = A2(author$project$Pages$SignUp$validatePassword, model.password, model.passwordAgain);\n\t\t\t\t\t\t\t\tif (!_n5) {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-error has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('passwordAgain')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password again:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('passwordAgain'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.passwordAgain),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$PasswordAgain)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-success has-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$label,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$for('passwordAgain')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Password again:')\n\t\t\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('passwordAgain'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('password'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.passwordAgain),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$SignUp$PasswordAgain)\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-ok form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}()\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$button,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$SignUp$Submit)\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Sign Up'),\n\t\t\t\t\t\tA2(elm$html$Html$div, _List_Nil, _List_Nil)\n\t\t\t\t\t])),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n6 = model.warning;\n\t\t\t\tswitch (_n6) {\n\t\t\t\t\tcase '':\n\t\t\t\t\t\treturn A2(elm$html$Html$div, _List_Nil, _List_Nil);\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\tvar _n7 = model.status;\n\t\t\t\t\t\tswitch (_n7.$) {\n\t\t\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-info'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA3(perzanko$elm_loading$Loading$render, perzanko$elm_loading$Loading$Circle, perzanko$elm_loading$Loading$defaultConfig, perzanko$elm_loading$Loading$On),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(model.warning)\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tcase 'Failure':\n\t\t\t\t\t\t\t\tvar err = _n7.a;\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$SignUp$toString(err))\n\t\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_Nil);\n\t\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '15px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text(model.warning)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$Tags$Query = function (a) {\n\treturn {$: 'Query', a: a};\n};\nvar author$project$Pages$Tags$pageSize = 9;\nvar author$project$Pages$Tags$Jump = function (a) {\n\treturn {$: 'Jump', a: a};\n};\nvar author$project$Pages$Tags$viewButton = F2(\n\tfunction (model, num) {\n\t\treturn A2(\n\t\t\telm$html$Html$button,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$Attributes$class('btn btn-default'),\n\t\t\t\t\t_Utils_eq(model.page, num) ? A2(elm$html$Html$Attributes$style, 'opacity', '0.3') : A2(elm$html$Html$Attributes$style, '', ''),\n\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\tauthor$project$Pages$Tags$Jump(num))\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\telm$core$String$fromInt(num))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Tags$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_Nil,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h1,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Search images based on tags')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('The search is not case sensitive')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '70%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Search tags'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.query),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Tags$Query)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'grey'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-search form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$hr,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.status;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\tcase 'Success':\n\t\t\t\t\t\tvar container = _n0.a;\n\t\t\t\t\t\tvar images = container.images;\n\t\t\t\t\t\tvar _n1 = elm$core$List$length(images);\n\t\t\t\t\t\tif (!_n1) {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text('No results for tag '),\n\t\t\t\t\t\t\t\t\t\tauthor$project$Tag$view(model.query)\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t'Query returned ' + (elm$core$String$fromInt(container.total) + ' results'))\n\t\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel panel-default'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$Image$showPreview, images)),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Tags$viewButton(model),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$range,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Tags$pageSize)))),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(model.page) + ('/' + elm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Tags$pageSize))))\n\t\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar error = _n0.a;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text(error)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Pages$Upload$Description = function (a) {\n\treturn {$: 'Description', a: a};\n};\nvar author$project$Pages$Upload$KeyHandler = function (a) {\n\treturn {$: 'KeyHandler', a: a};\n};\nvar author$project$Pages$Upload$Pick = {$: 'Pick'};\nvar author$project$Pages$Upload$RemoveImg = {$: 'RemoveImg'};\nvar author$project$Pages$Upload$Tag = function (a) {\n\treturn {$: 'Tag', a: a};\n};\nvar author$project$Pages$Upload$Title = function (a) {\n\treturn {$: 'Title', a: a};\n};\nvar author$project$Pages$Upload$Upload = {$: 'Upload'};\nvar author$project$Pages$Upload$cancelButton = F2(\n\tfunction (msg, offset) {\n\t\treturn A2(\n\t\t\telm$html$Html$button,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'position', 'absolute'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'top', offset + '%'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'right', '21%'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'red'),\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'opacity', '0.8'),\n\t\t\t\t\telm$html$Html$Events$onClick(msg)\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-remove')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_Nil)\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Upload$getSizeInKb = function (b) {\n\treturn elm$core$String$fromFloat(b / 1024.0);\n};\nvar author$project$Pages$Upload$keyPress = function (tagger) {\n\treturn A2(\n\t\telm$html$Html$Events$on,\n\t\t'keydown',\n\t\tA2(elm$json$Json$Decode$map, tagger, elm$html$Html$Events$keyCode));\n};\nvar author$project$Pages$Upload$viewPreview = F2(\n\tfunction (mime, url) {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_Nil,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$img,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$src(url),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'display', 'block'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_Nil)\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Upload$view = function (model) {\n\tvar _n0 = model.user;\n\tif (_n0.$ === 'Just') {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center')\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$h1,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text('Upload your image')\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text('Fill out the following form to upload your image')\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel panel-default'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', '20px auto')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-heading')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('title'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Enter title here...'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '20px'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.title),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Upload$Title)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t(!model.fileSize) ? A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-body'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding', '60px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-primary'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Upload$Pick)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Select image')\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t])) : A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-body')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Upload$cancelButton, author$project$Pages$Upload$RemoveImg, '35'),\n\t\t\t\t\t\t\t\t\tA2(author$project$Pages$Upload$viewPreview, model.mime, model.preview)\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-footer'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '100px')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$textarea,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('bio'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Enter image description here (optional)'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'height', '100%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'resize', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.description),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Upload$Description)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-footer')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('tags'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Press Enter to add tags (optional)'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'outline', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'background', 'Transparent'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '100%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'font-size', '15px'),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.tag),\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Upload$Tag),\n\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Upload$keyPress(author$project$Pages$Upload$KeyHandler)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\tvar _n1 = elm$core$List$isEmpty(model.tags);\n\t\t\t\t\t\t\tif (_n1) {\n\t\t\t\t\t\t\t\treturn A2(elm$html$Html$div, _List_Nil, _List_Nil);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel-footer'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'left')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\tauthor$project$Tag$view,\n\t\t\t\t\t\t\t\t\t\telm$core$List$reverse(model.tags)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}()\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t'Loaded file size: ' + (author$project$Pages$Upload$getSizeInKb(model.fileSize) + ' kB'))\n\t\t\t\t\t\t])),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$button,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$class('btn btn-success'),\n\t\t\t\t\t\t\telm$html$Html$Events$onClick(author$project$Pages$Upload$Upload),\n\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text('Upload')\n\t\t\t\t\t\t])),\n\t\t\t\t\tfunction () {\n\t\t\t\t\tvar _n2 = model.warning;\n\t\t\t\t\tswitch (_n2) {\n\t\t\t\t\t\tcase '':\n\t\t\t\t\t\t\treturn elm$html$Html$text('');\n\t\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('progress'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('progress-bar progress-bar-info'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$style,\n\t\t\t\t\t\t\t\t\t\t\t\t'width',\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$round(100 * model.fraction)) + '%'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'aria-valuemax', '100'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'aria-valuemin', '0'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$attribute,\n\t\t\t\t\t\t\t\t\t\t\t\t'aria-valuenow',\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$round(100 * model.fraction))),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$attribute, 'role', 'progressbar'),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '50%'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '20px')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$text(model.warning)\n\t\t\t\t\t\t\t\t\t]));\n\t\t\t\t\t}\n\t\t\t\t}()\n\t\t\t\t]));\n\t} else {\n\t\treturn A2(\n\t\t\telm$html$Html$div,\n\t\t\t_List_Nil,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_in')\n\t\t\t\t\t\t]),\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text('Sign In')\n\t\t\t\t\t\t])),\n\t\t\t\t\telm$html$Html$text(' to upload images'),\n\t\t\t\t\tA2(\n\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t_List_Nil,\n\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\telm$html$Html$text('Don\\'t have an account yet? '),\n\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\telm$html$Html$a,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$href('/sign_up')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text('Sign Up')\n\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t]))\n\t\t\t\t]));\n\t}\n};\nvar author$project$Pages$Users$Query = function (a) {\n\treturn {$: 'Query', a: a};\n};\nvar author$project$Pages$Users$pageSize = 20;\nvar author$project$Pages$Users$Jump = function (a) {\n\treturn {$: 'Jump', a: a};\n};\nvar author$project$Pages$Users$viewButton = F2(\n\tfunction (model, num) {\n\t\treturn A2(\n\t\t\telm$html$Html$button,\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$Attributes$class('btn btn-default'),\n\t\t\t\t\t_Utils_eq(model.page, num) ? A2(elm$html$Html$Attributes$style, 'opacity', '0.3') : A2(elm$html$Html$Attributes$style, '', ''),\n\t\t\t\t\telm$html$Html$Events$onClick(\n\t\t\t\t\tauthor$project$Pages$Users$Jump(num))\n\t\t\t\t]),\n\t\t\t_List_fromArray(\n\t\t\t\t[\n\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\telm$core$String$fromInt(num))\n\t\t\t\t]));\n\t});\nvar author$project$Pages$Users$view = function (model) {\n\treturn A2(\n\t\telm$html$Html$div,\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$html$Html$Attributes$class('container')\n\t\t\t]),\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$h1,\n\t\t\t\t_List_Nil,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$text('Check out all the registered users')\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$div,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\telm$html$Html$Attributes$class('form-group row'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '70%'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-bottom', '15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('col-md-offset-2 col-md-8')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-group has-feedback')\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$input,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$id('tw'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$type_('text'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('form-control'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$placeholder('Search users'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$value(model.query),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Events$onInput(author$project$Pages$Users$Query)\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil),\n\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\telm$html$Html$span,\n\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'color', 'grey'),\n\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('glyphicon glyphicon-search form-control-feedback')\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t_List_Nil)\n\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t]))\n\t\t\t\t\t])),\n\t\t\t\tA2(\n\t\t\t\telm$html$Html$hr,\n\t\t\t\t_List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '-15px')\n\t\t\t\t\t]),\n\t\t\t\t_List_Nil),\n\t\t\t\tfunction () {\n\t\t\t\tvar _n0 = model.status;\n\t\t\t\tswitch (_n0.$) {\n\t\t\t\t\tcase 'Loading':\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$h4,\n\t\t\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text('Sending the query...')\n\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\tA3(\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$render,\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$Circle,\n\t\t\t\t\t\t\t\t\t_Utils_update(\n\t\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$defaultConfig,\n\t\t\t\t\t\t\t\t\t\t{size: 60}),\n\t\t\t\t\t\t\t\t\tperzanko$elm_loading$Loading$On)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tcase 'Success':\n\t\t\t\t\t\tvar container = _n0.a;\n\t\t\t\t\t\tvar users = container.users;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_Nil,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-success'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-bottom', '10px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t'Query returned ' + (elm$core$String$fromInt(container.total) + ' results'))\n\t\t\t\t\t\t\t\t\t\t])),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('panel panel-default'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'border', 'none')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\tA2(elm$core$List$map, author$project$User$showPreview, users)),\n\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin-top', '20px')\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '30%'),\n\t\t\t\t\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$map,\n\t\t\t\t\t\t\t\t\t\t\t\tauthor$project$Pages$Users$viewButton(model),\n\t\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$List$range,\n\t\t\t\t\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Users$pageSize)))),\n\t\t\t\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('help-block')\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$html$Html$text(\n\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$String$fromInt(model.page) + ('/' + elm$core$String$fromInt(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telm$core$Basics$ceiling(container.total / author$project$Pages$Users$pageSize))))\n\t\t\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t\t\t]))\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar error = _n0.a;\n\t\t\t\t\t\treturn A2(\n\t\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('alert alert-warning'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'margin', 'auto'),\n\t\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'width', '60%')\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\telm$html$Html$text(error)\n\t\t\t\t\t\t\t\t]));\n\t\t\t\t}\n\t\t\t}()\n\t\t\t]));\n};\nvar author$project$Main$view = function (model) {\n\tvar _n0 = model.page;\n\tswitch (_n0.$) {\n\t\tcase 'NotFound':\n\t\t\tvar string = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(author$project$Main$viewBody, model, string),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Not Found'\n\t\t\t};\n\t\tcase 'Loading':\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tauthor$project$Main$viewLoading(model),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Fetching data'\n\t\t\t};\n\t\tcase 'Home':\n\t\t\tvar home = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\tauthor$project$Main$HomeMsg,\n\t\t\t\t\t\tauthor$project$Pages$Home$view(home)),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Home'\n\t\t\t};\n\t\tcase 'Gallery':\n\t\t\tvar gallery = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$GalleryMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Gallery$view(gallery))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Gallery'\n\t\t\t};\n\t\tcase 'SignUp':\n\t\t\tvar signup = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$SignUpMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$SignUp$view(signup))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Sign up'\n\t\t\t};\n\t\tcase 'SignIn':\n\t\t\tvar signin = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$SignInMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$SignIn$view(signin))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Sign in'\n\t\t\t};\n\t\tcase 'Upload':\n\t\t\tvar upload = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$UploadMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Upload$view(upload))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Upload an image'\n\t\t\t};\n\t\tcase 'Profile':\n\t\t\tvar profile = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'text-align', 'center'),\n\t\t\t\t\t\t\t\tA2(elm$html$Html$Attributes$style, 'padding-top', '50px')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$ProfileMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Profile$view(profile))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: profile.user.username\n\t\t\t};\n\t\tcase 'Users':\n\t\t\tvar users = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$UsersMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Users$view(users))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Users'\n\t\t\t};\n\t\tcase 'Post':\n\t\t\tvar post = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$PostMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Post$view(post))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: post.title\n\t\t\t};\n\t\tcase 'Results':\n\t\t\tvar results = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$ResultsMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Results$view(results))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Search results'\n\t\t\t};\n\t\tdefault:\n\t\t\tvar tags = _n0.a;\n\t\t\treturn {\n\t\t\t\tbody: _List_fromArray(\n\t\t\t\t\t[\n\t\t\t\t\t\tauthor$project$Main$viewHeader(model),\n\t\t\t\t\t\tA2(\n\t\t\t\t\t\telm$html$Html$div,\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\telm$html$Html$Attributes$class('body')\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t_List_fromArray(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tA2(\n\t\t\t\t\t\t\t\telm$html$Html$map,\n\t\t\t\t\t\t\t\tauthor$project$Main$TagsMsg,\n\t\t\t\t\t\t\t\tauthor$project$Pages$Tags$view(tags))\n\t\t\t\t\t\t\t])),\n\t\t\t\t\t\tauthor$project$Main$viewFooter\n\t\t\t\t\t]),\n\t\t\t\ttitle: 'Tags'\n\t\t\t};\n\t}\n};\nvar elm$browser$Browser$application = _Browser_application;\nvar author$project$Main$main = elm$browser$Browser$application(\n\t{init: author$project$Main$init, onUrlChange: author$project$Main$UrlChange, onUrlRequest: author$project$Main$UrlRequest, subscriptions: author$project$Main$subscriptions, update: author$project$Main$update, view: author$project$Main$view});\n_Platform_export({'Main':{'init':author$project$Main$main(\n\telm$json$Json$Decode$oneOf(\n\t\t_List_fromArray(\n\t\t\t[\n\t\t\t\telm$json$Json$Decode$null(elm$core$Maybe$Nothing),\n\t\t\t\tA2(elm$json$Json$Decode$map, elm$core$Maybe$Just, elm$json$Json$Decode$string)\n\t\t\t])))(0)}});}(this));"
          },
          "redirectURL": "",
          "headersSize": 221,
          "bodySize": 0,
          "_transferSize": 221,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.214Z",
        "time": 3.8869999998496496,
        "timings": {
          "blocked": 2.8020000002262533,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.04299999999999998,
          "wait": 0.6419999997238046,
          "receive": 0.3999999998995918,
          "_blocked_queueing": 2.432000000226253
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2471,
                "columnNumber": 6
              },
              {
                "functionName": "_Scheduler_step",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1809,
                "columnNumber": 21
              },
              {
                "functionName": "_Scheduler_enqueue",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1783,
                "columnNumber": 2
              },
              {
                "functionName": "_Scheduler_rawSend",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1729,
                "columnNumber": 1
              },
              {
                "functionName": "_Platform_dispatchEffects",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2056,
                "columnNumber": 2
              },
              {
                "functionName": "_Platform_initialize",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1888,
                "columnNumber": 1
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4223,
                "columnNumber": 8
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 19,
                "columnNumber": 32
              },
              {
                "functionName": "",
                "scriptId": "28",
                "url": "http://localhost:8000/",
                "lineNumber": 75,
                "columnNumber": 27
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "54856",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/account/auth",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "auth",
              "value": "75b521307b96217bddcdf648f13b38c60191fa82dc1e3359e3c0d034b5285e88e4d39a2730cb75f4b8269221338704dd"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Origin",
              "value": "http://localhost:8000"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 515,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "361"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 361,
            "mimeType": "application/json",
            "compression": 0,
            "text": "{\"username\":\"ramang\",\"email\":\"wibrach@gmail.com\",\"verif\":false,\"profilePic\":\"http://localhost:3000/img/profile/5fb6ad087a2d164eb4e2501d.png\",\"history\":null,\"bio\":null,\"facebook\":null,\"twitter\":null,\"github\":null,\"registeredAt\":\"2020-11-19T17:36:08.125Z\",\"token\":\"75b521307b96217bddcdf648f13b38c60191fa82dc1e3359e3c0d034b5285e88e4d39a2730cb75f4b8269221338704dd\"}"
          },
          "redirectURL": "",
          "headersSize": 194,
          "bodySize": 361,
          "_transferSize": 555,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.250Z",
        "time": 2.9709999998885905,
        "timings": {
          "blocked": 1.0539999997183913,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.06999999999999998,
          "wait": 1.2970000004219473,
          "receive": 0.5499999997482519,
          "_blocked_queueing": 0.8319999997183913
        }
      },
      {
        "_fromCache": "memory",
        "_initiator": {
          "type": "parser",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
        },
        "_priority": "VeryHigh",
        "_resourceType": "font",
        "cache": {},
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/fonts/glyphicons-halflings-regular.woff2",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "Referer",
              "value": ""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Thu, 19 Nov 2020 16:54:16 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "last-modified",
              "value": "Wed, 12 Dec 2018 18:36:18 GMT"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "etag",
              "value": "\"1544639778\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "content-type",
              "value": "font/woff2"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "content-length",
              "value": "18056"
            }
          ],
          "cookies": [],
          "content": {
            "size": 18028,
            "mimeType": "font/woff2"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "209.197.3.15",
        "startedDateTime": "2020-11-19T18:05:03.252Z",
        "time": 0.07999999979801942,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.06500000017695129,
          "receive": 0.014999999621068127,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2471,
                "columnNumber": 6
              },
              {
                "functionName": "_Scheduler_step",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1809,
                "columnNumber": 21
              },
              {
                "functionName": "_Scheduler_enqueue",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1783,
                "columnNumber": 2
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1811,
                "columnNumber": 4
              },
              {
                "functionName": "done",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2453,
                "columnNumber": 3
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2459,
                "columnNumber": 44
              }
            ],
            "parent": {
              "description": "load",
              "callFrames": [
                {
                  "functionName": "",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 2459,
                  "columnNumber": 6
                },
                {
                  "functionName": "_Scheduler_step",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1809,
                  "columnNumber": 21
                },
                {
                  "functionName": "_Scheduler_enqueue",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1783,
                  "columnNumber": 2
                },
                {
                  "functionName": "_Scheduler_rawSend",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1729,
                  "columnNumber": 1
                },
                {
                  "functionName": "_Platform_dispatchEffects",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 2056,
                  "columnNumber": 2
                },
                {
                  "functionName": "_Platform_initialize",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1888,
                  "columnNumber": 1
                },
                {
                  "functionName": "",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 4223,
                  "columnNumber": 8
                },
                {
                  "functionName": "",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 19,
                  "columnNumber": 32
                },
                {
                  "functionName": "",
                  "scriptId": "28",
                  "url": "http://localhost:8000/",
                  "lineNumber": 75,
                  "columnNumber": 27
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "54856",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/tags/trending",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Origin",
              "value": "http://localhost:8000"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 412,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "31"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 31,
            "mimeType": "application/json",
            "compression": 0,
            "text": "[\"aaa\",\"xxx\",\"xdd\",\"aa\",\"kpp2\"]"
          },
          "redirectURL": "",
          "headersSize": 193,
          "bodySize": 31,
          "_transferSize": 224,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.269Z",
        "time": 6.322999999611056,
        "timings": {
          "blocked": 4.420999999632884,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.07699999999999999,
          "wait": 1.270999999785272,
          "receive": 0.5540000001929002,
          "_blocked_queueing": 4.197999999632884
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2471,
                "columnNumber": 6
              },
              {
                "functionName": "_Scheduler_step",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1809,
                "columnNumber": 21
              },
              {
                "functionName": "_Scheduler_enqueue",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1783,
                "columnNumber": 2
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 1811,
                "columnNumber": 4
              },
              {
                "functionName": "done",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2453,
                "columnNumber": 3
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 2459,
                "columnNumber": 44
              }
            ],
            "parent": {
              "description": "load",
              "callFrames": [
                {
                  "functionName": "",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 2459,
                  "columnNumber": 6
                },
                {
                  "functionName": "_Scheduler_step",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1809,
                  "columnNumber": 21
                },
                {
                  "functionName": "_Scheduler_enqueue",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1783,
                  "columnNumber": 2
                },
                {
                  "functionName": "_Scheduler_rawSend",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1729,
                  "columnNumber": 1
                },
                {
                  "functionName": "_Platform_dispatchEffects",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 2056,
                  "columnNumber": 2
                },
                {
                  "functionName": "_Platform_initialize",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1888,
                  "columnNumber": 1
                },
                {
                  "functionName": "",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 4223,
                  "columnNumber": 8
                },
                {
                  "functionName": "",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 19,
                  "columnNumber": 32
                },
                {
                  "functionName": "",
                  "scriptId": "28",
                  "url": "http://localhost:8000/",
                  "lineNumber": 75,
                  "columnNumber": 27
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "54856",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/posts/latest",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Origin",
              "value": "http://localhost:8000"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 411,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "980"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 980,
            "mimeType": "application/json",
            "compression": 0,
            "text": "[{\"id\":\"07e92a556e4b5e23cb9d\",\"file\":\"http://localhost:3000/img/07e92a556e4b5e23cb9d.png\",\"author\":\"ramang\",\"points\":0,\"views\":50,\"favorites\":0,\"uploaded\":\"2020-11-19T17:58:54.813Z\",\"title\":\"aaaa\"},{\"id\":\"f898b05f61a4ac51400b\",\"file\":\"http://localhost:3000/img/f898b05f61a4ac51400b.png\",\"author\":\"ramang\",\"points\":0,\"views\":2,\"favorites\":0,\"uploaded\":\"2020-11-19T17:55:00.858Z\",\"title\":\"aaa\"},{\"id\":\"3decce0a5d4bcef443f3\",\"file\":\"http://localhost:3000/img/3decce0a5d4bcef443f3.png\",\"author\":\"ramang\",\"points\":0,\"views\":1,\"favorites\":0,\"uploaded\":\"2020-11-19T17:54:49.862Z\",\"title\":\"aaaa\"},{\"id\":\"960c41421a47a16242f7\",\"file\":\"http://localhost:3000/img/960c41421a47a16242f7.png\",\"author\":\"ramang\",\"points\":0,\"views\":1,\"favorites\":0,\"uploaded\":\"2020-11-19T17:51:45.784Z\",\"title\":\"xxx\"},{\"id\":\"0383bb350caf497d1fc9\",\"file\":\"http://localhost:3000/img/0383bb350caf497d1fc9.png\",\"author\":\"ramang\",\"points\":0,\"views\":1,\"favorites\":0,\"uploaded\":\"2020-11-19T17:50:44.251Z\",\"title\":\"aaaa\"}]"
          },
          "redirectURL": "",
          "headersSize": 194,
          "bodySize": 980,
          "_transferSize": 1174,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.270Z",
        "time": 16.84200000090641,
        "timings": {
          "blocked": 14.55700000077061,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.09800000000000003,
          "wait": 1.5839999997255507,
          "receive": 0.6030000004102476,
          "_blocked_queueing": 14.104000000770611
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "_VirtualDom_applyFacts",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3101,
                "columnNumber": 86
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3068,
                "columnNumber": 1
              },
              {
                "functionName": "_VirtualDom_applyPatchRedraw",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4048,
                "columnNumber": 15
              },
              {
                "functionName": "_VirtualDom_applyPatch",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3975,
                "columnNumber": 10
              },
              {
                "functionName": "_VirtualDom_applyPatchesHelp",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3961,
                "columnNumber": 16
              },
              {
                "functionName": "_VirtualDom_applyPatches",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3952,
                "columnNumber": 8
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4241,
                "columnNumber": 15
              },
              {
                "functionName": "updateIfNeeded",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4276,
                "columnNumber": 55
              }
            ],
            "parent": {
              "description": "requestAnimationFrame",
              "callFrames": [
                {
                  "functionName": "",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 4287,
                  "columnNumber": 22
                },
                {
                  "functionName": "sendToApp",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1884,
                  "columnNumber": 2
                },
                {
                  "functionName": "",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1993,
                  "columnNumber": 9
                },
                {
                  "functionName": "_Scheduler_step",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1809,
                  "columnNumber": 21
                },
                {
                  "functionName": "_Scheduler_enqueue",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1783,
                  "columnNumber": 2
                },
                {
                  "functionName": "",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 1811,
                  "columnNumber": 4
                },
                {
                  "functionName": "done",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 2453,
                  "columnNumber": 3
                },
                {
                  "functionName": "",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 2459,
                  "columnNumber": 44
                }
              ],
              "parent": {
                "description": "load",
                "callFrames": [
                  {
                    "functionName": "",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 2459,
                    "columnNumber": 6
                  },
                  {
                    "functionName": "_Scheduler_step",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 1809,
                    "columnNumber": 21
                  },
                  {
                    "functionName": "_Scheduler_enqueue",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 1783,
                    "columnNumber": 2
                  },
                  {
                    "functionName": "_Scheduler_rawSend",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 1729,
                    "columnNumber": 1
                  },
                  {
                    "functionName": "_Platform_dispatchEffects",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 2056,
                    "columnNumber": 2
                  },
                  {
                    "functionName": "_Platform_initialize",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 1888,
                    "columnNumber": 1
                  },
                  {
                    "functionName": "",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 4223,
                    "columnNumber": 8
                  },
                  {
                    "functionName": "",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 19,
                    "columnNumber": 32
                  },
                  {
                    "functionName": "",
                    "scriptId": "28",
                    "url": "http://localhost:8000/",
                    "lineNumber": 75,
                    "columnNumber": 27
                  }
                ]
              }
            }
          }
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "54885",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/img/profile/5fb6ad087a2d164eb4e2501d.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 17:55:34 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"17b43-175e1a5b398\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 803,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=0"
            },
            {
              "name": "last-modified",
              "value": "Thu, 19 Nov 2020 17:55:34 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"17b43-175e1a5b398\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "0"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 97091,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 311,
          "bodySize": 0,
          "_transferSize": 311,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.277Z",
        "time": 11.294000000816595,
        "timings": {
          "blocked": 10.158999999983527,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.08699999999999997,
          "wait": 0.5730000000996516,
          "receive": 0.4750000007334165,
          "_blocked_queueing": 8.561999999983527
        }
      },
      {
        "_fromCache": "memory",
        "_initiator": {
          "type": "parser",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
        },
        "_priority": "VeryHigh",
        "_resourceType": "font",
        "cache": {},
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/fonts/glyphicons-halflings-regular.woff2",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "Referer",
              "value": ""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Thu, 19 Nov 2020 16:54:16 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "last-modified",
              "value": "Wed, 12 Dec 2018 18:36:18 GMT"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "etag",
              "value": "\"1544639778\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "content-type",
              "value": "font/woff2"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "content-length",
              "value": "18056"
            }
          ],
          "cookies": [],
          "content": {
            "size": 18028,
            "mimeType": "font/woff2"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "209.197.3.15",
        "startedDateTime": "2020-11-19T18:05:03.279Z",
        "time": 0.08100000013655517,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.06400000074791024,
          "receive": 0.016999999388644937,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/"
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "54815",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/assets/carousel/1.jpg",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"25f07-175e1570922\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 786,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"25f07-175e1570922\""
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 155399,
            "mimeType": "text/plain",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 221,
          "bodySize": 0,
          "_transferSize": 221,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.279Z",
        "time": 9.350000000267755,
        "timings": {
          "blocked": 7.8070000001416195,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.04999999999999982,
          "wait": 1.0679999999486027,
          "receive": 0.42500000017753337,
          "_blocked_queueing": 6.338000000141619
        }
      },
      {
        "_fromCache": "memory",
        "_initiator": {
          "type": "parser",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
        },
        "_priority": "VeryHigh",
        "_resourceType": "font",
        "cache": {},
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/fonts/glyphicons-halflings-regular.woff2",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "Referer",
              "value": ""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Thu, 19 Nov 2020 16:54:16 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "last-modified",
              "value": "Wed, 12 Dec 2018 18:36:18 GMT"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "etag",
              "value": "\"1544639778\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "content-type",
              "value": "font/woff2"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "content-length",
              "value": "18056"
            }
          ],
          "cookies": [],
          "content": {
            "size": 18028,
            "mimeType": "font/woff2"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "209.197.3.15",
        "startedDateTime": "2020-11-19T18:05:03.292Z",
        "time": 0.12100000003556488,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.09899999986373587,
          "receive": 0.022000000171829015,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "_VirtualDom_applyFacts",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3101,
                "columnNumber": 86
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3068,
                "columnNumber": 1
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_applyPatch",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4014,
                "columnNumber": 25
              },
              {
                "functionName": "_VirtualDom_applyPatchesHelp",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3961,
                "columnNumber": 16
              },
              {
                "functionName": "_VirtualDom_applyPatches",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3952,
                "columnNumber": 8
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4241,
                "columnNumber": 15
              },
              {
                "functionName": "updateIfNeeded",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4276,
                "columnNumber": 55
              }
            ],
            "parent": {
              "description": "requestAnimationFrame",
              "callFrames": [
                {
                  "functionName": "updateIfNeeded",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 4276,
                  "columnNumber": 7
                }
              ],
              "parent": {
                "description": "requestAnimationFrame",
                "callFrames": [
                  {
                    "functionName": "updateIfNeeded",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 4276,
                    "columnNumber": 7
                  }
                ],
                "parent": {
                  "description": "requestAnimationFrame",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 4287,
                      "columnNumber": 22
                    },
                    {
                      "functionName": "sendToApp",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1884,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1993,
                      "columnNumber": 9
                    },
                    {
                      "functionName": "_Scheduler_step",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1809,
                      "columnNumber": 21
                    },
                    {
                      "functionName": "_Scheduler_enqueue",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1783,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1811,
                      "columnNumber": 4
                    },
                    {
                      "functionName": "done",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2453,
                      "columnNumber": 3
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2459,
                      "columnNumber": 44
                    }
                  ],
                  "parent": {
                    "description": "load",
                    "callFrames": [
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 2459,
                        "columnNumber": 6
                      },
                      {
                        "functionName": "_Scheduler_step",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1809,
                        "columnNumber": 21
                      },
                      {
                        "functionName": "_Scheduler_enqueue",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1783,
                        "columnNumber": 2
                      },
                      {
                        "functionName": "_Scheduler_rawSend",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1729,
                        "columnNumber": 1
                      },
                      {
                        "functionName": "_Platform_dispatchEffects",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 2056,
                        "columnNumber": 2
                      },
                      {
                        "functionName": "_Platform_initialize",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1888,
                        "columnNumber": 1
                      },
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 4223,
                        "columnNumber": 8
                      },
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 19,
                        "columnNumber": 32
                      },
                      {
                        "functionName": "",
                        "scriptId": "28",
                        "url": "http://localhost:8000/",
                        "lineNumber": 75,
                        "columnNumber": 27
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "54885",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/img/f898b05f61a4ac51400b.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 17:55:00 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"17b43-175e1a53078\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 791,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=0"
            },
            {
              "name": "last-modified",
              "value": "Thu, 19 Nov 2020 17:55:00 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"17b43-175e1a53078\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "0"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 97091,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 311,
          "bodySize": 0,
          "_transferSize": 311,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.348Z",
        "time": 2.8800000000046566,
        "timings": {
          "blocked": 1.685000000304426,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.10399999999999987,
          "wait": 0.6509999999016292,
          "receive": 0.4399999997986015,
          "_blocked_queueing": 0.7800000003044261
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "_VirtualDom_applyFacts",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3101,
                "columnNumber": 86
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3068,
                "columnNumber": 1
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_applyPatch",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4014,
                "columnNumber": 25
              },
              {
                "functionName": "_VirtualDom_applyPatchesHelp",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3961,
                "columnNumber": 16
              },
              {
                "functionName": "_VirtualDom_applyPatches",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3952,
                "columnNumber": 8
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4241,
                "columnNumber": 15
              },
              {
                "functionName": "updateIfNeeded",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4276,
                "columnNumber": 55
              }
            ],
            "parent": {
              "description": "requestAnimationFrame",
              "callFrames": [
                {
                  "functionName": "updateIfNeeded",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 4276,
                  "columnNumber": 7
                }
              ],
              "parent": {
                "description": "requestAnimationFrame",
                "callFrames": [
                  {
                    "functionName": "updateIfNeeded",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 4276,
                    "columnNumber": 7
                  }
                ],
                "parent": {
                  "description": "requestAnimationFrame",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 4287,
                      "columnNumber": 22
                    },
                    {
                      "functionName": "sendToApp",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1884,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1993,
                      "columnNumber": 9
                    },
                    {
                      "functionName": "_Scheduler_step",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1809,
                      "columnNumber": 21
                    },
                    {
                      "functionName": "_Scheduler_enqueue",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1783,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1811,
                      "columnNumber": 4
                    },
                    {
                      "functionName": "done",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2453,
                      "columnNumber": 3
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2459,
                      "columnNumber": 44
                    }
                  ],
                  "parent": {
                    "description": "load",
                    "callFrames": [
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 2459,
                        "columnNumber": 6
                      },
                      {
                        "functionName": "_Scheduler_step",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1809,
                        "columnNumber": 21
                      },
                      {
                        "functionName": "_Scheduler_enqueue",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1783,
                        "columnNumber": 2
                      },
                      {
                        "functionName": "_Scheduler_rawSend",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1729,
                        "columnNumber": 1
                      },
                      {
                        "functionName": "_Platform_dispatchEffects",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 2056,
                        "columnNumber": 2
                      },
                      {
                        "functionName": "_Platform_initialize",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1888,
                        "columnNumber": 1
                      },
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 4223,
                        "columnNumber": 8
                      },
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 19,
                        "columnNumber": 32
                      },
                      {
                        "functionName": "",
                        "scriptId": "28",
                        "url": "http://localhost:8000/",
                        "lineNumber": 75,
                        "columnNumber": 27
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "54889",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/img/3decce0a5d4bcef443f3.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 17:54:49 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"e507-175e1a50585\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 790,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=0"
            },
            {
              "name": "last-modified",
              "value": "Thu, 19 Nov 2020 17:54:49 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"e507-175e1a50585\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "0"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 58631,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 310,
          "bodySize": 0,
          "_transferSize": 310,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.349Z",
        "time": 3.0919999999241554,
        "timings": {
          "blocked": 1.7169999999050052,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.04399999999999982,
          "wait": 1.0010000001701993,
          "receive": 0.3299999998489511,
          "_blocked_queueing": 0.6229999999050051
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "_VirtualDom_applyFacts",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3101,
                "columnNumber": 86
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3068,
                "columnNumber": 1
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_applyPatch",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4014,
                "columnNumber": 25
              },
              {
                "functionName": "_VirtualDom_applyPatchesHelp",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3961,
                "columnNumber": 16
              },
              {
                "functionName": "_VirtualDom_applyPatches",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3952,
                "columnNumber": 8
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4241,
                "columnNumber": 15
              },
              {
                "functionName": "updateIfNeeded",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4276,
                "columnNumber": 55
              }
            ],
            "parent": {
              "description": "requestAnimationFrame",
              "callFrames": [
                {
                  "functionName": "updateIfNeeded",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 4276,
                  "columnNumber": 7
                }
              ],
              "parent": {
                "description": "requestAnimationFrame",
                "callFrames": [
                  {
                    "functionName": "updateIfNeeded",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 4276,
                    "columnNumber": 7
                  }
                ],
                "parent": {
                  "description": "requestAnimationFrame",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 4287,
                      "columnNumber": 22
                    },
                    {
                      "functionName": "sendToApp",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1884,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1993,
                      "columnNumber": 9
                    },
                    {
                      "functionName": "_Scheduler_step",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1809,
                      "columnNumber": 21
                    },
                    {
                      "functionName": "_Scheduler_enqueue",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1783,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1811,
                      "columnNumber": 4
                    },
                    {
                      "functionName": "done",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2453,
                      "columnNumber": 3
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2459,
                      "columnNumber": 44
                    }
                  ],
                  "parent": {
                    "description": "load",
                    "callFrames": [
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 2459,
                        "columnNumber": 6
                      },
                      {
                        "functionName": "_Scheduler_step",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1809,
                        "columnNumber": 21
                      },
                      {
                        "functionName": "_Scheduler_enqueue",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1783,
                        "columnNumber": 2
                      },
                      {
                        "functionName": "_Scheduler_rawSend",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1729,
                        "columnNumber": 1
                      },
                      {
                        "functionName": "_Platform_dispatchEffects",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 2056,
                        "columnNumber": 2
                      },
                      {
                        "functionName": "_Platform_initialize",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1888,
                        "columnNumber": 1
                      },
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 4223,
                        "columnNumber": 8
                      },
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 19,
                        "columnNumber": 32
                      },
                      {
                        "functionName": "",
                        "scriptId": "28",
                        "url": "http://localhost:8000/",
                        "lineNumber": 75,
                        "columnNumber": 27
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "54867",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/img/960c41421a47a16242f7.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 17:51:45 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"bf12-175e1a23673\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 790,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=0"
            },
            {
              "name": "last-modified",
              "value": "Thu, 19 Nov 2020 17:51:45 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"bf12-175e1a23673\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "0"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 48914,
            "mimeType": "image/png",
            "text": "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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 310,
          "bodySize": 0,
          "_transferSize": 310,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.349Z",
        "time": 3.4599999999045394,
        "timings": {
          "blocked": 2.7869999995664694,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.05600000000000005,
          "wait": 0.2890000002566957,
          "receive": 0.3280000000813743,
          "_blocked_queueing": 0.6219999995664693
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "_VirtualDom_applyFacts",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3101,
                "columnNumber": 86
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3068,
                "columnNumber": 1
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_applyPatch",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4014,
                "columnNumber": 25
              },
              {
                "functionName": "_VirtualDom_applyPatchesHelp",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3961,
                "columnNumber": 16
              },
              {
                "functionName": "_VirtualDom_applyPatches",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3952,
                "columnNumber": 8
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4241,
                "columnNumber": 15
              },
              {
                "functionName": "updateIfNeeded",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4276,
                "columnNumber": 55
              }
            ],
            "parent": {
              "description": "requestAnimationFrame",
              "callFrames": [
                {
                  "functionName": "updateIfNeeded",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 4276,
                  "columnNumber": 7
                }
              ],
              "parent": {
                "description": "requestAnimationFrame",
                "callFrames": [
                  {
                    "functionName": "updateIfNeeded",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 4276,
                    "columnNumber": 7
                  }
                ],
                "parent": {
                  "description": "requestAnimationFrame",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 4287,
                      "columnNumber": 22
                    },
                    {
                      "functionName": "sendToApp",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1884,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1993,
                      "columnNumber": 9
                    },
                    {
                      "functionName": "_Scheduler_step",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1809,
                      "columnNumber": 21
                    },
                    {
                      "functionName": "_Scheduler_enqueue",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1783,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1811,
                      "columnNumber": 4
                    },
                    {
                      "functionName": "done",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2453,
                      "columnNumber": 3
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2459,
                      "columnNumber": 44
                    }
                  ],
                  "parent": {
                    "description": "load",
                    "callFrames": [
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 2459,
                        "columnNumber": 6
                      },
                      {
                        "functionName": "_Scheduler_step",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1809,
                        "columnNumber": 21
                      },
                      {
                        "functionName": "_Scheduler_enqueue",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1783,
                        "columnNumber": 2
                      },
                      {
                        "functionName": "_Scheduler_rawSend",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1729,
                        "columnNumber": 1
                      },
                      {
                        "functionName": "_Platform_dispatchEffects",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 2056,
                        "columnNumber": 2
                      },
                      {
                        "functionName": "_Platform_initialize",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1888,
                        "columnNumber": 1
                      },
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 4223,
                        "columnNumber": 8
                      },
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 19,
                        "columnNumber": 32
                      },
                      {
                        "functionName": "",
                        "scriptId": "28",
                        "url": "http://localhost:8000/",
                        "lineNumber": 75,
                        "columnNumber": 27
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "54889",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/img/0383bb350caf497d1fc9.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 17:50:44 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"1042c-175e1a1461b\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 791,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=0"
            },
            {
              "name": "last-modified",
              "value": "Thu, 19 Nov 2020 17:50:44 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"1042c-175e1a1461b\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "0"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 66604,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 311,
          "bodySize": 0,
          "_transferSize": 311,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.349Z",
        "time": 3.9939999996931874,
        "timings": {
          "blocked": 3.27900000001624,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.05500000000000016,
          "wait": 0.31399999986839244,
          "receive": 0.345999999808555,
          "_blocked_queueing": 0.6690000000162399
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "_VirtualDom_applyFacts",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3101,
                "columnNumber": 86
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3068,
                "columnNumber": 1
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_render",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3072,
                "columnNumber": 35
              },
              {
                "functionName": "_VirtualDom_applyPatchRedraw",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4048,
                "columnNumber": 15
              },
              {
                "functionName": "_VirtualDom_applyPatch",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3975,
                "columnNumber": 10
              },
              {
                "functionName": "_VirtualDom_applyPatchesHelp",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3961,
                "columnNumber": 16
              },
              {
                "functionName": "_VirtualDom_applyPatches",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 3952,
                "columnNumber": 8
              },
              {
                "functionName": "",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4241,
                "columnNumber": 15
              },
              {
                "functionName": "updateIfNeeded",
                "scriptId": "27",
                "url": "http://localhost:8000/elm.js",
                "lineNumber": 4276,
                "columnNumber": 55
              }
            ],
            "parent": {
              "description": "requestAnimationFrame",
              "callFrames": [
                {
                  "functionName": "updateIfNeeded",
                  "scriptId": "27",
                  "url": "http://localhost:8000/elm.js",
                  "lineNumber": 4276,
                  "columnNumber": 7
                }
              ],
              "parent": {
                "description": "requestAnimationFrame",
                "callFrames": [
                  {
                    "functionName": "updateIfNeeded",
                    "scriptId": "27",
                    "url": "http://localhost:8000/elm.js",
                    "lineNumber": 4276,
                    "columnNumber": 7
                  }
                ],
                "parent": {
                  "description": "requestAnimationFrame",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 4287,
                      "columnNumber": 22
                    },
                    {
                      "functionName": "sendToApp",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1884,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1993,
                      "columnNumber": 9
                    },
                    {
                      "functionName": "_Scheduler_step",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1809,
                      "columnNumber": 21
                    },
                    {
                      "functionName": "_Scheduler_enqueue",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1783,
                      "columnNumber": 2
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 1811,
                      "columnNumber": 4
                    },
                    {
                      "functionName": "done",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2453,
                      "columnNumber": 3
                    },
                    {
                      "functionName": "",
                      "scriptId": "27",
                      "url": "http://localhost:8000/elm.js",
                      "lineNumber": 2459,
                      "columnNumber": 44
                    }
                  ],
                  "parent": {
                    "description": "load",
                    "callFrames": [
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 2459,
                        "columnNumber": 6
                      },
                      {
                        "functionName": "_Scheduler_step",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1809,
                        "columnNumber": 21
                      },
                      {
                        "functionName": "_Scheduler_enqueue",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1783,
                        "columnNumber": 2
                      },
                      {
                        "functionName": "_Scheduler_rawSend",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1729,
                        "columnNumber": 1
                      },
                      {
                        "functionName": "_Platform_dispatchEffects",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 2056,
                        "columnNumber": 2
                      },
                      {
                        "functionName": "_Platform_initialize",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 1888,
                        "columnNumber": 1
                      },
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 4223,
                        "columnNumber": 8
                      },
                      {
                        "functionName": "",
                        "scriptId": "27",
                        "url": "http://localhost:8000/elm.js",
                        "lineNumber": 19,
                        "columnNumber": 32
                      },
                      {
                        "functionName": "",
                        "scriptId": "28",
                        "url": "http://localhost:8000/",
                        "lineNumber": 75,
                        "columnNumber": 27
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "54867",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:3000/img/07e92a556e4b5e23cb9d.png",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:3000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 17:58:54 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"7d554-175e1a8c25e\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 791,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "vary",
              "value": "Origin"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=0"
            },
            {
              "name": "last-modified",
              "value": "Thu, 19 Nov 2020 17:58:54 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"7d554-175e1a8c25e\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "content-length",
              "value": "0"
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:03 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 513364,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 311,
          "bodySize": 0,
          "_transferSize": 311,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:03.350Z",
        "time": 4.581000000143831,
        "timings": {
          "blocked": 3.494000000128057,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.04999999999999982,
          "wait": 0.47600000018160804,
          "receive": 0.5609999998341664,
          "_blocked_queueing": 1.0750000001280569
        }
      },
      {
        "_fromCache": "memory",
        "_initiator": {
          "type": "parser",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
        },
        "_priority": "VeryHigh",
        "_resourceType": "font",
        "cache": {},
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/fonts/glyphicons-halflings-regular.woff2",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "Referer",
              "value": ""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "date",
              "value": "Thu, 19 Nov 2020 16:54:16 GMT"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "last-modified",
              "value": "Wed, 12 Dec 2018 18:36:18 GMT"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "etag",
              "value": "\"1544639778\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "content-type",
              "value": "font/woff2"
            },
            {
              "name": "status",
              "value": "200"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "content-length",
              "value": "18056"
            }
          ],
          "cookies": [],
          "content": {
            "size": 18028,
            "mimeType": "font/woff2"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "209.197.3.15",
        "startedDateTime": "2020-11-19T18:05:03.350Z",
        "time": 0.10300000030838419,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.08400000024266774,
          "receive": 0.01900000006571645,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "26",
                "url": "http://localhost:8000/reload/reload.js",
                "lineNumber": 411,
                "columnNumber": 22
              }
            ],
            "parent": {
              "description": "setTimeout",
              "callFrames": [
                {
                  "functionName": "websocketWaiter",
                  "scriptId": "26",
                  "url": "http://localhost:8000/reload/reload.js",
                  "lineNumber": 410,
                  "columnNumber": 4
                },
                {
                  "functionName": "",
                  "scriptId": "26",
                  "url": "http://localhost:8000/reload/reload.js",
                  "lineNumber": 430,
                  "columnNumber": 4
                }
              ],
              "parent": {
                "description": "load",
                "callFrames": [
                  {
                    "functionName": "refresh",
                    "scriptId": "26",
                    "url": "http://localhost:8000/reload/reload.js",
                    "lineNumber": 426,
                    "columnNumber": 9
                  },
                  {
                    "functionName": "",
                    "scriptId": "26",
                    "url": "http://localhost:8000/reload/reload.js",
                    "lineNumber": 432,
                    "columnNumber": 2
                  }
                ]
              }
            }
          }
        },
        "_priority": null,
        "_resourceType": "websocket",
        "_webSocketMessages": [
          {
            "type": "receive",
            "time": 1605809103.7667928,
            "opcode": 1,
            "data": "{\"action\":\"watching\"}"
          }
        ],
        "cache": {},
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "ws://localhost:8000/",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Origin",
              "value": "http://localhost:8000"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Sec-WebSocket-Key",
              "value": "vqtsa6ei/mYGNeMzuqAxmw=="
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            },
            {
              "name": "Sec-WebSocket-Extensions",
              "value": "permessage-deflate; client_max_window_bits"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            },
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Version",
              "value": "13"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 761,
          "bodySize": 0
        },
        "response": {
          "status": 101,
          "statusText": "Switching Protocols",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Accept",
              "value": "ysg8ekf7PwVMkeq9KgzjrU14t68="
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": 129
          },
          "redirectURL": "",
          "headersSize": 129,
          "bodySize": -129,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2020-11-19T18:05:03.765Z",
        "time": 1.1100000001533772,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.1100000001533772,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:8000/"
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "54815",
        "pageref": "page_12",
        "request": {
          "method": "GET",
          "url": "http://localhost:8000/assets/carousel/2.jpg",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:8000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "If-Modified-Since",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"22663-175e1570922\""
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "image"
            },
            {
              "name": "Referer",
              "value": "http://localhost:8000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_xsrf=2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820; username-localhost-8888=\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_xsrf",
              "value": "2|2cc5408e|f76029467d1172bb5dd33477e29116eb|1603817820",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "username-localhost-8888",
              "value": "\"2|1:0|10:1603818377|23:username-localhost-8888|44:NTRiYWU0ZDgyM2FiNDAzZDg2ZGFkYTY2ZjlmMmQ3ZjE=|719bd69cb58425507e0e75377d2a934aa883aad7db87998535116b5f6407e7d0\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 786,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Last-Modified",
              "value": "Thu, 19 Nov 2020 16:29:38 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"22663-175e1570922\""
            },
            {
              "name": "Date",
              "value": "Thu, 19 Nov 2020 18:05:08 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 140899,
            "mimeType": "text/plain",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 221,
          "bodySize": 0,
          "_transferSize": 221,
          "_error": null
        },
        "serverIPAddress": "127.0.0.1",
        "startedDateTime": "2020-11-19T18:05:08.281Z",
        "time": 3.6380000001372537,
        "timings": {
          "blocked": 1.9810000002799788,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.10400000000000009,
          "wait": 1.0369999997958075,
          "receive": 0.5160000000614673,
          "_blocked_queueing": 1.2850000002799788
        }
      }
    ]
  }
}